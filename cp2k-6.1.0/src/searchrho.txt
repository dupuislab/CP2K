./mixed_cdft_types.F:!> \param eps_rho_rspace threshold to determine when the realspace density can be considered zero
./mixed_cdft_types.F:      REAL(KIND=dp)                                    :: eps_rho_rspace, sim_dt, &
./qs_rho_methods.F:!> \brief methods of the rho structure (defined in qs_rho_types)
./qs_rho_methods.F:MODULE qs_rho_methods
./qs_rho_methods.F:   USE qs_collocate_density,            ONLY: calculate_drho_elec,&
./qs_rho_methods.F:                                              calculate_rho_elec
./qs_rho_methods.F:   USE qs_local_rho_types,              ONLY: local_rho_type
./qs_rho_methods.F:   USE qs_rho_atom_methods,             ONLY: calculate_rho_atom_coeff
./qs_rho_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_clear,&
./qs_rho_methods.F:                                              qs_rho_get,&
./qs_rho_methods.F:                                              qs_rho_set,&
./qs_rho_methods.F:                                              qs_rho_type
./qs_rho_methods.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho_methods'
./qs_rho_methods.F:   PUBLIC :: qs_rho_update_rho, qs_rho_rebuild, duplicate_rho_type
./qs_rho_methods.F:!> \brief rebuilds rho (if necessary allocating and initializing it)
./qs_rho_methods.F:!> \param rho the rho type to rebuild (defaults to qs_env%rho)
./qs_rho_methods.F:!> \param qs_env the environment to which rho belongs
./qs_rho_methods.F:!> \param rebuild_ao if it is necessary to rebuild rho_ao. Defaults to true.
./qs_rho_methods.F:!> \param rebuild_grids if it in necessary to rebuild rho_r and rho_g.
./qs_rho_methods.F:!>      11.2002 created replacing qs_rho_create and qs_env_rebuild_rho[fawzi]
./qs_rho_methods.F:   SUBROUTINE qs_rho_rebuild(rho, qs_env, rebuild_ao, rebuild_grids, admm, pw_env_external)
./qs_rho_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_rho_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'qs_rho_rebuild', routineP = moduleN//':'//routineN
./qs_rho_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r
./qs_rho_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_s_kp, rho_ao_kp
./qs_rho_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: drho_g, drho_r, rho_g, rho_r, tau_g, &
./qs_rho_methods.F:      TYPE(pw_p_type), POINTER                           :: rho_r_sccs
./qs_rho_methods.F:      NULLIFY (tot_rho_r, rho_ao_kp, rho_r, rho_g, drho_r, drho_g, tau_r, tau_g)
./qs_rho_methods.F:      NULLIFY (rho_r_sccs)
./qs_rho_methods.F:      IF (.NOT. ASSOCIATED(rho)) CPABORT("rho not associated")
./qs_rho_methods.F:      CALL qs_rho_get(rho, &
./qs_rho_methods.F:                      tot_rho_r=tot_rho_r, &
./qs_rho_methods.F:                      rho_ao_kp=rho_ao_kp, &
./qs_rho_methods.F:                      rho_r=rho_r, &
./qs_rho_methods.F:                      rho_g=rho_g, &
./qs_rho_methods.F:                      drho_r=drho_r, &
./qs_rho_methods.F:                      drho_g=drho_g, &
./qs_rho_methods.F:                      rho_r_sccs=rho_r_sccs)
./qs_rho_methods.F:      IF (.NOT. ASSOCIATED(tot_rho_r)) THEN
./qs_rho_methods.F:         ALLOCATE (tot_rho_r(nspins))
./qs_rho_methods.F:         tot_rho_r = 0.0_dp
./qs_rho_methods.F:         CALL qs_rho_set(rho, tot_rho_r=tot_rho_r)
./qs_rho_methods.F:      ! rho_ao
./qs_rho_methods.F:      IF (my_rebuild_ao .OR. (.NOT. ASSOCIATED(rho_ao_kp))) THEN
./qs_rho_methods.F:         IF (ASSOCIATED(rho_ao_kp)) &
./qs_rho_methods.F:            CALL dbcsr_deallocate_matrix_set(rho_ao_kp)
./qs_rho_methods.F:         CALL dbcsr_allocate_matrix_set(rho_ao_kp, nspins, nimg)
./qs_rho_methods.F:         CALL qs_rho_set(rho, rho_ao_kp=rho_ao_kp)
./qs_rho_methods.F:               ALLOCATE (rho_ao_kp(i, ic)%matrix)
./qs_rho_methods.F:               tmatrix => rho_ao_kp(i, ic)%matrix
./qs_rho_methods.F:      ! rho_r
./qs_rho_methods.F:      IF (my_rebuild_grids .OR. .NOT. ASSOCIATED(rho_r)) THEN
./qs_rho_methods.F:         IF (ASSOCIATED(rho_r)) THEN
./qs_rho_methods.F:            DO i = 1, SIZE(rho_r)
./qs_rho_methods.F:               CALL pw_release(rho_r(i)%pw)
./qs_rho_methods.F:            DEALLOCATE (rho_r)
./qs_rho_methods.F:         ALLOCATE (rho_r(nspins))
./qs_rho_methods.F:         CALL qs_rho_set(rho, rho_r=rho_r)
./qs_rho_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r(i)%pw, &
./qs_rho_methods.F:      ! rho_g
./qs_rho_methods.F:      IF (my_rebuild_grids .OR. .NOT. ASSOCIATED(rho_g)) THEN
./qs_rho_methods.F:         IF (ASSOCIATED(rho_g)) THEN
./qs_rho_methods.F:            DO i = 1, SIZE(rho_g)
./qs_rho_methods.F:               CALL pw_release(rho_g(i)%pw)
./qs_rho_methods.F:            DEALLOCATE (rho_g)
./qs_rho_methods.F:         ALLOCATE (rho_g(nspins))
./qs_rho_methods.F:         CALL qs_rho_set(rho, rho_g=rho_g)
./qs_rho_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_g(i)%pw, &
./qs_rho_methods.F:         IF (my_rebuild_grids .OR. (.NOT. ASSOCIATED(rho_r_sccs))) THEN
./qs_rho_methods.F:            IF (ASSOCIATED(rho_r_sccs)) THEN
./qs_rho_methods.F:               CALL pw_release(rho_r_sccs%pw)
./qs_rho_methods.F:               DEALLOCATE (rho_r_sccs)
./qs_rho_methods.F:            ALLOCATE (rho_r_sccs)
./qs_rho_methods.F:            CALL qs_rho_set(rho, rho_r_sccs=rho_r_sccs)
./qs_rho_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r_sccs%pw, &
./qs_rho_methods.F:            CALL pw_zero(rho_r_sccs%pw)
./qs_rho_methods.F:      ! allocate drho_r and drho_g if xc_deriv_collocate
./qs_rho_methods.F:      IF (dft_control%drho_by_collocation) THEN
./qs_rho_methods.F:         ! drho_r
./qs_rho_methods.F:         IF (my_rebuild_grids .OR. .NOT. ASSOCIATED(drho_r)) THEN
./qs_rho_methods.F:            IF (ASSOCIATED(drho_r)) THEN
./qs_rho_methods.F:               DO i = 1, SIZE(drho_r)
./qs_rho_methods.F:                  CALL pw_release(drho_r(i)%pw)
./qs_rho_methods.F:               DEALLOCATE (drho_r)
./qs_rho_methods.F:            ALLOCATE (drho_r(3*nspins))
./qs_rho_methods.F:            CALL qs_rho_set(rho, drho_r=drho_r)
./qs_rho_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, drho_r(i)%pw, &
./qs_rho_methods.F:         ! drho_g
./qs_rho_methods.F:         IF (my_rebuild_grids .OR. .NOT. ASSOCIATED(drho_g)) THEN
./qs_rho_methods.F:            IF (ASSOCIATED(drho_g)) THEN
./qs_rho_methods.F:               DO i = 1, SIZE(drho_g)
./qs_rho_methods.F:                  CALL pw_release(drho_g(i)%pw)
./qs_rho_methods.F:               DEALLOCATE (drho_g)
./qs_rho_methods.F:            ALLOCATE (drho_g(3*nspins))
./qs_rho_methods.F:            CALL qs_rho_set(rho, drho_g=drho_g)
./qs_rho_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, drho_g(i)%pw, &
./qs_rho_methods.F:            CALL qs_rho_set(rho, tau_r=tau_r)
./qs_rho_methods.F:            CALL qs_rho_set(rho, tau_g=tau_g)
./qs_rho_methods.F:   END SUBROUTINE qs_rho_rebuild
./qs_rho_methods.F:!> \brief updates rho_r and rho_g to the rho%rho_ao.
./qs_rho_methods.F:!> \param rho_struct the rho structure that should be updated
./qs_rho_methods.F:!> \param qs_env the qs_env rho_struct refers to
./qs_rho_methods.F:!> \param local_rho_set ...
./qs_rho_methods.F:   SUBROUTINE qs_rho_update_rho(rho_struct, qs_env, local_rho_set, pw_env_external, task_list_external)
./qs_rho_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_rho_methods.F:      TYPE(local_rho_type), OPTIONAL, POINTER            :: local_rho_set
./qs_rho_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_rho_update_rho', &
./qs_rho_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r, tot_rho_r_xc
./qs_rho_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./qs_rho_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp, rho_xc_ao
./qs_rho_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: drho_g, drho_r, drho_xc_g, rho_g, rho_r, &
./qs_rho_methods.F:                                                            rho_xc_g, rho_xc_r, tau_g, tau_r, &
./qs_rho_methods.F:      TYPE(pw_p_type), POINTER                           :: rho_r_sccs
./qs_rho_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_xc
./qs_rho_methods.F:      NULLIFY (dft_control, rho_xc, ks_env, rho_ao, rho_r, rho_g, drho_r, drho_g, tau_r, tau_g)
./qs_rho_methods.F:      NULLIFY (rho_xc_ao, rho_xc_g, rho_xc_r, drho_xc_g, tau_xc_r, tau_xc_g, tot_rho_r, tot_rho_r_xc)
./qs_rho_methods.F:      CPASSERT(ASSOCIATED(rho_struct))
./qs_rho_methods.F:      CALL qs_rho_get(rho_struct, &
./qs_rho_methods.F:                      rho_r=rho_r, &
./qs_rho_methods.F:                      rho_g=rho_g, &
./qs_rho_methods.F:                      tot_rho_r=tot_rho_r, &
./qs_rho_methods.F:                      drho_r=drho_r, &
./qs_rho_methods.F:                      drho_g=drho_g, &
./qs_rho_methods.F:                      rho_r_sccs=rho_r_sccs)
./qs_rho_methods.F:         CALL qs_rho_set(rho_struct, rho_r_valid=.FALSE., rho_g_valid=.FALSE.)
./qs_rho_methods.F:         CALL qs_rho_set(rho_struct, rho_r_valid=.FALSE., rho_g_valid=.FALSE.)
./qs_rho_methods.F:         CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_kp)
./qs_rho_methods.F:         CALL calculate_lri_densities(lri_env, lri_density, qs_env, rho_ao_kp, cell_to_index, &
./qs_rho_methods.F:                                      lri_rho_struct=rho_struct, &
./qs_rho_methods.F:         CALL qs_rho_set(rho_struct, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./qs_rho_methods.F:         CALL qs_rho_get(rho_struct, rho_ao=rho_ao)
./qs_rho_methods.F:         CALL calculate_ri_densities(lri_env, qs_env, rho_ao, &
./qs_rho_methods.F:                                     lri_rho_struct=rho_struct, &
./qs_rho_methods.F:         CALL qs_rho_set(rho_struct, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./qs_rho_methods.F:         CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_kp)
./qs_rho_methods.F:            rho_ao => rho_ao_kp(ispin, :)
./qs_rho_methods.F:            CALL calculate_rho_elec(matrix_p_kp=rho_ao, &
./qs_rho_methods.F:                                    rho=rho_r(ispin), &
./qs_rho_methods.F:                                    rho_gspace=rho_g(ispin), &
./qs_rho_methods.F:                                    total_rho=tot_rho_r(ispin), &
./qs_rho_methods.F:         CALL qs_rho_set(rho_struct, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./qs_rho_methods.F:         IF (dft_control%drho_by_collocation) THEN
./qs_rho_methods.F:            CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_kp)
./qs_rho_methods.F:               rho_ao => rho_ao_kp(ispin, :)
./qs_rho_methods.F:               CALL calculate_drho_elec(matrix_p_kp=rho_ao, &
./qs_rho_methods.F:                                        drho=drho_r(3*(ispin-1)+1:3*ispin), &
./qs_rho_methods.F:                                        drho_gspace=drho_g(3*(ispin-1)+1:3*ispin), &
./qs_rho_methods.F:            CALL qs_rho_set(rho_struct, drho_r_valid=.TRUE., drho_g_valid=.TRUE.)
./qs_rho_methods.F:            CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_kp)
./qs_rho_methods.F:               rho_ao => rho_ao_kp(ispin, :)
./qs_rho_methods.F:               CALL calculate_rho_elec(matrix_p_kp=rho_ao, &
./qs_rho_methods.F:                                       rho=tau_r(ispin), &
./qs_rho_methods.F:                                       rho_gspace=tau_g(ispin), &
./qs_rho_methods.F:                                       total_rho=dum, & ! presumably not meaningful
./qs_rho_methods.F:            CALL qs_rho_set(rho_struct, tau_r_valid=.TRUE., tau_g_valid=.TRUE.)
./qs_rho_methods.F:         CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_kp)
./qs_rho_methods.F:         IF (PRESENT(local_rho_set)) THEN
./qs_rho_methods.F:            CALL calculate_rho_atom_coeff(qs_env, rho_ao_kp, local_rho_set%rho_atom_set)
./qs_rho_methods.F:            CALL calculate_rho_atom_coeff(qs_env, rho_ao_kp)
./qs_rho_methods.F:         CALL get_qs_env(qs_env=qs_env, rho_xc=rho_xc)
./qs_rho_methods.F:         CALL qs_rho_get(rho_xc, &
./qs_rho_methods.F:                         rho_ao_kp=rho_xc_ao, &
./qs_rho_methods.F:                         rho_r=rho_xc_r, &
./qs_rho_methods.F:                         rho_g=rho_xc_g, &
./qs_rho_methods.F:                         tot_rho_r=tot_rho_r_xc, &
./qs_rho_methods.F:                         drho_g=drho_xc_g, &
./qs_rho_methods.F:         CALL calculate_rho_atom_coeff(qs_env, rho_ao_kp)
./qs_rho_methods.F:         ! copy rho_ao into rho_xc_ao
./qs_rho_methods.F:               CALL dbcsr_copy(rho_xc_ao(ispin, img)%matrix, rho_ao_kp(ispin, img)%matrix)
./qs_rho_methods.F:            rho_ao => rho_xc_ao(ispin, :)
./qs_rho_methods.F:            CALL calculate_rho_elec(matrix_p_kp=rho_ao, &
./qs_rho_methods.F:                                    rho=rho_xc_r(ispin), &
./qs_rho_methods.F:                                    rho_gspace=rho_xc_g(ispin), &
./qs_rho_methods.F:                                    total_rho=tot_rho_r_xc(ispin), &
./qs_rho_methods.F:         CALL qs_rho_set(rho_xc, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./qs_rho_methods.F:         IF (dft_control%drho_by_collocation) THEN
./qs_rho_methods.F:               rho_ao => rho_xc_ao(ispin, :)
./qs_rho_methods.F:               CALL calculate_drho_elec(matrix_p_kp=rho_ao, &
./qs_rho_methods.F:                                        drho=rho_xc_r(3*(ispin-1)+1:3*ispin), &
./qs_rho_methods.F:                                        drho_gspace=drho_xc_g(3*(ispin-1)+1:3*ispin), &
./qs_rho_methods.F:            CALL qs_rho_set(rho_xc, drho_r_valid=.TRUE., drho_g_valid=.TRUE.)
./qs_rho_methods.F:               rho_ao => rho_xc_ao(ispin, :)
./qs_rho_methods.F:               CALL calculate_rho_elec(matrix_p_kp=rho_ao, &
./qs_rho_methods.F:                                       rho=tau_xc_r(ispin), &
./qs_rho_methods.F:                                       rho_gspace=tau_xc_g(ispin), &
./qs_rho_methods.F:                                       total_rho=dum, & ! presumably not meaningful
./qs_rho_methods.F:            CALL qs_rho_set(rho_xc, tau_r_valid=.TRUE., tau_g_valid=.TRUE.)
./qs_rho_methods.F:   END SUBROUTINE qs_rho_update_rho
./qs_rho_methods.F:!> \param rho_input The rho structure to be duplicated
./qs_rho_methods.F:!> \param rho_output The duplicate rho structure
./qs_rho_methods.F:   SUBROUTINE duplicate_rho_type(rho_input, rho_output, qs_env)
./qs_rho_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_input, rho_output
./qs_rho_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'duplicate_rho_type', &
./qs_rho_methods.F:      LOGICAL :: drho_g_valid_in, drho_r_valid_in, rho_g_valid_in, rho_r_valid_in, soft_valid_in, &
./qs_rho_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_g_in, tot_rho_g_out, &
./qs_rho_methods.F:                                                            tot_rho_r_in, tot_rho_r_out
./qs_rho_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao_in, rho_ao_out
./qs_rho_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER :: drho_g_in, drho_g_out, drho_r_in, drho_r_out, &
./qs_rho_methods.F:         rho_g_in, rho_g_out, rho_r_in, rho_r_out, tau_g_in, tau_g_out, tau_r_in, tau_r_out
./qs_rho_methods.F:      TYPE(pw_p_type), POINTER                           :: rho_r_sccs_in, rho_r_sccs_out
./qs_rho_methods.F:      NULLIFY (rho_ao_in, rho_ao_out)
./qs_rho_methods.F:      NULLIFY (rho_r_in, rho_r_out, rho_g_in, rho_g_out, drho_r_in, drho_r_out)
./qs_rho_methods.F:      NULLIFY (drho_g_in, drho_g_out, tau_r_in, tau_r_out, tau_g_in, tau_g_out)
./qs_rho_methods.F:      NULLIFY (tot_rho_r_in, tot_rho_r_out, tot_rho_g_in, tot_rho_g_out)
./qs_rho_methods.F:      NULLIFY (rho_r_sccs_in, rho_r_sccs_out)
./qs_rho_methods.F:      CPASSERT(ASSOCIATED(rho_input))
./qs_rho_methods.F:      CPASSERT(ASSOCIATED(rho_output))
./qs_rho_methods.F:      CALL qs_rho_clear(rho_output)
./qs_rho_methods.F:      CALL qs_rho_get(rho_input, &
./qs_rho_methods.F:                      rho_ao=rho_ao_in, &
./qs_rho_methods.F:                      rho_r=rho_r_in, &
./qs_rho_methods.F:                      rho_g=rho_g_in, &
./qs_rho_methods.F:                      drho_r=drho_r_in, &
./qs_rho_methods.F:                      drho_g=drho_g_in, &
./qs_rho_methods.F:                      tot_rho_r=tot_rho_r_in, &
./qs_rho_methods.F:                      tot_rho_g=tot_rho_g_in, &
./qs_rho_methods.F:                      rho_g_valid=rho_g_valid_in, &
./qs_rho_methods.F:                      rho_r_valid=rho_r_valid_in, &
./qs_rho_methods.F:                      drho_g_valid=drho_g_valid_in, &
./qs_rho_methods.F:                      drho_r_valid=drho_r_valid_in, &
./qs_rho_methods.F:                      rho_r_sccs=rho_r_sccs_in, &
./qs_rho_methods.F:      ! rho_ao
./qs_rho_methods.F:      IF (ASSOCIATED(rho_ao_in)) THEN
./qs_rho_methods.F:         CALL dbcsr_allocate_matrix_set(rho_ao_out, nspins)
./qs_rho_methods.F:         CALL qs_rho_set(rho_output, rho_ao=rho_ao_out)
./qs_rho_methods.F:            ALLOCATE (rho_ao_out(i)%matrix)
./qs_rho_methods.F:            CALL dbcsr_copy(rho_ao_out(i)%matrix, rho_ao_in(i)%matrix, &
./qs_rho_methods.F:            CALL dbcsr_set(rho_ao_out(i)%matrix, 0.0_dp)
./qs_rho_methods.F:      ! rho_r
./qs_rho_methods.F:      IF (ASSOCIATED(rho_r_in)) THEN
./qs_rho_methods.F:         ALLOCATE (rho_r_out(nspins))
./qs_rho_methods.F:         CALL qs_rho_set(rho_output, rho_r=rho_r_out)
./qs_rho_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r_out(i)%pw, &
./qs_rho_methods.F:            rho_r_out(i)%pw%cr3d(:, :, :) = rho_r_in(i)%pw%cr3d(:, :, :)
./qs_rho_methods.F:      ! rho_g
./qs_rho_methods.F:      IF (ASSOCIATED(rho_g_in)) THEN
./qs_rho_methods.F:         ALLOCATE (rho_g_out(nspins))
./qs_rho_methods.F:         CALL qs_rho_set(rho_output, rho_g=rho_g_out)
./qs_rho_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_g_out(i)%pw, &
./qs_rho_methods.F:            rho_g_out(i)%pw%cc(:) = rho_g_in(i)%pw%cc(:)
./qs_rho_methods.F:      IF (ASSOCIATED(rho_r_sccs_in)) THEN
./qs_rho_methods.F:         CALL qs_rho_set(rho_output, rho_r_sccs=rho_r_sccs_out)
./qs_rho_methods.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_r_sccs_out%pw, &
./qs_rho_methods.F:         rho_r_sccs_out%pw%cr3d(:, :, :) = rho_r_sccs_in%pw%cr3d(:, :, :)
./qs_rho_methods.F:      ! drho_r and drho_g are only needed if calculated by collocation
./qs_rho_methods.F:      IF (dft_control%drho_by_collocation) THEN
./qs_rho_methods.F:         ! drho_r
./qs_rho_methods.F:         IF (ASSOCIATED(drho_r_in)) THEN
./qs_rho_methods.F:            ALLOCATE (drho_r_out(3*nspins))
./qs_rho_methods.F:            CALL qs_rho_set(rho_output, drho_r=drho_r_out)
./qs_rho_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, drho_r_out(i)%pw, &
./qs_rho_methods.F:               drho_r_out(i)%pw%cr3d(:, :, :) = drho_r_in(i)%pw%cr3d(:, :, :)
./qs_rho_methods.F:         ! drho_g
./qs_rho_methods.F:         IF (ASSOCIATED(drho_g_in)) THEN
./qs_rho_methods.F:            ALLOCATE (drho_g_out(3*nspins))
./qs_rho_methods.F:            CALL qs_rho_set(rho_output, drho_g=drho_g_out)
./qs_rho_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, drho_g_out(i)%pw, &
./qs_rho_methods.F:               drho_g_out(i)%pw%cc(:) = drho_g_in(i)%pw%cc(:)
./qs_rho_methods.F:            CALL qs_rho_set(rho_output, tau_r=tau_r_out)
./qs_rho_methods.F:            CALL qs_rho_set(rho_output, tau_g=tau_g_out)
./qs_rho_methods.F:      CALL qs_rho_set(rho_output, &
./qs_rho_methods.F:                      rho_g_valid=rho_g_valid_in, &
./qs_rho_methods.F:                      rho_r_valid=rho_r_valid_in, &
./qs_rho_methods.F:                      drho_g_valid=drho_g_valid_in, &
./qs_rho_methods.F:                      drho_r_valid=drho_r_valid_in, &
./qs_rho_methods.F:      ! tot_rho_r
./qs_rho_methods.F:      IF (ASSOCIATED(tot_rho_r_in)) THEN
./qs_rho_methods.F:         ALLOCATE (tot_rho_r_out(nspins))
./qs_rho_methods.F:         CALL qs_rho_set(rho_output, tot_rho_r=tot_rho_r_out)
./qs_rho_methods.F:            tot_rho_r_out(i) = tot_rho_r_in(i)
./qs_rho_methods.F:      ! tot_rho_g
./qs_rho_methods.F:      IF (ASSOCIATED(tot_rho_g_in)) THEN
./qs_rho_methods.F:         ALLOCATE (tot_rho_g_out(nspins))
./qs_rho_methods.F:         CALL qs_rho_set(rho_output, tot_rho_g=tot_rho_g_out)
./qs_rho_methods.F:            tot_rho_g_out(i) = tot_rho_g_in(i)
./qs_rho_methods.F:   END SUBROUTINE duplicate_rho_type
./qs_rho_methods.F:END MODULE qs_rho_methods
./pao_methods.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./pao_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./pao_methods.F:                                              qs_rho_type
./pao_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, rho_ao
./pao_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./pao_methods.F:                      rho=rho, &
./pao_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./pao_methods.F:         CALL dbcsr_copy_into_existing(rho_ao(ispin)%matrix, matrix_tmp)
./pao_methods.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./pao_methods.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./pao_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho_ao
./pao_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./pao_methods.F:                      rho=rho, &
./pao_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./pao_methods.F:      CALL dbcsr_multiply("N", "N", 1.0_dp, rho_ao(1)%matrix, ls_mstruct%matrix_A, &
./kg_energy_corrections.F:   USE qs_ks_methods,                   ONLY: calc_rho_tot_gspace
./kg_energy_corrections.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./kg_energy_corrections.F:                                              qs_rho_type
./kg_energy_corrections.F:      TYPE(pw_p_type)                                    :: rho_tot_gspace, v_hartree_gspace, &
./kg_energy_corrections.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, tau_r, v_rspace, v_tau_rspace
./kg_energy_corrections.F:      TYPE(qs_rho_type), POINTER                         :: rho
./kg_energy_corrections.F:      NULLIFY (rho, ks_env)
./kg_energy_corrections.F:      CALL get_qs_env(qs_env=qs_env, rho=rho, virial=virial, dft_control=dft_control, &
./kg_energy_corrections.F:                             rho_tot_gspace%pw, &
./kg_energy_corrections.F:      CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho)
./kg_energy_corrections.F:      CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, ehartree, &
./kg_energy_corrections.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tot_gspace%pw)
./kg_energy_corrections.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho, xc_section=ec_env%xc_section, &
./kg_energy_corrections.F:                         vxc_rho=v_rspace, vxc_tau=v_tau_rspace, exc=eexc, just_energy=.FALSE.)
./kg_energy_corrections.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./kg_energy_corrections.F:         CALL qs_rho_get(rho, tau_r=tau_r)
./kg_energy_corrections.F:         ! calclulate Int(vhxc*rho)dr and Int(vtau*tau)dr
./kg_energy_corrections.F:         evhxc = evhxc+pw_integral_ab(rho_r(ispin)%pw, v_rspace(ispin)%pw)/v_rspace(1)%pw%pw_grid%dvol
./motion/input_cp2k_restarts.F:         IF (helium_env(1)%helium%rho_present) THEN
./motion/input_cp2k_restarts.F:            helium_env(1)%helium%rho_inst(:, :, :, :) = 0.0_dp
./motion/input_cp2k_restarts.F:               helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)+ &
./motion/input_cp2k_restarts.F:                                                           helium_env(i)%helium%rho_accu(:, :, :, :)
./motion/input_cp2k_restarts.F:            CALL mp_sum(helium_env(1)%helium%rho_inst, helium_env(1)%comm)
./motion/input_cp2k_restarts.F:            helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)*invproc
./motion/input_cp2k_restarts.F:            helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)/REAL(nsteps, dp)
./motion/input_cp2k_restarts.F:            helium_env(1)%helium%rho_inst(:, :, :, :) = nsteps*helium_env(1)%helium%rho_inst(:, :, :, :)+ &
./motion/input_cp2k_restarts.F:                                                        iweight*helium_env(1)%helium%rho_rstr(:, :, :, :)
./motion/input_cp2k_restarts.F:            helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)/REAL(nsteps+iweight, dp)
./motion/input_cp2k_restarts.F:            msglen = SIZE(helium_env(1)%helium%rho_inst)
./motion/input_cp2k_restarts.F:            real_msg(:) = PACK(helium_env(1)%helium%rho_inst, .TRUE.)
./motion/rt_propagation.F:                                              calc_update_rho,&
./motion/rt_propagation.F:                                              calc_update_rho_sparse,&
./motion/rt_propagation.F:                                              rt_initialize_rho_from_mos
./motion/rt_propagation.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho_new, rho_old
./motion/rt_propagation.F:         CALL calc_update_rho(qs_env)
./motion/rt_propagation.F:               CALL rt_initialize_rho_from_mos(rtp, mos)
./motion/rt_propagation.F:               CALL get_rtp(rtp=rtp, rho_old=rho_old, rho_new=rho_new)
./motion/rt_propagation.F:               DO ispin = 1, SIZE(rho_old)/2
./motion/rt_propagation.F:                  CALL dbcsr_copy(rho_old(re)%matrix, qs_env%ls_scf_env%matrix_p(ispin))
./motion/rt_propagation.F:                  CALL dbcsr_copy(rho_new(re)%matrix, qs_env%ls_scf_env%matrix_p(ispin))
./motion/rt_propagation.F:         CALL calc_update_rho_sparse(qs_env)
./motion/helium_types.F:   INTEGER, PARAMETER, PUBLIC :: rho_num = 5
./motion/helium_types.F:      rho_atom_number = 1, &
./motion/helium_types.F:      rho_projected_area = 2, &
./motion/helium_types.F:      rho_winding_number = 3, &
./motion/helium_types.F:      rho_winding_cycle = 4, &
./motion/helium_types.F:      rho_moment_of_inertia = 5
./motion/helium_types.F:      INTEGER                                :: rho_iweight !< weight for restarted RHO
./motion/helium_types.F:      INTEGER :: rho_nbin
./motion/helium_types.F:      INTEGER :: rho_num_act !< actual number of density estimators
./motion/helium_types.F:      INTEGER :: rho_num_min_len_wdg !< number of optional estimators based on winding cycles
./motion/helium_types.F:      INTEGER :: rho_num_min_len_non !< number of optional estimators based on non-winding cycles
./motion/helium_types.F:      INTEGER :: rho_num_min_len_all !< number of optional estimators based on all cycles
./motion/helium_types.F:      INTEGER, DIMENSION(:), POINTER :: rho_min_len_wdg_vals !< minimum lengths of winding cycles
./motion/helium_types.F:      INTEGER, DIMENSION(:), POINTER :: rho_min_len_non_vals !< minimum lengths of non-winding cycles
./motion/helium_types.F:      INTEGER, DIMENSION(:), POINTER :: rho_min_len_all_vals !< minimum lengths of all cycles
./motion/helium_types.F:      REAL(KIND=dp) :: rho_delr, rho_maxr
./motion/helium_types.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER :: rho_inst
./motion/helium_types.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER :: rho_rstr
./motion/helium_types.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER :: rho_accu
./motion/helium_types.F:      LOGICAL :: rho_present
./motion/helium_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER ::  rho_incr !< increment for density bining
./motion/helium_types.F:      TYPE(density_properties_type), DIMENSION(:), POINTER  :: rho_property
./motion/helium_worm.F:      REAL(KIND=dp)                                      :: dU, expdU, head(3), mass, Popen, rho, &
./motion/helium_worm.F:      rho = free_density_matrix(helium, ip, nbeads+1-l, ip, nbeads+1)
./motion/helium_worm.F:      Popen = C*expdU/rho
./motion/helium_worm.F:                                                            rho, rnew(3), tail(3), U, U1, U2, xrr
./motion/helium_worm.F:      rho = free_density_matrix(helium, helium%iw, nbeads+1, helium%iw, nbeads+1-l)
./motion/helium_worm.F:      Pclose = rho*expdU/C
./motion/integrator.F:!>      uniaxial stress ( in x-direction of orthorhombic cell)
./motion/integrator.F:!>      uniaxial stress ( in x-direction of orthorhombic cell)
./motion/helium_io.F:        helium_solvent_p_type, helium_solvent_type, rho_num
./motion/helium_io.F:   PUBLIC :: helium_print_rho
./motion/helium_io.F:      IF (helium%rho_present) THEN
./motion/helium_io.F:         DO i = 1, rho_num
./motion/helium_io.F:            IF (helium%rho_property(i)%is_calculated) THEN
./motion/helium_io.F:               WRITE (stmp, '(A)') 'RHO|    '//TRIM(helium%rho_property(i)%name)
./motion/helium_io.F:         rtmp = cp_unit_from_cp2k(helium%rho_delr, "angstrom")
./motion/helium_io.F:         rtmp = cp_unit_from_cp2k(helium%rho_maxr, "angstrom")
./motion/helium_io.F:         itmp = helium%rho_nbin
./motion/helium_io.F:   SUBROUTINE helium_print_rho(helium_env)
./motion/helium_io.F:      CHARACTER(len=*), PARAMETER :: routineN = 'helium_print_rho', &
./motion/helium_io.F:      helium_env(1)%helium%rho_inst(:, :, :, :) = 0.0_dp
./motion/helium_io.F:         helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)+ &
./motion/helium_io.F:                                                     helium_env(k)%helium%rho_accu(:, :, :, :)
./motion/helium_io.F:      CALL mp_sum(helium_env(1)%helium%rho_inst, helium_env(1)%comm)
./motion/helium_io.F:      helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)*invproc
./motion/helium_io.F:      helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)*inv_norm
./motion/helium_io.F:      iweight = helium_env(1)%helium%rho_iweight
./motion/helium_io.F:      helium_env(1)%helium%rho_inst(:, :, :, :) = nsteps*helium_env(1)%helium%rho_inst(:, :, :, :)+ &
./motion/helium_io.F:                                                  iweight*helium_env(1)%helium%rho_rstr(:, :, :, :)
./motion/helium_io.F:      helium_env(1)%helium%rho_inst(:, :, :, :) = helium_env(1)%helium%rho_inst(:, :, :, :)/REAL(nsteps+iweight, dp)
./motion/helium_io.F:      DO id = 1, rho_num ! loop over densities ---
./motion/helium_io.F:         IF (.NOT. helium_env(1)%helium%rho_property(id)%is_calculated) THEN
./motion/helium_io.F:         DO ic = 1, helium_env(1)%helium%rho_property(id)%num_components ! loop over components
./motion/helium_io.F:            WRITE (fname, '(A)') "helium-rho-"// &
./motion/helium_io.F:               TRIM(ADJUSTL(helium_env(1)%helium%rho_property(id)%filename_suffix(ic)))
./motion/helium_io.F:            IF (helium_env(1)%helium%rho_property(id)%component_name(ic) .EQ. "") THEN
./motion/helium_io.F:               WRITE (comment, '(A)') TRIM(helium_env(1)%helium%rho_property(id)%name)
./motion/helium_io.F:               WRITE (comment, '(A)') TRIM(helium_env(1)%helium%rho_property(id)%name)// &
./motion/helium_io.F:                  TRIM(helium_env(1)%helium%rho_property(id)%component_name(ic))
./motion/helium_io.F:            cubdata => helium_env(1)%helium%rho_inst(helium_env(1)%helium%rho_property(id)%component_index(ic), :, :, :)
./motion/helium_io.F:                  center-0.5_dp*(helium_env(1)%helium%rho_maxr-helium_env(1)%helium%rho_delr), &
./motion/helium_io.F:                  helium_env(1)%helium%rho_delr, &
./motion/helium_io.F:                  helium_env(1)%helium%rho_nbin, &
./motion/helium_io.F:   END SUBROUTINE helium_print_rho
./motion/helium_io.F:!> \brief Write volumetric data to an orthorhombic cubefile
./motion/pint_methods.F:               IF (helium_env(k)%helium%rho_present) THEN
./motion/pint_methods.F:                  helium_env(k)%helium%rho_accu(:, :, :, :) = 0.0_dp
./motion/pint_methods.F:         DATA => helium_env(1)%helium%rho_inst(1, :, :, :)
./motion/pint_methods.F:            (helium_env(1)%helium%rho_maxr-helium_env(1)%helium%rho_delr), &
./motion/pint_methods.F:            helium_env(1)%helium%rho_delr, &
./motion/pint_methods.F:            helium_env(1)%helium%rho_nbin, &
./motion/helium_common.F:                                              rho_atom_number,&
./motion/helium_common.F:                                              rho_moment_of_inertia,&
./motion/helium_common.F:                                              rho_num,&
./motion/helium_common.F:                                              rho_projected_area,&
./motion/helium_common.F:                                              rho_winding_cycle,&
./motion/helium_common.F:                                              rho_winding_number
./motion/helium_common.F:   PUBLIC :: helium_calc_rho
./motion/helium_common.F:!>         in helium%rho_inst
./motion/helium_common.F:   SUBROUTINE helium_calc_rho(helium)
./motion/helium_common.F:      CHARACTER(len=*), PARAMETER :: routineN = 'helium_calc_rho', &
./motion/helium_common.F:      maxr_half(:) = helium%rho_maxr/2.0_dp
./motion/helium_common.F:      invdr = 1.0_dp/helium%rho_delr
./motion/helium_common.F:      nbin = helium%rho_nbin
./motion/helium_common.F:      DO ir = 1, rho_num ! loop over densities ---
./motion/helium_common.F:         IF (.NOT. helium%rho_property(ir)%is_calculated) THEN
./motion/helium_common.F:         CASE (rho_atom_number)
./motion/helium_common.F:            ii = helium%rho_property(ir)%component_index(1)
./motion/helium_common.F:            helium%rho_incr(ii, :, :) = invp
./motion/helium_common.F:         CASE (rho_projected_area)
./motion/helium_common.F:                     ii = helium%rho_property(ir)%component_index(ic)
./motion/helium_common.F:                     helium%rho_incr(ii, ia, ib) = vtotal(ic)*vlink(ic)*angstrom*angstrom*angstrom*angstrom
./motion/helium_common.F:!        CASE (rho_winding_number)
./motion/helium_common.F:!                ii = helium%rho_property(ir)%component_index(ic)
./motion/helium_common.F:!                helium%rho_incr(ii,ia,ib) = vtotal(ic)*vlink(ic)*angstrom*angstrom
./motion/helium_common.F:         CASE (rho_winding_number)
./motion/helium_common.F:               ii = helium%rho_property(ir)%component_index(id)
./motion/helium_common.F:               helium%rho_incr(ii, :, :) = 0.0_dp
./motion/helium_common.F:                           ii = helium%rho_property(ir)%component_index(id)
./motion/helium_common.F:                           helium%rho_incr(ii, aa, ib) = vtotal(id)*vlink(id)*angstrom*angstrom
./motion/helium_common.F:         CASE (rho_winding_cycle)
./motion/helium_common.F:               ii = helium%rho_property(ir)%component_index(id)
./motion/helium_common.F:               helium%rho_incr(ii, :, :) = 0.0_dp
./motion/helium_common.F:                              ii = helium%rho_property(ir)%component_index(id)
./motion/helium_common.F:                              helium%rho_incr(ii, aa, ib) = rtmp*vtotal(id)*vtotal(id)*angstrom*angstrom
./motion/helium_common.F:         CASE (rho_moment_of_inertia)
./motion/helium_common.F:                     ii = helium%rho_property(ir)%component_index(ic)
./motion/helium_common.F:                     helium%rho_incr(ii, ia, ib) = vlink(ic)*angstrom*angstrom
./motion/helium_common.F:      helium%rho_inst(:, :, :, :) = 0.0_dp
./motion/helium_common.F:               DO ic = 1, helium%rho_num_act
./motion/helium_common.F:                  helium%rho_inst(ic, bx, by, bz) = helium%rho_inst(ic, bx, by, bz)+helium%rho_incr(ic, ia, ib)
./motion/helium_common.F:      helium%rho_inst(:, :, :, :) = helium%rho_inst(:, :, :, :)*invd3r
./motion/helium_common.F:   END SUBROUTINE helium_calc_rho
./motion/helium_common.F:!> \param rho ...
./motion/helium_common.F:   SUBROUTINE helium_norm_rho(helium, rho)
./motion/helium_common.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER      :: rho
./motion/helium_common.F:      CHARACTER(len=*), PARAMETER :: routineN = 'helium_norm_rho', &
./motion/helium_common.F:         rho(2, :, :, :) = rho(2, :, :, :)*invatoms
./motion/helium_common.F:         rho(3, :, :, :) = rho(3, :, :, :)*invatoms
./motion/helium_common.F:         rho(4, :, :, :) = rho(4, :, :, :)*invatoms
./motion/helium_common.F:         rho(2, :, :, :) = rho(2, :, :, :)*invmoit(1)
./motion/helium_common.F:         rho(3, :, :, :) = rho(3, :, :, :)*invmoit(2)
./motion/helium_common.F:         rho(4, :, :, :) = rho(4, :, :, :)*invmoit(3)
./motion/helium_common.F:         ndim = helium%rho_nbin
./motion/helium_common.F:         ro(:) = helium%center(:)-0.5_dp*(helium%rho_maxr-helium%rho_delr)
./motion/helium_common.F:                  rx = ro(1)+REAL(ix-1, dp)*helium%rho_delr
./motion/helium_common.F:                  ry = ro(2)+REAL(iy-1, dp)*helium%rho_delr
./motion/helium_common.F:                  rz = ro(3)+REAL(iz-1, dp)*helium%rho_delr
./motion/helium_common.F:                  rho(2, ix, iy, iz) = rho(2, ix, iy, iz)*invrperp(1)
./motion/helium_common.F:                  rho(3, ix, iy, iz) = rho(3, ix, iy, iz)*invrperp(2)
./motion/helium_common.F:                  rho(4, ix, iy, iz) = rho(4, ix, iy, iz)*invrperp(3)
./motion/helium_common.F:   END SUBROUTINE helium_norm_rho
./motion/helium_sampling.F:        helium_boxmean_3d, helium_calc_plength, helium_calc_rdf, helium_calc_rho, helium_com, &
./motion/helium_sampling.F:        helium_print_rho, helium_print_vector, helium_write_line
./motion/helium_sampling.F:            IF (helium_env(k)%helium%rho_present) THEN
./motion/helium_sampling.F:               helium_env(k)%helium%rho_accu(:, :, :, :) = 0.0_dp
./motion/helium_sampling.F:         IF (helium_env(k)%helium%rho_present) THEN
./motion/helium_sampling.F:            CALL helium_calc_rho(helium_env(k)%helium)
./motion/helium_sampling.F:            helium_env(k)%helium%rho_accu(:, :, :, :) = helium_env(k)%helium%rho_accu(:, :, :, :)+ &
./motion/helium_sampling.F:                                                        helium_env(k)%helium%rho_inst(:, :, :, :)
./motion/helium_sampling.F:         IF (helium_env(1)%helium%rho_present) CALL helium_print_rho(helium_env)
./motion/thermostat/barostat_utils.F:         ! Valid only for orthorhombic cell
./motion/thermostat/barostat_utils.F:         ! Valid only for orthorhombic cell
./motion/bfgs_optimizer.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :)        :: d_ij, rho_ij
./motion/bfgs_optimizer.F:     ALLOCATE(rho_ij(natom,natom))
./motion/bfgs_optimizer.F:     rho_ij=0
./motion/bfgs_optimizer.F:           rho_ij(j,i)=EXP(alpha(jat_row,iat_row)*(r0(jat_row,iat_row)**2-d_ij(j,i)**2))
./motion/bfgs_optimizer.F:           rho_ij(i,j)=rho_ij(j,i)
./motion/bfgs_optimizer.F:                     angle_second_deriv(r_ij,d_ij,rho_ij,iind,jind,iat_col,iat_row,natom)
./motion/bfgs_optimizer.F:                     angle_second_deriv(r_ij,d_ij,rho_ij,iind,jind,iat_col,iat_row,natom)
./motion/bfgs_optimizer.F:                               iind,jind,d_ij(iat_row,iat_col),rho_ij(iat_row,iat_col))
./motion/bfgs_optimizer.F:                               iind,jind,d_ij(iat_row,k),rho_ij(iat_row,k))
./motion/bfgs_optimizer.F:     DEALLOCATE(rho_ij)
./motion/bfgs_optimizer.F:!> \param rho ...
./motion/bfgs_optimizer.F:  FUNCTION dist_second_deriv(r1,i,j,d,rho)  RESULT(deriv)
./motion/bfgs_optimizer.F:      REAL(KIND=dp)                                      :: d, rho, deriv
./motion/bfgs_optimizer.F:      deriv=0.45_dp*rho*(r1(i)*r1(j))/d**2
./motion/bfgs_optimizer.F:!> \param rho_ij ...
./motion/bfgs_optimizer.F:  FUNCTION angle_second_deriv(r_ij,d_ij,rho_ij,idir,jdir,iat_der,jat_der,natom) RESULT(deriv)
./motion/bfgs_optimizer.F:      REAL(KIND=dp), DIMENSION(:, :)                     :: d_ij, rho_ij
./motion/bfgs_optimizer.F:                                                            denom2, denom3, ka1, ka2, ka3, rho12, &
./motion/bfgs_optimizer.F:                                                            rho23, rho31, rsst1, rsst2, rsst3
./motion/bfgs_optimizer.F:           IF(rho_ij(iat_der,i).lt.0.00001)CYCLE
./motion/bfgs_optimizer.F:              IF(rho_ij(iat_der,j).lt.0.00001)CYCLE
./motion/bfgs_optimizer.F:                 rho12=rho_ij(iat_der,i); rho23=rho_ij(i,j); rho31=rho_ij(j,iat_der)
./motion/bfgs_optimizer.F:                 rho12=rho_ij(iat_der,j); rho23=rho_ij(j,i); rho31=rho_ij(i,iat_der)
./motion/bfgs_optimizer.F:              ka1=0.15_dp*rho12*rho23; ka2=0.15_dp*rho23*rho31; ka3=0.15_dp*rho31*rho12
./motion/bfgs_optimizer.F:              rho12=rho_ij(iat,jat); rho23=rho_ij(jat,i); rho31=rho_ij(i,iat)
./motion/bfgs_optimizer.F:              rho12=rho_ij(iat,i); rho23=rho_ij(i,jat); rho31=rho_ij(jat,iat)
./motion/bfgs_optimizer.F:           ka1=0.15_dp*rho12*rho23; ka2=0.15_dp*rho23*rho31; ka3=0.15_dp*rho31*rho12
./motion/integrator_utils.F:         ! orthorhombic box ONLY
./motion/integrator_utils.F:            ! orthorhombic box ONLY
./motion/helium_interactions.F:         helium_env(k)%helium%rho_inst(1, :, :, :) = 0.0_dp
./motion/helium_interactions.F:         nbin = helium_env(k)%helium%rho_nbin
./motion/helium_interactions.F:         delr = helium_env(k)%helium%rho_delr
./motion/helium_interactions.F:         ox = helium_env(k)%helium%center(1)-helium_env(k)%helium%rho_maxr/2.0_dp
./motion/helium_interactions.F:         oy = helium_env(k)%helium%center(2)-helium_env(k)%helium%rho_maxr/2.0_dp
./motion/helium_interactions.F:         oz = helium_env(k)%helium%center(3)-helium_env(k)%helium%rho_maxr/2.0_dp
./motion/helium_interactions.F:                     helium_env(k)%helium%rho_inst(1, ix, iy, iz) = 0.0_dp
./motion/helium_interactions.F:                     helium_env(k)%helium%rho_inst(1, ix, iy, iz) = my_en
./motion/helium_methods.F:        he_mass, helium_solvent_p_type, helium_solvent_type, rho_atom_number, &
./motion/helium_methods.F:        rho_moment_of_inertia, rho_num, rho_projected_area, rho_winding_cycle, rho_winding_number
./motion/helium_methods.F:            helium_env(k)%helium%rho_present = helium_property_active(helium_env(k)%helium, "RHO")
./motion/helium_methods.F:            IF (helium_env(k)%helium%rho_present) THEN
./motion/helium_methods.F:               NULLIFY (helium_env(k)%helium%rho_property)
./motion/helium_methods.F:               CALL helium_rho_init(helium_env(k)%helium)
./motion/helium_methods.F:               IF (helium_env(k)%helium%rho_present) THEN
./motion/helium_methods.F:                     helium_env(k)%helium%rho_rstr, &
./motion/helium_methods.F:                     helium_env(k)%helium%rho_accu, &
./motion/helium_methods.F:                     helium_env(k)%helium%rho_inst, &
./motion/helium_methods.F:                     helium_env(k)%helium%rho_incr)
./motion/helium_methods.F:                     helium_env(k)%helium%rho_rstr, &
./motion/helium_methods.F:                     helium_env(k)%helium%rho_accu, &
./motion/helium_methods.F:                     helium_env(k)%helium%rho_inst, &
./motion/helium_methods.F:                     helium_env(k)%helium%rho_incr)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_atom_number)%filename_suffix)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_atom_number)%component_name)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_atom_number)%component_index)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_atom_number)%filename_suffix)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_atom_number)%component_name)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_atom_number)%component_index)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_winding_number)%filename_suffix)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_winding_number)%component_name)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_winding_number)%component_index)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_winding_number)%filename_suffix)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_winding_number)%component_name)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_winding_number)%component_index)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_winding_cycle)%filename_suffix)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_winding_cycle)%component_name)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_winding_cycle)%component_index)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_winding_cycle)%filename_suffix)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_winding_cycle)%component_name)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_winding_cycle)%component_index)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_projected_area)%filename_suffix)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_projected_area)%component_name)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_projected_area)%component_index)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_projected_area)%filename_suffix)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_projected_area)%component_name)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_projected_area)%component_index)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_moment_of_inertia)%filename_suffix)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_moment_of_inertia)%component_name)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property(rho_moment_of_inertia)%component_index)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_moment_of_inertia)%filename_suffix)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_moment_of_inertia)%component_name)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property(rho_moment_of_inertia)%component_index)
./motion/helium_methods.F:                  DEALLOCATE (helium_env(k)%helium%rho_property)
./motion/helium_methods.F:                  NULLIFY (helium_env(k)%helium%rho_property)
./motion/helium_methods.F:               IF (helium_env(k)%helium%rho_present) THEN
./motion/helium_methods.F:                  helium_env(k)%helium%rho_accu(:, :, :, :) = 0.0_dp
./motion/helium_methods.F:      IF (helium_env(1)%helium%rho_present) THEN
./motion/helium_methods.F:         CALL helium_rho_restore(helium_env)
./motion/helium_methods.F:      helium%rdf_num = 4 ! see also helium%rho_num_def
./motion/helium_methods.F:   SUBROUTINE helium_rho_property_init(helium)
./motion/helium_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'helium_rho_property_init', &
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_num))
./motion/helium_methods.F:      helium%rho_property(rho_atom_number)%name = 'Atom number density'
./motion/helium_methods.F:      helium%rho_property(rho_atom_number)%num_components = nc
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_atom_number)%filename_suffix(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_atom_number)%component_name(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_atom_number)%component_index(nc))
./motion/helium_methods.F:      helium%rho_property(rho_atom_number)%filename_suffix(1) = 'an'
./motion/helium_methods.F:      helium%rho_property(rho_atom_number)%component_name(1) = ''
./motion/helium_methods.F:      helium%rho_property(rho_atom_number)%component_index(:) = 0
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%name = 'Projected area squared density, A*A(r)'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%num_components = nc
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_projected_area)%filename_suffix(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_projected_area)%component_name(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_projected_area)%component_index(nc))
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%filename_suffix(1) = 'pa_x'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%filename_suffix(2) = 'pa_y'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%filename_suffix(3) = 'pa_z'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%component_name(1) = 'component x'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%component_name(2) = 'component y'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%component_name(3) = 'component z'
./motion/helium_methods.F:      helium%rho_property(rho_projected_area)%component_index(:) = 0
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%name = 'Winding number squared density, W*W(r)'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%num_components = nc
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_winding_number)%filename_suffix(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_winding_number)%component_name(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_winding_number)%component_index(nc))
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%filename_suffix(1) = 'wn_x'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%filename_suffix(2) = 'wn_y'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%filename_suffix(3) = 'wn_z'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%component_name(1) = 'component x'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%component_name(2) = 'component y'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%component_name(3) = 'component z'
./motion/helium_methods.F:      helium%rho_property(rho_winding_number)%component_index(:) = 0
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%name = 'Winding number squared density, W^2(r)'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%num_components = nc
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_winding_cycle)%filename_suffix(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_winding_cycle)%component_name(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_winding_cycle)%component_index(nc))
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%filename_suffix(1) = 'wc_x'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%filename_suffix(2) = 'wc_y'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%filename_suffix(3) = 'wc_z'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%component_name(1) = 'component x'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%component_name(2) = 'component y'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%component_name(3) = 'component z'
./motion/helium_methods.F:      helium%rho_property(rho_winding_cycle)%component_index(:) = 0
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%name = 'Moment of inertia'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%num_components = nc
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_moment_of_inertia)%filename_suffix(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_moment_of_inertia)%component_name(nc))
./motion/helium_methods.F:      ALLOCATE (helium%rho_property(rho_moment_of_inertia)%component_index(nc))
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%filename_suffix(1) = 'mi_x'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%filename_suffix(2) = 'mi_y'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%filename_suffix(3) = 'mi_z'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%component_name(1) = 'component x'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%component_name(2) = 'component y'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%component_name(3) = 'component z'
./motion/helium_methods.F:      helium%rho_property(rho_moment_of_inertia)%component_index(:) = 0
./motion/helium_methods.F:      helium%rho_property(:)%is_calculated = .FALSE.
./motion/helium_methods.F:   END SUBROUTINE helium_rho_property_init
./motion/helium_methods.F:   SUBROUTINE helium_rho_init(helium)
./motion/helium_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'helium_rho_init', &
./motion/helium_methods.F:      CALL helium_rho_property_init(helium)
./motion/helium_methods.F:      helium%rho_num_act = 0
./motion/helium_methods.F:         helium%rho_property(rho_atom_number)%is_calculated = .TRUE.
./motion/helium_methods.F:         helium%rho_num_act = helium%rho_num_act+1
./motion/helium_methods.F:         helium%rho_property(rho_atom_number)%component_index(1) = helium%rho_num_act
./motion/helium_methods.F:         helium%rho_property(rho_projected_area)%is_calculated = .TRUE.
./motion/helium_methods.F:         DO ii = 1, helium%rho_property(rho_projected_area)%num_components
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+1
./motion/helium_methods.F:            helium%rho_property(rho_projected_area)%component_index(ii) = helium%rho_num_act
./motion/helium_methods.F:         helium%rho_property(rho_winding_number)%is_calculated = .TRUE.
./motion/helium_methods.F:         DO ii = 1, helium%rho_property(rho_winding_number)%num_components
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+1
./motion/helium_methods.F:            helium%rho_property(rho_winding_number)%component_index(ii) = helium%rho_num_act
./motion/helium_methods.F:         helium%rho_property(rho_winding_cycle)%is_calculated = .TRUE.
./motion/helium_methods.F:         DO ii = 1, helium%rho_property(rho_winding_cycle)%num_components
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+1
./motion/helium_methods.F:            helium%rho_property(rho_winding_cycle)%component_index(ii) = helium%rho_num_act
./motion/helium_methods.F:         helium%rho_property(rho_moment_of_inertia)%is_calculated = .TRUE.
./motion/helium_methods.F:         DO ii = 1, helium%rho_property(rho_moment_of_inertia)%num_components
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+1
./motion/helium_methods.F:            helium%rho_property(rho_moment_of_inertia)%component_index(ii) = helium%rho_num_act
./motion/helium_methods.F:      helium%rho_maxr = helium%cell_size
./motion/helium_methods.F:         i_val=helium%rho_nbin)
./motion/helium_methods.F:      helium%rho_delr = helium%rho_maxr/REAL(helium%rho_nbin, dp)
./motion/helium_methods.F:      helium%rho_num_min_len_wdg = 0
./motion/helium_methods.F:         NULLIFY (helium%rho_min_len_wdg_vals)
./motion/helium_methods.F:            i_vals=helium%rho_min_len_wdg_vals)
./motion/helium_methods.F:         itmp = SIZE(helium%rho_min_len_wdg_vals)
./motion/helium_methods.F:            helium%rho_num_min_len_wdg = itmp
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+itmp
./motion/helium_methods.F:      helium%rho_num_min_len_non = 0
./motion/helium_methods.F:         NULLIFY (helium%rho_min_len_non_vals)
./motion/helium_methods.F:            i_vals=helium%rho_min_len_non_vals)
./motion/helium_methods.F:         itmp = SIZE(helium%rho_min_len_non_vals)
./motion/helium_methods.F:            helium%rho_num_min_len_non = itmp
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+itmp
./motion/helium_methods.F:      helium%rho_num_min_len_all = 0
./motion/helium_methods.F:         NULLIFY (helium%rho_min_len_all_vals)
./motion/helium_methods.F:            i_vals=helium%rho_min_len_all_vals)
./motion/helium_methods.F:         itmp = SIZE(helium%rho_min_len_all_vals)
./motion/helium_methods.F:            helium%rho_num_min_len_all = itmp
./motion/helium_methods.F:            helium%rho_num_act = helium%rho_num_act+itmp
./motion/helium_methods.F:         i_val=helium%rho_iweight)
./motion/helium_methods.F:      itmp = helium%rho_nbin
./motion/helium_methods.F:      jtmp = helium%rho_num_act
./motion/helium_methods.F:      ALLOCATE (helium%rho_inst(jtmp, itmp, itmp, itmp))
./motion/helium_methods.F:      ALLOCATE (helium%rho_accu(jtmp, itmp, itmp, itmp))
./motion/helium_methods.F:      ALLOCATE (helium%rho_rstr(jtmp, itmp, itmp, itmp))
./motion/helium_methods.F:      ALLOCATE (helium%rho_incr(jtmp, helium%atoms, helium%beads))
./motion/helium_methods.F:      helium%rho_incr(:, :, :) = 0.0_dp
./motion/helium_methods.F:      helium%rho_inst(:, :, :, :) = 0.0_dp
./motion/helium_methods.F:      helium%rho_accu(:, :, :, :) = 0.0_dp
./motion/helium_methods.F:      helium%rho_rstr(:, :, :, :) = 0.0_dp
./motion/helium_methods.F:   END SUBROUTINE helium_rho_init
./motion/helium_methods.F:   SUBROUTINE helium_rho_restore(helium_env)
./motion/helium_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'helium_rho_restore', &
./motion/helium_methods.F:         itmp = SIZE(helium_env(1)%helium%rho_rstr)
./motion/helium_methods.F:      itmp = helium_env(1)%helium%rho_nbin
./motion/helium_methods.F:      ALLOCATE (m(helium_env(1)%helium%rho_num_act, itmp, itmp, itmp))
./motion/helium_methods.F:      ALLOCATE (f(helium_env(1)%helium%rho_num_act, itmp, itmp, itmp))
./motion/helium_methods.F:         helium_env(k)%helium%rho_rstr(:, :, :, :) = UNPACK(message(1:msglen), MASK=m, FIELD=f)
./motion/helium_methods.F:   END SUBROUTINE helium_rho_restore
./motion/helium_methods.F:!> \note  At the moment only orthorhombic cells are supported.
./motion/helium_methods.F:      LOGICAL                                            :: my_orthorhombic
./motion/helium_methods.F:      CALL get_cell(my_cell, orthorhombic=my_orthorhombic)
./motion/helium_methods.F:      IF (.NOT. my_orthorhombic) THEN
./motion/helium_methods.F:         CPABORT("Helium solvent not implemented for non-orthorhombic cells.")
./motion/cell_opt_utils.F:        cell_sym_orthorhombic, cell_sym_rhombohedral, cell_sym_tetragonal_ab, &
./motion/cell_opt_utils.F:! orthorhombic cells are diagonal, and should stay exactly like this
./motion/cell_opt_utils.F:      IF (.NOT. cell%orthorhombic) THEN
./motion/cell_opt_utils.F:         ! Retain an exact orthorhombic cell
./motion/cell_opt_utils.F:         IF (cell%orthorhombic) THEN
./motion/cell_opt_utils.F:               cell_sym_orthorhombic)
./motion/cell_opt_utils.F:            CASE (cell_sym_orthorhombic)
./motion/cell_opt_utils.F:         CASE (cell_sym_rhombohedral)
./qs_integrate_potential_product.F:         ! needs to be consistent with rho_rspace
./qs_integrate_potential_product.F:         eps_gvg_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_product.F:                  force(ikind)%rho_elec(:, atom_a) = &
./qs_integrate_potential_product.F:                     force(ikind)%rho_elec(:, atom_a)+scalef*admm_scal_fac*force_a(:)
./qs_integrate_potential_product.F:                  force(jkind)%rho_elec(:, atom_b) = &
./qs_integrate_potential_product.F:                     force(jkind)%rho_elec(:, atom_b)+scalef*admm_scal_fac*force_b(:)
./mixed_cdft_utils.F:            settings%sr(4, iforce_eval) = dft_control%qs_control%eps_rho_rspace
./mixed_cdft_utils.F:      mixed_cdft%eps_rho_rspace = settings%sr(4, 1)
./mixed_cdft_utils.F:                                pw_grid%orthorhombic, settings%radius)
./input_cp2k_mm.F:                          "drho: increment of density for the tabulated values of the embedding function (assuming rho starts "// &
./input_cp2k_mm.F:                          "in order npoints lines for rho [au_c] and its derivative [au_c*angstrom^-1]; npoints lines for "// &
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:   SUBROUTINE ddapc_eval_gfunc(gfunc, w, gcut, rho_tot_g, radii)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      s_dim = rho_tot_g%pw_grid%first_gne0
./cp_ddapc_methods.F:      e_dim = rho_tot_g%pw_grid%ngpts_cut_local
./cp_ddapc_methods.F:            g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:         g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:   SUBROUTINE build_b_vector(bv, gfunc, w, particle_set, radii, rho_tot_g, gcut)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      s_dim = rho_tot_g%pw_grid%first_gne0
./cp_ddapc_methods.F:      e_dim = rho_tot_g%pw_grid%ngpts_cut_local
./cp_ddapc_methods.F:         g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:               gvec = rho_tot_g%pw_grid%g(:, ig)
./cp_ddapc_methods.F:               my_bv(ig) = w(ig)*REAL(CONJG(rho_tot_g%cc(ig))*phase, KIND=dp)
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:   SUBROUTINE build_A_matrix(Am, gfunc, w, particle_set, radii, rho_tot_g, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      s_dim = rho_tot_g%pw_grid%first_gne0
./cp_ddapc_methods.F:      e_dim = rho_tot_g%pw_grid%ngpts_cut_local
./cp_ddapc_methods.F:         g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:   SUBROUTINE build_der_b_vector(dbv, gfunc, w, particle_set, radii, rho_tot_g, gcut, iparticle0)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      s_dim = rho_tot_g%pw_grid%first_gne0
./cp_ddapc_methods.F:      e_dim = rho_tot_g%pw_grid%ngpts_cut_local
./cp_ddapc_methods.F:         g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:               gvec = rho_tot_g%pw_grid%g(:, ig)
./cp_ddapc_methods.F:               my_dbv(:, ig) = w(ig)*REAL(CONJG(rho_tot_g%cc(ig))*dphase, KIND=dp)*gvec(:)
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:                                      rho_tot_g, gcut, iparticle0, nparticles, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      s_dim = rho_tot_g%pw_grid%first_gne0
./cp_ddapc_methods.F:      e_dim = rho_tot_g%pw_grid%ngpts_cut_local
./cp_ddapc_methods.F:         g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:                  lhs((ipp-1)*Nr+1:(ipp-1)*Nr+Nr, ig-s_dim+1) = w(ig)*rho_tot_g%pw_grid%g(icomp, ig)* &
./cp_ddapc_methods.F:                  lhs((ipp-1)*Nr+1:(ipp-1)*Nr+Nr, ig-s_dim+1) = w(ig)*rho_tot_g%pw_grid%g(icomp, ig)*gfunc(ig, 1:Nr)* &
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:   SUBROUTINE prep_g_dot_rvec_sin_cos(rho_tot_g, particle_set, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      s_dim = rho_tot_g%pw_grid%first_gne0
./cp_ddapc_methods.F:      e_dim = rho_tot_g%pw_grid%ngpts_cut_local
./cp_ddapc_methods.F:         g2 = rho_tot_g%pw_grid%gsq(ig)
./cp_ddapc_methods.F:               g_dot_rvec = DOT_PRODUCT(rho_tot_g%pw_grid%g(:, ig), rvec)
./cp_ddapc_methods.F:!> \param rho_tot_g ...
./cp_ddapc_methods.F:                             rho_tot_g, radii, iw, Vol)
./cp_ddapc_methods.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_methods.F:      CALL prep_g_dot_rvec_sin_cos(rho_tot_g, particle_set, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_methods.F:      CALL build_A_matrix(Am, gfunc, w, particle_set, radii, rho_tot_g, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_methods.F:      CALL mp_sum(Am, rho_tot_g%pw_grid%para%group)
./cp_ddapc_methods.F:      CPASSERT(cell%orthorhombic)
./qs_rho_atom_types.F:MODULE qs_rho_atom_types
./qs_rho_atom_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho_atom_types'
./qs_rho_atom_types.F:   TYPE rho_atom_coeff
./qs_rho_atom_types.F:   END TYPE rho_atom_coeff
./qs_rho_atom_types.F:   TYPE rho_atom_type
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_rho_atom_types.F:         POINTER  :: rho_rad_h, &
./qs_rho_atom_types.F:                     rho_rad_s, &
./qs_rho_atom_types.F:                     vrho_rad_h, &
./qs_rho_atom_types.F:                     vrho_rad_s
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_rho_atom_types.F:         POINTER  :: drho_rad_h, &
./qs_rho_atom_types.F:                     drho_rad_s
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), &
./qs_rho_atom_types.F:         POINTER  :: rho_rad_h_d, &
./qs_rho_atom_types.F:                     rho_rad_s_d
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), &
./qs_rho_atom_types.F:         POINTER  :: trho_rad_h, &
./qs_rho_atom_types.F:                     trho_rad_s
./qs_rho_atom_types.F:      INTEGER                             :: rhoa_of_atom
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_rho_atom_types.F:   END TYPE rho_atom_type
./qs_rho_atom_types.F:   TYPE rho_atom_p_type
./qs_rho_atom_types.F:      TYPE(rho_atom_type), POINTER       :: rho_atom
./qs_rho_atom_types.F:   END TYPE rho_atom_p_type
./qs_rho_atom_types.F:   PUBLIC :: allocate_rho_atom_set, &
./qs_rho_atom_types.F:             deallocate_rho_atom_set, &
./qs_rho_atom_types.F:             get_rho_atom
./qs_rho_atom_types.F:   PUBLIC :: rho_atom_coeff, rho_atom_type
./qs_rho_atom_types.F:!> \param rho_atom_set ...
./qs_rho_atom_types.F:   SUBROUTINE allocate_rho_atom_set(rho_atom_set, natom)
./qs_rho_atom_types.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rho_atom_set', &
./qs_rho_atom_types.F:      IF (ASSOCIATED(rho_atom_set)) THEN
./qs_rho_atom_types.F:         CALL deallocate_rho_atom_set(rho_atom_set)
./qs_rho_atom_types.F:      ALLOCATE (rho_atom_set(natom))
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%cpc_h)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%cpc_s)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%rho_rad_h)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%rho_rad_s)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%drho_rad_h)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%drho_rad_s)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%rho_rad_h_d)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%rho_rad_s_d)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%vrho_rad_h)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%vrho_rad_s)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%trho_rad_h)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%trho_rad_s)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%ga_Vlocal_gb_h)
./qs_rho_atom_types.F:         NULLIFY (rho_atom_set(iat)%ga_Vlocal_gb_s)
./qs_rho_atom_types.F:   END SUBROUTINE allocate_rho_atom_set
./qs_rho_atom_types.F:!> \param rho_atom_set ...
./qs_rho_atom_types.F:   SUBROUTINE deallocate_rho_atom_set(rho_atom_set)
./qs_rho_atom_types.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_rho_atom_set', &
./qs_rho_atom_types.F:      IF (ASSOCIATED(rho_atom_set)) THEN
./qs_rho_atom_types.F:         natom = SIZE(rho_atom_set)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%cpc_h)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%cpc_h(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%cpc_h, 1)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%cpc_h(i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%cpc_s(i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%cpc_h)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%cpc_s)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%ga_Vlocal_gb_h)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%ga_Vlocal_gb_h(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%ga_Vlocal_gb_h, 1)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%ga_Vlocal_gb_h(i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%ga_Vlocal_gb_s(i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%ga_Vlocal_gb_h)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%ga_Vlocal_gb_s)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%drho_rad_h)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%drho_rad_h(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%drho_rad_h, 1)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%drho_rad_h(i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%drho_rad_s(i)%r_coef)
./qs_rho_atom_types.F:                        DEALLOCATE (rho_atom_set(iat)%rho_rad_h_d(j, i)%r_coef)
./qs_rho_atom_types.F:                        DEALLOCATE (rho_atom_set(iat)%rho_rad_s_d(j, i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%drho_rad_h)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%drho_rad_s)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%rho_rad_h_d)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%rho_rad_s_d)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%rho_rad_h)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%rho_rad_h(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%rho_rad_h)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%rho_rad_h(i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%rho_rad_h)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%rho_rad_s)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%rho_rad_s(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%rho_rad_s)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%rho_rad_s(i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%rho_rad_s)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%vrho_rad_h)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%vrho_rad_h(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%vrho_rad_h)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%vrho_rad_h(i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%vrho_rad_h)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%vrho_rad_s)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%vrho_rad_s(1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%vrho_rad_s)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%vrho_rad_s(i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%vrho_rad_s)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%trho_rad_h)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%trho_rad_h(1, 1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%trho_rad_h, 2)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%trho_rad_h(1, i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%trho_rad_h(2, i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%trho_rad_h(3, i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%trho_rad_h)
./qs_rho_atom_types.F:            IF (ASSOCIATED(rho_atom_set(iat)%trho_rad_s)) THEN
./qs_rho_atom_types.F:               IF (ASSOCIATED(rho_atom_set(iat)%trho_rad_s(1, 1)%r_coef)) THEN
./qs_rho_atom_types.F:                  n = SIZE(rho_atom_set(iat)%trho_rad_s, 2)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%trho_rad_s(1, i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%trho_rad_s(2, i)%r_coef)
./qs_rho_atom_types.F:                     DEALLOCATE (rho_atom_set(iat)%trho_rad_s(3, i)%r_coef)
./qs_rho_atom_types.F:               DEALLOCATE (rho_atom_set(iat)%trho_rad_s)
./qs_rho_atom_types.F:         DEALLOCATE (rho_atom_set)
./qs_rho_atom_types.F:                       "The pointer rho_atom_set is not associated and "// &
./qs_rho_atom_types.F:   END SUBROUTINE deallocate_rho_atom_set
./qs_rho_atom_types.F:!> \param rho_atom ...
./qs_rho_atom_types.F:!> \param rho_rad_h ...
./qs_rho_atom_types.F:!> \param rho_rad_s ...
./qs_rho_atom_types.F:!> \param drho_rad_h ...
./qs_rho_atom_types.F:!> \param drho_rad_s ...
./qs_rho_atom_types.F:!> \param vrho_rad_h ...
./qs_rho_atom_types.F:!> \param vrho_rad_s ...
./qs_rho_atom_types.F:!> \param rho_rad_h_d ...
./qs_rho_atom_types.F:!> \param rho_rad_s_d ...
./qs_rho_atom_types.F:!> \param trho_rad_h ...
./qs_rho_atom_types.F:!> \param trho_rad_s ...
./qs_rho_atom_types.F:   SUBROUTINE get_rho_atom(rho_atom, cpc_h, cpc_s, rho_rad_h, rho_rad_s, &
./qs_rho_atom_types.F:                           drho_rad_h, drho_rad_s, vrho_rad_h, vrho_rad_s, &
./qs_rho_atom_types.F:                           rho_rad_h_d, rho_rad_s_d, trho_rad_h, trho_rad_s, &
./qs_rho_atom_types.F:      TYPE(rho_atom_type), INTENT(IN), POINTER           :: rho_atom
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), INTENT(OUT), &
./qs_rho_atom_types.F:         OPTIONAL, POINTER                               :: cpc_h, cpc_s, rho_rad_h, rho_rad_s, &
./qs_rho_atom_types.F:                                                            drho_rad_h, drho_rad_s, vrho_rad_h, &
./qs_rho_atom_types.F:                                                            vrho_rad_s
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), &
./qs_rho_atom_types.F:         INTENT(OUT), OPTIONAL, POINTER                  :: rho_rad_h_d, rho_rad_s_d, trho_rad_h, &
./qs_rho_atom_types.F:                                                            trho_rad_s
./qs_rho_atom_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), INTENT(OUT), &
./qs_rho_atom_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'get_rho_atom', routineP = moduleN//':'//routineN
./qs_rho_atom_types.F:      IF (ASSOCIATED(rho_atom)) THEN
./qs_rho_atom_types.F:         IF (PRESENT(cpc_h)) cpc_h => rho_atom%cpc_h
./qs_rho_atom_types.F:         IF (PRESENT(cpc_s)) cpc_s => rho_atom%cpc_s
./qs_rho_atom_types.F:         IF (PRESENT(rho_rad_h)) rho_rad_h => rho_atom%rho_rad_h
./qs_rho_atom_types.F:         IF (PRESENT(rho_rad_s)) rho_rad_s => rho_atom%rho_rad_s
./qs_rho_atom_types.F:         IF (PRESENT(drho_rad_h)) drho_rad_h => rho_atom%drho_rad_h
./qs_rho_atom_types.F:         IF (PRESENT(drho_rad_s)) drho_rad_s => rho_atom%drho_rad_s
./qs_rho_atom_types.F:         IF (PRESENT(rho_rad_h_d)) rho_rad_h_d => rho_atom%rho_rad_h_d
./qs_rho_atom_types.F:         IF (PRESENT(rho_rad_s_d)) rho_rad_s_d => rho_atom%rho_rad_s_d
./qs_rho_atom_types.F:         IF (PRESENT(vrho_rad_h)) vrho_rad_h => rho_atom%vrho_rad_h
./qs_rho_atom_types.F:         IF (PRESENT(vrho_rad_s)) vrho_rad_s => rho_atom%vrho_rad_s
./qs_rho_atom_types.F:         IF (PRESENT(trho_rad_h)) trho_rad_h => rho_atom%trho_rad_h
./qs_rho_atom_types.F:         IF (PRESENT(trho_rad_s)) trho_rad_s => rho_atom%trho_rad_s
./qs_rho_atom_types.F:         IF (PRESENT(ga_Vlocal_gb_h)) ga_Vlocal_gb_h => rho_atom%ga_Vlocal_gb_h
./qs_rho_atom_types.F:         IF (PRESENT(ga_Vlocal_gb_s)) ga_Vlocal_gb_s => rho_atom%ga_Vlocal_gb_s
./qs_rho_atom_types.F:         CPABORT("The pointer rho_atom is not associated")
./qs_rho_atom_types.F:   END SUBROUTINE get_rho_atom
./qs_rho_atom_types.F:END MODULE qs_rho_atom_types
./colvar_methods.F:                  CPASSERT(cell%orthorhombic)
./eip_silicon.F:        REAL(KIND=dp), PARAMETER :: tmin_rho= 0.1500000e+01_dp
./eip_silicon.F:        REAL(KIND=dp), PARAMETER :: tmax_rho= 0.3500000e+01_dp
./eip_silicon.F:        REAL(KIND=dp), PARAMETER :: hi_rho= 5.00000000000e0_dp
./eip_silicon.F:        REAL(KIND=dp), PARAMETER :: hsixth_rho=3.33333333333333e-002_dp
./eip_silicon.F:        REAL(KIND=dp), PARAMETER :: h2sixth_rho=6.66666666666667e-003_dp
./eip_silicon.F:        REAL(KIND=dp), PARAMETER, DIMENSION(0:10) :: cof_rho =  &
./eip_silicon.F:        REAL(KIND=dp), PARAMETER, DIMENSION(0:10) :: dof_rho =  &
./eip_silicon.F:                        gjik, gjikp, rho, rhop, rij, rik, sij, sik, t1, t2, t3, t4, &
./eip_silicon.F:        CALL splint(cof_rho,dof_rho,tmin_rho,tmax_rho, &
./eip_silicon.F:             hsixth_rho,h2sixth_rho,hi_rho,11,rij,rho,rhop)
./eip_silicon.F:        dens2=dens2+rho
./eip_silicon.F:        f2ij(1,jcnt)=fxij*rhop
./eip_silicon.F:        f2ij(2,jcnt)=fyij*rhop
./eip_silicon.F:        f2ij(3,jcnt)=fzij*rhop
./atom_utils.F:   PUBLIC :: atom_orbital_max, atom_wfnr0, get_rho0
./atom_utils.F:         CALL open_file(file_name="rho_target.dat", file_status="UNKNOWN", &
./atom_utils.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:)           :: fe, rc, rhoc, rval
./atom_utils.F:            ALLOCATE (rhoc(m), rval(m))
./atom_utils.F:               CALL spline3ders(potential%upf_pot%r(1:n), potential%upf_pot%rho_nlcc(1:n), rval(1:m), &
./atom_utils.F:                                ynew=rhoc(1:m))
./atom_utils.F:               CALL spline3ders(potential%upf_pot%r(1:n), potential%upf_pot%rho_nlcc(1:n), rval(1:m), &
./atom_utils.F:                                dynew=rhoc(1:m))
./atom_utils.F:               CALL spline3ders(potential%upf_pot%r(1:n), potential%upf_pot%rho_nlcc(1:n), rval(1:m), &
./atom_utils.F:                                d2ynew=rhoc(1:m))
./atom_utils.F:                  corden(i) = corden(i)+rhoc(m-i+1)
./atom_utils.F:               corden(1:m) = corden(1:m)+rhoc(1:m)
./atom_utils.F:            DEALLOCATE (rhoc, rval)
./atom_utils.F:      REAL(KIND=dp), DIMENSION(0:maxfac)                 :: arho
./atom_utils.F:      arho = 0._dp
./atom_utils.F:         arho(ll) = fac(ll)/fac(lh)**2
./atom_utils.F:               almn = arho(-lad+lbc+nu)*arho(lad-lbc+nu)*arho(lad+lbc-nu)/(REAL(lad+lbc+nu+1, dp)*arho(lad+lbc+nu))
./atom_utils.F:      REAL(KIND=dp), DIMENSION(0:maxfac)                 :: arho
./atom_utils.F:      arho = 0._dp
./atom_utils.F:         arho(ll) = fac(ll)/fac(lh)**2
./atom_utils.F:               almn = arho(-lad+lbc+nu)*arho(lad-lbc+nu)*arho(lad+lbc-nu)/(REAL(lad+lbc+nu+1, dp)*arho(lad+lbc+nu))
./atom_utils.F:      REAL(KIND=dp), DIMENSION(0:maxfac)                 :: arho
./atom_utils.F:      arho = 0._dp
./atom_utils.F:         arho(ll) = fac(ll)/fac(lh)**2
./atom_utils.F:               almn = arho(-l1+l2+nu)*arho(l1-l2+nu)*arho(l1+l2-nu)/(REAL(l1+l2+nu+1, dp)*arho(l1+l2+nu))
./atom_utils.F:!> \param rho ...
./atom_utils.F:   SUBROUTINE wigner_slater_functional(rho, vxc)
./atom_utils.F:      REAL(KIND=dp), DIMENSION(:), INTENT(IN)            :: rho
./atom_utils.F:      DO i = 1, SIZE(rho)
./atom_utils.F:         IF (rho(i) > 1.e-20_dp) THEN
./atom_utils.F:            ex = -0.7385588_dp*rho(i)**0.333333333_dp
./atom_utils.F:            rs = (3._dp/fourpi/rho(i))**0.333333333_dp
./atom_utils.F:!> \param rho0 ...
./atom_utils.F:   SUBROUTINE get_rho0(atom, rho0)
./atom_utils.F:      REAL(KIND=dp), INTENT(OUT)                         :: rho0
./atom_utils.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :)        :: rho
./atom_utils.F:         ALLOCATE (rho(nr, 2))
./atom_utils.F:         CALL atom_density(rho(:, 1), atom%orbitals%pmata, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_utils.F:         CALL atom_density(rho(:, 2), atom%orbitals%pmatb, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_utils.F:            rho(:, 1) = rho(:, 1)+0.5_dp*xfun(:)
./atom_utils.F:            rho(:, 2) = rho(:, 2)+0.5_dp*xfun(:)
./atom_utils.F:         rho(:, 1) = rho(:, 1)+rho(:, 2)
./atom_utils.F:         ALLOCATE (rho(nr, 1))
./atom_utils.F:         CALL atom_density(rho(:, 1), atom%orbitals%pmat, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_utils.F:            CALL atom_core_density(rho(:, 1), atom%potential, typ="RHO", rr=atom%basis%grid%rad)
./atom_utils.F:      d0 = rho(m0, 1)
./atom_utils.F:      d1 = rho(m1, 1)
./atom_utils.F:      d2 = rho(m2, 1)
./atom_utils.F:      rho0 = w0*d0+w1*d1
./atom_utils.F:      rho0 = MAX(rho0, 0.0_dp)
./atom_utils.F:      DEALLOCATE (rho)
./atom_utils.F:   END SUBROUTINE get_rho0
./xc/xc_vwn.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_vwn.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_vwn.F:                                              xc_rho_set_type
./xc/xc_vwn.F:   REAL(KIND=dp) :: eps_rho, b, c, x0, bf, cf, x0f, ba, ca, x0a
./xc/xc_vwn.F:      eps_rho = cutoff
./xc/xc_vwn.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_vwn.F:         needs%rho = .TRUE.
./xc/xc_vwn.F:!> \param rho_set ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lda_eval(rho_set, deriv_set, order, vwn_params)
./xc/xc_vwn.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_vwn.F:      REAL(KIND=dp)                                      :: epsilon_rho, sc
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho, rho
./xc/xc_vwn.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_vwn.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_vwn.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_vwn.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_vwn.F:      CALL vwn_init(epsilon_rho, vwn_params)
./xc/xc_vwn.F:      CALL calc_srs_pw(rho, x, npoints)
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_vwn.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_vwn.F:         CALL vwn_lda_01(rho, x, e_0, e_rho, npoints, sc)
./xc/xc_vwn.F:         CALL vwn_lda_0(rho, x, e_0, npoints, sc)
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_vwn.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_vwn.F:         CALL vwn_lda_1(rho, x, e_rho, npoints, sc)
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_vwn.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_vwn.F:         CALL vwn_lda_2(rho, x, e_rho_rho, npoints, sc)
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_vwn.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_vwn.F:         CALL vwn_lda_3(rho, x, e_rho_rho_rho, npoints, sc)
./xc/xc_vwn.F:!> \param rho ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lda_0(rho, x, e_0, npoints, sc)
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, x
./xc/xc_vwn.F:!$OMP                 SHARED (npoints, rho, eps_rho, x, c, b, e_0, sc) &
./xc/xc_vwn.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_vwn.F:            e_0(ip) = e_0(ip)+a*(ln1+b*at-b*x0/px0*(ln2+xb*at))*rho(ip)*sc
./xc/xc_vwn.F:!> \param rho ...
./xc/xc_vwn.F:!> \param e_rho ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lda_1(rho, x, e_rho, npoints, sc)
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, x
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho
./xc/xc_vwn.F:!$OMP                 SHARED(npoints, rho, eps_rho, x, b, sc, e_rho) &
./xc/xc_vwn.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_vwn.F:            e_rho(ip) = e_rho(ip)+(ex-x(ip)*dex/6.0_dp)*sc
./xc/xc_vwn.F:!> \param rho ...
./xc/xc_vwn.F:!> \param e_rho ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lda_01(rho, x, e_0, e_rho, npoints, sc)
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, x
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_0, e_rho
./xc/xc_vwn.F:!$OMP                 SHARED(npoints, rho, eps_rho, x, b, c, e_0, sc) &
./xc/xc_vwn.F:!$OMP                 SHARED(x0, q, xb, px0, e_rho) &
./xc/xc_vwn.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_vwn.F:            e_0(ip) = e_0(ip)+ex*rho(ip)*sc
./xc/xc_vwn.F:            e_rho(ip) = e_rho(ip)+(ex-x(ip)*dex/6.0_dp)*sc
./xc/xc_vwn.F:!> \param rho ...
./xc/xc_vwn.F:!> \param e_rho_rho ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lda_2(rho, x, e_rho_rho, npoints, sc)
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, x
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho
./xc/xc_vwn.F:!$OMP                 SHARED(npoints, rho, fp, eps_rho, x, b, c, q, x0) &
./xc/xc_vwn.F:!$OMP                 SHARED(xb, e_rho_rho, sc)
./xc/xc_vwn.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_vwn.F:            e_rho_rho(ip) = e_rho_rho(ip) &
./xc/xc_vwn.F:                            +(x(ip)/(36.0_dp*rho(ip))*(x(ip)*d2ex-5.0_dp*dex))*sc
./xc/xc_vwn.F:!> \param rho ...
./xc/xc_vwn.F:!> \param e_rho_rho_rho ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lda_3(rho, x, e_rho_rho_rho, npoints, sc)
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, x
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho
./xc/xc_vwn.F:!$OMP                 SHARED(npoints, rho, eps_rho, b, c, x, x0, sc) &
./xc/xc_vwn.F:!$OMP                 SHARED(q, xb, px0, fp, e_rho_rho_rho) &
./xc/xc_vwn.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_vwn.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip) &
./xc/xc_vwn.F:                                -(7.0_dp*x(ip)/(216.0_dp*rho(ip)*rho(ip))*(x(ip)*d2ex-5.0_dp*dex)+ &
./xc/xc_vwn.F:                                  x(ip)*x(ip)/(216.0_dp*rho(ip)*rho(ip))*(x(ip)*d3ex-4.0_dp*d2ex))*sc
./xc/xc_vwn.F:!> \param rho_set ...
./xc/xc_vwn.F:   SUBROUTINE vwn_lsd_eval(rho_set, deriv_set, order, vwn_params)
./xc/xc_vwn.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_vwn.F:      REAL(KIND=dp)                                      :: epsilon_rho, sc
./xc/xc_vwn.F:                                                            e_ab, e_abb, e_b, e_bb, e_bbb, rhoa, &
./xc/xc_vwn.F:                                                            rhob
./xc/xc_vwn.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_vwn.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_vwn.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, &
./xc/xc_vwn.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_vwn.F:      CALL vwn_init(epsilon_rho, vwn_params)
./xc/xc_vwn.F:      dummy => rhoa
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhob)", &
./xc/xc_vwn.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)(rhob)", &
./xc/xc_vwn.F:!$OMP                  SHARED(rhoa, rhob, e_0, e_a, e_b, e_aa, e_bb, e_ab) &
./xc/xc_vwn.F:            rhoa=rhoa, rhob=rhob, e_0=e_0, &
./xc/xc_vwn.F:!$OMP                  SHARED(rhoa, rhob, e_0, e_a, e_b, e_aa, e_bb, e_ab) &
./xc/xc_vwn.F:            rhoa=rhoa, rhob=rhob, e_0=e_0, &
./xc/xc_vwn.F:!> \param rhoa ...
./xc/xc_vwn.F:!> \param rhob ...
./xc/xc_vwn.F:   SUBROUTINE vwn3_lsd_calc(rhoa, rhob, e_0, e_a, e_b, e_aa, e_bb, e_ab, &
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: rhoa, rhob, e_0, e_a, e_b, e_aa, e_bb, &
./xc/xc_vwn.F:      REAL(KIND=dp) :: ap, bp, cp, myrho, myrhoa, myrhob, Qf, Qp, t1, t10, t100, t101, t1019, &
./xc/xc_vwn.F:         myrhoa = MAX(rhoa(ip), 0.0_dp)
./xc/xc_vwn.F:         myrhob = MAX(rhob(ip), 0.0_dp)
./xc/xc_vwn.F:         myrho = myrhoa+myrhob
./xc/xc_vwn.F:         IF (myrho > eps_rho) THEN
./xc/xc_vwn.F:            myrhoa = MAX(EPSILON(0.0_dp)*1.e4_dp, myrhoa)
./xc/xc_vwn.F:            myrhob = MAX(EPSILON(0.0_dp)*1.e4_dp, myrhob)
./xc/xc_vwn.F:            myrho = myrhoa+myrhob
./xc/xc_vwn.F:               t2 = myrho
./xc/xc_vwn.F:               t43 = myrhoa-myrhob
./xc/xc_vwn.F:!> \param rhoa ...
./xc/xc_vwn.F:!> \param rhob ...
./xc/xc_vwn.F:   SUBROUTINE vwn5_lsd_calc(rhoa, rhob, e_0, e_a, e_b, e_aa, e_bb, e_ab, &
./xc/xc_vwn.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: rhoa, rhob, e_0, e_a, e_b, e_aa, e_bb, &
./xc/xc_vwn.F:      REAL(KIND=dp) :: ap, bp, cp, d2f0, myrho, myrhoa, myrhob, Qa, Qf, Qp, t1, t100, t101, t1010, &
./xc/xc_vwn.F:         myrhoa = MAX(rhoa(ip), 0.0_dp)
./xc/xc_vwn.F:         myrhob = MAX(rhob(ip), 0.0_dp)
./xc/xc_vwn.F:         myrho = myrhoa+myrhob
./xc/xc_vwn.F:         IF (myrho > eps_rho) THEN
./xc/xc_vwn.F:            myrhoa = MAX(EPSILON(0.0_dp)*1.e4_dp, myrhoa)
./xc/xc_vwn.F:            myrhob = MAX(EPSILON(0.0_dp)*1.e4_dp, myrhob)
./xc/xc_vwn.F:            myrho = myrhoa+myrhob
./xc/xc_vwn.F:               t1 = myrhoa-myrhob
./xc/xc_vwn.F:               t2 = myrho
./xc/xc_xbecke88_long_range.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xbecke88_long_range.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xbecke88_long_range.F:                                              xc_rho_set_type
./xc/xc_xbecke88_long_range.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke88_long_range.F:         needs%rho = .TRUE.
./xc/xc_xbecke88_long_range.F:         needs%norm_drho = .TRUE.
./xc/xc_xbecke88_long_range.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke88_long_range.F:         needs%rho_spin = .TRUE.
./xc/xc_xbecke88_long_range.F:         needs%rho_spin_1_3 = .TRUE.
./xc/xc_xbecke88_long_range.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xbecke88_long_range.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbecke88_long_range.F:   SUBROUTINE xb88_lr_lda_eval(rho_set, deriv_set, grad_deriv, xb88_lr_params)
./xc/xc_xbecke88_long_range.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp)                                      :: epsilon_rho, omega, sx
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho_ndrho, e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, &
./xc/xc_xbecke88_long_range.F:         e_rho_rho_rho, norm_drho, rho
./xc/xc_xbecke88_long_range.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke88_long_range.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke88_long_range.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_xbecke88_long_range.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xbecke88_long_range.F:      dummy => rho
./xc/xc_xbecke88_long_range.F:      e_rho => dummy
./xc/xc_xbecke88_long_range.F:      e_ndrho => dummy
./xc/xc_xbecke88_long_range.F:      e_rho_rho => dummy
./xc/xc_xbecke88_long_range.F:      e_ndrho_rho => dummy
./xc/xc_xbecke88_long_range.F:      e_ndrho_ndrho => dummy
./xc/xc_xbecke88_long_range.F:      e_rho_rho_rho => dummy
./xc/xc_xbecke88_long_range.F:      e_ndrho_rho_rho => dummy
./xc/xc_xbecke88_long_range.F:      e_ndrho_ndrho_rho => dummy
./xc/xc_xbecke88_long_range.F:      e_ndrho_ndrho_ndrho => dummy
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drho)(rho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drho)(norm_drho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_xbecke88_long_range.F:!$OMP              SHARED(rho, norm_drho, e_0, e_rho, e_ndrho, e_rho_rho) &
./xc/xc_xbecke88_long_range.F:!$OMP              SHARED(e_ndrho_rho, e_ndrho_ndrho, e_rho_rho_rho) &
./xc/xc_xbecke88_long_range.F:!$OMP              SHARED(e_ndrho_rho_rho, e_ndrho_ndrho_rho) &
./xc/xc_xbecke88_long_range.F:!$OMP              SHARED(e_ndrho_ndrho_ndrho, grad_deriv, npoints) &
./xc/xc_xbecke88_long_range.F:!$OMP              SHARED(epsilon_rho, sx, omega)
./xc/xc_xbecke88_long_range.F:      CALL xb88_lr_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_xbecke88_long_range.F:                            e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_rho_rho=e_rho_rho, &
./xc/xc_xbecke88_long_range.F:                            e_ndrho_rho=e_ndrho_rho, e_ndrho_ndrho=e_ndrho_ndrho, &
./xc/xc_xbecke88_long_range.F:                            e_rho_rho_rho=e_rho_rho_rho, e_ndrho_rho_rho=e_ndrho_rho_rho, &
./xc/xc_xbecke88_long_range.F:                            e_ndrho_ndrho_rho=e_ndrho_ndrho_rho, &
./xc/xc_xbecke88_long_range.F:                            e_ndrho_ndrho_ndrho=e_ndrho_ndrho_ndrho, grad_deriv=grad_deriv, &
./xc/xc_xbecke88_long_range.F:                            npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbecke88_long_range.F:!> \param rho alpha or beta spin density
./xc/xc_xbecke88_long_range.F:!> \param norm_drho || grad rho ||
./xc/xc_xbecke88_long_range.F:!> \param e_rho derivative of the functional wrt. to the variables
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho ...
./xc/xc_xbecke88_long_range.F:!> \param e_rho_rho ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_rho ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_ndrho ...
./xc/xc_xbecke88_long_range.F:!> \param e_rho_rho_rho ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_rho_rho ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_ndrho_rho ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_xbecke88_long_range.F:!> \param epsilon_rho ...
./xc/xc_xbecke88_long_range.F:!>      - Just took the lsd code and scaled rho and ndrho by 1/2 (e_0 with 2.0)
./xc/xc_xbecke88_long_range.F:   SUBROUTINE xb88_lr_lda_calc(rho, norm_drho, &
./xc/xc_xbecke88_long_range.F:                               e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xbecke88_long_range.F:                               e_ndrho_ndrho, e_rho_rho_rho, e_ndrho_rho_rho, e_ndrho_ndrho_rho, &
./xc/xc_xbecke88_long_range.F:                               e_ndrho_ndrho_ndrho, grad_deriv, npoints, epsilon_rho, sx, &
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho_ndrho_ndrho, &
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho_rho, e_ndrho_rho_rho, e_rho_rho_rho, e_ndrho_ndrho, e_ndrho_rho, e_rho_rho, &
./xc/xc_xbecke88_long_range.F:         e_ndrho, e_rho, e_0
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, omega
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp) :: Cx, epsilon_rho43, my_epsilon_rho, my_ndrho, my_rho, t1, t10, t100, t1002, &
./xc/xc_xbecke88_long_range.F:      my_epsilon_rho = epsilon_rho
./xc/xc_xbecke88_long_range.F:      epsilon_rho43 = my_epsilon_rho**(4.0_dp/3.0_dp)
./xc/xc_xbecke88_long_range.F:         my_rho = rho(ii)*0.5_dp
./xc/xc_xbecke88_long_range.F:         my_ndrho = norm_drho(ii)*0.5_dp
./xc/xc_xbecke88_long_range.F:         IF (my_rho > my_epsilon_rho) THEN
./xc/xc_xbecke88_long_range.F:               t1 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke88_long_range.F:               t2 = t1*my_rho
./xc/xc_xbecke88_long_range.F:               xx = my_ndrho*MAX(t3, epsilon_rho43)
./xc/xc_xbecke88_long_range.F:               t5 = my_ndrho**2
./xc/xc_xbecke88_long_range.F:               t7 = my_rho**2
./xc/xc_xbecke88_long_range.F:               t11 = beta*my_ndrho
./xc/xc_xbecke88_long_range.F:               t24 = my_rho*t23
./xc/xc_xbecke88_long_range.F:               t68 = my_rho*t22*omega
./xc/xc_xbecke88_long_range.F:               t69 = t7*my_rho
./xc/xc_xbecke88_long_range.F:               t140 = t8*my_rho
./xc/xc_xbecke88_long_range.F:               e_rho(ii) = e_rho(ii)+(-0.2222222224e0_dp*t64*t60-0.3333333336e0_dp*t68*t95- &
./xc/xc_xbecke88_long_range.F:               e_ndrho(ii) = e_ndrho(ii)+(-0.3333333336e0_dp*t68*t173-0.2222222224e0_dp*t24*t98 &
./xc/xc_xbecke88_long_range.F:               t211 = my_rho*t29*omega
./xc/xc_xbecke88_long_range.F:               e_rho_rho(ii) = e_rho_rho(ii)+(-0.6666666672e0_dp*t36*t95-0.4444444448e0_dp*t64*t207- &
./xc/xc_xbecke88_long_range.F:               t393 = beta*t5*my_ndrho
./xc/xc_xbecke88_long_range.F:               t478 = 0.1e1_dp/my_rho
./xc/xc_xbecke88_long_range.F:               e_ndrho_rho(ii) = e_ndrho_rho(ii)+(-0.3333333336e0_dp*t36*t173-0.2222222224e0_dp*t64*t365- &
./xc/xc_xbecke88_long_range.F:               t519 = t219*my_rho
./xc/xc_xbecke88_long_range.F:               t590 = -0.2700000000e2_dp*t537*t539*my_rho*t501*t103+0.4500000000e1_dp &
./xc/xc_xbecke88_long_range.F:               e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+(-0.1666666668e0_dp*t211*t502-0.6666666672e0_dp*t68*t505 &
./xc/xc_xbecke88_long_range.F:               t605 = my_rho*t104*omega
./xc/xc_xbecke88_long_range.F:               e_rho_rho_rho(ii) = e_rho_rho_rho(ii)+t846*sx
./xc/xc_xbecke88_long_range.F:                              *t244*my_ndrho/t657/t7*t669)
./xc/xc_xbecke88_long_range.F:               e_ndrho_rho_rho(ii) = e_ndrho_rho_rho(ii)+t1146*sx
./xc/xc_xbecke88_long_range.F:                                *t397-0.2400000000e2_dp*t245/t657/my_rho*t669)
./xc/xc_xbecke88_long_range.F:               e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii)+t1404*sx
./xc/xc_xbecke88_long_range.F:                                                         *t250*my_ndrho+0.180e2_dp*t393/t657*t669)
./xc/xc_xbecke88_long_range.F:               t1553 = 0.1350000000e3_dp*t537/t22/t572*my_rho*t1456-0.8100000000e2_dp &
./xc/xc_xbecke88_long_range.F:                       *t534*t536*t539*my_rho*t172*t103*t529-0.2430000000e3_dp &
./xc/xc_xbecke88_long_range.F:               e_ndrho_ndrho_ndrho(ii) = e_ndrho_ndrho_ndrho(ii)+(0.8333333340e-1_dp*t605*t60*t1405- &
./xc/xc_xbecke88_long_range.F:!> \param rho_set ...
./xc/xc_xbecke88_long_range.F:   SUBROUTINE xb88_lr_lsd_eval(rho_set, deriv_set, grad_deriv, xb88_lr_params)
./xc/xc_xbecke88_long_range.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp)                                      :: epsilon_rho, omega, sx
./xc/xc_xbecke88_long_range.F:      TYPE(cp_3d_r_p_type), DIMENSION(2) :: e_ndrho, e_ndrho_ndrho, e_ndrho_ndrho_ndrho, &
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_xbecke88_long_range.F:         norm_drho, rho
./xc/xc_xbecke88_long_range.F:         NULLIFY (norm_drho(i)%array, rho(i)%array)
./xc/xc_xbecke88_long_range.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke88_long_range.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke88_long_range.F:      CALL xc_rho_set_get(rho_set, &
./xc/xc_xbecke88_long_range.F:                          rhoa=rho(1)%array, &
./xc/xc_xbecke88_long_range.F:                          rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_xbecke88_long_range.F:                          norm_drhob=norm_drho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_xbecke88_long_range.F:      dummy => rho(1)%array
./xc/xc_xbecke88_long_range.F:         e_rho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_ndrho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_rho_rho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_ndrho_rho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_rho_rho_rho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_ndrho_rho_rho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho_rho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho_ndrho(i)%array => dummy
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(1)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(2)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(1)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(2)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho(1)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho(2)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho(1)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho(2)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho(1)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho(2)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho(1)%array)
./xc/xc_xbecke88_long_range.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho(2)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhoa)(rhoa)(rhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho(1)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhob)(rhob)(rhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho(2)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhoa)(norm_drhoa)(rhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho(1)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhob)(norm_drhob)(rhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho(2)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhoa)(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho(1)%array)
./xc/xc_xbecke88_long_range.F:                                         "(norm_drhob)(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_long_range.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho(2)%array)
./xc/xc_xbecke88_long_range.F:!$OMP                 SHARED(rho, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_xbecke88_long_range.F:!$OMP                 SHARED(e_rho_rho, e_ndrho_rho, e_ndrho_ndrho) &
./xc/xc_xbecke88_long_range.F:!$OMP                 SHARED(e_rho_rho_rho, e_ndrho_rho_rho) &
./xc/xc_xbecke88_long_range.F:!$OMP                 SHARED(e_ndrho_ndrho_rho, e_ndrho_ndrho_ndrho) &
./xc/xc_xbecke88_long_range.F:!$OMP                 SHARED(grad_deriv, npoints, epsilon_rho, sx, omega) &
./xc/xc_xbecke88_long_range.F:            rho_spin=rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            norm_drho_spin=norm_drho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_rho_spin=e_rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_ndrho_spin=e_ndrho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_rho_rho_spin=e_rho_rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_ndrho_rho_spin=e_ndrho_rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_ndrho_ndrho_spin=e_ndrho_ndrho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_rho_rho_rho_spin=e_rho_rho_rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_ndrho_rho_rho_spin=e_ndrho_rho_rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_ndrho_ndrho_rho_spin=e_ndrho_ndrho_rho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            e_ndrho_ndrho_ndrho_spin=e_ndrho_ndrho_ndrho(ispin)%array, &
./xc/xc_xbecke88_long_range.F:            epsilon_rho=epsilon_rho, &
./xc/xc_xbecke88_long_range.F:!> \param rho_spin alpha or beta spin density
./xc/xc_xbecke88_long_range.F:!> \param norm_drho_spin || grad rho_spin ||
./xc/xc_xbecke88_long_range.F:!> \param e_rho_spin e_*_spin derivative of the functional wrt. to the variables
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_rho_rho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_rho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_ndrho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_rho_rho_rho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_rho_rho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_ndrho_rho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param e_ndrho_ndrho_ndrho_spin ...
./xc/xc_xbecke88_long_range.F:!> \param epsilon_rho ...
./xc/xc_xbecke88_long_range.F:   SUBROUTINE xb88_lr_lsd_calc(rho_spin, norm_drho_spin, e_0, &
./xc/xc_xbecke88_long_range.F:                               e_rho_spin, e_ndrho_spin, e_rho_rho_spin, e_ndrho_rho_spin, &
./xc/xc_xbecke88_long_range.F:                               e_ndrho_ndrho_spin, e_rho_rho_rho_spin, e_ndrho_rho_rho_spin, &
./xc/xc_xbecke88_long_range.F:                               e_ndrho_ndrho_rho_spin, &
./xc/xc_xbecke88_long_range.F:                               e_ndrho_ndrho_ndrho_spin, grad_deriv, npoints, epsilon_rho, sx, &
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rho_spin, norm_drho_spin
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), DIMENSION(*), INTENT(inout) :: e_0, e_rho_spin, e_ndrho_spin, e_rho_rho_spin, &
./xc/xc_xbecke88_long_range.F:         e_ndrho_rho_spin, e_ndrho_ndrho_spin, e_rho_rho_rho_spin, e_ndrho_rho_rho_spin, &
./xc/xc_xbecke88_long_range.F:         e_ndrho_ndrho_rho_spin, e_ndrho_ndrho_ndrho_spin
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, omega
./xc/xc_xbecke88_long_range.F:      REAL(kind=dp) :: Cx, epsilon_rho43, my_epsilon_rho, ndrho, rho, t1, t10, t100, t1002, t1009, &
./xc/xc_xbecke88_long_range.F:      my_epsilon_rho = 0.5_dp*epsilon_rho
./xc/xc_xbecke88_long_range.F:      epsilon_rho43 = my_epsilon_rho**(4.0_dp/3.0_dp)
./xc/xc_xbecke88_long_range.F:         rho = rho_spin(ii)
./xc/xc_xbecke88_long_range.F:         ndrho = norm_drho_spin(ii)
./xc/xc_xbecke88_long_range.F:         IF (rho > my_epsilon_rho) THEN
./xc/xc_xbecke88_long_range.F:               t1 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke88_long_range.F:               t2 = t1*rho
./xc/xc_xbecke88_long_range.F:               xx = ndrho*MAX(t3, epsilon_rho43)
./xc/xc_xbecke88_long_range.F:               t5 = ndrho**2
./xc/xc_xbecke88_long_range.F:               t7 = rho**2
./xc/xc_xbecke88_long_range.F:               t11 = beta*ndrho
./xc/xc_xbecke88_long_range.F:               t24 = rho*t23
./xc/xc_xbecke88_long_range.F:               t68 = rho*t22*omega
./xc/xc_xbecke88_long_range.F:               t69 = t7*rho
./xc/xc_xbecke88_long_range.F:               t140 = t8*rho
./xc/xc_xbecke88_long_range.F:               e_rho_spin(ii) = e_rho_spin(ii)+(-0.2222222224e0_dp*t64*t60-0.3333333336e0_dp*t68*t95- &
./xc/xc_xbecke88_long_range.F:               e_ndrho_spin(ii) = e_ndrho_spin(ii)+(-0.3333333336e0_dp*t68*t173-0.2222222224e0_dp*t24*t98 &
./xc/xc_xbecke88_long_range.F:               t211 = rho*t29*omega
./xc/xc_xbecke88_long_range.F:               e_rho_rho_spin(ii) = e_rho_rho_spin(ii)+(-0.6666666672e0_dp*t36*t95-0.4444444448e0_dp*t64*t207- &
./xc/xc_xbecke88_long_range.F:               t393 = beta*t5*ndrho
./xc/xc_xbecke88_long_range.F:               t478 = 0.1e1_dp/rho
./xc/xc_xbecke88_long_range.F:               e_ndrho_rho_spin(ii) = e_ndrho_rho_spin(ii)+(-0.3333333336e0_dp*t36*t173-0.2222222224e0_dp*t64*t365- &
./xc/xc_xbecke88_long_range.F:               t519 = t219*rho
./xc/xc_xbecke88_long_range.F:               t590 = -0.2700000000e2_dp*t537*t539*rho*t501*t103+0.4500000000e1_dp &
./xc/xc_xbecke88_long_range.F:               e_ndrho_ndrho_spin(ii) = e_ndrho_ndrho_spin(ii)+(-0.1666666668e0_dp*t211*t502-0.6666666672e0_dp*t68*t505 &
./xc/xc_xbecke88_long_range.F:               t605 = rho*t104*omega
./xc/xc_xbecke88_long_range.F:               e_rho_rho_rho_spin(ii) = e_rho_rho_rho_spin(ii)+t846*sx
./xc/xc_xbecke88_long_range.F:                              *t244*ndrho/t657/t7*t669)
./xc/xc_xbecke88_long_range.F:               e_ndrho_rho_rho_spin(ii) = e_ndrho_rho_rho_spin(ii)+t1146*sx
./xc/xc_xbecke88_long_range.F:                                *t397-0.2400000000e2_dp*t245/t657/rho*t669)
./xc/xc_xbecke88_long_range.F:               e_ndrho_ndrho_rho_spin(ii) = e_ndrho_ndrho_rho_spin(ii)+t1404*sx
./xc/xc_xbecke88_long_range.F:                                                         *t250*ndrho+0.180e2_dp*t393/t657*t669)
./xc/xc_xbecke88_long_range.F:               t1553 = 0.1350000000e3_dp*t537/t22/t572*rho*t1456-0.8100000000e2_dp &
./xc/xc_xbecke88_long_range.F:                       *t534*t536*t539*rho*t172*t103*t529-0.2430000000e3_dp &
./xc/xc_xbecke88_long_range.F:               e_ndrho_ndrho_ndrho_spin(ii) = e_ndrho_ndrho_ndrho_spin(ii)+(0.8333333340e-1_dp*t605*t60*t1405- &
./xc/xc_ke_gga.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_ke_gga.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_ke_gga.F:                                              xc_rho_set_type
./xc/xc_ke_gga.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_ke_gga.F:      eps_rho = cutoff
./xc/xc_ke_gga.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_ke_gga.F:            reference = "J.P.Perdew, K.Burke, M.Ernzerhof, Phys. Rev. Letter, 77, 3865 (1996)"
./xc/xc_ke_gga.F:            shortform = "Perdew-Burke-Ernzerhof Functional (kinetic energy)"
./xc/xc_ke_gga.F:            needs%rho_spin = .TRUE.
./xc/xc_ke_gga.F:            needs%rho_spin_1_3 = .TRUE.
./xc/xc_ke_gga.F:            needs%norm_drho_spin = .TRUE.
./xc/xc_ke_gga.F:            needs%rho = .TRUE.
./xc/xc_ke_gga.F:            needs%rho_1_3 = .TRUE.
./xc/xc_ke_gga.F:            needs%norm_drho = .TRUE.
./xc/xc_ke_gga.F:!> \param rho_set ...
./xc/xc_ke_gga.F:   SUBROUTINE ke_gga_lda_eval(functional, rho_set, deriv_set, order)
./xc/xc_ke_gga.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_ke_gga.F:      REAL(KIND=dp)                                      :: drho_cutoff, rho_cutoff
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_ke_gga.F:         e_ndrho_ndrho_ndrho, e_rho, e_rho_ndrho, e_rho_ndrho_ndrho, e_rho_rho, e_rho_rho_ndrho, &
./xc/xc_ke_gga.F:         e_rho_rho_rho, grho, rho, rho13
./xc/xc_ke_gga.F:      NULLIFY (bo, rho, rho13, e_0, e_rho, e_ndrho, &
./xc/xc_ke_gga.F:               e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_ke_gga.F:               e_rho_rho_rho, e_rho_rho_ndrho, e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho)
./xc/xc_ke_gga.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_ke_gga.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_ke_gga.F:      CALL xc_rho_set_get(rho_set, rho_1_3=rho13, rho=rho, &
./xc/xc_ke_gga.F:                          norm_drho=grho, local_bounds=bo, rho_cutoff=rho_cutoff, &
./xc/xc_ke_gga.F:                          drho_cutoff=drho_cutoff)
./xc/xc_ke_gga.F:      CALL ke_gga_init(rho_cutoff)
./xc/xc_ke_gga.F:!      s = norm_drho/(rho^(4/3)*2*(pi*pi*3)^(1/3))
./xc/xc_ke_gga.F:      CALL calc_wave_vector("p", rho, grho, s)
./xc/xc_ke_gga.F:         CALL kex_p_0(rho, rho13, fs, e_0, npoints)
./xc/xc_ke_gga.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_ke_gga.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_ke_gga.F:         CALL kex_p_1(rho, rho13, s, fs, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_ke_gga.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_ke_gga.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(norm_drho)", &
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_ke_gga.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_ke_gga.F:         CALL kex_p_2(rho, rho13, s, fs, e_rho_rho=e_rho_rho, &
./xc/xc_ke_gga.F:                      e_rho_ndrho=e_rho_ndrho, e_ndrho_ndrho=e_ndrho_ndrho, npoints=npoints)
./xc/xc_ke_gga.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_ke_gga.F:                                         "(rho)(rho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_ke_gga.F:                                         "(rho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_ke_gga.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_ke_gga.F:         CALL kex_p_3(rho, rho13, s, fs, e_rho_rho_rho=e_rho_rho_rho, &
./xc/xc_ke_gga.F:                      e_rho_rho_ndrho=e_rho_rho_ndrho, e_rho_ndrho_ndrho=e_rho_ndrho_ndrho, &
./xc/xc_ke_gga.F:                      e_ndrho_ndrho_ndrho=e_ndrho_ndrho_ndrho, npoints=npoints)
./xc/xc_ke_gga.F:!> \param rho_set ...
./xc/xc_ke_gga.F:   SUBROUTINE ke_gga_lsd_eval(functional, rho_set, deriv_set, order)
./xc/xc_ke_gga.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_ke_gga.F:         norm_drho_spin_name = (/"(norm_drhoa)", "(norm_drhob)"/)
./xc/xc_ke_gga.F:      CHARACTER(len=6), DIMENSION(2), PARAMETER :: rho_spin_name = (/"(rhoa)", "(rhob)"/)
./xc/xc_ke_gga.F:      REAL(KIND=dp)                                      :: rho_cutoff
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_ke_gga.F:         e_ndrho_ndrho_ndrho, e_rho, e_rho_ndrho, e_rho_ndrho_ndrho, e_rho_rho, e_rho_rho_ndrho, &
./xc/xc_ke_gga.F:         e_rho_rho_rho
./xc/xc_ke_gga.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: norm_drho, rho, rho_1_3
./xc/xc_ke_gga.F:      NULLIFY (e_0, e_ndrho, e_ndrho_ndrho, e_ndrho_ndrho_ndrho, e_rho_ndrho_ndrho, &
./xc/xc_ke_gga.F:               e_rho_ndrho, e_rho_rho_ndrho, e_rho, e_rho_rho, e_rho_rho_rho)
./xc/xc_ke_gga.F:         NULLIFY (norm_drho(ispin)%array, rho(ispin)%array, rho_1_3(ispin)%array)
./xc/xc_ke_gga.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_ke_gga.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_ke_gga.F:      CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_ke_gga.F:                          rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_ke_gga.F:                          rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_ke_gga.F:                          norm_drhob=norm_drho(2)%array, rho_cutoff=rho_cutoff, &
./xc/xc_ke_gga.F:      CALL ke_gga_init(rho_cutoff)
./xc/xc_ke_gga.F:         CALL calc_wave_vector("p", rho(ispin)%array, norm_drho(ispin)%array, s)
./xc/xc_ke_gga.F:            CALL kex_p_0(rho(ispin)%array, rho_1_3(ispin)%array, fs, &
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin), &
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin), &
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_ke_gga.F:            CALL kex_p_1(rho=rho(ispin)%array, &
./xc/xc_ke_gga.F:                         r13=rho_1_3(ispin)%array, s=s, fs=fs, e_rho=e_rho, &
./xc/xc_ke_gga.F:                         e_ndrho=e_ndrho, npoints=npoints)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            rho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            norm_drho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            norm_drho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_ke_gga.F:            CALL kex_p_2(rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_ke_gga.F:                         s, fs, e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, npoints)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            rho_spin_name(ispin)//rho_spin_name(ispin), &
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            rho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            norm_drho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_ke_gga.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin)// &
./xc/xc_ke_gga.F:                                            norm_drho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_ke_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_ke_gga.F:            CALL kex_p_3(rho(ispin)%array, &
./xc/xc_ke_gga.F:                         rho_1_3(ispin)%array, s, fs, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_ke_gga.F:                         e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, npoints)
./xc/xc_ke_gga.F:!> \param rho ...
./xc/xc_ke_gga.F:   SUBROUTINE kex_p_0(rho, r13, fs, e_0, npoints)
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_ke_gga.F:!$OMP                 SHARED(npoints, rho, e_0, fact, r13, fs, eps_rho) &
./xc/xc_ke_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_ke_gga.F:            e_0(ip) = e_0(ip)+fact*r13(ip)*r13(ip)*rho(ip)*fs(ip, 1)
./xc/xc_ke_gga.F:!> \param rho ...
./xc/xc_ke_gga.F:!> \param e_rho ...
./xc/xc_ke_gga.F:!> \param e_ndrho ...
./xc/xc_ke_gga.F:   SUBROUTINE kex_p_1(rho, r13, s, fs, e_rho, e_ndrho, npoints)
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho, e_ndrho
./xc/xc_ke_gga.F:!$OMP                 SHARED(npoints, rho, eps_rho, fact, r13, sfac, tact) &
./xc/xc_ke_gga.F:!$OMP                 SHARED(fs, e_rho, e_ndrho, s) &
./xc/xc_ke_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_ke_gga.F:            a0 = fact*r13(ip)*r13(ip)*rho(ip)
./xc/xc_ke_gga.F:            sx = -f43*s(ip)/rho(ip)
./xc/xc_ke_gga.F:            sy = sfac*tact/(r13(ip)*rho(ip))
./xc/xc_ke_gga.F:            e_rho(ip) = e_rho(ip)+a1*fs(ip, 1)+a0*fs(ip, 2)*sx
./xc/xc_ke_gga.F:            e_ndrho(ip) = e_ndrho(ip)+a0*fs(ip, 2)*sy
./xc/xc_ke_gga.F:!> \param rho ...
./xc/xc_ke_gga.F:!> \param e_rho_rho ...
./xc/xc_ke_gga.F:!> \param e_rho_ndrho ...
./xc/xc_ke_gga.F:!> \param e_ndrho_ndrho ...
./xc/xc_ke_gga.F:   SUBROUTINE kex_p_2(rho, r13, s, fs, e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho, e_rho_ndrho, e_ndrho_ndrho
./xc/xc_ke_gga.F:!$OMP                 SHARED (npoints, rho, eps_rho, fact, r13) &
./xc/xc_ke_gga.F:!$OMP                 SHARED (e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, fs) &
./xc/xc_ke_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_ke_gga.F:            a0 = fact*r13(ip)*r13(ip)*rho(ip)
./xc/xc_ke_gga.F:            sx = -f43*s(ip)/rho(ip)
./xc/xc_ke_gga.F:            sy = sfac*tact/(r13(ip)*rho(ip))
./xc/xc_ke_gga.F:            sxx = 28.0_dp/9.0_dp*s(ip)/(rho(ip)*rho(ip))
./xc/xc_ke_gga.F:            sxy = -f43*sfac*tact/(r13(ip)*rho(ip)*rho(ip))
./xc/xc_ke_gga.F:            e_rho_rho(ip) = e_rho_rho(ip)+a2*fs(ip, 1)+2.0_dp*a1*fs(ip, 2)*sx+ &
./xc/xc_ke_gga.F:            e_rho_ndrho(ip) = e_rho_ndrho(ip)+a1*fs(ip, 2)*sy+a0*fs(ip, 3)*sx*sy+ &
./xc/xc_ke_gga.F:            e_ndrho_ndrho(ip) = e_ndrho_ndrho(ip)+a0*fs(ip, 3)*sy*sy
./xc/xc_ke_gga.F:!> \param rho ...
./xc/xc_ke_gga.F:!> \param e_rho_rho_rho ...
./xc/xc_ke_gga.F:!> \param e_rho_rho_ndrho ...
./xc/xc_ke_gga.F:!> \param e_rho_ndrho_ndrho ...
./xc/xc_ke_gga.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_ke_gga.F:   SUBROUTINE kex_p_3(rho, r13, s, fs, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_ke_gga.F:                      e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, npoints)
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_ke_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(inout)         :: e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_ke_gga.F:                                                            e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho
./xc/xc_ke_gga.F:!$OMP                 SHARED(npoints, rho, eps_rho, fact, r13) &
./xc/xc_ke_gga.F:!$OMP                 SHARED(s, sfac, tact, fs, e_rho_rho_rho) &
./xc/xc_ke_gga.F:!$OMP                 SHARED(e_rho_rho_ndrho, e_rho_ndrho_ndrho) &
./xc/xc_ke_gga.F:!$OMP                 SHARED(e_ndrho_ndrho_ndrho) &
./xc/xc_ke_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_ke_gga.F:            a0 = fact*r13(ip)*r13(ip)*rho(ip)
./xc/xc_ke_gga.F:            a3 = -f13*f23*f53*fact/(r13(ip)*rho(ip))
./xc/xc_ke_gga.F:            sx = -f43*s(ip)/rho(ip)
./xc/xc_ke_gga.F:            sy = sfac*tact/(r13(ip)*rho(ip))
./xc/xc_ke_gga.F:            sxx = 28.0_dp/9.0_dp*s(ip)/(rho(ip)*rho(ip))
./xc/xc_ke_gga.F:            sxy = -f43*sfac*tact/(r13(ip)*rho(ip)*rho(ip))
./xc/xc_ke_gga.F:            sxxx = -280.0_dp/27.0_dp*s(ip)/(rho(ip)*rho(ip)*rho(ip))
./xc/xc_ke_gga.F:            sxxy = 28.0_dp/9.0_dp*sfac*tact/(r13(ip)*rho(ip)*rho(ip)*rho(ip))
./xc/xc_ke_gga.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip)+a3*fs(ip, 1)+3.0_dp*a2*fs(ip, 2)*sx+ &
./xc/xc_ke_gga.F:            e_rho_rho_ndrho(ip) = e_rho_rho_ndrho(ip)+a2*fs(ip, 2)*sy+2.0_dp*a1*fs(ip, 3)*sx*sy+ &
./xc/xc_ke_gga.F:            e_rho_ndrho_ndrho(ip) = e_rho_ndrho_ndrho(ip)+a1*fs(ip, 3)*sy*sy+a0*fs(ip, 4)*sx*sy*sy+ &
./xc/xc_ke_gga.F:            e_ndrho_ndrho_ndrho(ip) = e_ndrho_ndrho_ndrho(ip)+a0*fs(ip, 4)*sy*sy*sy
./xc/xc_rho_set_types.F:MODULE xc_rho_set_types
./xc/xc_rho_set_types.F:        xc_rho_nn10, xc_rho_nn50, xc_rho_no_smooth, xc_rho_spline2_smooth, xc_rho_spline3_smooth
./xc/xc_rho_set_types.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_equal,&
./xc/xc_rho_set_types.F:                                              xc_rho_cflags_setall,&
./xc/xc_rho_set_types.F:                                              xc_rho_cflags_type
./xc/xc_rho_set_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'xc_rho_set_types'
./xc/xc_rho_set_types.F:   INTEGER, SAVE :: last_rho_set_id = 0
./xc/xc_rho_set_types.F:   PUBLIC :: xc_rho_set_type
./xc/xc_rho_set_types.F:   PUBLIC :: xc_rho_set_create, xc_rho_set_release, &
./xc/xc_rho_set_types.F:             xc_rho_set_update, xc_rho_set_get
./xc/xc_rho_set_types.F:!> \param rho the density
./xc/xc_rho_set_types.F:!> \param drho the gradient of the density (x,y and z direction)
./xc/xc_rho_set_types.F:!> \param norm_drho the norm of the gradient of the density
./xc/xc_rho_set_types.F:!> \param rhoa , rhob: spin alpha and beta parts of the density in the LSD case
./xc/xc_rho_set_types.F:!> \param drhoa , drhob: gradient of the spin alpha and beta parts of the density
./xc/xc_rho_set_types.F:!> \param norm_drhoa , norm_drhob: norm of the gradient of rhoa and rhob
./xc/xc_rho_set_types.F:!> \param drhoa_drhob the scalar product between the gradient of rhoa and the
./xc/xc_rho_set_types.F:!>        one of rhob
./xc/xc_rho_set_types.F:!> \param rho_ 1_3: rho^(1.0_dp/3.0_dp)
./xc/xc_rho_set_types.F:!> \param rhoa_ 1_3, rhob_1_3: rhoa^(1.0_dp/3.0_dp), rhob^(1.0_dp/3.0_dp)
./xc/xc_rho_set_types.F:!> \param tau the kinetic (KohnSham) part of rho
./xc/xc_rho_set_types.F:!> \param tau_a the kinetic (KohnSham) part of rhoa
./xc/xc_rho_set_types.F:!> \param tau_b the kinetic (KohnSham) part of rhob
./xc/xc_rho_set_types.F:   TYPE xc_rho_set_type
./xc/xc_rho_set_types.F:      REAL(kind=dp) :: rho_cutoff, drho_cutoff, tau_cutoff
./xc/xc_rho_set_types.F:      TYPE(xc_rho_cflags_type) :: owns, has
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: rho
./xc/xc_rho_set_types.F:      TYPE(cp_3d_r_p_type), DIMENSION(3)         :: drho
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: norm_drho
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: rho_1_3
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: rhoa, rhob
./xc/xc_rho_set_types.F:      TYPE(cp_3d_r_p_type), DIMENSION(3)         :: drhoa, drhob
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: norm_drhoa, norm_drhob
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: drhoa_drhob
./xc/xc_rho_set_types.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: rhoa_1_3, rhob_1_3
./xc/xc_rho_set_types.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: laplace_rho, laplace_rhoa, laplace_rhob
./xc/xc_rho_set_types.F:   END TYPE xc_rho_set_type
./xc/xc_rho_set_types.F:!> \brief allocates and does (minimal) initialization of a rho_set
./xc/xc_rho_set_types.F:!> \param rho_set the structure to allocate
./xc/xc_rho_set_types.F:!> \param rho_cutoff ...
./xc/xc_rho_set_types.F:!> \param drho_cutoff ...
./xc/xc_rho_set_types.F:   SUBROUTINE xc_rho_set_create(rho_set, local_bounds, rho_cutoff, drho_cutoff, &
./xc/xc_rho_set_types.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_rho_set_types.F:      REAL(kind=dp), INTENT(in), OPTIONAL                :: rho_cutoff, drho_cutoff, tau_cutoff
./xc/xc_rho_set_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_create', &
./xc/xc_rho_set_types.F:      CPASSERT(.NOT. ASSOCIATED(rho_set))
./xc/xc_rho_set_types.F:      ALLOCATE (rho_set)
./xc/xc_rho_set_types.F:      rho_set%ref_count = 1
./xc/xc_rho_set_types.F:      last_rho_set_id = last_rho_set_id+1
./xc/xc_rho_set_types.F:      rho_set%id_nr = last_rho_set_id
./xc/xc_rho_set_types.F:      rho_set%rho_cutoff = EPSILON(0.0_dp)
./xc/xc_rho_set_types.F:      IF (PRESENT(rho_cutoff)) rho_set%rho_cutoff = rho_cutoff
./xc/xc_rho_set_types.F:      rho_set%drho_cutoff = EPSILON(0.0_dp)
./xc/xc_rho_set_types.F:      IF (PRESENT(drho_cutoff)) rho_set%drho_cutoff = drho_cutoff
./xc/xc_rho_set_types.F:      rho_set%tau_cutoff = EPSILON(0.0_dp)
./xc/xc_rho_set_types.F:      IF (PRESENT(tau_cutoff)) rho_set%tau_cutoff = tau_cutoff
./xc/xc_rho_set_types.F:      rho_set%local_bounds = local_bounds
./xc/xc_rho_set_types.F:      CALL xc_rho_cflags_setall(rho_set%owns, .TRUE.)
./xc/xc_rho_set_types.F:      CALL xc_rho_cflags_setall(rho_set%has, .FALSE.)
./xc/xc_rho_set_types.F:      NULLIFY (rho_set%rho)
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%drho(i)%array)
./xc/xc_rho_set_types.F:      NULLIFY (rho_set%rho_1_3)
./xc/xc_rho_set_types.F:      NULLIFY (rho_set%norm_drho, rho_set%rhoa, rho_set%rhob)
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%drhoa(i)%array, rho_set%drhob(i)%array)
./xc/xc_rho_set_types.F:      NULLIFY (rho_set%norm_drhoa, rho_set%norm_drhob, &
./xc/xc_rho_set_types.F:               rho_set%drhoa_drhob, rho_set%rhoa_1_3, rho_set%rhob_1_3, &
./xc/xc_rho_set_types.F:               rho_set%tau, rho_set%tau_a, rho_set%tau_b, rho_set%laplace_rho, rho_set%laplace_rhoa, &
./xc/xc_rho_set_types.F:               rho_set%laplace_rhob)
./xc/xc_rho_set_types.F:   END SUBROUTINE xc_rho_set_create
./xc/xc_rho_set_types.F:!> \brief retains the given rho_set
./xc/xc_rho_set_types.F:!> \param rho_set the object to retain
./xc/xc_rho_set_types.F:   SUBROUTINE xc_rho_set_retain(rho_set)
./xc/xc_rho_set_types.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_rho_set_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_retain', &
./xc/xc_rho_set_types.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_rho_set_types.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_rho_set_types.F:      rho_set%ref_count = rho_set%ref_count+1
./xc/xc_rho_set_types.F:   END SUBROUTINE xc_rho_set_retain
./xc/xc_rho_set_types.F:!> \brief releases the given rho_set
./xc/xc_rho_set_types.F:!> \param rho_set the structure to release
./xc/xc_rho_set_types.F:   SUBROUTINE xc_rho_set_release(rho_set, pw_pool)
./xc/xc_rho_set_types.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_rho_set_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_release', &
./xc/xc_rho_set_types.F:      IF (ASSOCIATED(rho_set)) THEN
./xc/xc_rho_set_types.F:         CPASSERT(rho_set%ref_count > 0)
./xc/xc_rho_set_types.F:         rho_set%ref_count = rho_set%ref_count-1
./xc/xc_rho_set_types.F:         IF (rho_set%ref_count == 0) THEN
./xc/xc_rho_set_types.F:                  rho_set%ref_count = 1
./xc/xc_rho_set_types.F:                  CALL xc_rho_set_clean(rho_set, pw_pool)
./xc/xc_rho_set_types.F:                  rho_set%ref_count = 0
./xc/xc_rho_set_types.F:            rho_set%local_bounds(1, :) = -HUGE(0) ! we want to crash...
./xc/xc_rho_set_types.F:            rho_set%local_bounds(1, :) = HUGE(0)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%rho .AND. ASSOCIATED(rho_set%rho)) THEN
./xc/xc_rho_set_types.F:               DEALLOCATE (rho_set%rho)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%rho_spin) THEN
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%rhoa)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%rhoa)
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%rhob)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%rhob)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%rho_1_3 .AND. ASSOCIATED(rho_set%rho_1_3)) THEN
./xc/xc_rho_set_types.F:               DEALLOCATE (rho_set%rho_1_3)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%rho_spin) THEN
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%rhoa_1_3)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%rhoa_1_3)
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%rhob_1_3)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%rhob_1_3)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%drho) THEN
./xc/xc_rho_set_types.F:                  IF (ASSOCIATED(rho_set%drho(i)%array)) THEN
./xc/xc_rho_set_types.F:                     DEALLOCATE (rho_set%drho(i)%array)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%drho_spin) THEN
./xc/xc_rho_set_types.F:                  IF (ASSOCIATED(rho_set%drhoa(i)%array)) THEN
./xc/xc_rho_set_types.F:                     DEALLOCATE (rho_set%drhoa(i)%array)
./xc/xc_rho_set_types.F:                  IF (ASSOCIATED(rho_set%drhob(i)%array)) THEN
./xc/xc_rho_set_types.F:                     DEALLOCATE (rho_set%drhob(i)%array)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%laplace_rho .AND. ASSOCIATED(rho_set%laplace_rho)) THEN
./xc/xc_rho_set_types.F:               DEALLOCATE (rho_set%laplace_rho)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%norm_drho .AND. ASSOCIATED(rho_set%norm_drho)) THEN
./xc/xc_rho_set_types.F:               DEALLOCATE (rho_set%norm_drho)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%laplace_rho_spin) THEN
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%laplace_rhoa)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%laplace_rhoa)
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%laplace_rhob)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%laplace_rhob)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%norm_drho_spin) THEN
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%norm_drhoa)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%norm_drhoa)
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%norm_drhob)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%norm_drhob)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%drhoa_drhob .AND. ASSOCIATED(rho_set%drhoa_drhob)) THEN
./xc/xc_rho_set_types.F:               DEALLOCATE (rho_set%drhoa_drhob)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%tau .AND. ASSOCIATED(rho_set%tau)) THEN
./xc/xc_rho_set_types.F:               DEALLOCATE (rho_set%tau)
./xc/xc_rho_set_types.F:            IF (rho_set%owns%tau_spin) THEN
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%tau_a)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%tau_a)
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_set%tau_b)) THEN
./xc/xc_rho_set_types.F:                  DEALLOCATE (rho_set%tau_b)
./xc/xc_rho_set_types.F:            DEALLOCATE (rho_set)
./xc/xc_rho_set_types.F:      NULLIFY (rho_set)
./xc/xc_rho_set_types.F:   END SUBROUTINE xc_rho_set_release
./xc/xc_rho_set_types.F:!> \brief returns the various attributes of rho_set
./xc/xc_rho_set_types.F:!> \param rho_set the object you whant info about
./xc/xc_rho_set_types.F:!> \param rho ...
./xc/xc_rho_set_types.F:!> \param drho ...
./xc/xc_rho_set_types.F:!> \param norm_drho ...
./xc/xc_rho_set_types.F:!> \param rhoa ...
./xc/xc_rho_set_types.F:!> \param rhob ...
./xc/xc_rho_set_types.F:!> \param norm_drhoa ...
./xc/xc_rho_set_types.F:!> \param norm_drhob ...
./xc/xc_rho_set_types.F:!> \param drhoa_drhob ...
./xc/xc_rho_set_types.F:!> \param rho_1_3 ...
./xc/xc_rho_set_types.F:!> \param rhoa_1_3 ...
./xc/xc_rho_set_types.F:!> \param rhob_1_3 ...
./xc/xc_rho_set_types.F:!> \param laplace_rho ...
./xc/xc_rho_set_types.F:!> \param laplace_rhoa ...
./xc/xc_rho_set_types.F:!> \param laplace_rhob ...
./xc/xc_rho_set_types.F:!> \param drhoa ...
./xc/xc_rho_set_types.F:!> \param drhob ...
./xc/xc_rho_set_types.F:!> \param rho_cutoff ...
./xc/xc_rho_set_types.F:!> \param drho_cutoff ...
./xc/xc_rho_set_types.F:   SUBROUTINE xc_rho_set_get(rho_set, can_return_null, rho, drho, norm_drho, &
./xc/xc_rho_set_types.F:                             rhoa, rhob, norm_drhoa, norm_drhob, drhoa_drhob, rho_1_3, rhoa_1_3, &
./xc/xc_rho_set_types.F:                             rhob_1_3, laplace_rho, laplace_rhoa, laplace_rhob, drhoa, drhob, rho_cutoff, &
./xc/xc_rho_set_types.F:                             drho_cutoff, tau_cutoff, tau, tau_a, tau_b, local_bounds)
./xc/xc_rho_set_types.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_rho_set_types.F:         POINTER                                         :: rho
./xc/xc_rho_set_types.F:         POINTER                                         :: drho
./xc/xc_rho_set_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), OPTIONAL, POINTER :: norm_drho, rhoa, rhob, norm_drhoa, &
./xc/xc_rho_set_types.F:         norm_drhob, drhoa_drhob, rho_1_3, rhoa_1_3, rhob_1_3, laplace_rho, laplace_rhoa, &
./xc/xc_rho_set_types.F:         laplace_rhob
./xc/xc_rho_set_types.F:         POINTER                                         :: drhoa, drhob
./xc/xc_rho_set_types.F:      REAL(kind=dp), INTENT(out), OPTIONAL               :: rho_cutoff, drho_cutoff, tau_cutoff
./xc/xc_rho_set_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_get', routineP = moduleN//':'//routineN
./xc/xc_rho_set_types.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_rho_set_types.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_rho_set_types.F:      IF (PRESENT(rho)) THEN
./xc/xc_rho_set_types.F:         rho => rho_set%rho
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(rho))
./xc/xc_rho_set_types.F:      IF (PRESENT(drho)) THEN
./xc/xc_rho_set_types.F:         drho => rho_set%drho
./xc/xc_rho_set_types.F:               CPASSERT(ASSOCIATED(rho_set%drho(i)%array))
./xc/xc_rho_set_types.F:      IF (PRESENT(norm_drho)) THEN
./xc/xc_rho_set_types.F:         norm_drho => rho_set%norm_drho
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(norm_drho))
./xc/xc_rho_set_types.F:      IF (PRESENT(laplace_rho)) THEN
./xc/xc_rho_set_types.F:         laplace_rho => rho_set%laplace_rho
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(laplace_rho))
./xc/xc_rho_set_types.F:      IF (PRESENT(rhoa)) THEN
./xc/xc_rho_set_types.F:         rhoa => rho_set%rhoa
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(rhoa))
./xc/xc_rho_set_types.F:      IF (PRESENT(rhob)) THEN
./xc/xc_rho_set_types.F:         rhob => rho_set%rhob
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(rhob))
./xc/xc_rho_set_types.F:      IF (PRESENT(drhoa)) THEN
./xc/xc_rho_set_types.F:         drhoa => rho_set%drhoa
./xc/xc_rho_set_types.F:               CPASSERT(ASSOCIATED(rho_set%drhoa(i)%array))
./xc/xc_rho_set_types.F:      IF (PRESENT(drhob)) THEN
./xc/xc_rho_set_types.F:         drhob => rho_set%drhob
./xc/xc_rho_set_types.F:               CPASSERT(ASSOCIATED(rho_set%drhob(i)%array))
./xc/xc_rho_set_types.F:      IF (PRESENT(laplace_rhoa)) THEN
./xc/xc_rho_set_types.F:         laplace_rhoa => rho_set%laplace_rhoa
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(laplace_rhoa))
./xc/xc_rho_set_types.F:      IF (PRESENT(laplace_rhob)) THEN
./xc/xc_rho_set_types.F:         laplace_rhob => rho_set%laplace_rhob
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(laplace_rhob))
./xc/xc_rho_set_types.F:      IF (PRESENT(norm_drhoa)) THEN
./xc/xc_rho_set_types.F:         norm_drhoa => rho_set%norm_drhoa
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(norm_drhoa))
./xc/xc_rho_set_types.F:      IF (PRESENT(norm_drhob)) THEN
./xc/xc_rho_set_types.F:         norm_drhob => rho_set%norm_drhob
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(norm_drhob))
./xc/xc_rho_set_types.F:      IF (PRESENT(drhoa_drhob)) THEN
./xc/xc_rho_set_types.F:         drhoa_drhob => rho_set%drhoa_drhob
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(drhoa_drhob))
./xc/xc_rho_set_types.F:      IF (PRESENT(rho_1_3)) THEN
./xc/xc_rho_set_types.F:         rho_1_3 => rho_set%rho_1_3
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(rho_1_3))
./xc/xc_rho_set_types.F:      IF (PRESENT(rhoa_1_3)) THEN
./xc/xc_rho_set_types.F:         rhoa_1_3 => rho_set%rhoa_1_3
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(rhoa_1_3))
./xc/xc_rho_set_types.F:      IF (PRESENT(rhob_1_3)) THEN
./xc/xc_rho_set_types.F:         rhob_1_3 => rho_set%rhob_1_3
./xc/xc_rho_set_types.F:         CPASSERT(my_can_return_null .OR. ASSOCIATED(rhob_1_3))
./xc/xc_rho_set_types.F:         tau => rho_set%tau
./xc/xc_rho_set_types.F:         tau_a => rho_set%tau_a
./xc/xc_rho_set_types.F:         tau_b => rho_set%tau_b
./xc/xc_rho_set_types.F:      IF (PRESENT(rho_cutoff)) rho_cutoff = rho_set%rho_cutoff
./xc/xc_rho_set_types.F:      IF (PRESENT(drho_cutoff)) drho_cutoff = rho_set%drho_cutoff
./xc/xc_rho_set_types.F:      IF (PRESENT(tau_cutoff)) tau_cutoff = rho_set%tau_cutoff
./xc/xc_rho_set_types.F:      IF (PRESENT(local_bounds)) local_bounds => rho_set%local_bounds
./xc/xc_rho_set_types.F:   END SUBROUTINE xc_rho_set_get
./xc/xc_rho_set_types.F:!> \brief cleans (releases) most of the data stored in the rho_set giving back
./xc/xc_rho_set_types.F:!> \param rho_set the rho_set to be cleaned
./xc/xc_rho_set_types.F:   SUBROUTINE xc_rho_set_clean(rho_set, pw_pool)
./xc/xc_rho_set_types.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_rho_set_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_clean', &
./xc/xc_rho_set_types.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_rho_set_types.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%rho) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%rho, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%rho)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%rho_1_3) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%rho_1_3, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%rho_1_3)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%drho) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_give_back_cr3d(pw_pool, rho_set%drho(idir)%array, &
./xc/xc_rho_set_types.F:            NULLIFY (rho_set%drho(idir)%array)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%norm_drho) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%norm_drho, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%norm_drho)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%laplace_rho) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%laplace_rho, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%laplace_rho)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%tau) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%tau, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%tau)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%rho_spin) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%rhoa, &
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%rhob, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%rhoa, rho_set%rhob)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%rho_spin_1_3) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%rhoa_1_3, &
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%rhob_1_3, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%rhoa_1_3, rho_set%rhob_1_3)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%drho_spin) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_give_back_cr3d(pw_pool, rho_set%drhoa(idir)%array, &
./xc/xc_rho_set_types.F:            CALL pw_pool_give_back_cr3d(pw_pool, rho_set%drhob(idir)%array, &
./xc/xc_rho_set_types.F:            NULLIFY (rho_set%drhoa(idir)%array, rho_set%drhob(idir)%array)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%laplace_rho_spin) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%laplace_rhoa, &
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%laplace_rhob, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%laplace_rhoa, rho_set%laplace_rhob)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%norm_drho_spin) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%norm_drhoa, &
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%norm_drhob, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%norm_drhoa, rho_set%norm_drhob)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%drhoa_drhob) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%drhoa_drhob, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%drhoa_drhob)
./xc/xc_rho_set_types.F:      IF (rho_set%owns%tau_spin) THEN
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%tau_a, &
./xc/xc_rho_set_types.F:         CALL pw_pool_give_back_cr3d(pw_pool, rho_set%tau_b, &
./xc/xc_rho_set_types.F:         NULLIFY (rho_set%tau_a, rho_set%tau_b)
./xc/xc_rho_set_types.F:      CALL xc_rho_cflags_setall(rho_set%has, .FALSE.)
./xc/xc_rho_set_types.F:      CALL xc_rho_cflags_setall(rho_set%owns, .FALSE.)
./xc/xc_rho_set_types.F:   END SUBROUTINE xc_rho_set_clean
./xc/xc_rho_set_types.F:!> \brief updates the given rho set with the density given by
./xc/xc_rho_set_types.F:!>      rho_r (and rho_g). The rho set will contain the components specified
./xc/xc_rho_set_types.F:!> \param rho_set the rho_set to update
./xc/xc_rho_set_types.F:!> \param rho_r the new density (in r space)
./xc/xc_rho_set_types.F:!> \param rho_g the new density (in g space, needed for some
./xc/xc_rho_set_types.F:!> \param needs the components of rho that are needed
./xc/xc_rho_set_types.F:!> \param xc_rho_smooth_id ...
./xc/xc_rho_set_types.F:   SUBROUTINE xc_rho_set_update(rho_set, rho_r, rho_g, tau, needs, &
./xc/xc_rho_set_types.F:                                xc_deriv_method_id, xc_rho_smooth_id, pw_pool)
./xc/xc_rho_set_types.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_rho_set_types.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, rho_g, tau
./xc/xc_rho_set_types.F:      TYPE(xc_rho_cflags_type), INTENT(in)               :: needs
./xc/xc_rho_set_types.F:      INTEGER, INTENT(IN)                                :: xc_deriv_method_id, xc_rho_smooth_id
./xc/xc_rho_set_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_update', &
./xc/xc_rho_set_types.F:      LOGICAL                                            :: gradient_f, my_rho_g_local, &
./xc/xc_rho_set_types.F:                                                            my_rho_r_local, needs_laplace, &
./xc/xc_rho_set_types.F:                                                            needs_rho_g
./xc/xc_rho_set_types.F:      REAL(kind=dp)                                      :: rho_cutoff
./xc/xc_rho_set_types.F:      TYPE(pw_p_type), DIMENSION(2)                      :: my_rho_r
./xc/xc_rho_set_types.F:      TYPE(pw_p_type), DIMENSION(3)                      :: drho_r_att
./xc/xc_rho_set_types.F:      TYPE(pw_p_type), DIMENSION(3, 2)                   :: drho_r, laplace_rho_r
./xc/xc_rho_set_types.F:      TYPE(pw_type), POINTER                             :: my_rho_g, tmp_g
./xc/xc_rho_set_types.F:         NULLIFY (my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:            NULLIFY (drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:         NULLIFY (drho_r_att(idir)%pw)
./xc/xc_rho_set_types.F:      NULLIFY (tmp_g, my_rho_g)
./xc/xc_rho_set_types.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_rho_set_types.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_rho_set_types.F:      IF (ANY(rho_set%local_bounds /= pw_pool%pw_grid%bounds_local)) &
./xc/xc_rho_set_types.F:      nspins = SIZE(rho_r)
./xc/xc_rho_set_types.F:      rho_set%local_bounds = rho_r(1)%pw%pw_grid%bounds_local
./xc/xc_rho_set_types.F:      rho_cutoff = 0.5*rho_set%rho_cutoff
./xc/xc_rho_set_types.F:      my_rho_g_local = .FALSE.
./xc/xc_rho_set_types.F:         CPASSERT(SIZE(rho_r) == 1)
./xc/xc_rho_set_types.F:         CPASSERT(ASSOCIATED(rho_r(1)%pw))
./xc/xc_rho_set_types.F:         CPASSERT(rho_r(1)%pw%in_use == REALDATA3D)
./xc/xc_rho_set_types.F:         CPASSERT(.NOT. needs%rho_spin)
./xc/xc_rho_set_types.F:         CPASSERT(.NOT. needs%drho_spin)
./xc/xc_rho_set_types.F:         CPASSERT(.NOT. needs%norm_drho_spin)
./xc/xc_rho_set_types.F:         CPASSERT(.NOT. needs%drhoa_drhob)
./xc/xc_rho_set_types.F:         CPASSERT(.NOT. needs%rho_spin_1_3)
./xc/xc_rho_set_types.F:         CPASSERT(SIZE(rho_r) == 2)
./xc/xc_rho_set_types.F:         CPASSERT(ASSOCIATED(rho_r(1)%pw))
./xc/xc_rho_set_types.F:         CPASSERT(ASSOCIATED(rho_r(2)%pw))
./xc/xc_rho_set_types.F:         CPASSERT(rho_r(1)%pw%in_use == REALDATA3D)
./xc/xc_rho_set_types.F:         CPASSERT(rho_r(2)%pw%in_use == REALDATA3D)
./xc/xc_rho_set_types.F:      CALL xc_rho_set_clean(rho_set, pw_pool=pw_pool)
./xc/xc_rho_set_types.F:      needs_laplace = (needs%laplace_rho .OR. needs%laplace_rho_spin)
./xc/xc_rho_set_types.F:      gradient_f = (needs%drho_spin .OR. needs%norm_drho_spin .OR. &
./xc/xc_rho_set_types.F:                    needs%drhoa_drhob .OR. needs%drho .OR. needs%norm_drho .OR. &
./xc/xc_rho_set_types.F:      needs_rho_g = (xc_deriv_method_id == xc_deriv_spline3 .OR. &
./xc/xc_rho_set_types.F:         IF (xc_rho_smooth_id == xc_rho_no_smooth) THEN
./xc/xc_rho_set_types.F:            my_rho_r_local = .FALSE.
./xc/xc_rho_set_types.F:            my_rho_r(ispin)%pw => rho_r(ispin)%pw
./xc/xc_rho_set_types.F:            IF (needs_rho_g) THEN
./xc/xc_rho_set_types.F:               IF (ASSOCIATED(rho_g)) THEN
./xc/xc_rho_set_types.F:                  my_rho_g_local = .FALSE.
./xc/xc_rho_set_types.F:                  my_rho_g => rho_g(ispin)%pw
./xc/xc_rho_set_types.F:            my_rho_r_local = .TRUE.
./xc/xc_rho_set_types.F:            CALL pw_pool_create_pw(pw_pool, my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:            CALL pw_copy(rho_r(ispin)%pw, my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:            my_rho_r_local = .TRUE.
./xc/xc_rho_set_types.F:            CALL pw_pool_create_pw(pw_pool, my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:            SELECT CASE (xc_rho_smooth_id)
./xc/xc_rho_set_types.F:            CASE (xc_rho_no_smooth)
./xc/xc_rho_set_types.F:               CALL pw_copy(rho_r(ispin)%pw, my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:            CASE (xc_rho_spline2_smooth)
./xc/xc_rho_set_types.F:               CALL pw_zero(my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:               CALL pw_nn_smear_r(pw_in=rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                  pw_out=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:            CASE (xc_rho_spline3_smooth)
./xc/xc_rho_set_types.F:               CALL pw_zero(my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:               CALL pw_nn_smear_r(pw_in=rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                  pw_out=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:            CASE (xc_rho_nn10)
./xc/xc_rho_set_types.F:               CALL pw_zero(my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:               CALL pw_nn_smear_r(pw_in=rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                  pw_out=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:            CASE (xc_rho_nn50)
./xc/xc_rho_set_types.F:               CALL pw_zero(my_rho_r(ispin)%pw)
./xc/xc_rho_set_types.F:               CALL pw_nn_smear_r(pw_in=rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                  pw_out=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:         IF (gradient_f) THEN ! calculate the grad of rho
./xc/xc_rho_set_types.F:            ! deriv rho
./xc/xc_rho_set_types.F:               NULLIFY (drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:               CALL pw_pool_create_pw(pw_pool, drho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:            IF (needs_rho_g) THEN
./xc/xc_rho_set_types.F:               IF (.NOT. ASSOCIATED(my_rho_g)) THEN
./xc/xc_rho_set_types.F:                  my_rho_g_local = .TRUE.
./xc/xc_rho_set_types.F:                  CALL pw_pool_create_pw(pw_pool, my_rho_g, &
./xc/xc_rho_set_types.F:                  CALL pw_transfer(my_rho_r(ispin)%pw, my_rho_g)
./xc/xc_rho_set_types.F:                     CALL pw_copy(my_rho_g, tmp_g)
./xc/xc_rho_set_types.F:                     CALL pw_transfer(tmp_g, drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                  IF (needs%laplace_rho .OR. needs%laplace_rho_spin) THEN
./xc/xc_rho_set_types.F:                        NULLIFY (laplace_rho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                        CALL pw_pool_create_pw(pw_pool, laplace_rho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:                        CALL pw_copy(my_rho_g, tmp_g)
./xc/xc_rho_set_types.F:                        CALL pw_transfer(tmp_g, laplace_rho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                  IF (.NOT. my_rho_g_local) THEN
./xc/xc_rho_set_types.F:                     CALL pw_pool_create_pw(pw_pool, my_rho_g, &
./xc/xc_rho_set_types.F:                     my_rho_g_local = .TRUE.
./xc/xc_rho_set_types.F:                     CALL pw_copy(rho_g(ispin)%pw, my_rho_g)
./xc/xc_rho_set_types.F:                  CALL pw_spline2_interpolate_values_g(my_rho_g)
./xc/xc_rho_set_types.F:                     CALL pw_copy(my_rho_g, tmp_g)
./xc/xc_rho_set_types.F:                     CALL pw_transfer(tmp_g, drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                  IF (.NOT. my_rho_g_local) THEN
./xc/xc_rho_set_types.F:                     CALL pw_pool_create_pw(pw_pool, my_rho_g, &
./xc/xc_rho_set_types.F:                     CALL pw_copy(rho_g(ispin)%pw, my_rho_g)
./xc/xc_rho_set_types.F:                     my_rho_g_local = .TRUE.
./xc/xc_rho_set_types.F:                  CALL pw_spline3_interpolate_values_g(my_rho_g)
./xc/xc_rho_set_types.F:                     CALL pw_copy(my_rho_g, tmp_g)
./xc/xc_rho_set_types.F:                     CALL pw_transfer(tmp_g, drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                     CALL pw_copy(my_rho_g, tmp_g)
./xc/xc_rho_set_types.F:                     CALL pw_transfer(tmp_g, drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                  CPABORT("Drho collocation not implemented")
./xc/xc_rho_set_types.F:               IF (my_rho_g_local) THEN
./xc/xc_rho_set_types.F:                  my_rho_g_local = .FALSE.
./xc/xc_rho_set_types.F:                  CALL pw_pool_give_back_pw(pw_pool, my_rho_g)
./xc/xc_rho_set_types.F:                     CALL pw_zero(drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                     CALL pw_nn_deriv_r(pw_in=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                        pw_out=drho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:                     CALL pw_zero(drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                     CALL pw_nn_deriv_r(pw_in=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                        pw_out=drho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:                     CALL pw_zero(drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                     CALL pw_nn_deriv_r(pw_in=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                        pw_out=drho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:                     CALL pw_zero(drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                     CALL pw_nn_deriv_r(pw_in=my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:                                        pw_out=drho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:                     CALL pw_copy(my_rho_g, tmp_g)
./xc/xc_rho_set_types.F:                     CALL pw_transfer(tmp_g, drho_r(idir, ispin)%pw)
./xc/xc_rho_set_types.F:                  CPABORT("Drho collocation not implemented")
./xc/xc_rho_set_types.F:                  drho_r_att(idir)%pw => drho_r(idir, ispin)%pw
./xc/xc_rho_set_types.F:               CALL pw_spline_scale_deriv(drho_r_att)
./xc/xc_rho_set_types.F:         IF (needs%rho_1_3) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%rho_1_3)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,my_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%rho_1_3(i, j, k) = MAX(my_rho_r(1)%pw%cr3d(i, j, k), 0.0_dp)**f13
./xc/xc_rho_set_types.F:            rho_set%owns%rho_1_3 = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%rho_1_3 = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%rho) THEN
./xc/xc_rho_set_types.F:            rho_set%rho => my_rho_r(1)%pw%cr3d
./xc/xc_rho_set_types.F:            IF (my_rho_r_local) NULLIFY (my_rho_r(1)%pw%cr3d)
./xc/xc_rho_set_types.F:            rho_set%owns%rho = my_rho_r_local
./xc/xc_rho_set_types.F:            rho_set%has%rho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%norm_drho) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%norm_drho)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,drho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%norm_drho(i, j, k) = SQRT( &
./xc/xc_rho_set_types.F:                                                  drho_r(1, 1)%pw%cr3d(i, j, k)**2+ &
./xc/xc_rho_set_types.F:                                                  drho_r(2, 1)%pw%cr3d(i, j, k)**2+ &
./xc/xc_rho_set_types.F:                                                  drho_r(3, 1)%pw%cr3d(i, j, k)**2)
./xc/xc_rho_set_types.F:            rho_set%owns%norm_drho = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%norm_drho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%laplace_rho) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%laplace_rho)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,laplace_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%laplace_rho(i, j, k) = &
./xc/xc_rho_set_types.F:                        laplace_rho_r(1, 1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        laplace_rho_r(2, 1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        laplace_rho_r(3, 1)%pw%cr3d(i, j, k)
./xc/xc_rho_set_types.F:            rho_set%owns%laplace_rho = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%laplace_rho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%drho) THEN
./xc/xc_rho_set_types.F:               rho_set%drho(idir)%array => drho_r(idir, 1)%pw%cr3d
./xc/xc_rho_set_types.F:               NULLIFY (drho_r(idir, 1)%pw%cr3d)
./xc/xc_rho_set_types.F:            rho_set%owns%drho = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%drho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%rho) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%rho)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,my_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%rho(i, j, k) = my_rho_r(1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                                            my_rho_r(2)%pw%cr3d(i, j, k)
./xc/xc_rho_set_types.F:            rho_set%owns%rho = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%rho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%rho_1_3) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%rho_1_3)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,my_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%rho_1_3(i, j, k) = MAX(my_rho_r(1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                                                    my_rho_r(2)%pw%cr3d(i, j, k), 0.0_dp)**f13
./xc/xc_rho_set_types.F:            rho_set%owns%rho_1_3 = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%rho_1_3 = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%rho_spin_1_3) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%rhoa_1_3)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,my_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%rhoa_1_3(i, j, k) = MAX(my_rho_r(1)%pw%cr3d(i, j, k), 0.0_dp)**f13
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%rhob_1_3)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,my_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%rhob_1_3(i, j, k) = MAX(my_rho_r(2)%pw%cr3d(i, j, k), 0.0_dp)**f13
./xc/xc_rho_set_types.F:            rho_set%owns%rho_spin_1_3 = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%rho_spin_1_3 = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%rho_spin) THEN
./xc/xc_rho_set_types.F:            rho_set%rhoa => my_rho_r(1)%pw%cr3d
./xc/xc_rho_set_types.F:            IF (my_rho_r_local) NULLIFY (my_rho_r(1)%pw%cr3d)
./xc/xc_rho_set_types.F:            rho_set%rhob => my_rho_r(2)%pw%cr3d
./xc/xc_rho_set_types.F:            IF (my_rho_r_local) NULLIFY (my_rho_r(2)%pw%cr3d)
./xc/xc_rho_set_types.F:            rho_set%owns%rho_spin = my_rho_r_local
./xc/xc_rho_set_types.F:            rho_set%has%rho_spin = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%norm_drho) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%norm_drho)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,drho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%norm_drho(i, j, k) = SQRT( &
./xc/xc_rho_set_types.F:                                                  (drho_r(1, 1)%pw%cr3d(i, j, k)+drho_r(1, 2)%pw%cr3d(i, j, k))**2+ &
./xc/xc_rho_set_types.F:                                                  (drho_r(2, 1)%pw%cr3d(i, j, k)+drho_r(2, 2)%pw%cr3d(i, j, k))**2+ &
./xc/xc_rho_set_types.F:                                                  (drho_r(3, 1)%pw%cr3d(i, j, k)+drho_r(3, 2)%pw%cr3d(i, j, k))**2)
./xc/xc_rho_set_types.F:            rho_set%owns%norm_drho = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%norm_drho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%norm_drho_spin) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%norm_drhoa)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,drho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%norm_drhoa(i, j, k) = SQRT( &
./xc/xc_rho_set_types.F:                                                   drho_r(1, 1)%pw%cr3d(i, j, k)**2+ &
./xc/xc_rho_set_types.F:                                                   drho_r(2, 1)%pw%cr3d(i, j, k)**2+ &
./xc/xc_rho_set_types.F:                                                   drho_r(3, 1)%pw%cr3d(i, j, k)**2)
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%norm_drhob)
./xc/xc_rho_set_types.F:            rho_set%owns%norm_drho_spin = .TRUE.
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,drho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%norm_drhob(i, j, k) = SQRT( &
./xc/xc_rho_set_types.F:                                                   drho_r(1, 2)%pw%cr3d(i, j, k)**2+ &
./xc/xc_rho_set_types.F:                                                   drho_r(2, 2)%pw%cr3d(i, j, k)**2+ &
./xc/xc_rho_set_types.F:                                                   drho_r(3, 2)%pw%cr3d(i, j, k)**2)
./xc/xc_rho_set_types.F:            rho_set%owns%norm_drho_spin = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%norm_drho_spin = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%laplace_rho_spin) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%laplace_rhoa)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,laplace_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%laplace_rhoa(i, j, k) = &
./xc/xc_rho_set_types.F:                        laplace_rho_r(1, 1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        laplace_rho_r(2, 1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        laplace_rho_r(3, 1)%pw%cr3d(i, j, k)
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%laplace_rhob)
./xc/xc_rho_set_types.F:            rho_set%owns%laplace_rho_spin = .TRUE.
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,laplace_rho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%laplace_rhob(i, j, k) = &
./xc/xc_rho_set_types.F:                        laplace_rho_r(1, 2)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        laplace_rho_r(2, 2)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        laplace_rho_r(3, 2)%pw%cr3d(i, j, k)
./xc/xc_rho_set_types.F:            rho_set%owns%laplace_rho_spin = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%laplace_rho_spin = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%drhoa_drhob) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%drhoa_drhob)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,drho_r)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%drhoa_drhob(i, j, k) = &
./xc/xc_rho_set_types.F:                        drho_r(1, 1)%pw%cr3d(i, j, k)*drho_r(1, 2)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        drho_r(2, 1)%pw%cr3d(i, j, k)*drho_r(2, 2)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                        drho_r(3, 1)%pw%cr3d(i, j, k)*drho_r(3, 2)%pw%cr3d(i, j, k)
./xc/xc_rho_set_types.F:            rho_set%owns%drhoa_drhob = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%drhoa_drhob = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%drho) THEN
./xc/xc_rho_set_types.F:               CALL pw_pool_create_cr3d(pw_pool, rho_set%drho(idir)%array)
./xc/xc_rho_set_types.F:!$OMP              PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,drho_r,idir)
./xc/xc_rho_set_types.F:               DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:                  DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                     DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                        rho_set%drho(idir)%array(i, j, k) = &
./xc/xc_rho_set_types.F:                           drho_r(idir, 1)%pw%cr3d(i, j, k)+ &
./xc/xc_rho_set_types.F:                           drho_r(idir, 2)%pw%cr3d(i, j, k)
./xc/xc_rho_set_types.F:            rho_set%owns%drho = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%drho = .TRUE.
./xc/xc_rho_set_types.F:         IF (needs%drho_spin) THEN
./xc/xc_rho_set_types.F:               rho_set%drhoa(idir)%array => drho_r(idir, 1)%pw%cr3d
./xc/xc_rho_set_types.F:               NULLIFY (drho_r(idir, 1)%pw%cr3d)
./xc/xc_rho_set_types.F:               rho_set%drhob(idir)%array => drho_r(idir, 2)%pw%cr3d
./xc/xc_rho_set_types.F:               NULLIFY (drho_r(idir, 2)%pw%cr3d)
./xc/xc_rho_set_types.F:            rho_set%owns%drho_spin = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%has%drho_spin = .TRUE.
./xc/xc_rho_set_types.F:            IF (needs%laplace_rho .OR. needs%laplace_rho_spin) THEN
./xc/xc_rho_set_types.F:               CALL pw_pool_give_back_pw(pw_pool, laplace_rho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:            CALL pw_pool_give_back_pw(pw_pool, drho_r(idir, ispin)%pw, &
./xc/xc_rho_set_types.F:      IF (my_rho_r_local) THEN
./xc/xc_rho_set_types.F:            CALL pw_pool_give_back_pw(pw_pool, my_rho_r(ispin)%pw, &
./xc/xc_rho_set_types.F:            CALL pw_pool_create_cr3d(pw_pool, rho_set%tau)
./xc/xc_rho_set_types.F:!$OMP           PARALLEL DO DEFAULT(NONE) PRIVATE(i,j,k) SHARED(rho_set,tau)
./xc/xc_rho_set_types.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_rho_set_types.F:               DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_rho_set_types.F:                  DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_rho_set_types.F:                     rho_set%tau(i, j, k) = &
./xc/xc_rho_set_types.F:            rho_set%owns%tau = .TRUE.
./xc/xc_rho_set_types.F:            rho_set%tau => tau(1)%pw%cr3d
./xc/xc_rho_set_types.F:            rho_set%owns%tau = .FALSE.
./xc/xc_rho_set_types.F:         rho_set%has%tau = .TRUE.
./xc/xc_rho_set_types.F:         rho_set%tau_a => tau(1)%pw%cr3d
./xc/xc_rho_set_types.F:         rho_set%tau_b => tau(2)%pw%cr3d
./xc/xc_rho_set_types.F:         rho_set%owns%tau_spin = .FALSE.
./xc/xc_rho_set_types.F:         rho_set%has%tau_spin = .TRUE.
./xc/xc_rho_set_types.F:      CPASSERT(xc_rho_cflags_equal(rho_set%has, needs))
./xc/xc_rho_set_types.F:   END SUBROUTINE xc_rho_set_update
./xc/xc_rho_set_types.F:END MODULE xc_rho_set_types
./xc/xc_derivative_desc.F:!>      "(rho)(rho)(rhoa)" which means that it is a forth order
./xc/xc_derivative_desc.F:!>      derivative, twice with respect to rho, once with respect to rhoa
./xc/xc_derivative_desc.F:!>      and once with respect to drhoa.
./xc/xc_derivative_desc.F:!>      - rho: total density
./xc/xc_derivative_desc.F:!>      - norm_drho: norm of the gradient of the total density
./xc/xc_derivative_desc.F:!>      - rhoa, rhob: alpha and beta spin density (with LSD)
./xc/xc_derivative_desc.F:!>      - norm_drhoa, norm_drhob: norm of the gradient of the alpha and beta
./xc/xc_derivative_desc.F:!>      - drhoa_drhob: scalar product between the gradient of rhoa and the
./xc/xc_derivative_desc.F:!>        grandient of rhob
./xc/xc_derivative_desc.F:!>       add drhox, drhoy, drhoz, drhoax,...?
./xc/xc_derivatives.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_setall,&
./xc/xc_derivatives.F:                                              xc_rho_cflags_type
./xc/xc_derivatives.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_derivatives.F:                                              xc_rho_set_type
./xc/xc_derivatives.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_derivatives.F:!> \param rho_set a rho set where all the arguments needed by this functional
./xc/xc_derivatives.F:   SUBROUTINE xc_functional_eval(functional, lsd, rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_derivatives.F:      CALL xc_rho_set_get(rho_set, rho_cutoff=density_cut, &
./xc/xc_derivatives.F:                          drho_cutoff=gradient_cut)
./xc/xc_derivatives.F:            CALL b97_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL b97_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xb88_lr_adiabatic_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xb88_lr_adiabatic_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL lyp_adiabatic_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL lyp_adiabatic_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xb88_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xb88_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xbeef_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xbeef_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xb88_lr_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xb88_lr_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL lyp_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL lyp_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL pade_lsd_pw_eval(deriv_set, rho_set, deriv_order)
./xc/xc_derivatives.F:            CALL pade_lda_pw_eval(deriv_set, rho_set, deriv_order)
./xc/xc_derivatives.F:         CALL hcth_lda_eval(i_param, rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL optx_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL optx_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL libxc_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL libxc_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL cs1_lsd_eval(rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL cs1_lda_eval(rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:         CALL xgga_eval(i_param, lsd, rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL ke_gga_lsd_eval(i_param, rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL ke_gga_lda_eval(i_param, rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:         CALL p86_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL perdew_wang_lsd_eval(i_param, rho_set, deriv_set, deriv_order, &
./xc/xc_derivatives.F:            CALL perdew_wang_lda_eval(i_param, rho_set, deriv_set, deriv_order, &
./xc/xc_derivatives.F:            CALL pz_lsd_eval(i_param, rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL pz_lda_eval(i_param, rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL tfw_lsd_eval(rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL tfw_lda_eval(rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL thomas_fermi_lsd_eval(rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL thomas_fermi_lda_eval(rho_set, deriv_set, deriv_order)
./xc/xc_derivatives.F:            CALL vwn_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL vwn_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xalpha_lsd_eval(rho_set, deriv_set, deriv_order, &
./xc/xc_derivatives.F:            CALL xalpha_lda_eval(rho_set, deriv_set, deriv_order, &
./xc/xc_derivatives.F:            CALL tpss_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL tpss_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL pbe_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL pbe_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xwpbe_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xwpbe_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xbecke_roussel_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xbecke_roussel_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xlda_hole_t_c_lr_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xlda_hole_t_c_lr_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xpbe_hole_t_c_lr_lsd_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xpbe_hole_t_c_lr_lda_eval(rho_set, deriv_set, deriv_order, functional)
./xc/xc_derivatives.F:            CALL xbr_pbe_lda_hole_tc_lr_lsd_eval(rho_set, deriv_set, deriv_order, &
./xc/xc_derivatives.F:            CALL xbr_pbe_lda_hole_tc_lr_lda_eval(rho_set, deriv_set, deriv_order, &
./xc/xc_derivatives.F:!> \param rho_set a rho set where all the arguments needed by this functional
./xc/xc_derivatives.F:   SUBROUTINE xc_functionals_eval(functionals, lsd, rho_set, deriv_set, &
./xc/xc_derivatives.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_derivatives.F:                                    rho_set=rho_set, &
./xc/xc_derivatives.F:                                       rho_set=rho_set, &
./xc/xc_derivatives.F:!>        is true rho_spin is requested. Defaults to false.
./xc/xc_derivatives.F:      TYPE(xc_rho_cflags_type)                           :: needs
./xc/xc_derivatives.F:      CALL xc_rho_cflags_setall(needs, .FALSE.)
./xc/xc_derivatives.F:            needs%rho_spin = .TRUE.
./xc/xc_derivatives.F:            needs%rho = .TRUE.
./xc/xc_derivatives.F:         IF (needs%drho .OR. needs%drho_spin .OR. needs%norm_drho .OR. &
./xc/xc_derivatives.F:             needs%norm_drho_spin .OR. needs%drhoa_drhob) THEN
./xc/xc_derivatives.F:               needs%drho_spin = .TRUE.
./xc/xc_derivatives.F:               needs%drho = .TRUE.
./xc/xc_derivative_types.F:!>        "(rho)(rho)(norm_drhoa)")
./xc/xc_derivative_types.F:!>        example would become (/"rho","rho","norm_drhoa"/)
./xc/xc_libxc.F:!>      ordering for the 1st index of v2lapltau, v2rholapl, v2rhotau,
./xc/xc_libxc.F:   USE xc_rho_cflags_types, ONLY: xc_rho_cflags_type
./xc/xc_libxc.F:   USE xc_rho_set_types, ONLY: xc_rho_set_get, &
./xc/xc_libxc.F:      xc_rho_set_type
./xc/xc_libxc.F:      TYPE(xc_rho_cflags_type), &
./xc/xc_libxc.F:            needs%rho = .TRUE.
./xc/xc_libxc.F:            needs%rho = .TRUE.
./xc/xc_libxc.F:            needs%norm_drho = .TRUE.
./xc/xc_libxc.F:            needs%rho = .TRUE.
./xc/xc_libxc.F:            needs%norm_drho = .TRUE.
./xc/xc_libxc.F:            needs%laplace_rho = xc_libxc_wrap_needs_laplace(func_id)
./xc/xc_libxc.F:      TYPE(xc_rho_cflags_type), &
./xc/xc_libxc.F:            needs%rho_spin = .TRUE.
./xc/xc_libxc.F:            needs%rho_spin = .TRUE.
./xc/xc_libxc.F:            needs%norm_drho = .TRUE.
./xc/xc_libxc.F:            needs%norm_drho_spin = .TRUE.
./xc/xc_libxc.F:            needs%rho_spin = .TRUE.
./xc/xc_libxc.F:            needs%norm_drho = .TRUE.
./xc/xc_libxc.F:            needs%norm_drho_spin = .TRUE.
./xc/xc_libxc.F:            needs%laplace_rho_spin = xc_libxc_wrap_needs_laplace(func_id)
./xc/xc_libxc.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_libxc.F:   SUBROUTINE libxc_lda_eval(rho_set, deriv_set, grad_deriv, libxc_params)
./xc/xc_libxc.F:      TYPE(xc_rho_set_type), POINTER           :: rho_set
./xc/xc_libxc.F:      REAL(KIND=dp)                            :: epsilon_rho, epsilon_tau, func_scale
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_laplace_rho, &
./xc/xc_libxc.F:                                                    e_laplace_rho_laplace_rho, e_laplace_rho_tau, e_ndrho, &
./xc/xc_libxc.F:                                                    e_ndrho_laplace_rho, e_ndrho_ndrho, e_ndrho_rho, e_ndrho_tau, e_rho, &
./xc/xc_libxc.F:                                                    e_rho_laplace_rho, e_rho_rho, e_rho_rho_rho, e_rho_tau, e_tau, &
./xc/xc_libxc.F:                                                    e_tau_tau, laplace_rho, norm_drho, rho, tau
./xc/xc_libxc.F:      NULLIFY (rho, norm_drho, laplace_rho, tau)
./xc/xc_libxc.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_libxc.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_libxc.F:      CALL xc_rho_set_get(rho_set, can_return_null=.TRUE., &
./xc/xc_libxc.F:                          rho=rho, norm_drho=norm_drho, laplace_rho=laplace_rho, &
./xc/xc_libxc.F:                          rho_cutoff=epsilon_rho, tau_cutoff=epsilon_tau, &
./xc/xc_libxc.F:      dummy => rho
./xc/xc_libxc.F:      IF (.NOT. ASSOCIATED(norm_drho)) norm_drho => dummy
./xc/xc_libxc.F:      ! all others can work with rho (read-only) as dummy
./xc/xc_libxc.F:      IF (ASSOCIATED(laplace_rho)) has_laplace = .TRUE.
./xc/xc_libxc.F:      IF (.NOT. has_laplace) laplace_rho => dummy
./xc/xc_libxc.F:      e_rho => dummy
./xc/xc_libxc.F:      e_ndrho => dummy
./xc/xc_libxc.F:      e_laplace_rho => dummy
./xc/xc_libxc.F:      e_rho_rho => dummy
./xc/xc_libxc.F:      e_ndrho_rho => dummy
./xc/xc_libxc.F:      e_ndrho_ndrho => dummy
./xc/xc_libxc.F:      e_rho_laplace_rho => dummy
./xc/xc_libxc.F:      e_rho_tau => dummy
./xc/xc_libxc.F:      e_ndrho_laplace_rho => dummy
./xc/xc_libxc.F:      e_ndrho_tau => dummy
./xc/xc_libxc.F:      e_laplace_rho_laplace_rho => dummy
./xc/xc_libxc.F:      e_laplace_rho_tau => dummy
./xc/xc_libxc.F:      e_rho_rho_rho => dummy
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_libxc.F:               deriv => xc_dset_get_derivative(deriv_set, "(laplace_rho)", &
./xc/xc_libxc.F:               CALL xc_derivative_get(deriv, deriv_data=e_laplace_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(norm_drho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rho)(rho)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rho_rho)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(rho)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_rho)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(norm_drho)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_ndrho)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rho)(tau)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rho_tau)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(tau)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_tau)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(rho)(laplace_rho)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_rho_laplace_rho)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_rho)(laplace_rho)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrho_laplace_rho)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rho)(laplace_rho)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rho_laplace_rho)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rho)(tau)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rho_tau)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_libxc.F:!$OMP SHARED(rho,norm_drho,laplace_rho,tau,e_0,e_rho,e_ndrho,e_laplace_rho),&
./xc/xc_libxc.F:!$OMP SHARED(e_tau,e_rho_rho,e_ndrho_rho,e_ndrho_ndrho,e_rho_laplace_rho),&
./xc/xc_libxc.F:!$OMP SHARED(e_rho_tau,e_ndrho_laplace_rho,e_ndrho_tau,e_laplace_rho_laplace_rho),&
./xc/xc_libxc.F:!$OMP SHARED(e_laplace_rho_tau,e_tau_tau,e_rho_rho_rho),&
./xc/xc_libxc.F:!$OMP SHARED(epsilon_rho,epsilon_tau),&
./xc/xc_libxc.F:      CALL libxc_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_libxc.F:                          laplace_rho=laplace_rho, tau=tau, &
./xc/xc_libxc.F:                          e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_laplace_rho=e_laplace_rho, &
./xc/xc_libxc.F:                          e_tau=e_tau, e_rho_rho=e_rho_rho, e_ndrho_rho=e_ndrho_rho, &
./xc/xc_libxc.F:                          e_ndrho_ndrho=e_ndrho_ndrho, e_rho_laplace_rho=e_rho_laplace_rho, &
./xc/xc_libxc.F:                          e_rho_tau=e_rho_tau, e_ndrho_laplace_rho=e_ndrho_laplace_rho, &
./xc/xc_libxc.F:                          e_ndrho_tau=e_ndrho_tau, e_laplace_rho_laplace_rho=e_laplace_rho_laplace_rho, &
./xc/xc_libxc.F:                          e_laplace_rho_tau=e_laplace_rho_tau, e_tau_tau=e_tau_tau, &
./xc/xc_libxc.F:                          e_rho_rho_rho=e_rho_rho_rho, &
./xc/xc_libxc.F:                          epsilon_rho=epsilon_rho, &
./xc/xc_libxc.F:      MARK_USED(rho_set)
./xc/xc_libxc.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_libxc.F:   SUBROUTINE libxc_lsd_eval(rho_set, deriv_set, grad_deriv, libxc_params)
./xc/xc_libxc.F:      TYPE(xc_rho_set_type), POINTER           :: rho_set
./xc/xc_libxc.F:      REAL(KIND=dp)                            :: epsilon_rho, epsilon_tau, func_scale
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_laplace_rhoa, &
./xc/xc_libxc.F:                                                    e_laplace_rhoa_laplace_rhoa, e_laplace_rhoa_laplace_rhob, &
./xc/xc_libxc.F:                                                    e_laplace_rhoa_tau_a, e_laplace_rhoa_tau_b, e_laplace_rhob, &
./xc/xc_libxc.F:                                                    e_laplace_rhob_laplace_rhob, e_laplace_rhob_tau_a, &
./xc/xc_libxc.F:                                                    e_laplace_rhob_tau_b, e_ndrho, e_ndrho_laplace_rhoa, &
./xc/xc_libxc.F:                                                    e_ndrho_laplace_rhob, e_ndrho_ndrho, e_ndrho_ndrhoa, e_ndrho_ndrhob, &
./xc/xc_libxc.F:                                                    e_ndrho_rhoa, e_ndrho_rhob, e_ndrho_tau_a, e_ndrho_tau_b, e_ndrhoa, &
./xc/xc_libxc.F:                                                    e_ndrhoa_laplace_rhoa, e_ndrhoa_laplace_rhob, e_ndrhoa_ndrhoa, &
./xc/xc_libxc.F:                                                    e_ndrhoa_ndrhob, e_ndrhoa_rhoa, e_ndrhoa_rhob, e_ndrhoa_tau_a, &
./xc/xc_libxc.F:                                                    e_ndrhoa_tau_b, e_ndrhob
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_ndrhob_laplace_rhoa, &
./xc/xc_libxc.F:                                                    e_ndrhob_laplace_rhob, e_ndrhob_ndrhob, e_ndrhob_rhoa, e_ndrhob_rhob, &
./xc/xc_libxc.F:                                                    e_ndrhob_tau_a, e_ndrhob_tau_b, e_rhoa, e_rhoa_laplace_rhoa, &
./xc/xc_libxc.F:                                                    e_rhoa_laplace_rhob, e_rhoa_rhoa, e_rhoa_rhoa_rhoa, e_rhoa_rhoa_rhob, &
./xc/xc_libxc.F:                                                    e_rhoa_rhob, e_rhoa_rhob_rhob, e_rhoa_tau_a, e_rhoa_tau_b, e_rhob, &
./xc/xc_libxc.F:                                                    e_rhob_laplace_rhoa, e_rhob_laplace_rhob, e_rhob_rhob, &
./xc/xc_libxc.F:                                                    e_rhob_rhob_rhob, e_rhob_tau_a, e_rhob_tau_b, e_tau_a, e_tau_a_tau_a, &
./xc/xc_libxc.F:                                                    e_tau_a_tau_b, e_tau_b, e_tau_b_tau_b, laplace_rhoa, laplace_rhob, &
./xc/xc_libxc.F:                                                    norm_drho, norm_drhoa, norm_drhob, rhoa, rhob, tau_a, tau_b
./xc/xc_libxc.F:      NULLIFY (rhoa, rhob, norm_drho, norm_drhoa, norm_drhob, laplace_rhoa, &
./xc/xc_libxc.F:               laplace_rhob, tau_a, tau_b)
./xc/xc_libxc.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_libxc.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_libxc.F:      CALL xc_rho_set_get(rho_set, can_return_null=.TRUE., &
./xc/xc_libxc.F:                          rhoa=rhoa, rhob=rhob, norm_drho=norm_drho, &
./xc/xc_libxc.F:                          norm_drhoa=norm_drhoa, norm_drhob=norm_drhob, &
./xc/xc_libxc.F:                          laplace_rhoa=laplace_rhoa, laplace_rhob=laplace_rhob, &
./xc/xc_libxc.F:                          rho_cutoff=epsilon_rho, tau_cutoff=epsilon_tau, &
./xc/xc_libxc.F:      dummy => rhoa
./xc/xc_libxc.F:      IF (.NOT. ASSOCIATED(norm_drho)) norm_drho => dummy
./xc/xc_libxc.F:      IF (.NOT. ASSOCIATED(norm_drhoa)) norm_drhoa => dummy
./xc/xc_libxc.F:      IF (.NOT. ASSOCIATED(norm_drhob)) norm_drhob => dummy
./xc/xc_libxc.F:      ! all others can work with rhoa (read-only) as dummy
./xc/xc_libxc.F:      IF (ASSOCIATED(laplace_rhoa) .AND. ASSOCIATED(laplace_rhob)) has_laplace = .TRUE.
./xc/xc_libxc.F:      IF (.NOT. has_laplace) laplace_rhoa => dummy
./xc/xc_libxc.F:      IF (.NOT. has_laplace) laplace_rhob => dummy
./xc/xc_libxc.F:      e_rhoa => dummy
./xc/xc_libxc.F:      e_rhob => dummy
./xc/xc_libxc.F:      e_ndrho => dummy
./xc/xc_libxc.F:      e_ndrhoa => dummy
./xc/xc_libxc.F:      e_ndrhob => dummy
./xc/xc_libxc.F:      e_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_laplace_rhob => dummy
./xc/xc_libxc.F:      e_rhoa_rhoa => dummy
./xc/xc_libxc.F:      e_rhoa_rhob => dummy
./xc/xc_libxc.F:      e_rhob_rhob => dummy
./xc/xc_libxc.F:      e_ndrho_rhoa => dummy
./xc/xc_libxc.F:      e_ndrho_rhob => dummy
./xc/xc_libxc.F:      e_ndrhoa_rhoa => dummy
./xc/xc_libxc.F:      e_ndrhoa_rhob => dummy
./xc/xc_libxc.F:      e_ndrhob_rhoa => dummy
./xc/xc_libxc.F:      e_ndrhob_rhob => dummy
./xc/xc_libxc.F:      e_ndrho_ndrho => dummy
./xc/xc_libxc.F:      e_ndrho_ndrhoa => dummy
./xc/xc_libxc.F:      e_ndrho_ndrhob => dummy
./xc/xc_libxc.F:      e_ndrhoa_ndrhoa => dummy
./xc/xc_libxc.F:      e_ndrhoa_ndrhob => dummy
./xc/xc_libxc.F:      e_ndrhob_ndrhob => dummy
./xc/xc_libxc.F:      e_rhoa_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_rhoa_laplace_rhob => dummy
./xc/xc_libxc.F:      e_rhob_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_rhob_laplace_rhob => dummy
./xc/xc_libxc.F:      e_rhoa_tau_a => dummy
./xc/xc_libxc.F:      e_rhoa_tau_b => dummy
./xc/xc_libxc.F:      e_rhob_tau_a => dummy
./xc/xc_libxc.F:      e_rhob_tau_b => dummy
./xc/xc_libxc.F:      e_ndrho_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_ndrho_laplace_rhob => dummy
./xc/xc_libxc.F:      e_ndrhoa_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_ndrhoa_laplace_rhob => dummy
./xc/xc_libxc.F:      e_ndrhob_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_ndrhob_laplace_rhob => dummy
./xc/xc_libxc.F:      e_ndrho_tau_a => dummy
./xc/xc_libxc.F:      e_ndrho_tau_b => dummy
./xc/xc_libxc.F:      e_ndrhoa_tau_a => dummy
./xc/xc_libxc.F:      e_ndrhoa_tau_b => dummy
./xc/xc_libxc.F:      e_ndrhob_tau_a => dummy
./xc/xc_libxc.F:      e_ndrhob_tau_b => dummy
./xc/xc_libxc.F:      e_laplace_rhoa_laplace_rhoa => dummy
./xc/xc_libxc.F:      e_laplace_rhoa_laplace_rhob => dummy
./xc/xc_libxc.F:      e_laplace_rhob_laplace_rhob => dummy
./xc/xc_libxc.F:      e_laplace_rhoa_tau_a => dummy
./xc/xc_libxc.F:      e_laplace_rhoa_tau_b => dummy
./xc/xc_libxc.F:      e_laplace_rhob_tau_a => dummy
./xc/xc_libxc.F:      e_laplace_rhob_tau_b => dummy
./xc/xc_libxc.F:      e_rhoa_rhoa_rhoa => dummy
./xc/xc_libxc.F:      e_rhoa_rhoa_rhob => dummy
./xc/xc_libxc.F:      e_rhoa_rhob_rhob => dummy
./xc/xc_libxc.F:      e_rhob_rhob_rhob => dummy
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_libxc.F:               deriv => xc_dset_get_derivative(deriv_set, "(laplace_rhoa)", &
./xc/xc_libxc.F:               CALL xc_derivative_get(deriv, deriv_data=e_laplace_rhoa)
./xc/xc_libxc.F:               deriv => xc_dset_get_derivative(deriv_set, "(laplace_rhob)", &
./xc/xc_libxc.F:               CALL xc_derivative_get(deriv, deriv_data=e_laplace_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhob_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhob_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhob_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhob_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(norm_drho)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(norm_drhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(norm_drhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(norm_drhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa_ndrhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(norm_drhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa_ndrhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(norm_drhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrhob_ndrhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhoa)(rhoa)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhoa_rhoa)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhoa)(rhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhoa_rhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhob)(rhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhob_rhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(rhoa)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_rhoa)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(rhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_rhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(rhoa)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_rhoa)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(rhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_rhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(rhoa)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_rhoa)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(rhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_rhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(norm_drho)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_ndrho)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(norm_drhoa)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_ndrhoa)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(norm_drhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_ndrhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(norm_drhoa)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_ndrhoa)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(norm_drhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_ndrhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(norm_drhob)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_ndrhob)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhoa)(tau_a)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhoa_tau_a)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhoa)(tau_b)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhoa_tau_b)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhob)(tau_a)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhob_tau_a)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(rhob)(tau_b)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_rhob_tau_b)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(tau_a)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_tau_a)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(tau_b)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrho_tau_b)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(tau_a)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_tau_a)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(tau_b)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_tau_b)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(tau_a)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_tau_a)
./xc/xc_libxc.F:            !             deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(tau_b)",&
./xc/xc_libxc.F:            !             CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_tau_b)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(rhoa)(laplace_rhoa)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_rhoa_laplace_rhoa)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(rhoa)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_rhoa_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(rhob)(laplace_rhoa)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_rhob_laplace_rhoa)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(rhob)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_rhob_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(laplace_rhoa)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrho_laplace_rhoa)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_drho)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrho_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(laplace_rhoa)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_laplace_rhoa)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_drhoa)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrhoa_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(laplace_rhoa)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_laplace_rhoa)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(norm_drhob)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_ndrhob_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhoa)(laplace_rhoa)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhoa_laplace_rhoa)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhoa)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhoa_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhob)(laplace_rhob)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhob_laplace_rhob)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhoa)(tau_a)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhoa_tau_a)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhoa)(tau_b)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhoa_tau_b)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhob)(tau_a)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhob_tau_a)
./xc/xc_libxc.F:            !                deriv => xc_dset_get_derivative(deriv_set,"(laplace_rhob)(tau_b)",&
./xc/xc_libxc.F:            !                CALL xc_derivative_get(deriv,deriv_data=e_laplace_rhob_tau_b)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhoa_rhoa)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhoa_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhob_rhob)
./xc/xc_libxc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_libxc.F:            CALL xc_derivative_get(deriv, deriv_data=e_rhob_rhob_rhob)
./xc/xc_libxc.F:!$OMP SHARED(rhoa,rhob,norm_drho,norm_drhoa,norm_drhob),&
./xc/xc_libxc.F:!$OMP SHARED(laplace_rhoa,laplace_rhob,tau_a,tau_b),&
./xc/xc_libxc.F:!$OMP SHARED(e_0,e_rhoa,e_rhob,e_ndrho,e_ndrhoa,e_ndrhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_laplace_rhoa,e_laplace_rhob,e_tau_a,e_tau_b),&
./xc/xc_libxc.F:!$OMP SHARED(e_rhoa_rhoa,e_rhoa_rhob,e_rhob_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrho_rhoa,e_ndrho_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrhoa_rhoa,e_ndrhoa_rhob,e_ndrhob_rhoa,e_ndrhob_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrho_ndrho,e_ndrho_ndrhoa,e_ndrho_ndrhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrhoa_ndrhoa,e_ndrhoa_ndrhob,e_ndrhob_ndrhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_rhoa_laplace_rhoa,e_rhoa_laplace_rhob,e_rhob_laplace_rhoa,e_rhob_laplace_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_rhoa_tau_a,e_rhoa_tau_b,e_rhob_tau_a,e_rhob_tau_b),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrho_laplace_rhoa,e_ndrho_laplace_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrhoa_laplace_rhoa,e_ndrhoa_laplace_rhob,e_ndrhob_laplace_rhoa,e_ndrhob_laplace_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrho_tau_a,e_ndrho_tau_b),&
./xc/xc_libxc.F:!$OMP SHARED(e_ndrhoa_tau_a,e_ndrhoa_tau_b,e_ndrhob_tau_a,e_ndrhob_tau_b),&
./xc/xc_libxc.F:!$OMP SHARED(e_laplace_rhoa_laplace_rhoa,e_laplace_rhoa_laplace_rhob,e_laplace_rhob_laplace_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(e_laplace_rhoa_tau_a,e_laplace_rhoa_tau_b,e_laplace_rhob_tau_a,e_laplace_rhob_tau_b),&
./xc/xc_libxc.F:!$OMP SHARED(e_rhoa_rhoa_rhoa,e_rhoa_rhoa_rhob,e_rhoa_rhob_rhob,e_rhob_rhob_rhob),&
./xc/xc_libxc.F:!$OMP SHARED(epsilon_rho,epsilon_tau),&
./xc/xc_libxc.F:      CALL libxc_lsd_calc(rhoa=rhoa, rhob=rhob, norm_drho=norm_drho, &
./xc/xc_libxc.F:                          norm_drhoa=norm_drhoa, norm_drhob=norm_drhob, laplace_rhoa=laplace_rhoa, &
./xc/xc_libxc.F:                          laplace_rhob=laplace_rhob, tau_a=tau_a, tau_b=tau_b, &
./xc/xc_libxc.F:                          e_0=e_0, e_rhoa=e_rhoa, e_rhob=e_rhob, e_ndrho=e_ndrho, &
./xc/xc_libxc.F:                          e_ndrhoa=e_ndrhoa, e_ndrhob=e_ndrhob, e_laplace_rhoa=e_laplace_rhoa, &
./xc/xc_libxc.F:                          e_laplace_rhob=e_laplace_rhob, e_tau_a=e_tau_a, e_tau_b=e_tau_b, &
./xc/xc_libxc.F:                          e_rhoa_rhoa=e_rhoa_rhoa, e_rhoa_rhob=e_rhoa_rhob, e_rhob_rhob=e_rhob_rhob, &
./xc/xc_libxc.F:                          e_ndrho_rhoa=e_ndrho_rhoa, e_ndrho_rhob=e_ndrho_rhob, &
./xc/xc_libxc.F:                          e_ndrhoa_rhoa=e_ndrhoa_rhoa, e_ndrhoa_rhob=e_ndrhoa_rhob, &
./xc/xc_libxc.F:                          e_ndrhob_rhoa=e_ndrhob_rhoa, e_ndrhob_rhob=e_ndrhob_rhob, &
./xc/xc_libxc.F:                          e_ndrho_ndrho=e_ndrho_ndrho, e_ndrho_ndrhoa=e_ndrho_ndrhoa, &
./xc/xc_libxc.F:                          e_ndrho_ndrhob=e_ndrho_ndrhob, e_ndrhoa_ndrhoa=e_ndrhoa_ndrhoa, &
./xc/xc_libxc.F:                          e_ndrhoa_ndrhob=e_ndrhoa_ndrhob, e_ndrhob_ndrhob=e_ndrhob_ndrhob, &
./xc/xc_libxc.F:                          e_rhoa_laplace_rhoa=e_rhoa_laplace_rhoa, &
./xc/xc_libxc.F:                          e_rhoa_laplace_rhob=e_rhoa_laplace_rhob, &
./xc/xc_libxc.F:                          e_rhob_laplace_rhoa=e_rhob_laplace_rhoa, &
./xc/xc_libxc.F:                          e_rhob_laplace_rhob=e_rhob_laplace_rhob, &
./xc/xc_libxc.F:                          e_rhoa_tau_a=e_rhoa_tau_a, e_rhoa_tau_b=e_rhoa_tau_b, &
./xc/xc_libxc.F:                          e_rhob_tau_a=e_rhob_tau_a, e_rhob_tau_b=e_rhob_tau_b, &
./xc/xc_libxc.F:                          e_ndrho_laplace_rhoa=e_ndrho_laplace_rhoa, &
./xc/xc_libxc.F:                          e_ndrho_laplace_rhob=e_ndrho_laplace_rhob, &
./xc/xc_libxc.F:                          e_ndrhoa_laplace_rhoa=e_ndrhoa_laplace_rhoa, &
./xc/xc_libxc.F:                          e_ndrhoa_laplace_rhob=e_ndrhoa_laplace_rhob, &
./xc/xc_libxc.F:                          e_ndrhob_laplace_rhoa=e_ndrhob_laplace_rhoa, &
./xc/xc_libxc.F:                          e_ndrhob_laplace_rhob=e_ndrhob_laplace_rhob, &
./xc/xc_libxc.F:                          e_ndrho_tau_a=e_ndrho_tau_a, e_ndrho_tau_b=e_ndrho_tau_b, &
./xc/xc_libxc.F:                          e_ndrhoa_tau_a=e_ndrhoa_tau_a, e_ndrhoa_tau_b=e_ndrhoa_tau_b, &
./xc/xc_libxc.F:                          e_ndrhob_tau_a=e_ndrhob_tau_a, e_ndrhob_tau_b=e_ndrhob_tau_b, &
./xc/xc_libxc.F:                          e_laplace_rhoa_laplace_rhoa=e_laplace_rhoa_laplace_rhoa, &
./xc/xc_libxc.F:                          e_laplace_rhoa_laplace_rhob=e_laplace_rhoa_laplace_rhob, &
./xc/xc_libxc.F:                          e_laplace_rhob_laplace_rhob=e_laplace_rhob_laplace_rhob, &
./xc/xc_libxc.F:                          e_laplace_rhoa_tau_a=e_laplace_rhoa_tau_a, &
./xc/xc_libxc.F:                          e_laplace_rhoa_tau_b=e_laplace_rhoa_tau_b, &
./xc/xc_libxc.F:                          e_laplace_rhob_tau_a=e_laplace_rhob_tau_a, &
./xc/xc_libxc.F:                          e_laplace_rhob_tau_b=e_laplace_rhob_tau_b, &
./xc/xc_libxc.F:                          e_rhoa_rhoa_rhoa=e_rhoa_rhoa_rhoa, &
./xc/xc_libxc.F:                          e_rhoa_rhoa_rhob=e_rhoa_rhoa_rhob, &
./xc/xc_libxc.F:                          e_rhoa_rhob_rhob=e_rhoa_rhob_rhob, &
./xc/xc_libxc.F:                          e_rhob_rhob_rhob=e_rhob_rhob_rhob, &
./xc/xc_libxc.F:                          epsilon_rho=epsilon_rho, &
./xc/xc_libxc.F:      MARK_USED(rho_set)
./xc/xc_libxc.F:!> \param rho density
./xc/xc_libxc.F:!> \param norm_drho norm of the gradient of the density
./xc/xc_libxc.F:!> \param laplace_rho laplacian of the density
./xc/xc_libxc.F:!> \param e_rho derivative of the energy density with respect to rho
./xc/xc_libxc.F:!> \param e_ndrho derivative of the energy density with respect to ndrho
./xc/xc_libxc.F:!> \param e_laplace_rho derivative of the energy density with respect to laplace_rho
./xc/xc_libxc.F:!> \param e_rho_rho derivative of the energy density with respect to rho_rho
./xc/xc_libxc.F:!> \param e_ndrho_rho derivative of the energy density with respect to ndrho_rho
./xc/xc_libxc.F:!> \param e_ndrho_ndrho derivative of the energy density with respect to ndrho_ndrho
./xc/xc_libxc.F:!> \param e_rho_laplace_rho derivative of the energy density with respect to rho_laplace_rho
./xc/xc_libxc.F:!> \param e_rho_tau derivative of the energy density with respect to rho_tau
./xc/xc_libxc.F:!> \param e_ndrho_laplace_rho derivative of the energy density with respect to ndrho_laplace_rho
./xc/xc_libxc.F:!> \param e_ndrho_tau derivative of the energy density with respect to ndrho_tau
./xc/xc_libxc.F:!> \param e_laplace_rho_laplace_rho derivative of the energy density with respect to laplace_rho_laplace_rho
./xc/xc_libxc.F:!> \param e_laplace_rho_tau derivative of the energy density with respect to laplace_rho_tau
./xc/xc_libxc.F:!> \param e_rho_rho_rho derivative of the energy density with respect to rho_rho_rho
./xc/xc_libxc.F:!> \param epsilon_rho ...
./xc/xc_libxc.F:   SUBROUTINE libxc_lda_calc(rho, norm_drho, laplace_rho, tau, &
./xc/xc_libxc.F:                             e_0, e_rho, e_ndrho, e_laplace_rho, e_tau, e_rho_rho, e_ndrho_rho, &
./xc/xc_libxc.F:                             e_ndrho_ndrho, e_rho_laplace_rho, e_rho_tau, e_ndrho_laplace_rho, &
./xc/xc_libxc.F:                             e_ndrho_tau, e_laplace_rho_laplace_rho, e_laplace_rho_tau, &
./xc/xc_libxc.F:                             e_tau_tau, e_rho_rho_rho, &
./xc/xc_libxc.F:                             grad_deriv, npoints, epsilon_rho, &
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, norm_drho, laplace_rho, tau
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT) :: e_0, e_rho, e_ndrho, e_laplace_rho, e_tau, &
./xc/xc_libxc.F:         e_rho_rho, e_ndrho_rho, e_ndrho_ndrho, e_rho_laplace_rho, e_rho_tau, e_ndrho_laplace_rho, &
./xc/xc_libxc.F:         e_ndrho_tau, e_laplace_rho_laplace_rho, e_laplace_rho_tau, e_tau_tau, e_rho_rho_rho
./xc/xc_libxc.F:      REAL(KIND=dp), INTENT(in)                          :: epsilon_rho, epsilon_tau
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(1) :: exc, my_tau, sigma, v2lapl2, v2lapltau, v2rho2, v2rholapl, &
./xc/xc_libxc.F:         v2rhosigma, v2rhotau, v2sigma2, v2sigmalapl, v2sigmatau, v2tau2, v3rho3, vlapl, vrho, &
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda_exc(xc_func, 1, rho(ii), exc)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda_vxc(xc_func, 1, rho(ii), vrho)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda_exc_vxc(xc_func, 1, rho(ii), exc, vrho)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda_fxc(xc_func, 1, rho(ii), v2rho2)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda_exc_vxc(xc_func, 1, rho(ii), exc, vrho)
./xc/xc_libxc.F:                  CALL xc_f03_lda_fxc(xc_func, 1, rho(ii), v2rho2)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda_kxc(xc_func, 1, rho(ii), v3rho3)
./xc/xc_libxc.F:                  e_rho_rho_rho(ii) = e_rho_rho_rho(ii)+sc*v3rho3(1)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  CALL xc_f03_lda(xc_func, 1, rho(ii), exc, vrho, v2rho2, v3rho3)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:                  e_rho_rho_rho(ii) = e_rho_rho_rho(ii)+sc*v3rho3(1)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  CALL xc_f03_gga_exc(xc_func, 1, rho(ii), sigma, exc)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  CALL xc_f03_gga_vxc(xc_func, 1, rho(ii), sigma, vrho, vsigma)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*2.0_dp*vsigma(1)*norm_drho(ii)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                     CALL xc_f03_gga_vxc(xc_func, 1, rho(ii), sigma, vrho, vsigma)
./xc/xc_libxc.F:                     CALL xc_f03_gga_exc_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                             exc, vrho, vsigma)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*2.0_dp*vsigma(1)*norm_drho(ii)
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                     CALL xc_f03_gga_vxc(xc_func, 1, rho(ii), sigma, vrho, vsigma)
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                         v2rho2, v2rhosigma, v2sigma2)
./xc/xc_libxc.F:                     CALL xc_f03_gga_exc_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                             exc, vrho, vsigma)
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                         v2rho2, v2rhosigma, v2sigma2)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii)+sc*2.0_dp*v2rhosigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:               IF (rho(ii) > epsilon_rho) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                     CALL xc_f03_gga_vxc(xc_func, 1, rho(ii), sigma, vrho, vsigma)
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                         v2rho2, v2rhosigma, v2sigma2)
./xc/xc_libxc.F:                     CALL xc_f03_gga_exc_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                             exc, vrho, vsigma)
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                         v2rho2, v2rhosigma, v2sigma2)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*2.0_dp*vsigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii)+sc*2.0_dp*v2rhosigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:               IF ((rho(ii) > epsilon_rho) .AND. (tau(ii) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  my_tau = MAX(tau(ii), sigma(1)/(8.0_dp*rho(ii)))
./xc/xc_libxc.F:                  CALL xc_f03_mgga_exc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                       laplace_rho(ii), my_tau, exc)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:               IF ((rho(ii) > epsilon_rho) .AND. (tau(ii) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  my_tau = MAX(tau(ii), sigma(1)/(8.0_dp*rho(ii)))
./xc/xc_libxc.F:                  CALL xc_f03_mgga_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                       laplace_rho(ii), my_tau, vrho, vsigma, vlapl, vtau)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*2.0_dp*vsigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_laplace_rho(ii) = e_laplace_rho(ii)+sc*vlapl(1)
./xc/xc_libxc.F:               IF ((rho(ii) > epsilon_rho) .AND. (tau(ii) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  my_tau = MAX(tau(ii), sigma(1)/(8.0_dp*rho(ii)))
./xc/xc_libxc.F:                     CALL xc_f03_mgga_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                          laplace_rho(ii), my_tau, vrho, vsigma, vlapl, vtau)
./xc/xc_libxc.F:                     CALL xc_f03_mgga_exc_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                              laplace_rho(ii), my_tau, exc, vrho, vsigma, vlapl, vtau)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*2.0_dp*vsigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_laplace_rho(ii) = e_laplace_rho(ii)+sc*vlapl(1)
./xc/xc_libxc.F:               IF ((rho(ii) > epsilon_rho) .AND. (tau(ii) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  my_tau = MAX(tau(ii), sigma(1)/(8.0_dp*rho(ii)))
./xc/xc_libxc.F:                     CALL xc_f03_mgga_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                          laplace_rho(ii), my_tau, vrho, vsigma, vlapl, vtau)
./xc/xc_libxc.F:                     CALL xc_f03_mgga_fxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                          laplace_rho(ii), my_tau, &
./xc/xc_libxc.F:                                          v2rho2, v2sigma2, v2lapl2, v2tau2, v2rhosigma, v2rholapl, &
./xc/xc_libxc.F:                                          v2rhotau, v2sigmalapl, v2sigmatau, v2lapltau)
./xc/xc_libxc.F:                     CALL xc_f03_mgga(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                      laplace_rho(ii), my_tau, exc, vrho, vsigma, vlapl, vtau, &
./xc/xc_libxc.F:                                      v2rho2, v2sigma2, v2lapl2, v2tau2, v2rhosigma, v2rholapl, &
./xc/xc_libxc.F:                                      v2rhotau, v2sigmalapl, v2sigmatau, v2lapltau)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii)+sc*2.0_dp*v2rhosigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:                  e_rho_laplace_rho(ii) = e_rho_laplace_rho(ii)+sc*v2rholapl(1)
./xc/xc_libxc.F:                  e_rho_tau(ii) = e_rho_tau(ii)+sc*v2rhotau(1)
./xc/xc_libxc.F:                  e_ndrho_laplace_rho(ii) = e_ndrho_laplace_rho(ii)+ &
./xc/xc_libxc.F:                                            sc*2.0_dp*v2sigmalapl(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_ndrho_tau(ii) = e_ndrho_tau(ii)+sc*2.0_dp*v2sigmatau(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_laplace_rho_laplace_rho(ii) = e_laplace_rho_laplace_rho(ii)+sc*v2lapl2(1)
./xc/xc_libxc.F:                  e_laplace_rho_tau(ii) = e_laplace_rho_tau(ii)+sc*v2lapltau(1)
./xc/xc_libxc.F:               IF ((rho(ii) > epsilon_rho) .AND. (tau(ii) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  sigma = norm_drho(ii)**2
./xc/xc_libxc.F:                  my_tau = MAX(tau(ii), sigma(1)/(8.0_dp*rho(ii)))
./xc/xc_libxc.F:                     CALL xc_f03_mgga_vxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                          laplace_rho(ii), my_tau, vrho, vsigma, vlapl, vtau)
./xc/xc_libxc.F:                     CALL xc_f03_mgga_fxc(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                          laplace_rho(ii), my_tau, &
./xc/xc_libxc.F:                                          v2rho2, v2sigma2, v2lapl2, v2tau2, v2rhosigma, v2rholapl, &
./xc/xc_libxc.F:                                          v2rhotau, v2sigmalapl, v2sigmatau, v2lapltau)
./xc/xc_libxc.F:                     CALL xc_f03_mgga(xc_func, 1, rho(ii), sigma, &
./xc/xc_libxc.F:                                      laplace_rho(ii), my_tau, exc, vrho, vsigma, vlapl, vtau, &
./xc/xc_libxc.F:                                      v2rho2, v2sigma2, v2lapl2, v2tau2, v2rhosigma, v2rholapl, &
./xc/xc_libxc.F:                                      v2rhotau, v2sigmalapl, v2sigmatau, v2lapltau)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*rho(ii)
./xc/xc_libxc.F:                  e_rho(ii) = e_rho(ii)+sc*vrho(1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*2.0_dp*vsigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_laplace_rho(ii) = e_laplace_rho(ii)+sc*vlapl(1)
./xc/xc_libxc.F:                  e_rho_rho(ii) = e_rho_rho(ii)+sc*v2rho2(1)
./xc/xc_libxc.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii)+sc*2.0_dp*v2rhosigma(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:                  e_rho_laplace_rho(ii) = e_rho_laplace_rho(ii)+sc*v2rholapl(1)
./xc/xc_libxc.F:                  e_rho_tau(ii) = e_rho_tau(ii)+sc*v2rhotau(1)
./xc/xc_libxc.F:                  e_ndrho_laplace_rho(ii) = e_ndrho_laplace_rho(ii)+ &
./xc/xc_libxc.F:                                            sc*2.0_dp*v2sigmalapl(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_ndrho_tau(ii) = e_ndrho_tau(ii)+sc*2.0_dp*v2sigmatau(1)*norm_drho(ii)
./xc/xc_libxc.F:                  e_laplace_rho_laplace_rho(ii) = e_laplace_rho_laplace_rho(ii)+sc*v2lapl2(1)
./xc/xc_libxc.F:                  e_laplace_rho_tau(ii) = e_laplace_rho_tau(ii)+sc*v2lapltau(1)
./xc/xc_libxc.F:!> \param rhoa alpha density
./xc/xc_libxc.F:!> \param rhob beta density
./xc/xc_libxc.F:!> \param norm_drho ...
./xc/xc_libxc.F:!> \param norm_drhoa norm of the gradient of the alpha density
./xc/xc_libxc.F:!> \param norm_drhob norm of the gradient of the beta density
./xc/xc_libxc.F:!> \param laplace_rhoa laplacian of the alpha density
./xc/xc_libxc.F:!> \param laplace_rhob laplacian of the beta density
./xc/xc_libxc.F:!> \param e_rhoa derivative of the energy density with respect to rhoa
./xc/xc_libxc.F:!> \param e_rhob derivative of the energy density with respect to rhob
./xc/xc_libxc.F:!> \param e_ndrho derivative of the energy density with respect to ndrho
./xc/xc_libxc.F:!> \param e_ndrhoa derivative of the energy density with respect to ndrhoa
./xc/xc_libxc.F:!> \param e_ndrhob derivative of the energy density with respect to ndrhob
./xc/xc_libxc.F:!> \param e_laplace_rhoa derivative of the energy density with respect to laplace_rhoa
./xc/xc_libxc.F:!> \param e_laplace_rhob derivative of the energy density with respect to laplace_rhob
./xc/xc_libxc.F:!> \param e_rhoa_rhoa derivative of the energy density with respect to rhoa_rhoa
./xc/xc_libxc.F:!> \param e_rhoa_rhob derivative of the energy density with respect to rhoa_rhob
./xc/xc_libxc.F:!> \param e_rhob_rhob derivative of the energy density with respect to rhob_rhob
./xc/xc_libxc.F:!> \param e_ndrho_rhoa derivative of the energy density with respect to ndrho_rhoa
./xc/xc_libxc.F:!> \param e_ndrho_rhob derivative of the energy density with respect to ndrho_rhob
./xc/xc_libxc.F:!> \param e_ndrhoa_rhoa derivative of the energy density with respect to ndrhoa_rhoa
./xc/xc_libxc.F:!> \param e_ndrhoa_rhob derivative of the energy density with respect to ndrhoa_rhob
./xc/xc_libxc.F:!> \param e_ndrhob_rhoa derivative of the energy density with respect to ndrhob_rhoa
./xc/xc_libxc.F:!> \param e_ndrhob_rhob derivative of the energy density with respect to ndrhob_rhob
./xc/xc_libxc.F:!> \param e_ndrho_ndrho derivative of the energy density with respect to ndrho_ndrho
./xc/xc_libxc.F:!> \param e_ndrho_ndrhoa derivative of the energy density with respect to ndrho_ndrhoa
./xc/xc_libxc.F:!> \param e_ndrho_ndrhob derivative of the energy density with respect to ndrho_ndrhob
./xc/xc_libxc.F:!> \param e_ndrhoa_ndrhoa derivative of the energy density with respect to ndrhoa_ndrhoa
./xc/xc_libxc.F:!> \param e_ndrhoa_ndrhob derivative of the energy density with respect to ndrhoa_ndrhob
./xc/xc_libxc.F:!> \param e_ndrhob_ndrhob derivative of the energy density with respect to ndrhob_ndrhob
./xc/xc_libxc.F:!> \param e_rhoa_laplace_rhoa derivative of the energy density with respect to rhoa_laplace_rhoa
./xc/xc_libxc.F:!> \param e_rhoa_laplace_rhob derivative of the energy density with respect to rhoa_laplace_rhob
./xc/xc_libxc.F:!> \param e_rhob_laplace_rhoa derivative of the energy density with respect to rhob_laplace_rhoa
./xc/xc_libxc.F:!> \param e_rhob_laplace_rhob derivative of the energy density with respect to rhob_laplace_rhob
./xc/xc_libxc.F:!> \param e_rhoa_tau_a derivative of the energy density with respect to rhoa_tau_a
./xc/xc_libxc.F:!> \param e_rhoa_tau_b derivative of the energy density with respect to rhoa_tau_b
./xc/xc_libxc.F:!> \param e_rhob_tau_a derivative of the energy density with respect to rhob_tau_a
./xc/xc_libxc.F:!> \param e_rhob_tau_b derivative of the energy density with respect to rhob_tau_b
./xc/xc_libxc.F:!> \param e_ndrho_laplace_rhoa derivative of the energy density with respect to ndrho_laplace_rhoa
./xc/xc_libxc.F:!> \param e_ndrho_laplace_rhob derivative of the energy density with respect to ndrho_laplace_rhob
./xc/xc_libxc.F:!> \param e_ndrhoa_laplace_rhoa derivative of the energy density with respect to ndrhoa_laplace_rhoa
./xc/xc_libxc.F:!> \param e_ndrhoa_laplace_rhob derivative of the energy density with respect to ndrhoa_laplace_rhob
./xc/xc_libxc.F:!> \param e_ndrhob_laplace_rhoa derivative of the energy density with respect to ndrhob_laplace_rhoa
./xc/xc_libxc.F:!> \param e_ndrhob_laplace_rhob derivative of the energy density with respect to ndrhob_laplace_rhob
./xc/xc_libxc.F:!> \param e_ndrho_tau_a derivative of the energy density with respect to ndrho_tau_a
./xc/xc_libxc.F:!> \param e_ndrho_tau_b derivative of the energy density with respect to ndrho_tau_b
./xc/xc_libxc.F:!> \param e_ndrhoa_tau_a derivative of the energy density with respect to ndrhoa_tau_a
./xc/xc_libxc.F:!> \param e_ndrhoa_tau_b derivative of the energy density with respect to ndrhoa_tau_b
./xc/xc_libxc.F:!> \param e_ndrhob_tau_a derivative of the energy density with respect to ndrhob_tau_a
./xc/xc_libxc.F:!> \param e_ndrhob_tau_b derivative of the energy density with respect to ndrhob_tau_b
./xc/xc_libxc.F:!> \param e_laplace_rhoa_laplace_rhoa derivative of the energy density with respect to laplace_rhoa_laplace_rhoa
./xc/xc_libxc.F:!> \param e_laplace_rhoa_laplace_rhob derivative of the energy density with respect to laplace_rhoa_laplace_rhob
./xc/xc_libxc.F:!> \param e_laplace_rhob_laplace_rhob derivative of the energy density with respect to laplace_rhob_laplace_rhob
./xc/xc_libxc.F:!> \param e_laplace_rhoa_tau_a derivative of the energy density with respect to laplace_rhoa_tau_a
./xc/xc_libxc.F:!> \param e_laplace_rhoa_tau_b derivative of the energy density with respect to laplace_rhoa_tau_b
./xc/xc_libxc.F:!> \param e_laplace_rhob_tau_a derivative of the energy density with respect to laplace_rhob_tau_a
./xc/xc_libxc.F:!> \param e_laplace_rhob_tau_b derivative of the energy density with respect to laplace_rhob_tau_b
./xc/xc_libxc.F:!> \param e_rhoa_rhoa_rhoa derivative of the energy density with respect to rhoa_rhoa_rhoa
./xc/xc_libxc.F:!> \param e_rhoa_rhoa_rhob derivative of the energy density with respect to rhoa_rhoa_rhob
./xc/xc_libxc.F:!> \param e_rhoa_rhob_rhob derivative of the energy density with respect to rhoa_rhob_rhob
./xc/xc_libxc.F:!> \param e_rhob_rhob_rhob derivative of the energy density with respect to rhob_rhob_rhob
./xc/xc_libxc.F:!> \param epsilon_rho ...
./xc/xc_libxc.F:   SUBROUTINE libxc_lsd_calc(rhoa, rhob, norm_drho, norm_drhoa, &
./xc/xc_libxc.F:                             norm_drhob, laplace_rhoa, laplace_rhob, tau_a, tau_b, &
./xc/xc_libxc.F:                             e_0, e_rhoa, e_rhob, e_ndrho, e_ndrhoa, e_ndrhob, &
./xc/xc_libxc.F:                             e_laplace_rhoa, e_laplace_rhob, e_tau_a, e_tau_b, &
./xc/xc_libxc.F:                             e_rhoa_rhoa, e_rhoa_rhob, e_rhob_rhob, &
./xc/xc_libxc.F:                             e_ndrho_rhoa, e_ndrho_rhob, e_ndrhoa_rhoa, &
./xc/xc_libxc.F:                             e_ndrhoa_rhob, e_ndrhob_rhoa, e_ndrhob_rhob, &
./xc/xc_libxc.F:                             e_ndrho_ndrho, e_ndrho_ndrhoa, e_ndrho_ndrhob, &
./xc/xc_libxc.F:                             e_ndrhoa_ndrhoa, e_ndrhoa_ndrhob, e_ndrhob_ndrhob, &
./xc/xc_libxc.F:                             e_rhoa_laplace_rhoa, e_rhoa_laplace_rhob, &
./xc/xc_libxc.F:                             e_rhob_laplace_rhoa, e_rhob_laplace_rhob, &
./xc/xc_libxc.F:                             e_rhoa_tau_a, e_rhoa_tau_b, e_rhob_tau_a, e_rhob_tau_b, &
./xc/xc_libxc.F:                             e_ndrho_laplace_rhoa, e_ndrho_laplace_rhob, &
./xc/xc_libxc.F:                             e_ndrhoa_laplace_rhoa, e_ndrhoa_laplace_rhob, &
./xc/xc_libxc.F:                             e_ndrhob_laplace_rhoa, e_ndrhob_laplace_rhob, &
./xc/xc_libxc.F:                             e_ndrho_tau_a, e_ndrho_tau_b, &
./xc/xc_libxc.F:                             e_ndrhoa_tau_a, e_ndrhoa_tau_b, &
./xc/xc_libxc.F:                             e_ndrhob_tau_a, e_ndrhob_tau_b, &
./xc/xc_libxc.F:                             e_laplace_rhoa_laplace_rhoa, &
./xc/xc_libxc.F:                             e_laplace_rhoa_laplace_rhob, &
./xc/xc_libxc.F:                             e_laplace_rhob_laplace_rhob, &
./xc/xc_libxc.F:                             e_laplace_rhoa_tau_a, e_laplace_rhoa_tau_b, &
./xc/xc_libxc.F:                             e_laplace_rhob_tau_a, e_laplace_rhob_tau_b, &
./xc/xc_libxc.F:                             e_rhoa_rhoa_rhoa, e_rhoa_rhoa_rhob, &
./xc/xc_libxc.F:                             e_rhoa_rhob_rhob, e_rhob_rhob_rhob, &
./xc/xc_libxc.F:                             grad_deriv, npoints, epsilon_rho, &
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, rhob, norm_drho, norm_drhoa, &
./xc/xc_libxc.F:                                                            norm_drhob, laplace_rhoa, &
./xc/xc_libxc.F:                                                            laplace_rhob, tau_a, tau_b
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT) :: e_0, e_rhoa, e_rhob, e_ndrho, e_ndrhoa, &
./xc/xc_libxc.F:         e_ndrhob, e_laplace_rhoa, e_laplace_rhob, e_tau_a, e_tau_b, e_rhoa_rhoa, e_rhoa_rhob, &
./xc/xc_libxc.F:         e_rhob_rhob, e_ndrho_rhoa, e_ndrho_rhob, e_ndrhoa_rhoa, e_ndrhoa_rhob, e_ndrhob_rhoa, &
./xc/xc_libxc.F:         e_ndrhob_rhob, e_ndrho_ndrho, e_ndrho_ndrhoa, e_ndrho_ndrhob, e_ndrhoa_ndrhoa, &
./xc/xc_libxc.F:         e_ndrhoa_ndrhob, e_ndrhob_ndrhob, e_rhoa_laplace_rhoa, e_rhoa_laplace_rhob, &
./xc/xc_libxc.F:         e_rhob_laplace_rhoa, e_rhob_laplace_rhob, e_rhoa_tau_a, e_rhoa_tau_b, e_rhob_tau_a, &
./xc/xc_libxc.F:         e_rhob_tau_b, e_ndrho_laplace_rhoa, e_ndrho_laplace_rhob, e_ndrhoa_laplace_rhoa
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT) :: e_ndrhoa_laplace_rhob, e_ndrhob_laplace_rhoa, &
./xc/xc_libxc.F:         e_ndrhob_laplace_rhob, e_ndrho_tau_a, e_ndrho_tau_b, e_ndrhoa_tau_a, e_ndrhoa_tau_b, &
./xc/xc_libxc.F:         e_ndrhob_tau_a, e_ndrhob_tau_b, e_laplace_rhoa_laplace_rhoa, e_laplace_rhoa_laplace_rhob, &
./xc/xc_libxc.F:         e_laplace_rhob_laplace_rhob, e_laplace_rhoa_tau_a, e_laplace_rhoa_tau_b, &
./xc/xc_libxc.F:         e_laplace_rhob_tau_a, e_laplace_rhob_tau_b, e_tau_a_tau_a, e_tau_a_tau_b, e_tau_b_tau_b, &
./xc/xc_libxc.F:         e_rhoa_rhoa_rhoa, e_rhoa_rhoa_rhob, e_rhoa_rhob_rhob, e_rhob_rhob_rhob
./xc/xc_libxc.F:      REAL(KIND=dp), INTENT(in)                          :: epsilon_rho, epsilon_tau
./xc/xc_libxc.F:      REAL(KIND=dp)                                      :: my_norm_drho, my_norm_drhoa, &
./xc/xc_libxc.F:                                                            my_norm_drhob, my_rhoa, my_rhob, &
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(2, 1)                     :: laplace_rhov, rhov, tauv, vlapl, vrho, &
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(3, 1)                     :: sigmav, v2lapl2, v2rho2, v2tau2, vsigma
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(4, 1)                     :: v2lapltau, v2rholapl, v2rhotau, v3rho3
./xc/xc_libxc.F:      REAL(KIND=dp), DIMENSION(6, 1)                     :: v2rhosigma, v2sigma2, v2sigmalapl, &
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda_exc(xc_func, 1, rhov(1, 1), exc)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda_vxc(xc_func, 1, rhov(1, 1), vrho(1, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda_exc_vxc(xc_func, 1, rhov(1, 1), exc, vrho(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda_fxc(xc_func, 1, rhov(1, 1), v2rho2(1, 1))
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda_exc_vxc(xc_func, 1, rhov(1, 1), exc, vrho(1, 1))
./xc/xc_libxc.F:                  CALL xc_f03_lda_fxc(xc_func, 1, rhov(1, 1), v2rho2(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda_kxc(xc_func, 1, rhov(1, 1), v3rho3(1, 1))
./xc/xc_libxc.F:                  e_rhoa_rhoa_rhoa(ii) = e_rhoa_rhoa_rhoa(ii)+sc*v3rho3(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhoa_rhob(ii) = e_rhoa_rhoa_rhob(ii)+sc*v3rho3(2, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob_rhob(ii) = e_rhoa_rhob_rhob(ii)+sc*v3rho3(3, 1)
./xc/xc_libxc.F:                  e_rhob_rhob_rhob(ii) = e_rhob_rhob_rhob(ii)+sc*v3rho3(4, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  CALL xc_f03_lda(xc_func, 1, rhov(1, 1), exc, vrho(1, 1), v2rho2(1, 1), v3rho3(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:                  e_rhoa_rhoa_rhoa(ii) = e_rhoa_rhoa_rhoa(ii)+sc*v3rho3(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhoa_rhob(ii) = e_rhoa_rhoa_rhob(ii)+sc*v3rho3(2, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob_rhob(ii) = e_rhoa_rhob_rhob(ii)+sc*v3rho3(3, 1)
./xc/xc_libxc.F:                  e_rhob_rhob_rhob(ii) = e_rhob_rhob_rhob(ii)+sc*v3rho3(4, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  CALL xc_f03_gga_exc(xc_func, 1, rhov(1, 1), sigmav(1, 1), exc)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  CALL xc_f03_gga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*vsigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_exc_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), exc, vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*vsigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                         v2rho2(1, 1), v2rhosigma(1, 1), v2sigma2(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_exc_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), exc, vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                         v2rho2(1, 1), v2rhosigma(1, 1), v2sigma2(1, 1))
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:                  e_ndrho_rhoa(ii) = e_ndrho_rhoa(ii)+sc*v2rhosigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_rhob(ii) = e_ndrho_rhob(ii)+sc*v2rhosigma(5, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_rhoa(ii) = e_ndrhoa_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(1, 1)-v2rhosigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_rhob(ii) = e_ndrhoa_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(4, 1)-v2rhosigma(5, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_rhoa(ii) = e_ndrhob_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(3, 1)-v2rhosigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_rhob(ii) = e_ndrhob_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(6, 1)-v2rhosigma(5, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:                                      sc*(vsigma(2, 1)+my_norm_drho**2*v2sigma2(4, 1))
./xc/xc_libxc.F:                  e_ndrho_ndrhoa(ii) = e_ndrho_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(2, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrho_ndrhob(ii) = e_ndrho_ndrhob(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(5, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhoa_ndrhoa(ii) = e_ndrhoa_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1)+my_norm_drhoa**2*( &
./xc/xc_libxc.F:                  e_ndrhoa_ndrhob(ii) = e_ndrhoa_ndrhob(ii)+ &
./xc/xc_libxc.F:                                            2.0_dp*v2sigma2(5, 1)+v2sigma2(4, 1))*my_norm_drhoa*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_ndrhob(ii) = e_ndrhob_ndrhob(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1)+my_norm_drhob**2*( &
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF ((my_rhoa+my_rhob) > epsilon_rho) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                         v2rho2(1, 1), v2rhosigma(1, 1), v2sigma2(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_exc_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), exc, vrho(1, 1), vsigma(1, 1))
./xc/xc_libxc.F:                     CALL xc_f03_gga_fxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                         v2rho2(1, 1), v2rhosigma(1, 1), v2sigma2(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*vsigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:                  e_ndrho_rhoa(ii) = e_ndrho_rhoa(ii)+sc*v2rhosigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_rhob(ii) = e_ndrho_rhob(ii)+sc*v2rhosigma(5, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_rhoa(ii) = e_ndrhoa_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(1, 1)-v2rhosigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_rhob(ii) = e_ndrhoa_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(4, 1)-v2rhosigma(5, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_rhoa(ii) = e_ndrhob_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(3, 1)-v2rhosigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_rhob(ii) = e_ndrhob_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(6, 1)-v2rhosigma(5, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:                                      sc*(vsigma(2, 1)+my_norm_drho**2*v2sigma2(4, 1))
./xc/xc_libxc.F:                  e_ndrho_ndrhoa(ii) = e_ndrho_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(2, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrho_ndrhob(ii) = e_ndrho_ndrhob(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(5, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhoa_ndrhoa(ii) = e_ndrhoa_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1)+my_norm_drhoa**2*( &
./xc/xc_libxc.F:                  e_ndrhoa_ndrhob(ii) = e_ndrhoa_ndrhob(ii)+ &
./xc/xc_libxc.F:                                            2.0_dp*v2sigma2(5, 1)+v2sigma2(4, 1))*my_norm_drhoa*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_ndrhob(ii) = e_ndrhob_ndrhob(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1)+my_norm_drhob**2*( &
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF (((my_rhoa+my_rhob) > epsilon_rho) .AND. ((my_tau_a+my_tau_b) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  laplace_rhov(1, 1) = laplace_rhoa(ii)
./xc/xc_libxc.F:                  laplace_rhov(2, 1) = laplace_rhob(ii)
./xc/xc_libxc.F:                  tauv(1, 1) = MAX(tauv(1, 1), sigmav(1, 1)/(8.0_dp*rhov(1, 1)))
./xc/xc_libxc.F:                  tauv(2, 1) = MAX(tauv(2, 1), sigmav(3, 1)/(8.0_dp*rhov(2, 1)))
./xc/xc_libxc.F:                  CALL xc_f03_mgga_exc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                       laplace_rhov(1, 1), tauv(1, 1), exc)
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF (((my_rhoa+my_rhob) > epsilon_rho) .AND. ((my_tau_a+my_tau_b) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  laplace_rhov(1, 1) = laplace_rhoa(ii)
./xc/xc_libxc.F:                  laplace_rhov(2, 1) = laplace_rhob(ii)
./xc/xc_libxc.F:                  tauv(1, 1) = MAX(tauv(1, 1), sigmav(1, 1)/(8.0_dp*rhov(1, 1)))
./xc/xc_libxc.F:                  tauv(2, 1) = MAX(tauv(2, 1), sigmav(3, 1)/(8.0_dp*rhov(2, 1)))
./xc/xc_libxc.F:                  CALL xc_f03_mgga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                       laplace_rhov(1, 1), tauv(1, 1), vrho(1, 1), vsigma(1, 1), vlapl(1, 1), vtau(1, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*vsigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_laplace_rhoa(ii) = e_laplace_rhoa(ii)+sc*vlapl(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhob(ii) = e_laplace_rhob(ii)+sc*vlapl(2, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF (((my_rhoa+my_rhob) > epsilon_rho) .AND. ((my_tau_a+my_tau_b) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  laplace_rhov(1, 1) = laplace_rhoa(ii)
./xc/xc_libxc.F:                  laplace_rhov(2, 1) = laplace_rhob(ii)
./xc/xc_libxc.F:                  tauv(1, 1) = MAX(tauv(1, 1), sigmav(1, 1)/(8.0_dp*rhov(1, 1)))
./xc/xc_libxc.F:                  tauv(2, 1) = MAX(tauv(2, 1), sigmav(3, 1)/(8.0_dp*rhov(2, 1)))
./xc/xc_libxc.F:                     CALL xc_f03_mgga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                          laplace_rhov(1, 1), tauv(1, 1), vrho(1, 1), vsigma(1, 1), &
./xc/xc_libxc.F:                     CALL xc_f03_mgga_exc_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                              laplace_rhov(1, 1), tauv(1, 1), exc, &
./xc/xc_libxc.F:                                              vrho(1, 1), vsigma(1, 1), vlapl(1, 1), vtau(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*vsigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_laplace_rhoa(ii) = e_laplace_rhoa(ii)+sc*vlapl(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhob(ii) = e_laplace_rhob(ii)+sc*vlapl(2, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF (((my_rhoa+my_rhob) > epsilon_rho) .AND. ((my_tau_a+my_tau_b) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  laplace_rhov(1, 1) = laplace_rhoa(ii)
./xc/xc_libxc.F:                  laplace_rhov(2, 1) = laplace_rhob(ii)
./xc/xc_libxc.F:                  tauv(1, 1) = MAX(tauv(1, 1), sigmav(1, 1)/(8.0_dp*rhov(1, 1)))
./xc/xc_libxc.F:                  tauv(2, 1) = MAX(tauv(2, 1), sigmav(3, 1)/(8.0_dp*rhov(2, 1)))
./xc/xc_libxc.F:                     CALL xc_f03_mgga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                          laplace_rhov(1, 1), tauv(1, 1), vrho(1, 1), vsigma(1, 1), &
./xc/xc_libxc.F:                     CALL xc_f03_mgga_fxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                          laplace_rhov(1, 1), tauv(1, 1), &
./xc/xc_libxc.F:                                          v2rho2(1, 1), v2sigma2(1, 1), v2lapl2(1, 1), v2tau2(1, 1), &
./xc/xc_libxc.F:                                          v2rhosigma(1, 1), v2rholapl(1, 1), v2rhotau(1, 1), &
./xc/xc_libxc.F:                     CALL xc_f03_mgga(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                      laplace_rhov(1, 1), tauv(1, 1), exc, vrho(1, 1), vsigma(1, 1), &
./xc/xc_libxc.F:                                      vlapl(1, 1), vtau(1, 1), v2rho2(1, 1), v2sigma2(1, 1), &
./xc/xc_libxc.F:                                      v2lapl2(1, 1), v2tau2(1, 1), v2rhosigma(1, 1), v2rholapl(1, 1), &
./xc/xc_libxc.F:                                      v2rhotau(1, 1), v2sigmalapl(1, 1), v2sigmatau(1, 1), v2lapltau(1, 1))
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:                  e_ndrho_rhoa(ii) = e_ndrho_rhoa(ii)+sc*v2rhosigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_rhob(ii) = e_ndrho_rhob(ii)+sc*v2rhosigma(5, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_rhoa(ii) = e_ndrhoa_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(1, 1)-v2rhosigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_rhob(ii) = e_ndrhoa_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(4, 1)-v2rhosigma(5, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_rhoa(ii) = e_ndrhob_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(3, 1)-v2rhosigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_rhob(ii) = e_ndrhob_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(6, 1)-v2rhosigma(5, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:                                      sc*(vsigma(2, 1)+my_norm_drho**2*v2sigma2(4, 1))
./xc/xc_libxc.F:                  e_ndrho_ndrhoa(ii) = e_ndrho_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(2, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrho_ndrhob(ii) = e_ndrho_ndrhob(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(5, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhoa_ndrhoa(ii) = e_ndrhoa_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1)+my_norm_drhoa**2*( &
./xc/xc_libxc.F:                  e_ndrhoa_ndrhob(ii) = e_ndrhoa_ndrhob(ii)+ &
./xc/xc_libxc.F:                                            2.0_dp*v2sigma2(5, 1)+v2sigma2(4, 1))*my_norm_drhoa*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_ndrhob(ii) = e_ndrhob_ndrhob(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1)+my_norm_drhob**2*( &
./xc/xc_libxc.F:                  e_rhoa_laplace_rhoa(ii) = e_rhoa_laplace_rhoa(ii)+sc*v2rholapl(1, 1)
./xc/xc_libxc.F:                  e_rhoa_laplace_rhob(ii) = e_rhoa_laplace_rhob(ii)+sc*v2rholapl(2, 1)
./xc/xc_libxc.F:                  e_rhob_laplace_rhoa(ii) = e_rhob_laplace_rhoa(ii)+sc*v2rholapl(3, 1)
./xc/xc_libxc.F:                  e_rhob_laplace_rhob(ii) = e_rhob_laplace_rhob(ii)+sc*v2rholapl(4, 1)
./xc/xc_libxc.F:                  e_rhoa_tau_a(ii) = e_rhoa_tau_a(ii)+sc*v2rhotau(1, 1)
./xc/xc_libxc.F:                  e_rhoa_tau_b(ii) = e_rhoa_tau_b(ii)+sc*v2rhotau(2, 1)
./xc/xc_libxc.F:                  e_rhob_tau_a(ii) = e_rhob_tau_a(ii)+sc*v2rhotau(3, 1)
./xc/xc_libxc.F:                  e_rhob_tau_b(ii) = e_rhob_tau_b(ii)+sc*v2rhotau(4, 1)
./xc/xc_libxc.F:                  e_ndrho_laplace_rhoa(ii) = e_ndrho_laplace_rhoa(ii)+sc*v2sigmalapl(3, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_laplace_rhob(ii) = e_ndrho_laplace_rhob(ii)+sc*v2sigmalapl(4, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_laplace_rhoa(ii) = e_ndrhoa_laplace_rhoa(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(1, 1)-v2sigmalapl(3, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_laplace_rhob(ii) = e_ndrhoa_laplace_rhob(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(2, 1)-v2sigmalapl(4, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_laplace_rhoa(ii) = e_ndrhob_laplace_rhoa(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(5, 1)-v2sigmalapl(3, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_laplace_rhob(ii) = e_ndrhob_laplace_rhob(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(6, 1)-v2sigmalapl(4, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrho_tau_a(ii) = e_ndrho_tau_a(ii)+sc*v2sigmatau(3, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_tau_b(ii) = e_ndrho_tau_b(ii)+sc*v2sigmatau(4, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_tau_a(ii) = e_ndrhoa_tau_a(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(1, 1)-v2sigmatau(3, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_tau_b(ii) = e_ndrhoa_tau_b(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(2, 1)-v2sigmatau(4, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_tau_a(ii) = e_ndrhob_tau_a(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(5, 1)-v2sigmatau(3, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_tau_b(ii) = e_ndrhob_tau_b(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(6, 1)-v2sigmatau(4, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_laplace_rhoa_laplace_rhoa(ii) = e_laplace_rhoa_laplace_rhoa(ii)+sc*v2lapl2(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhoa_laplace_rhob(ii) = e_laplace_rhoa_laplace_rhob(ii)+sc*v2lapl2(2, 1)
./xc/xc_libxc.F:                  e_laplace_rhob_laplace_rhob(ii) = e_laplace_rhob_laplace_rhob(ii)+sc*v2lapl2(3, 1)
./xc/xc_libxc.F:                  e_laplace_rhoa_tau_a(ii) = e_laplace_rhoa_tau_a(ii)+sc*v2lapltau(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhoa_tau_b(ii) = e_laplace_rhoa_tau_b(ii)+sc*v2lapltau(2, 1)
./xc/xc_libxc.F:                  e_laplace_rhob_tau_a(ii) = e_laplace_rhob_tau_a(ii)+sc*v2lapltau(3, 1)
./xc/xc_libxc.F:                  e_laplace_rhob_tau_b(ii) = e_laplace_rhob_tau_b(ii)+sc*v2lapltau(4, 1)
./xc/xc_libxc.F:               my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_libxc.F:               my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_libxc.F:               IF (((my_rhoa+my_rhob) > epsilon_rho) .AND. ((my_tau_a+my_tau_b) > epsilon_tau)) THEN
./xc/xc_libxc.F:                  rhov(1, 1) = MAX(my_rhoa, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  rhov(2, 1) = MAX(my_rhob, EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhoa = MAX(norm_drhoa(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drhob = MAX(norm_drhob(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  my_norm_drho = MAX(norm_drho(ii), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_libxc.F:                  sigmav(1, 1) = my_norm_drhoa**2
./xc/xc_libxc.F:                  sigmav(3, 1) = my_norm_drhob**2
./xc/xc_libxc.F:                  sigmav(2, 1) = 0.5_dp*(my_norm_drho**2-sigmav(1, 1)-sigmav(3, 1))
./xc/xc_libxc.F:                  laplace_rhov(1, 1) = laplace_rhoa(ii)
./xc/xc_libxc.F:                  laplace_rhov(2, 1) = laplace_rhob(ii)
./xc/xc_libxc.F:                  tauv(1, 1) = MAX(tauv(1, 1), sigmav(1, 1)/(8.0_dp*rhov(1, 1)))
./xc/xc_libxc.F:                  tauv(2, 1) = MAX(tauv(2, 1), sigmav(3, 1)/(8.0_dp*rhov(2, 1)))
./xc/xc_libxc.F:                     CALL xc_f03_mgga_vxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                          laplace_rhov(1, 1), tauv(1, 1), vrho(1, 1), vsigma(1, 1), &
./xc/xc_libxc.F:                     CALL xc_f03_mgga_fxc(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                          laplace_rhov(1, 1), tauv(1, 1), &
./xc/xc_libxc.F:                                          v2rho2(1, 1), v2sigma2(1, 1), v2lapl2(1, 1), v2tau2(1, 1), &
./xc/xc_libxc.F:                                          v2rhosigma(1, 1), v2rholapl(1, 1), v2rhotau(1, 1), &
./xc/xc_libxc.F:                     CALL xc_f03_mgga(xc_func, 1, rhov(1, 1), sigmav(1, 1), &
./xc/xc_libxc.F:                                      laplace_rhov(1, 1), tauv(1, 1), exc, vrho(1, 1), vsigma(1, 1), &
./xc/xc_libxc.F:                                      vlapl(1, 1), vtau(1, 1), v2rho2(1, 1), v2sigma2(1, 1), &
./xc/xc_libxc.F:                                      v2lapl2(1, 1), v2tau2(1, 1), v2rhosigma(1, 1), v2rholapl(1, 1), &
./xc/xc_libxc.F:                                      v2rhotau(1, 1), v2sigmalapl(1, 1), v2sigmatau(1, 1), v2lapltau(1, 1))
./xc/xc_libxc.F:                  e_0(ii) = e_0(ii)+sc*exc(1)*(rhov(1, 1)+rhov(2, 1))
./xc/xc_libxc.F:                  e_rhoa(ii) = e_rhoa(ii)+sc*vrho(1, 1)
./xc/xc_libxc.F:                  e_rhob(ii) = e_rhob(ii)+sc*vrho(2, 1)
./xc/xc_libxc.F:                  e_ndrho(ii) = e_ndrho(ii)+sc*vsigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_libxc.F:                                 sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_laplace_rhoa(ii) = e_laplace_rhoa(ii)+sc*vlapl(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhob(ii) = e_laplace_rhob(ii)+sc*vlapl(2, 1)
./xc/xc_libxc.F:                  e_rhoa_rhoa(ii) = e_rhoa_rhoa(ii)+sc*v2rho2(1, 1)
./xc/xc_libxc.F:                  e_rhoa_rhob(ii) = e_rhoa_rhob(ii)+sc*v2rho2(2, 1)
./xc/xc_libxc.F:                  e_rhob_rhob(ii) = e_rhob_rhob(ii)+sc*v2rho2(3, 1)
./xc/xc_libxc.F:                  e_ndrho_rhoa(ii) = e_ndrho_rhoa(ii)+sc*v2rhosigma(2, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_rhob(ii) = e_ndrho_rhob(ii)+sc*v2rhosigma(5, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_rhoa(ii) = e_ndrhoa_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(1, 1)-v2rhosigma(2, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_rhob(ii) = e_ndrhoa_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(4, 1)-v2rhosigma(5, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_rhoa(ii) = e_ndrhob_rhoa(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(3, 1)-v2rhosigma(2, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_rhob(ii) = e_ndrhob_rhob(ii)+ &
./xc/xc_libxc.F:                                      sc*(2.0_dp*v2rhosigma(6, 1)-v2rhosigma(5, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_libxc.F:                                      sc*(vsigma(2, 1)+my_norm_drho**2*v2sigma2(4, 1))
./xc/xc_libxc.F:                  e_ndrho_ndrhoa(ii) = e_ndrho_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(2, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrho_ndrhob(ii) = e_ndrho_ndrhob(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigma2(5, 1)-v2sigma2(4, 1))*my_norm_drho*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhoa_ndrhoa(ii) = e_ndrhoa_ndrhoa(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(1, 1)-vsigma(2, 1)+my_norm_drhoa**2*( &
./xc/xc_libxc.F:                  e_ndrhoa_ndrhob(ii) = e_ndrhoa_ndrhob(ii)+ &
./xc/xc_libxc.F:                                            2.0_dp*v2sigma2(5, 1)+v2sigma2(4, 1))*my_norm_drhoa*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_ndrhob(ii) = e_ndrhob_ndrhob(ii)+ &
./xc/xc_libxc.F:                                        sc*(2.0_dp*vsigma(3, 1)-vsigma(2, 1)+my_norm_drhob**2*( &
./xc/xc_libxc.F:                  e_rhoa_laplace_rhoa(ii) = e_rhoa_laplace_rhoa(ii)+sc*v2rholapl(1, 1)
./xc/xc_libxc.F:                  e_rhoa_laplace_rhob(ii) = e_rhoa_laplace_rhob(ii)+sc*v2rholapl(2, 1)
./xc/xc_libxc.F:                  e_rhob_laplace_rhoa(ii) = e_rhob_laplace_rhoa(ii)+sc*v2rholapl(3, 1)
./xc/xc_libxc.F:                  e_rhob_laplace_rhob(ii) = e_rhob_laplace_rhob(ii)+sc*v2rholapl(4, 1)
./xc/xc_libxc.F:                  e_rhoa_tau_a(ii) = e_rhoa_tau_a(ii)+sc*v2rhotau(1, 1)
./xc/xc_libxc.F:                  e_rhoa_tau_b(ii) = e_rhoa_tau_b(ii)+sc*v2rhotau(2, 1)
./xc/xc_libxc.F:                  e_rhob_tau_a(ii) = e_rhob_tau_a(ii)+sc*v2rhotau(3, 1)
./xc/xc_libxc.F:                  e_rhob_tau_b(ii) = e_rhob_tau_b(ii)+sc*v2rhotau(4, 1)
./xc/xc_libxc.F:                  e_ndrho_laplace_rhoa(ii) = e_ndrho_laplace_rhoa(ii)+sc*v2sigmalapl(3, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_laplace_rhob(ii) = e_ndrho_laplace_rhob(ii)+sc*v2sigmalapl(4, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_laplace_rhoa(ii) = e_ndrhoa_laplace_rhoa(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(1, 1)-v2sigmalapl(3, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_laplace_rhob(ii) = e_ndrhoa_laplace_rhob(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(2, 1)-v2sigmalapl(4, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_laplace_rhoa(ii) = e_ndrhob_laplace_rhoa(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(5, 1)-v2sigmalapl(3, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_laplace_rhob(ii) = e_ndrhob_laplace_rhob(ii)+ &
./xc/xc_libxc.F:                                              sc*(2.0_dp*v2sigmalapl(6, 1)-v2sigmalapl(4, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrho_tau_a(ii) = e_ndrho_tau_a(ii)+sc*v2sigmatau(3, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrho_tau_b(ii) = e_ndrho_tau_b(ii)+sc*v2sigmatau(4, 1)*my_norm_drho
./xc/xc_libxc.F:                  e_ndrhoa_tau_a(ii) = e_ndrhoa_tau_a(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(1, 1)-v2sigmatau(3, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhoa_tau_b(ii) = e_ndrhoa_tau_b(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(2, 1)-v2sigmatau(4, 1))*my_norm_drhoa
./xc/xc_libxc.F:                  e_ndrhob_tau_a(ii) = e_ndrhob_tau_a(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(5, 1)-v2sigmatau(3, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_ndrhob_tau_b(ii) = e_ndrhob_tau_b(ii)+ &
./xc/xc_libxc.F:                                       sc*(2.0_dp*v2sigmatau(6, 1)-v2sigmatau(4, 1))*my_norm_drhob
./xc/xc_libxc.F:                  e_laplace_rhoa_laplace_rhoa(ii) = e_laplace_rhoa_laplace_rhoa(ii)+sc*v2lapl2(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhoa_laplace_rhob(ii) = e_laplace_rhoa_laplace_rhob(ii)+sc*v2lapl2(2, 1)
./xc/xc_libxc.F:                  e_laplace_rhob_laplace_rhob(ii) = e_laplace_rhob_laplace_rhob(ii)+sc*v2lapl2(3, 1)
./xc/xc_libxc.F:                  e_laplace_rhoa_tau_a(ii) = e_laplace_rhoa_tau_a(ii)+sc*v2lapltau(1, 1)
./xc/xc_libxc.F:                  e_laplace_rhoa_tau_b(ii) = e_laplace_rhoa_tau_b(ii)+sc*v2lapltau(2, 1)
./xc/xc_libxc.F:                  e_laplace_rhob_tau_a(ii) = e_laplace_rhob_tau_a(ii)+sc*v2lapltau(3, 1)
./xc/xc_libxc.F:                  e_laplace_rhob_tau_b(ii) = e_laplace_rhob_tau_b(ii)+sc*v2lapltau(4, 1)
./xc/xc_xbeef.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xbeef.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xbeef.F:                                              xc_rho_set_type
./xc/xc_xbeef.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbeef.F:         needs%rho = .TRUE.
./xc/xc_xbeef.F:         needs%rho_1_3 = .TRUE.
./xc/xc_xbeef.F:         needs%norm_drho = .TRUE.
./xc/xc_xbeef.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbeef.F:         needs%rho_spin = .TRUE.
./xc/xc_xbeef.F:         needs%rho_spin_1_3 = .TRUE.
./xc/xc_xbeef.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xbeef.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbeef.F:   SUBROUTINE xbeef_lda_eval(rho_set, deriv_set, grad_deriv, xbeef_params)
./xc/xc_xbeef.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbeef.F:      REAL(kind=dp)                                      :: epsilon_rho, sx
./xc/xc_xbeef.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_ndrho, e_rho, norm_drho, &
./xc/xc_xbeef.F:                                                            rho, rho_1_3
./xc/xc_xbeef.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbeef.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbeef.F:      CALL xc_rho_set_get(rho_set, rho_1_3=rho_1_3, rho=rho, &
./xc/xc_xbeef.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xbeef.F:      dummy => rho
./xc/xc_xbeef.F:      e_rho => dummy
./xc/xc_xbeef.F:      e_ndrho => dummy
./xc/xc_xbeef.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xbeef.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xbeef.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xbeef.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xbeef.F:!$OMP              SHARED(rho, rho_1_3, norm_drho, e_0, e_rho) &
./xc/xc_xbeef.F:!$OMP              SHARED(e_ndrho) &
./xc/xc_xbeef.F:!$OMP              SHARED(epsilon_rho,sx)
./xc/xc_xbeef.F:      CALL xbeef_lda_calc(rho=rho, rho_1_3=rho_1_3, norm_drho=norm_drho, &
./xc/xc_xbeef.F:                          e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_xbeef.F:                          npoints=npoints, epsilon_rho=epsilon_rho, sx=sx)
./xc/xc_xbeef.F:!> \param rho the density where you want to evaluate the functional
./xc/xc_xbeef.F:!> \param rho_1_3 ...
./xc/xc_xbeef.F:!> \param norm_drho ...
./xc/xc_xbeef.F:!> \param e_rho ...
./xc/xc_xbeef.F:!> \param e_ndrho ...
./xc/xc_xbeef.F:!> \param epsilon_rho ...
./xc/xc_xbeef.F:   SUBROUTINE xbeef_lda_calc(rho, rho_1_3, norm_drho, &
./xc/xc_xbeef.F:                             e_0, e_rho, e_ndrho, &
./xc/xc_xbeef.F:                             grad_deriv, npoints, epsilon_rho, sx)
./xc/xc_xbeef.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho, e_rho, e_0
./xc/xc_xbeef.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho_1_3, rho
./xc/xc_xbeef.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx
./xc/xc_xbeef.F:      REAL(kind=dp)                                      :: ds_ndrho, ds_rho, dt, e_ueg, e_ueg_drho, &
./xc/xc_xbeef.F:                                                            epsilon_rho43, k_lda, kf, my_rho, &
./xc/xc_xbeef.F:                                                            my_rho_1_3, s, s2, t, t3
./xc/xc_xbeef.F:      epsilon_rho43 = epsilon_rho**(4._dp/3._dp)
./xc/xc_xbeef.F:         my_rho = rho(ii)
./xc/xc_xbeef.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xbeef.F:            my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbeef.F:            e_ueg = k_lda*my_rho*my_rho_1_3
./xc/xc_xbeef.F:            e_ueg_drho = (4.0_dp/3.0_dp)*k_lda*my_rho_1_3
./xc/xc_xbeef.F:            t3 = my_rho_1_3*my_rho*2*kf !reduced gradient, denominator
./xc/xc_xbeef.F:            s = norm_drho(ii)/MAX(t3, epsilon_rho43) !reduced gradient finally
./xc/xc_xbeef.F:               ds_rho = -(4.0_dp*s)/(3.0_dp*MAX(my_rho, epsilon_rho))
./xc/xc_xbeef.F:               ds_ndrho = 1.0_dp/(MAX(t3, epsilon_rho43))
./xc/xc_xbeef.F:               e_rho(ii) = e_rho(ii)+(SUM(e_leg*a)*e_ueg_drho+SUM(de_leg*a)*dt*ds_rho*e_ueg)*sx
./xc/xc_xbeef.F:               e_ndrho(ii) = e_ndrho(ii)+(SUM(de_leg*a)*dt*ds_ndrho*e_ueg)*sx
./xc/xc_xbeef.F:!> \param rho_set ...
./xc/xc_xbeef.F:   SUBROUTINE xbeef_lsd_eval(rho_set, deriv_set, grad_deriv, xbeef_params)
./xc/xc_xbeef.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbeef.F:      REAL(kind=dp)                                      :: epsilon_rho, sx
./xc/xc_xbeef.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: e_ndrho, e_rho, norm_drho, rho, rho_1_3
./xc/xc_xbeef.F:         NULLIFY (norm_drho(i)%array, rho(i)%array, rho_1_3(i)%array)
./xc/xc_xbeef.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbeef.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbeef.F:      CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_xbeef.F:                          rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_xbeef.F:                          rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_xbeef.F:                          norm_drhob=norm_drho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_xbeef.F:      dummy => rho(1)%array
./xc/xc_xbeef.F:         e_rho(i)%array => dummy
./xc/xc_xbeef.F:         e_ndrho(i)%array => dummy
./xc/xc_xbeef.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xbeef.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(1)%array)
./xc/xc_xbeef.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xbeef.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(2)%array)
./xc/xc_xbeef.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xbeef.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(1)%array)
./xc/xc_xbeef.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xbeef.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(2)%array)
./xc/xc_xbeef.F:!$OMP                 SHARED(rho, ispin, rho_1_3, norm_drho, e_0) &
./xc/xc_xbeef.F:!$OMP                 SHARED(e_rho, e_ndrho) &
./xc/xc_xbeef.F:!$OMP                 SHARED(epsilon_rho, sx)
./xc/xc_xbeef.F:            rho_spin=rho(ispin)%array, &
./xc/xc_xbeef.F:            rho_1_3_spin=rho_1_3(ispin)%array, &
./xc/xc_xbeef.F:            norm_drho_spin=norm_drho(ispin)%array, &
./xc/xc_xbeef.F:            e_0=e_0, e_rho_spin=e_rho(ispin)%array, &
./xc/xc_xbeef.F:            e_ndrho_spin=e_ndrho(ispin)%array, &
./xc/xc_xbeef.F:            epsilon_rho=epsilon_rho, sx=sx)
./xc/xc_xbeef.F:!> \param rho_spin alpha or beta spin density
./xc/xc_xbeef.F:!> \param rho_1_3_spin rho_spin**(1./3.)
./xc/xc_xbeef.F:!> \param norm_drho_spin || grad rho_spin ||
./xc/xc_xbeef.F:!> \param e_rho_spin e_*_spin: derivative of the functional wrt. to the variables
./xc/xc_xbeef.F:!> \param e_ndrho_spin ...
./xc/xc_xbeef.F:!> \param epsilon_rho ...
./xc/xc_xbeef.F:   SUBROUTINE xbeef_lsd_calc(rho_spin, rho_1_3_spin, norm_drho_spin, e_0, &
./xc/xc_xbeef.F:                             e_rho_spin, e_ndrho_spin, grad_deriv, npoints, epsilon_rho, sx)
./xc/xc_xbeef.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rho_spin, rho_1_3_spin, norm_drho_spin
./xc/xc_xbeef.F:      REAL(kind=dp), DIMENSION(*), INTENT(inout)         :: e_0, e_rho_spin, e_ndrho_spin
./xc/xc_xbeef.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx
./xc/xc_xbeef.F:      REAL(kind=dp)                                      :: ds_ndrho, ds_rho, dt, e_ueg, e_ueg_drho, &
./xc/xc_xbeef.F:                                                            epsilon_rho43, k_lsd, kf, &
./xc/xc_xbeef.F:                                                            my_epsilon_rho, my_rho, my_rho_1_3, s, &
./xc/xc_xbeef.F:      my_epsilon_rho = 0.5_dp*epsilon_rho
./xc/xc_xbeef.F:      epsilon_rho43 = my_epsilon_rho**(4._dp/3._dp)
./xc/xc_xbeef.F:         my_rho = rho_spin(ii)
./xc/xc_xbeef.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xbeef.F:            my_rho_1_3 = rho_1_3_spin(ii)
./xc/xc_xbeef.F:            e_ueg = k_lsd*my_rho*my_rho_1_3
./xc/xc_xbeef.F:            e_ueg_drho = (4.0_dp/3.0_dp)*k_lsd*my_rho_1_3
./xc/xc_xbeef.F:            t3 = my_rho_1_3*my_rho*2*kf !reduced gradient, denominator
./xc/xc_xbeef.F:            s = norm_drho_spin(ii)/MAX(t3, epsilon_rho43) !reduced gradient finally
./xc/xc_xbeef.F:               ds_rho = -(4.0_dp*s)/(3.0_dp*MAX(my_rho, epsilon_rho))
./xc/xc_xbeef.F:               ds_ndrho = 1.0_dp/(MAX(t3, epsilon_rho43))
./xc/xc_xbeef.F:               e_rho_spin(ii) = e_rho_spin(ii)+(SUM(e_leg*a)*e_ueg_drho+SUM(de_leg*a)*dt*ds_rho*e_ueg)*sx
./xc/xc_xbeef.F:               e_ndrho_spin(ii) = e_ndrho_spin(ii)+(SUM(de_leg*a)*dt*ds_ndrho*e_ueg)*sx
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!>        rhox  = Fcorr * eps_lr_pbe + (1-Fcorr)*eps_lr_br
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!>        eps   = int_{R}^{\infty} rhox*s*ds
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              xc_rho_set_type
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         needs%rho = .TRUE.
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         needs%norm_drho = .TRUE.
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         needs%laplace_rho = .TRUE.
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         needs%rho_spin = .TRUE.
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         needs%laplace_rho_spin = .TRUE.
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:   SUBROUTINE xbr_pbe_lda_hole_tc_lr_lda_eval(rho_set, deriv_set, grad_deriv, params)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp)                                      :: epsilon_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_laplace_rho, e_ndrho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                            e_rho, e_tau, laplace_rho, norm_drho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                            rho, tau
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CALL xc_rho_set_get(rho_set, rho=rho, norm_drho=norm_drho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                          tau=tau, laplace_rho=laplace_rho, local_bounds=bo, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                          rho_cutoff=epsilon_rho)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      dummy => rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_rho => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_ndrho => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_laplace_rho => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(laplace_rho)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_laplace_rho)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(rho, norm_drho, laplace_rho, tau, e_0, e_rho) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(e_ndrho, e_tau, e_laplace_rho, grad_deriv) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(npoints, epsilon_rho) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CALL xbr_pbe_lda_hole_tc_lr_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           laplace_rho=laplace_rho, tau=tau, e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           e_tau=e_tau, e_laplace_rho=e_laplace_rho, grad_deriv=grad_deriv, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           npoints=npoints, epsilon_rho=epsilon_rho, sx=sx, R=R, gamma=gamma)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param rho values on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param norm_drho values on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param laplace_rho values on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param e_rho derivatives on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param e_ndrho derivatives on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param e_laplace_rho derivatives on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param epsilon_rho cutoffs
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:   SUBROUTINE xbr_pbe_lda_hole_tc_lr_lda_calc(rho, norm_drho, laplace_rho, tau, e_0, e_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              e_ndrho, e_tau, e_laplace_rho, grad_deriv, npoints, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              epsilon_rho, sx, R, gamma)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_laplace_rho, e_tau, e_ndrho, e_rho, e_0
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: tau, laplace_rho, norm_drho, rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R, gamma
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(dp) :: dFermi_dlaplace_rho, dFermi_dndrho, dFermi_drho, dFermi_dtau, e_0_br, e_0_lda, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         e_0_pbe, e_laplace_rho_br, e_ndrho_br, e_ndrho_pbe, e_rho_br, e_rho_lda, e_rho_pbe, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         e_tau_br, Fermi, Fx, my_laplace_rho, my_ndrho, my_rho, my_tau, ss, ss2, sscale, t1, t15, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         my_rho = 0.5_dp*MAX(rho(ip), 0.0_dp)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_ndrho = 0.5_dp*MAX(norm_drho(ip), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_laplace_rho = 0.5_dp*laplace_rho(ip)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t3 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t5 = t4*my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t8 = my_ndrho**2
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t9 = 0.1e1_dp/my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t15 = my_laplace_rho/0.6e1_dp-gamma*(2.0_dp*my_tau-t8*t9/0.4e1_dp)/0.3e1_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_rho_br = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_ndrho_br = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_laplace_rho_br = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_lte_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                        e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_gt_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                       e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_lte_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                               e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_gt_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            ! ** Attention we need to scale rho, ndrho first
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_rho = my_rho*2.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_ndrho = my_ndrho*2.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t2 = t1*my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t6 = my_ndrho*t4
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_rho_pbe = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_ndrho_pbe = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_1(e_0_pbe, e_rho_pbe, e_ndrho_pbe, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, grad_deriv)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_2(e_0_pbe, e_rho_pbe, e_ndrho_pbe, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, grad_deriv)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_rho_lda = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            CALL xlda_hole_t_c_lr_lda_calc_0(grad_deriv, my_rho, e_0_lda, e_rho_lda, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            dFermi_drho = -Fermi**2/alpha/N*(e_rho_br/e_0_lda-e_0_br*e_rho_lda/e_0_lda**2)*EXP((Fx-mu)/N)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            dFermi_dndrho = -Fermi**2/alpha/N*(e_ndrho_br/e_0_lda)*EXP((Fx-mu)/N)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            dFermi_dlaplace_rho = -Fermi**2/alpha/N*(e_laplace_rho_br/e_0_lda)*EXP((Fx-mu)/N)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               e_rho(ip) = e_rho(ip)+(Fermi*e_rho_pbe+dFermi_drho*e_0_pbe+ &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                      (1.0_dp-Fermi)*e_rho_br-dFermi_drho*e_0_br)*sx
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               e_ndrho(ip) = e_ndrho(ip)+(Fermi*e_ndrho_pbe+dFermi_dndrho*e_0_pbe+ &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                          (1.0_dp-Fermi)*e_ndrho_br-dFermi_dndrho*e_0_br)*sx
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               e_laplace_rho(ip) = e_laplace_rho(ip)+(dFermi_dlaplace_rho*e_0_pbe+ &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                      (1.0_dp-Fermi)*e_laplace_rho_br-dFermi_dlaplace_rho*e_0_br)*sx
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:   SUBROUTINE xbr_pbe_lda_hole_tc_lr_lsd_eval(rho_set, deriv_set, grad_deriv, params)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp)                                      :: epsilon_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_laplace_rhoa, e_laplace_rhob, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         e_ndrhoa, e_ndrhob, e_rhoa, e_rhob, e_tau_a, e_tau_b, laplace_rhoa, laplace_rhob, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         norm_drhoa, norm_drhob, rhoa, rhob, tau_a, tau_b
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                          norm_drhob=norm_drhob, tau_a=tau_a, tau_b=tau_b, laplace_rhoa=laplace_rhoa, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                          laplace_rhob=laplace_rhob, local_bounds=bo, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                          rho_cutoff=epsilon_rho)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      dummy => rhoa
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_rhoa => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_rhob => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_ndrhoa => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_ndrhob => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_laplace_rhoa => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      e_laplace_rhob => dummy
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(laplace_rhoa)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_laplace_rhoa)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(laplace_rhob)", &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_laplace_rhob)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(rhoa, norm_drhoa, laplace_rhoa, tau_a, e_0) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(e_rhoa, e_ndrhoa, e_tau_a, e_laplace_rhoa) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(grad_deriv, npoints, epsilon_rho) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(rhob, norm_drhob, laplace_rhob, tau_b, e_rhob) &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!$OMP              SHARED(e_ndrhob, e_tau_b, e_laplace_rhob)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CALL xbr_pbe_lda_hole_tc_lr_lsd_calc(rho=rhoa, norm_drho=norm_drhoa, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           laplace_rho=laplace_rhoa, tau=tau_a, e_0=e_0, e_rho=e_rhoa, e_ndrho=e_ndrhoa, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           e_tau=e_tau_a, e_laplace_rho=e_laplace_rhoa, grad_deriv=grad_deriv, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      CALL xbr_pbe_lda_hole_tc_lr_lsd_calc(rho=rhob, norm_drho=norm_drhob, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           laplace_rho=laplace_rhob, tau=tau_b, e_0=e_0, e_rho=e_rhob, e_ndrho=e_ndrhob, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           e_tau=e_tau_b, e_laplace_rho=e_laplace_rhob, grad_deriv=grad_deriv, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                           npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param rho values on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param norm_drho values on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param laplace_rho values on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param e_rho derivatives on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param e_ndrho derivatives on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param e_laplace_rho derivatives on the grid
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:!> \param epsilon_rho cutoffs
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:   SUBROUTINE xbr_pbe_lda_hole_tc_lr_lsd_calc(rho, norm_drho, laplace_rho, tau, e_0, e_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              e_ndrho, e_tau, e_laplace_rho, grad_deriv, npoints, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              epsilon_rho, sx, R, gamma)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_laplace_rho, e_tau, e_ndrho, e_rho, e_0
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: tau, laplace_rho, norm_drho, rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R, gamma
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:      REAL(dp) :: dFermi_dlaplace_rho, dFermi_dndrho, dFermi_drho, dFermi_dtau, e_0_br, e_0_lda, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         e_0_pbe, e_laplace_rho_br, e_ndrho_br, e_ndrho_pbe, e_rho_br, e_rho_lda, e_rho_pbe, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         e_tau_br, Fermi, Fx, my_laplace_rho, my_ndrho, my_rho, my_tau, ss, ss2, sscale, t1, t15, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         my_rho = MAX(rho(ip), 0.0_dp)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_ndrho = MAX(norm_drho(ip), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_laplace_rho = 1.0_dp*laplace_rho(ip)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t3 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t5 = t4*my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t8 = my_ndrho**2
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t9 = 0.1e1_dp/my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t15 = my_laplace_rho/0.6e1_dp-gamma*(2.0_dp*my_tau-t8*t9/0.4e1_dp)/0.3e1_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_rho_br = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_ndrho_br = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_laplace_rho_br = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_lte_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                        e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_gt_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                       e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_lte_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                               e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                  CALL x_br_lsd_y_gt_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                              e_rho_br, e_ndrho_br, e_tau_br, e_laplace_rho_br, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            ! ** Attention we need to scale rho, ndrho first
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_rho = my_rho*2.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            my_ndrho = my_ndrho*2.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t2 = t1*my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t6 = my_ndrho*t4
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_rho_pbe = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_ndrho_pbe = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_1(e_0_pbe, e_rho_pbe, e_ndrho_pbe, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, grad_deriv)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_2(e_0_pbe, e_rho_pbe, e_ndrho_pbe, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, grad_deriv)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            e_rho_lda = 0.0_dp
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            CALL xlda_hole_t_c_lr_lda_calc_0(grad_deriv, my_rho, e_0_lda, e_rho_lda, &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            dFermi_drho = -Fermi**2/alpha/N*(e_rho_br/e_0_lda-e_0_br*e_rho_lda/e_0_lda**2)*EXP((Fx-mu)/N)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            dFermi_dndrho = -Fermi**2/alpha/N*(e_ndrho_br/e_0_lda)*EXP((Fx-mu)/N)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:            dFermi_dlaplace_rho = -Fermi**2/alpha/N*(e_laplace_rho_br/e_0_lda)*EXP((Fx-mu)/N)
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               e_rho(ip) = e_rho(ip)+(Fermi*e_rho_pbe+dFermi_drho*e_0_pbe+ &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                      (1.0_dp-Fermi)*e_rho_br-dFermi_drho*e_0_br)*sx
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               e_ndrho(ip) = e_ndrho(ip)+(Fermi*e_ndrho_pbe+dFermi_dndrho*e_0_pbe+ &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                          (1.0_dp-Fermi)*e_ndrho_br-dFermi_dndrho*e_0_br)*sx
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:               e_laplace_rho(ip) = e_laplace_rho(ip)+(dFermi_dlaplace_rho*e_0_pbe+ &
./xc/xc_xbr_pbe_lda_hole_t_c_lr.F:                                                      (1.0_dp-Fermi)*e_laplace_rho_br-dFermi_dlaplace_rho*e_0_br)*sx
./xc/xc_pbe.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_pbe.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_pbe.F:                                              xc_rho_set_type
./xc/xc_pbe.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_pbe.F:               reference = "J.P.Perdew, K.Burke, M.Ernzerhof, "// &
./xc/xc_pbe.F:               shortform = "PBE Perdew-Burke-Ernzerhof xc functional (unpolarized)"
./xc/xc_pbe.F:                  "J.P.Perdew, K.Burke, M.Ernzerhof, ", &
./xc/xc_pbe.F:                  "PBE, Perdew-Burke-Ernzerhof xc functional (unpolarized)", sx, sc
./xc/xc_pbe.F:         needs%rho = .TRUE.
./xc/xc_pbe.F:         needs%norm_drho = .TRUE.
./xc/xc_pbe.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_pbe.F:               reference = "J.P.Perdew, K.Burke, M.Ernzerhof, "// &
./xc/xc_pbe.F:                  "J.P.Perdew, K.Burke, M.Ernzerhof, ", &
./xc/xc_pbe.F:         needs%rho_spin = .TRUE.
./xc/xc_pbe.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_pbe.F:         needs%norm_drho = .TRUE.
./xc/xc_pbe.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_pbe.F:   SUBROUTINE pbe_lda_eval(rho_set, deriv_set, grad_deriv, pbe_params)
./xc/xc_pbe.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_pbe.F:      REAL(kind=dp)                                      :: epsilon_rho, scale_ec, scale_ex
./xc/xc_pbe.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_pbe.F:         e_ndrho_ndrho_ndrho, e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, &
./xc/xc_pbe.F:         e_rho_rho_rho, norm_drho, rho
./xc/xc_pbe.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_pbe.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_pbe.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_pbe.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_pbe.F:      dummy => rho
./xc/xc_pbe.F:      e_rho => dummy
./xc/xc_pbe.F:      e_ndrho => dummy
./xc/xc_pbe.F:      e_rho_rho => dummy
./xc/xc_pbe.F:      e_ndrho_rho => dummy
./xc/xc_pbe.F:      e_ndrho_ndrho => dummy
./xc/xc_pbe.F:      e_rho_rho_rho => dummy
./xc/xc_pbe.F:      e_ndrho_rho_rho => dummy
./xc/xc_pbe.F:      e_ndrho_ndrho_rho => dummy
./xc/xc_pbe.F:      e_ndrho_ndrho_ndrho => dummy
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_pbe.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_pbe.F:                                         "(norm_drho)(rho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho)
./xc/xc_pbe.F:                                         "(norm_drho)(norm_drho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho)
./xc/xc_pbe.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_pbe.F:!$OMP SHARED(rho,norm_drho,e_0,e_rho,e_ndrho,e_rho_rho,e_ndrho_rho),&
./xc/xc_pbe.F:!$OMP SHARED(e_ndrho_ndrho,e_rho_rho_rho,e_ndrho_rho_rho,e_ndrho_ndrho_rho),&
./xc/xc_pbe.F:!$OMP SHARED(e_ndrho_ndrho_ndrho,grad_deriv,npoints,epsilon_rho),&
./xc/xc_pbe.F:      CALL pbe_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_pbe.F:                        e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_rho_rho=e_rho_rho, &
./xc/xc_pbe.F:                        e_ndrho_rho=e_ndrho_rho, e_ndrho_ndrho=e_ndrho_ndrho, &
./xc/xc_pbe.F:                        e_rho_rho_rho=e_rho_rho_rho, e_ndrho_rho_rho=e_ndrho_rho_rho, &
./xc/xc_pbe.F:                        e_ndrho_ndrho_rho=e_ndrho_ndrho_rho, e_ndrho_ndrho_ndrho=e_ndrho_ndrho_ndrho, &
./xc/xc_pbe.F:                        npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_pbe.F:!> \param rho the density where you want to evaluate the functional
./xc/xc_pbe.F:!> \param norm_drho ...
./xc/xc_pbe.F:!> \param e_rho ...
./xc/xc_pbe.F:!> \param e_ndrho ...
./xc/xc_pbe.F:!> \param e_rho_rho ...
./xc/xc_pbe.F:!> \param e_ndrho_rho ...
./xc/xc_pbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_pbe.F:!> \param e_rho_rho_rho ...
./xc/xc_pbe.F:!> \param e_ndrho_rho_rho ...
./xc/xc_pbe.F:!> \param e_ndrho_ndrho_rho ...
./xc/xc_pbe.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_pbe.F:!> \param epsilon_rho ...
./xc/xc_pbe.F:   SUBROUTINE pbe_lda_calc(rho, norm_drho, &
./xc/xc_pbe.F:                           e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_pbe.F:                           e_ndrho_ndrho, e_rho_rho_rho, e_ndrho_rho_rho, e_ndrho_ndrho_rho, &
./xc/xc_pbe.F:                           e_ndrho_ndrho_ndrho, grad_deriv, npoints, epsilon_rho, &
./xc/xc_pbe.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho_ndrho_ndrho, &
./xc/xc_pbe.F:         e_ndrho_ndrho_rho, e_ndrho_rho_rho, e_rho_rho_rho, e_ndrho_ndrho, e_ndrho_rho, e_rho_rho, &
./xc/xc_pbe.F:         e_ndrho, e_rho, e_0
./xc/xc_pbe.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho
./xc/xc_pbe.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho
./xc/xc_pbe.F:      REAL(kind=dp) :: A, A1rho, A1rhorho, A2rho, A_1, alpha_1_1, Arho, Arho1rho, Arhorho, &
./xc/xc_pbe.F:         Arhorhorho, beta, beta_1_1, beta_2_1, beta_3_1, beta_4_1, e_c_u_0, e_c_u_01rho, &
./xc/xc_pbe.F:         e_c_u_01rhorho, e_c_u_02rho, e_c_u_0rho, e_c_u_0rho1rho, e_c_u_0rhorho, e_c_u_0rhorhorho, &
./xc/xc_pbe.F:         epsilon_cGGA, epsilon_cGGArho, epsilon_cGGArhorho, ex_ldarhorhorho, ex_unif, ex_unif1rho, &
./xc/xc_pbe.F:         ex_unif1rhorho, ex_unif2rho, ex_unifrho, ex_unifrho1rho, ex_unifrhorho, Fx, Fx1rho, &
./xc/xc_pbe.F:         Fx1rhorho, Fx2rho, Fxnorm_drho, Fxnorm_drho1rho, Fxnorm_drhonorm_drho, Fxnorm_drhorho, &
./xc/xc_pbe.F:         Fxrho, Fxrho1rho, Fxrhorho, gamma_var, Hnorm_drho, Hnorm_drhonorm_drho
./xc/xc_pbe.F:      REAL(kind=dp) :: Hnorm_drhorho, k_f, k_f2rho, k_frho, k_frhorho, k_frhorhorho, k_s, k_s1rho, &
./xc/xc_pbe.F:         k_s1rhorho, k_s2rho, k_srho, k_srho1rho, k_srhorho, kappa, kf, kf2rho, kfrho, kfrhorho, &
./xc/xc_pbe.F:         kfrhorhorho, mu, my_norm_drho, my_rho, p_1, p_2, rs, rs2rho, rsrho, rsrhorho, &
./xc/xc_pbe.F:         rsrhorhorho, s, s1rho, s1rhorho, s2norm_drho, s2rho, snorm_drho, snorm_drho1rho, &
./xc/xc_pbe.F:         snorm_drhorho, srho, srho1rho, srhorho, t, t1, t1001, t1004, t1005, t1006, t1008, t101, &
./xc/xc_pbe.F:         t1972, t198, t1990, t1rho, t1rhorho, t2, t20, t200, t202, t2020, t2024, t2028, t2031, &
./xc/xc_pbe.F:         t293, t294, t295, t296, t297, t299, t2norm_drho, t2rho, t3, t305, t309, t310, t315, t317, &
./xc/xc_pbe.F:         t99, t990, t994, t995, t998, t999, tnorm_drho, tnorm_drho1rho, tnorm_drhorho, &
./xc/xc_pbe.F:         tnorm_drhorhorho, trho, trho1rho, trhorho, trhorhorho
./xc/xc_pbe.F:! scale_ec, scale_ex, snorm_drho, snorm_drho1rho, snorm_drhorho, srho, &
./xc/xc_pbe.F:            my_rho = rho(ii)
./xc/xc_pbe.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_pbe.F:               my_norm_drho = norm_drho(ii)
./xc/xc_pbe.F:               t6 = 0.1e1_dp/my_rho
./xc/xc_pbe.F:               t70 = t69*my_rho
./xc/xc_pbe.F:               t75 = my_norm_drho*t74
./xc/xc_pbe.F:               t99 = my_norm_drho*t98
./xc/xc_pbe.F:               t108 = my_rho*ex_unif
./xc/xc_pbe.F:                            scale_ex*t108*Fx+scale_ec*my_rho*epsilon_cGGA
./xc/xc_pbe.F:               t114 = my_rho**2
./xc/xc_pbe.F:               rsrho = -t4*t113*t115/0.12e2_dp
./xc/xc_pbe.F:               t138 = t127*rsrho/0.2e1_dp+beta_2_1*rsrho+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t131*rsrho+t21*t19*rsrho*t135
./xc/xc_pbe.F:               e_c_u_0rho = -0.2e1_dp*t119*rsrho*t27+t125*t140
./xc/xc_pbe.F:               k_frho = t1/t142*t69/0.3e1_dp
./xc/xc_pbe.F:               k_srho = t146*k_frho*t5
./xc/xc_pbe.F:               t150 = my_norm_drho*t149
./xc/xc_pbe.F:               t151 = t6*k_srho
./xc/xc_pbe.F:               trho = -t150*t151/0.2e1_dp-t153/0.2e1_dp
./xc/xc_pbe.F:               Arho = t157*t159*e_c_u_0rho*t80
./xc/xc_pbe.F:               t164 = t163*trho
./xc/xc_pbe.F:               t167 = Arho*t83
./xc/xc_pbe.F:               t170 = 0.2e1_dp*t168*trho
./xc/xc_pbe.F:               t186 = t167+t170+0.2e1_dp*t179*Arho+0.4e1_dp*t183*trho
./xc/xc_pbe.F:               epsilon_cGGArho = e_c_u_0rho+t190*t191
./xc/xc_pbe.F:               kfrho = k_frho
./xc/xc_pbe.F:               ex_unifrho = -0.3e1_dp/0.4e1_dp*t5*kfrho
./xc/xc_pbe.F:               t197 = my_norm_drho*t196
./xc/xc_pbe.F:               t198 = t6*kfrho
./xc/xc_pbe.F:               srho = -t197*t198/0.2e1_dp-t200/0.2e1_dp
./xc/xc_pbe.F:               Fxrho = 0.2e1_dp*t204*s*srho
./xc/xc_pbe.F:               t208 = my_rho*ex_unifrho
./xc/xc_pbe.F:                  e_rho(ii) = e_rho(ii)+ &
./xc/xc_pbe.F:                              scale_ex*(ex_unif*Fx+t208*Fx+t108*Fxrho)+ &
./xc/xc_pbe.F:                              scale_ec*(epsilon_cGGA+my_rho*epsilon_cGGArho)
./xc/xc_pbe.F:               tnorm_drho = t74*t6/0.2e1_dp
./xc/xc_pbe.F:               t214 = t163*tnorm_drho
./xc/xc_pbe.F:               t218 = A*tnorm_drho
./xc/xc_pbe.F:               t226 = 0.2e1_dp*t168*tnorm_drho+0.4e1_dp*t183*tnorm_drho
./xc/xc_pbe.F:               Hnorm_drho = t230*t191
./xc/xc_pbe.F:               snorm_drho = t98*t6/0.2e1_dp
./xc/xc_pbe.F:               Fxnorm_drho = 0.2e1_dp*t204*s*snorm_drho
./xc/xc_pbe.F:                  e_ndrho(ii) = e_ndrho(ii)+ &
./xc/xc_pbe.F:                                scale_ex*t108*Fxnorm_drho+scale_ec*my_rho* &
./xc/xc_pbe.F:                                Hnorm_drho
./xc/xc_pbe.F:               t246 = 0.1e1_dp/t114/my_rho
./xc/xc_pbe.F:               rsrhorho = -t4*t239*t241/0.18e2_dp+t4*t113* &
./xc/xc_pbe.F:               t252 = 0.2e1_dp*t119*rsrhorho*t27
./xc/xc_pbe.F:               t253 = alpha_1_1*rsrho
./xc/xc_pbe.F:               t267 = rsrho**2
./xc/xc_pbe.F:               t271 = t127*rsrhorho/0.2e1_dp
./xc/xc_pbe.F:               t272 = beta_2_1*rsrhorho
./xc/xc_pbe.F:               t277 = 0.3e1_dp/0.2e1_dp*t131*rsrhorho
./xc/xc_pbe.F:               t286 = t21*t19*rsrhorho*t135
./xc/xc_pbe.F:               e_c_u_0rhorho = -t252+0.2e1_dp*t253*t255-0.2e1_dp*t260* &
./xc/xc_pbe.F:               e_c_u_01rho = e_c_u_0rho
./xc/xc_pbe.F:               k_frhorho = -0.2e1_dp/0.9e1_dp*t1/t142/t70*t305
./xc/xc_pbe.F:               t310 = k_frho**2
./xc/xc_pbe.F:               t315 = t146*k_frhorho*t5
./xc/xc_pbe.F:               k_srhorho = -t309*t310*t238/0.2e1_dp+t315
./xc/xc_pbe.F:               k_s1rho = k_srho
./xc/xc_pbe.F:               t318 = my_norm_drho*t317
./xc/xc_pbe.F:               t321 = t115*k_srho
./xc/xc_pbe.F:               t324 = t6*k_srhorho
./xc/xc_pbe.F:               t327 = t115*k_s1rho
./xc/xc_pbe.F:               trhorho = t318*t151*k_s1rho+t323-t150*t324/0.2e1_dp+ &
./xc/xc_pbe.F:               t331 = t6*k_s1rho
./xc/xc_pbe.F:               t1rho = -t150*t331/0.2e1_dp-t153/0.2e1_dp
./xc/xc_pbe.F:               t341 = e_c_u_0rho*t340
./xc/xc_pbe.F:               t349 = e_c_u_0rho*e_c_u_01rho
./xc/xc_pbe.F:               Arhorho = 0.2e1_dp*t339*t341*e_c_u_01rho+t157*t159* &
./xc/xc_pbe.F:                         e_c_u_0rhorho*t80-t348*t349*t80
./xc/xc_pbe.F:               A1rho = t157*t159*e_c_u_01rho*t80
./xc/xc_pbe.F:               t354 = t78*t1rho
./xc/xc_pbe.F:               t357 = A1rho*t83
./xc/xc_pbe.F:               t359 = 0.2e1_dp*t168*t1rho
./xc/xc_pbe.F:               t362 = t361*trho
./xc/xc_pbe.F:               t369 = t357+t359+0.2e1_dp*t179*A1rho+0.4e1_dp*t183*t1rho
./xc/xc_pbe.F:               t370 = trho*t369
./xc/xc_pbe.F:               t374 = t163*trhorho
./xc/xc_pbe.F:               t378 = t377*t1rho
./xc/xc_pbe.F:               t381 = Arhorho*t83
./xc/xc_pbe.F:               t382 = Arho*t
./xc/xc_pbe.F:               t384 = 0.2e1_dp*t382*t1rho
./xc/xc_pbe.F:               t385 = A1rho*t
./xc/xc_pbe.F:               t387 = 0.2e1_dp*t385*trho
./xc/xc_pbe.F:               t388 = A*t1rho
./xc/xc_pbe.F:               t390 = 0.2e1_dp*t388*trho
./xc/xc_pbe.F:               t392 = 0.2e1_dp*t168*trhorho
./xc/xc_pbe.F:               t400 = t186*t1rho
./xc/xc_pbe.F:               t414 = A1rho*t88
./xc/xc_pbe.F:               t418 = Arho*t1rho
./xc/xc_pbe.F:               t423 = trho*A1rho
./xc/xc_pbe.F:               t427 = trho*t1rho
./xc/xc_pbe.F:               t432 = t381+t384+t387+t390+t392+0.2e1_dp*t414*Arho+ &
./xc/xc_pbe.F:                      0.8e1_dp*t417*t418+0.2e1_dp*t179*Arhorho+0.8e1_dp* &
./xc/xc_pbe.F:                      t417*t423+0.12e2_dp*t426*t427+0.4e1_dp*t183*trhorho
./xc/xc_pbe.F:               t440 = t163*t1rho
./xc/xc_pbe.F:               epsilon_cGGArhorho = e_c_u_0rhorho+t436*t191-t190*t449
./xc/xc_pbe.F:               kfrhorho = k_frhorho
./xc/xc_pbe.F:               ex_unifrhorho = -0.3e1_dp/0.4e1_dp*t5*kfrhorho
./xc/xc_pbe.F:               ex_unif1rho = ex_unifrho
./xc/xc_pbe.F:               t457 = my_norm_drho*t456
./xc/xc_pbe.F:               t458 = kfrho**2
./xc/xc_pbe.F:               t461 = t115*kfrho
./xc/xc_pbe.F:               t463 = t6*kfrhorho
./xc/xc_pbe.F:               srhorho = t457*t459+t462-t465+t466
./xc/xc_pbe.F:               s1rho = srho
./xc/xc_pbe.F:               t472 = srho*t103
./xc/xc_pbe.F:               t476 = s1rho*srho
./xc/xc_pbe.F:               Fxrhorho = -0.8e1_dp*t471*t472*s1rho+0.2e1_dp*t204* &
./xc/xc_pbe.F:                          t476+0.2e1_dp*t204*s*srhorho
./xc/xc_pbe.F:               Fx1rho = 0.2e1_dp*t204*s*s1rho
./xc/xc_pbe.F:               t487 = my_rho*ex_unifrhorho
./xc/xc_pbe.F:               t491 = my_rho*ex_unif1rho
./xc/xc_pbe.F:                  e_rho_rho(ii) = e_rho_rho(ii)+ &
./xc/xc_pbe.F:                                  scale_ex*(ex_unif1rho*Fx+ex_unif*Fx1rho+ &
./xc/xc_pbe.F:                                            ex_unifrho*Fx+t487*Fx+t208*Fx1rho+ex_unif*Fxrho+t491 &
./xc/xc_pbe.F:                                            *Fxrho+t108*Fxrhorho)+scale_ec*(e_c_u_01rho+t451*t191 &
./xc/xc_pbe.F:                                                                            +epsilon_cGGArho+my_rho*epsilon_cGGArhorho)
./xc/xc_pbe.F:               tnorm_drhorho = -t496*k_srho/0.2e1_dp-t498/0.2e1_dp
./xc/xc_pbe.F:               t500 = t78*trho
./xc/xc_pbe.F:               t503 = t377*tnorm_drho
./xc/xc_pbe.F:               t506 = tnorm_drho*t186
./xc/xc_pbe.F:               t510 = t163*tnorm_drhorho
./xc/xc_pbe.F:               t513 = t91*trho
./xc/xc_pbe.F:               t517 = Arho*tnorm_drho
./xc/xc_pbe.F:               t521 = A*tnorm_drhorho
./xc/xc_pbe.F:               t529 = t226*trho
./xc/xc_pbe.F:               t541 = A*trho
./xc/xc_pbe.F:               t548 = tnorm_drho*trho
./xc/xc_pbe.F:               t553 = 0.2e1_dp*t382*tnorm_drho+0.2e1_dp*t541*tnorm_drho &
./xc/xc_pbe.F:                      +0.2e1_dp*t168*tnorm_drhorho+0.8e1_dp*t417*t517+ &
./xc/xc_pbe.F:                      0.12e2_dp*t426*t548+0.4e1_dp*t183*tnorm_drhorho
./xc/xc_pbe.F:               Hnorm_drhorho = t557*t191-t230*t559
./xc/xc_pbe.F:               snorm_drhorho = -t562*kfrho/0.2e1_dp-t98*t115/0.2e1_dp
./xc/xc_pbe.F:               t566 = snorm_drho*t103
./xc/xc_pbe.F:               Fxnorm_drhorho = -0.8e1_dp*t471*t566*srho+0.2e1_dp*t204 &
./xc/xc_pbe.F:                                *srho*snorm_drho+0.2e1_dp*t204*s*snorm_drhorho
./xc/xc_pbe.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii)+ &
./xc/xc_pbe.F:                                    scale_ex*(ex_unif*Fxnorm_drho+t208* &
./xc/xc_pbe.F:                                              Fxnorm_drho+t108*Fxnorm_drhorho)+scale_ec*(Hnorm_drho+my_rho &
./xc/xc_pbe.F:                                                                                         *Hnorm_drhorho)
./xc/xc_pbe.F:               t581 = tnorm_drho**2
./xc/xc_pbe.F:               t590 = tnorm_drho*t226
./xc/xc_pbe.F:               Hnorm_drhonorm_drho = t609*t191-t612*t439
./xc/xc_pbe.F:               t614 = snorm_drho**2
./xc/xc_pbe.F:               Fxnorm_drhonorm_drho = -0.8e1_dp*t470*t101*t614*t103+ &
./xc/xc_pbe.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+ &
./xc/xc_pbe.F:                                      scale_ex*t108*Fxnorm_drhonorm_drho+ &
./xc/xc_pbe.F:                                      scale_ec*my_rho*Hnorm_drhonorm_drho
./xc/xc_pbe.F:                  rsrhorhorho = -0.5e1_dp/0.54e2_dp*t4/t111/t238/ &
./xc/xc_pbe.F:                                t115*t627/t240/t114+t4*t239/t240/my_rho/0.3e1_dp &
./xc/xc_pbe.F:                  rs2rho = rsrho
./xc/xc_pbe.F:                  t645 = alpha_1_1*rsrhorho
./xc/xc_pbe.F:                  t654 = t127*rs2rho/0.2e1_dp+beta_2_1*rs2rho+0.3e1_dp/ &
./xc/xc_pbe.F:                         0.2e1_dp*t131*rs2rho+t21*t19*rs2rho*t135
./xc/xc_pbe.F:                  t664 = rsrho*rs2rho
./xc/xc_pbe.F:                  t670 = rs2rho*t281
./xc/xc_pbe.F:                  t671 = t670*rsrho
./xc/xc_pbe.F:                  t685 = alpha_1_1*rs2rho
./xc/xc_pbe.F:                  t714 = t267*rs2rho
./xc/xc_pbe.F:                  t717 = rsrhorho*rsrho
./xc/xc_pbe.F:                  t720 = rsrhorho*rs2rho
./xc/xc_pbe.F:                  t740 = rs2rho/t280/rs*t267
./xc/xc_pbe.F:                  t743 = rsrhorho*t281*rsrho
./xc/xc_pbe.F:                  t748 = t670*rsrhorho
./xc/xc_pbe.F:                         t717/0.2e1_dp-t266*t720/0.4e1_dp+t127*rsrhorhorho/ &
./xc/xc_pbe.F:                         0.2e1_dp+beta_2_1*rsrhorhorho-0.3e1_dp/0.8e1_dp*beta_3_1* &
./xc/xc_pbe.F:                         0.4e1_dp*t273*t720+0.3e1_dp/0.2e1_dp*t131*rsrhorhorho+ &
./xc/xc_pbe.F:                         t740+t669*t748+t21*t19*rsrhorhorho*t135-t673*t748- &
./xc/xc_pbe.F:                  e_c_u_0rhorhorho = -0.2e1_dp*t119*rsrhorhorho*t27+t645* &
./xc/xc_pbe.F:                  e_c_u_0rho1rho = -t252+t253*t656+t685*t255-0.2e1_dp* &
./xc/xc_pbe.F:                  e_c_u_01rhorho = e_c_u_0rho1rho
./xc/xc_pbe.F:                  e_c_u_02rho = -0.2e1_dp*t119*rs2rho*t27+t125*t654*t139
./xc/xc_pbe.F:                  k_frhorhorho = 0.10e2_dp/0.27e2_dp*t1/t142/t114*t69
./xc/xc_pbe.F:                  k_f2rho = kfrho
./xc/xc_pbe.F:                  t809 = t309*k_frhorho
./xc/xc_pbe.F:                  t812 = t238*k_f2rho
./xc/xc_pbe.F:                  k_srho1rho = -t309*k_frho*t812/0.2e1_dp+t315
./xc/xc_pbe.F:                  k_s1rhorho = k_srho1rho
./xc/xc_pbe.F:                  k_s2rho = t146*k_f2rho*t5
./xc/xc_pbe.F:                  t825 = k_srho*k_s1rho
./xc/xc_pbe.F:                  t831 = t6*k_srho1rho
./xc/xc_pbe.F:                  trhorhorho = -0.3e1_dp*my_norm_drho/t821*t6*t825*k_s2rho- &
./xc/xc_pbe.F:                               t318*t321*k_s1rho+t318*t831*k_s1rho+t318*t151* &
./xc/xc_pbe.F:                               k_s1rhorho-t318*t321*k_s2rho-t150*t246*k_srho+t150* &
./xc/xc_pbe.F:                               t115*k_srho1rho/0.2e1_dp+t318*t324*k_s2rho+t150*t115* &
./xc/xc_pbe.F:                               k_srhorho/0.2e1_dp-t150*t6*(0.3e1_dp/0.4e1_dp/t73/ &
./xc/xc_pbe.F:                                                           t801/t238*t310*t627*k_f2rho-t809*t238*k_frho-t809* &
./xc/xc_pbe.F:                                                           t812/0.2e1_dp+t146*k_frhorhorho*t5)/0.2e1_dp-t318*t327 &
./xc/xc_pbe.F:                               *k_s2rho-t150*t246*k_s1rho+t150*t115*k_s1rhorho/ &
./xc/xc_pbe.F:                               0.2e1_dp-t150*t246*k_s2rho-0.3e1_dp*t75*t241
./xc/xc_pbe.F:                  t868 = t150*t115*k_s2rho/0.2e1_dp
./xc/xc_pbe.F:                  trho1rho = t318*t151*k_s2rho+t323-t150*t831/0.2e1_dp+ &
./xc/xc_pbe.F:                  t1rhorho = t318*t331*k_s2rho+t329-t150*t6*k_s1rhorho/ &
./xc/xc_pbe.F:                  t2rho = -t150*t6*k_s2rho/0.2e1_dp-t153/0.2e1_dp
./xc/xc_pbe.F:                  t885 = e_c_u_01rho*e_c_u_02rho
./xc/xc_pbe.F:                  Arhorhorho = 0.6e1_dp*t879/t880*e_c_u_0rho*t340*t80* &
./xc/xc_pbe.F:                               t885+0.2e1_dp*t339*e_c_u_0rho1rho*t340*e_c_u_01rho- &
./xc/xc_pbe.F:                               e_c_u_01rhorho+0.2e1_dp*t339*e_c_u_0rhorho*t340* &
./xc/xc_pbe.F:                               e_c_u_02rho+t157*t159*e_c_u_0rhorhorho*t80-t348* &
./xc/xc_pbe.F:                               e_c_u_0rhorho*e_c_u_02rho*t80-t348*e_c_u_0rho1rho* &
./xc/xc_pbe.F:                               e_c_u_01rho*t80-t348*e_c_u_0rho*e_c_u_01rhorho*t80+t879 &
./xc/xc_pbe.F:                               *t159*t349*e_c_u_02rho*t80
./xc/xc_pbe.F:                  Arho1rho = 0.2e1_dp*t339*t341*e_c_u_02rho+t157*t159* &
./xc/xc_pbe.F:                             e_c_u_0rho1rho*t80-t348*e_c_u_0rho*e_c_u_02rho*t80
./xc/xc_pbe.F:                  A1rhorho = 0.2e1_dp*t339*e_c_u_01rho*t340*e_c_u_02rho+ &
./xc/xc_pbe.F:                             t157*t159*e_c_u_01rhorho*t80-t348*t885*t80
./xc/xc_pbe.F:                  A2rho = t157*t159*e_c_u_02rho*t80
./xc/xc_pbe.F:                  t940 = Arho1rho*t83
./xc/xc_pbe.F:                  t942 = 0.2e1_dp*t382*t2rho
./xc/xc_pbe.F:                  t943 = A2rho*t
./xc/xc_pbe.F:                  t945 = 0.2e1_dp*t943*trho
./xc/xc_pbe.F:                  t946 = A*t2rho
./xc/xc_pbe.F:                  t948 = 0.2e1_dp*t946*trho
./xc/xc_pbe.F:                  t950 = 0.2e1_dp*t168*trho1rho
./xc/xc_pbe.F:                  t951 = A2rho*t88
./xc/xc_pbe.F:                  t954 = Arho*t2rho
./xc/xc_pbe.F:                  t967 = t940+t942+t945+t948+t950+0.2e1_dp*t951*Arho+ &
./xc/xc_pbe.F:                         0.8e1_dp*t417*t954+0.2e1_dp*t179*Arho1rho+0.8e1_dp* &
./xc/xc_pbe.F:                         t417*trho*A2rho+0.12e2_dp*t426*trho*t2rho+0.4e1_dp* &
./xc/xc_pbe.F:                         t183*trho1rho
./xc/xc_pbe.F:                  t976 = t78*t2rho
./xc/xc_pbe.F:                  t982 = A2rho*t83
./xc/xc_pbe.F:                  t984 = 0.2e1_dp*t168*t2rho
./xc/xc_pbe.F:                  t989 = t982+t984+0.2e1_dp*t179*A2rho+0.4e1_dp*t183*t2rho
./xc/xc_pbe.F:                  t998 = Arhorhorho*t83
./xc/xc_pbe.F:                  t999 = Arhorho*t
./xc/xc_pbe.F:                  t1001 = 0.2e1_dp*t999*t2rho
./xc/xc_pbe.F:                  t1004 = 0.2e1_dp*Arho1rho*t*t1rho
./xc/xc_pbe.F:                  t1005 = t954*t1rho
./xc/xc_pbe.F:                  t1008 = 0.2e1_dp*t382*t1rhorho
./xc/xc_pbe.F:                  t1011 = 0.2e1_dp*A1rhorho*t*trho
./xc/xc_pbe.F:                  t1012 = A1rho*t2rho
./xc/xc_pbe.F:                  t1013 = t1012*trho
./xc/xc_pbe.F:                  t1016 = 0.2e1_dp*t385*trho1rho
./xc/xc_pbe.F:                  t1017 = A2rho*t1rho
./xc/xc_pbe.F:                  t1018 = t1017*trho
./xc/xc_pbe.F:                  t1022 = 0.2e1_dp*A*t1rhorho*trho
./xc/xc_pbe.F:                  t1024 = 0.2e1_dp*t388*trho1rho
./xc/xc_pbe.F:                  t1026 = 0.2e1_dp*t943*trhorho
./xc/xc_pbe.F:                  t1028 = 0.2e1_dp*t946*trhorho
./xc/xc_pbe.F:                  t1030 = 0.2e1_dp*t168*trhorhorho
./xc/xc_pbe.F:                  t1042 = t369*t2rho
./xc/xc_pbe.F:                  t1046 = A1rhorho*t83
./xc/xc_pbe.F:                  t1048 = 0.2e1_dp*t385*t2rho
./xc/xc_pbe.F:                  t1050 = 0.2e1_dp*t943*t1rho
./xc/xc_pbe.F:                  t1052 = 0.2e1_dp*t946*t1rho
./xc/xc_pbe.F:                  t1054 = 0.2e1_dp*t168*t1rhorho
./xc/xc_pbe.F:                  t1067 = -0.2e1_dp*t162*t178*t967*t1rho+0.2e1_dp*t175* &
./xc/xc_pbe.F:                          t408*trho*t990-t175*t995*t432+t78*t83*t1031*t91- &
./xc/xc_pbe.F:                          trho-0.6e1_dp*t1060*t1062*t186*t990
./xc/xc_pbe.F:                          A1rho+0.8e1_dp*t417*t1012+0.2e1_dp*t179*A1rhorho+ &
./xc/xc_pbe.F:                          0.8e1_dp*t417*t1017+0.12e2_dp*t426*t1rho*t2rho+ &
./xc/xc_pbe.F:                          0.4e1_dp*t183*t1rhorho
./xc/xc_pbe.F:                  t1097 = t1rho*t989
./xc/xc_pbe.F:                  t1103 = trho*t989
./xc/xc_pbe.F:                  t1115 = t976*t362+t162*t361*trho1rho-t162*t178*t432 &
./xc/xc_pbe.F:                          *t2rho+t175*t994*t408*t410-t162*t178*trho1rho*t369 &
./xc/xc_pbe.F:                          -t162*t178*trho*t1093-t162*t397*t1097+t175*t409* &
./xc/xc_pbe.F:                          t186*t1093-t354*t1104+t162*t1106*trhorho+t175*t1109 &
./xc/xc_pbe.F:                  t1118 = t1106*trho
./xc/xc_pbe.F:                  t1148 = t186*t2rho
./xc/xc_pbe.F:                          t1rhorho-0.2e1_dp*t976*t401+0.2e1_dp*t78*t1rhorho*t164 &
./xc/xc_pbe.F:                  t1167 = A2rho*t182
./xc/xc_pbe.F:                  t1187 = A1rho*t182
./xc/xc_pbe.F:                  t1203 = t1008+0.8e1_dp*t417*trhorho*A2rho+0.12e2_dp* &
./xc/xc_pbe.F:                          t426*trhorho*t2rho+0.8e1_dp*t1167*t423+0.8e1_dp*t417* &
./xc/xc_pbe.F:                          trho*A1rhorho+0.8e1_dp*t417*Arho*t1rhorho+0.8e1_dp* &
./xc/xc_pbe.F:                          t1167*t418+0.8e1_dp*t417*Arho1rho*t1rho+0.12e2_dp*t426 &
./xc/xc_pbe.F:                          *trho1rho*t1rho+0.12e2_dp*t426*trho*t1rhorho+t998+ &
./xc/xc_pbe.F:                          0.8e1_dp*t1187*t954+0.8e1_dp*t417*trho1rho*A1rho+ &
./xc/xc_pbe.F:                          0.8e1_dp*t417*Arhorho*t2rho+0.24e2_dp*t1196*t427*t2rho &
./xc/xc_pbe.F:                          +0.2e1_dp*A1rhorho*t88*Arho+t1014
./xc/xc_pbe.F:                  t1218 = t1016+t1001+0.2e1_dp*t951*Arhorho+t1026+t1028 &
./xc/xc_pbe.F:                          +t1022+t1011+t1030+0.2e1_dp*t179*Arhorhorho+0.4e1_dp* &
./xc/xc_pbe.F:                          t183*trhorhorho+0.2e1_dp*t414*Arho1rho+t1004+t1006+ &
./xc/xc_pbe.F:                  t1226 = t163*trho1rho
./xc/xc_pbe.F:                  t1249 = -0.2e1_dp*t162*t178*t186*t1rhorho+0.2e1_dp* &
./xc/xc_pbe.F:                          t162*t1157*t2rho-t175*t178*(t1203+t1218)+0.2e1_dp* &
./xc/xc_pbe.F:                          t162*t1035*t91*t1rho+0.2e1_dp*t354*t1226-0.2e1_dp* &
./xc/xc_pbe.F:                          t162*t995*t400+0.2e1_dp*t162*t163*trhorhorho-0.2e1_dp &
./xc/xc_pbe.F:                          *t162*t178*trhorho*t989-t175*t1055*t177*t186- &
./xc/xc_pbe.F:                  t1262 = 0.2e1_dp*t162*t163*t2rho+t78*t83*t994*t91- &
./xc/xc_pbe.F:                          *t377*t2rho+t78*t83*t1035*t91-t175*t397*t989- &
./xc/xc_pbe.F:                  t1329 = 0.2e1_dp*t976*t440+0.2e1_dp*t162*t1106*t1rho- &
./xc/xc_pbe.F:                          0.2e1_dp*t162*t178*t1097+0.2e1_dp*t162*t163*t1rhorho &
./xc/xc_pbe.F:                          +0.2e1_dp*t162*t361*t2rho+t78*t83*t1055*t91-t175* &
./xc/xc_pbe.F:                  kfrhorhorho = k_frhorhorho
./xc/xc_pbe.F:                  kf2rho = k_f2rho
./xc/xc_pbe.F:                  ex_unifrho1rho = ex_unifrhorho
./xc/xc_pbe.F:                  ex_unif1rhorho = ex_unifrho1rho
./xc/xc_pbe.F:                  ex_unif2rho = -0.3e1_dp/0.4e1_dp*t5*kf2rho
./xc/xc_pbe.F:                  srho1rho = t457*t198*kf2rho+t462/0.2e1_dp-t465+t197* &
./xc/xc_pbe.F:                             t115*kf2rho/0.2e1_dp+t466
./xc/xc_pbe.F:                  s1rhorho = srho1rho
./xc/xc_pbe.F:                  s2rho = -t197*t6*kf2rho/0.2e1_dp-t200/0.2e1_dp
./xc/xc_pbe.F:                  t1389 = s1rho*s2rho
./xc/xc_pbe.F:                  Fxrho1rho = -0.8e1_dp*t471*t472*s2rho+0.2e1_dp*t204* &
./xc/xc_pbe.F:                              s2rho*srho+0.2e1_dp*t204*s*srho1rho
./xc/xc_pbe.F:                  Fx1rhorho = -0.8e1_dp*t471*s1rho*t103*s2rho+0.2e1_dp* &
./xc/xc_pbe.F:                              t204*t1389+0.2e1_dp*t204*s*s1rhorho
./xc/xc_pbe.F:                  Fx2rho = 0.2e1_dp*t204*s*s2rho
./xc/xc_pbe.F:                  ex_ldarhorhorho = ex_unif1rhorho*Fx+ex_unif1rho*Fx2rho+ &
./xc/xc_pbe.F:                                    ex_unif2rho*Fx1rho+ex_unif*Fx1rhorho+ex_unifrho1rho*Fx+ &
./xc/xc_pbe.F:                                    ex_unifrho*Fx2rho+ex_unifrhorho*Fx-0.3e1_dp/0.4e1_dp*my_rho &
./xc/xc_pbe.F:                                    *t5*kfrhorhorho*Fx+t487*Fx2rho+ex_unifrho*Fx1rho+my_rho &
./xc/xc_pbe.F:                                    *ex_unifrho1rho*Fx1rho+t208*Fx1rhorho+ex_unif2rho*Fxrho &
./xc/xc_pbe.F:                                    +ex_unif*Fxrho1rho+ex_unif1rho*Fxrho+my_rho*ex_unif1rhorho* &
./xc/xc_pbe.F:                                    Fxrho+t491*Fxrho1rho+ex_unif*Fxrhorho+my_rho*ex_unif2rho* &
./xc/xc_pbe.F:                                    Fxrhorho+t108*(0.48e2_dp*t1385*srho*t1387*t1389- &
./xc/xc_pbe.F:                                                   0.24e2_dp*t1393*t472*t1389-0.8e1_dp*t471*srho1rho*t103 &
./xc/xc_pbe.F:                                                   *s1rho-0.8e1_dp*t471*t472*s1rhorho+0.2e1_dp*t204* &
./xc/xc_pbe.F:                                                   s1rhorho*srho+0.2e1_dp*t204*s1rho*srho1rho-0.8e1_dp* &
./xc/xc_pbe.F:                                                   t471*srhorho*t103*s2rho+0.2e1_dp*t204*s2rho*srhorho+ &
./xc/xc_pbe.F:                                                   0.2e1_dp*t204*s*(-0.3e1_dp*my_norm_drho/t1342*t459*kf2rho &
./xc/xc_pbe.F:                                                                    -t457*t115*t458+0.2e1_dp*t457*t463*kfrho-0.2e1_dp* &
./xc/xc_pbe.F:                                                                    t457*t461*kf2rho-0.2e1_dp*t197*t246*kfrho+0.3e1_dp/ &
./xc/xc_pbe.F:                                                                    0.2e1_dp*t197*t115*kfrhorho+t457*t463*kf2rho-t197*t6 &
./xc/xc_pbe.F:                                                                    *kfrhorhorho/0.2e1_dp-t197*t246*kf2rho-0.3e1_dp*t99* &
./xc/xc_pbe.F:                  e_rho_rho_rho(ii) = e_rho_rho_rho(ii)+ &
./xc/xc_pbe.F:                                      scale_ex*ex_ldarhorhorho+scale_ec*( &
./xc/xc_pbe.F:                                      e_c_u_01rhorho+gamma_var*t1329*t191-t451*t1263+ &
./xc/xc_pbe.F:                                      e_c_u_0rho1rho+t1292*t191-t190*t1263+epsilon_cGGArhorho+ &
./xc/xc_pbe.F:                                      my_rho*(e_c_u_0rhorhorho+gamma_var*(t1067+0.2e1_dp*t1115+ &
./xc/xc_pbe.F:                  tnorm_drhorhorho = t317*t6*t825+t1468*k_srho/0.2e1_dp- &
./xc/xc_pbe.F:                                     t496*k_srhorho/0.2e1_dp+t1468*k_s1rho/0.2e1_dp+t74* &
./xc/xc_pbe.F:                  tnorm_drho1rho = -t496*k_s1rho/0.2e1_dp-t498/0.2e1_dp
./xc/xc_pbe.F:                  t1482 = A1rho*tnorm_drhorho
./xc/xc_pbe.F:                  t1493 = tnorm_drho*t177
./xc/xc_pbe.F:                  t1504 = t408*tnorm_drho
./xc/xc_pbe.F:                  t1511 = A1rho*tnorm_drho
./xc/xc_pbe.F:                  t1515 = t226*t1rho
./xc/xc_pbe.F:                  t1521 = A*tnorm_drho1rho
./xc/xc_pbe.F:                          t1482*t91-0.2e1_dp*t162*t178*tnorm_drhorho*t369+ &
./xc/xc_pbe.F:                          *t175*t218*t91*trhorho+0.2e1_dp*t162*t1157*tnorm_drho &
./xc/xc_pbe.F:                  t1528 = Arhorho*tnorm_drho
./xc/xc_pbe.F:                  t1565 = 0.2e1_dp*t385*tnorm_drho+0.2e1_dp*t388* &
./xc/xc_pbe.F:                          tnorm_drho+0.2e1_dp*t168*tnorm_drho1rho+0.8e1_dp*t417* &
./xc/xc_pbe.F:                          t1511+0.12e2_dp*t426*tnorm_drho*t1rho+0.4e1_dp*t183* &
./xc/xc_pbe.F:                          tnorm_drho1rho
./xc/xc_pbe.F:                  t1573 = t91*t1rho
./xc/xc_pbe.F:                          0.2e1_dp*t162*t377*tnorm_drho1rho+0.2e1_dp*t162*t361* &
./xc/xc_pbe.F:                          tnorm_drhorho+0.4e1_dp*t1545*t1505+0.2e1_dp*t217*A* &
./xc/xc_pbe.F:                          tnorm_drhorhorho*t91+0.2e1_dp*t175*t409*t1565*t186- &
./xc/xc_pbe.F:                  t1612 = t163*tnorm_drho1rho
./xc/xc_pbe.F:                          0.2e1_dp*t162*t178*tnorm_drho*t432-0.2e1_dp*t162*t178 &
./xc/xc_pbe.F:                          *t553*t1rho-0.2e1_dp*t162*t404*t529-0.2e1_dp*t162* &
./xc/xc_pbe.F:                          t178*t1565*trho-t175*t1126*t226+0.4e1_dp*t980*t1608 &
./xc/xc_pbe.F:                          tnorm_drho*t91*t427+0.2e1_dp*t162*t163*tnorm_drhorhorho &
./xc/xc_pbe.F:                  t1629 = Arho*tnorm_drho1rho
./xc/xc_pbe.F:                  t1633 = tnorm_drho*t369
./xc/xc_pbe.F:                  t1646 = t361*tnorm_drho
./xc/xc_pbe.F:                  t1672 = t418*tnorm_drho
./xc/xc_pbe.F:                  t1676 = t423*tnorm_drho
./xc/xc_pbe.F:                  t1715 = 0.2e1_dp*t999*tnorm_drho+0.2e1_dp*t1672+0.2e1_dp &
./xc/xc_pbe.F:                          *t382*tnorm_drho1rho+0.2e1_dp*t1676+0.2e1_dp*A*trhorho &
./xc/xc_pbe.F:                          *tnorm_drho+0.2e1_dp*t541*tnorm_drho1rho+0.2e1_dp*t385* &
./xc/xc_pbe.F:                          tnorm_drhorho+0.2e1_dp*t388*tnorm_drhorho+0.2e1_dp*t168* &
./xc/xc_pbe.F:                          tnorm_drhorhorho+0.8e1_dp*t1187*t517+0.24e2_dp*t84* &
./xc/xc_pbe.F:                          0.24e2_dp*t84*t1676+0.24e2_dp*t1196*t548*t1rho+ &
./xc/xc_pbe.F:                          0.12e2_dp*t426*tnorm_drho1rho*trho+0.12e2_dp*t426* &
./xc/xc_pbe.F:                          tnorm_drho*trhorho+0.8e1_dp*t417*t1482+0.12e2_dp*t426* &
./xc/xc_pbe.F:                          tnorm_drhorho*t1rho+0.4e1_dp*t183*tnorm_drhorhorho
./xc/xc_pbe.F:                          trhorho+0.2e1_dp*t78*trhorho*t214+0.2e1_dp*t500*t1646 &
./xc/xc_pbe.F:                          0.2e1_dp*t162*t178*tnorm_drho1rho*t186-0.2e1_dp*t500* &
./xc/xc_pbe.F:                  snorm_drho1rho = snorm_drhorho
./xc/xc_pbe.F:                  t1797 = snorm_drhorho*t103
./xc/xc_pbe.F:                  Fxnorm_drho1rho = -0.8e1_dp*t471*t566*s1rho+0.2e1_dp* &
./xc/xc_pbe.F:                                    t204*s1rho*snorm_drho+0.2e1_dp*t204*s*snorm_drho1rho
./xc/xc_pbe.F:                  e_ndrho_rho_rho(ii) = e_ndrho_rho_rho(ii)+ &
./xc/xc_pbe.F:                                        scale_ex*(ex_unif1rho*Fxnorm_drho+ &
./xc/xc_pbe.F:                                                  ex_unif*Fxnorm_drho1rho+ex_unifrho*Fxnorm_drho+t487* &
./xc/xc_pbe.F:                                                  Fxnorm_drho+t208*Fxnorm_drho1rho+ex_unif*Fxnorm_drhorho+ &
./xc/xc_pbe.F:                                                  t491*Fxnorm_drhorho+t108*(0.48e2_dp*t1385*snorm_drho* &
./xc/xc_pbe.F:                                                                            snorm_drho1rho*t103*srho-0.8e1_dp*t471*t566*srhorho+ &
./xc/xc_pbe.F:                                                                            0.2e1_dp*t204*srhorho*snorm_drho+0.2e1_dp*t204*srho* &
./xc/xc_pbe.F:                                                                           snorm_drho1rho-0.8e1_dp*t471*t1797*s1rho+0.2e1_dp*t204* &
./xc/xc_pbe.F:                                                                            s1rho*snorm_drhorho+0.2e1_dp*t204*s*(t456*t6*t458+ &
./xc/xc_pbe.F:                                                                               t196*t115*kfrho-t562*kfrhorho/0.2e1_dp+t98*t246)))+ &
./xc/xc_pbe.F:                                        scale_ec*(t1759*t191-t230*t449+Hnorm_drhorho+my_rho*( &
./xc/xc_pbe.F:                  t1851 = Arho*t581
./xc/xc_pbe.F:                          t178*t605*trho-0.4e1_dp*t217*t218*t177*t553+0.8e1_dp &
./xc/xc_pbe.F:                          (0.2e1_dp*t1851+0.4e1_dp*t521*tnorm_drho+0.24e2_dp*t84* &
./xc/xc_pbe.F:                           t1851+0.24e2_dp*t1196*t581*trho+0.24e2_dp*t426* &
./xc/xc_pbe.F:                           tnorm_drhorho*tnorm_drho)-0.12e2_dp*t1492*t1493*t529+ &
./xc/xc_pbe.F:                          0.8e1_dp*t980*t1838-0.4e1_dp*t162*t178*tnorm_drhorho* &
./xc/xc_pbe.F:                          t186+0.4e1_dp*t162*t409*t598*trho-0.2e1_dp*t1889* &
./xc/xc_pbe.F:                          t91*tnorm_drhorho+0.10e2_dp*t175*t1851*t91-0.4e1_dp* &
./xc/xc_pbe.F:                          t598*t186-0.4e1_dp*t162*t178*tnorm_drho*t553+0.4e1_dp &
./xc/xc_pbe.F:                          *t78*tnorm_drhorho*t214-0.4e1_dp*t217*t521*t594
./xc/xc_pbe.F:                  e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii)+ &
./xc/xc_pbe.F:                                                    Fxnorm_drhonorm_drho+t208*Fxnorm_drhonorm_drho+t108*( &
./xc/xc_pbe.F:                                                    0.48e2_dp*t1385*t1933*srho-0.24e2_dp*t1393*t1937*srho &
./xc/xc_pbe.F:                                                    -0.16e2_dp*t471*t1797*snorm_drho+0.4e1_dp*t204* &
./xc/xc_pbe.F:                                                    snorm_drhorho*snorm_drho))+scale_ec*(Hnorm_drhonorm_drho+my_rho &
./xc/xc_pbe.F:                  t2norm_drho = tnorm_drho
./xc/xc_pbe.F:                  t1952 = t226*t2norm_drho
./xc/xc_pbe.F:                  t1964 = 0.2e1_dp*t168*t2norm_drho+0.4e1_dp*t183*t2norm_drho
./xc/xc_pbe.F:                  t1972 = A*t2norm_drho
./xc/xc_pbe.F:                  t1990 = 0.2e1_dp*t1972*tnorm_drho+0.12e2_dp*t426* &
./xc/xc_pbe.F:                          tnorm_drho*t2norm_drho
./xc/xc_pbe.F:                  t2024 = t91*t2norm_drho
./xc/xc_pbe.F:                  t2028 = t78*t2norm_drho
./xc/xc_pbe.F:                          t409*t598*t2norm_drho-0.2e1_dp*t1889*t1965+0.8e1_dp* &
./xc/xc_pbe.F:                          t2norm_drho+0.2e1_dp*t175*t409*t605*t1964+0.8e1_dp* &
./xc/xc_pbe.F:                          t980*t1969-0.2e1_dp*t162*t178*t605*t2norm_drho- &
./xc/xc_pbe.F:                          0.4e1_dp*t162*t178*t1990*tnorm_drho-0.10e2_dp*t175* &
./xc/xc_pbe.F:                  t2041 = 0.2e1_dp*t162*t163*t2norm_drho+0.2e1_dp*t217* &
./xc/xc_pbe.F:                  s2norm_drho = snorm_drho
./xc/xc_pbe.F:                  e_ndrho_ndrho_ndrho(ii) = e_ndrho_ndrho_ndrho(ii)+ &
./xc/xc_pbe.F:                                                           t1385*t1933*s2norm_drho-0.24e2_dp*t1393*t1937* &
./xc/xc_pbe.F:                                                           s2norm_drho)+scale_ec*my_rho*(gamma_var*t2031*t191-t609* &
./xc/xc_pbe.F:                                                                               tnorm_drho*t1964-0.2e1_dp*t217*t218*t2020-0.2e1_dp* &
./xc/xc_pbe.F:!> \param rho_set ...
./xc/xc_pbe.F:   SUBROUTINE pbe_lsd_eval(rho_set, deriv_set, grad_deriv, pbe_params)
./xc/xc_pbe.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_pbe.F:      REAL(kind=dp)                                      :: epsilon_rho, scale_ec, scale_ex
./xc/xc_pbe.F:         e_ra_rb, e_rb, e_rb_rb, norm_drho, norm_drhoa, norm_drhob, rhoa, rhob
./xc/xc_pbe.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_pbe.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_pbe.F:      CALL xc_rho_set_get(rho_set, &
./xc/xc_pbe.F:                          rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_pbe.F:                          norm_drhob=norm_drhob, norm_drho=norm_drho, &
./xc/xc_pbe.F:                          rho_cutoff=epsilon_rho, &
./xc/xc_pbe.F:      dummy => rhoa
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rhoa)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rhob)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_pbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_pbe.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_pbe.F:!$OMP SHARED(rhoa,rhob,norm_drho,norm_drhoa,norm_drhob,e_0,e_ra,e_rb,e_ndra_ra),&
./xc/xc_pbe.F:!$OMP SHARED(epsilon_rho,param,scale_ec,scale_ex)
./xc/xc_pbe.F:         rhoa=rhoa, rhob=rhob, norm_drho=norm_drho, norm_drhoa=norm_drhoa, &
./xc/xc_pbe.F:         norm_drhob=norm_drhob, e_0=e_0, e_ra=e_ra, e_rb=e_rb, &
./xc/xc_pbe.F:         epsilon_rho=epsilon_rho, &
./xc/xc_pbe.F:!> \param rhoa ,rhob: alpha or beta spin density
./xc/xc_pbe.F:!> \param rhob ...
./xc/xc_pbe.F:!> \param norm_drho ...
./xc/xc_pbe.F:!> \param norm_drhoa ,norm_drhob,norm_drho: || grad rhoa |||,| grad rhoa ||,
./xc/xc_pbe.F:!>        || grad (rhoa+rhob) ||
./xc/xc_pbe.F:!> \param norm_drhob ...
./xc/xc_pbe.F:!> \param epsilon_rho ...
./xc/xc_pbe.F:   SUBROUTINE pbe_lsd_calc(rhoa, rhob, norm_drho, norm_drhoa, norm_drhob, &
./xc/xc_pbe.F:                           grad_deriv, npoints, epsilon_rho, param, scale_ec, scale_ex)
./xc/xc_pbe.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rhoa, rhob, norm_drho, norm_drhoa, &
./xc/xc_pbe.F:                                                            norm_drhob
./xc/xc_pbe.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho
./xc/xc_pbe.F:      REAL(kind=dp) :: A, A1rhoa, A1rhob, A_1, A_2, A_3, alpha_1_1, alpha_1_2, alpha_1_3, alpha_c, &
./xc/xc_pbe.F:         alpha_c1rhoa, alpha_c1rhob, alpha_crhoa, alpha_crhob, Arhoa, Arhoarhoa, Arhoarhob, Arhob, &
./xc/xc_pbe.F:         Arhobrhob, beta, beta_1_1, beta_1_2, beta_1_3, beta_2_1, beta_2_2, beta_2_3, beta_3_1, &
./xc/xc_pbe.F:         beta_3_2, beta_3_3, beta_4_1, beta_4_2, beta_4_3, chi, chirhoa, chirhoarhoa, chirhoarhob, &
./xc/xc_pbe.F:         chirhob, chirhobrhob, e_c_u_0, e_c_u_01rhoa, e_c_u_01rhob, e_c_u_0rhoa, e_c_u_0rhoarhoa, &
./xc/xc_pbe.F:         e_c_u_0rhoarhob, e_c_u_0rhob, e_c_u_0rhobrhob, e_c_u_1rhoa, e_c_u_1rhob, epsilon_c_unif, &
./xc/xc_pbe.F:         epsilon_c_unif1rhoa, epsilon_c_unif1rhob
./xc/xc_pbe.F:      REAL(kind=dp) :: epsilon_c_unifrhoa, epsilon_c_unifrhoarhoa, epsilon_c_unifrhoarhob, &
./xc/xc_pbe.F:         epsilon_c_unifrhob, epsilon_c_unifrhobrhob, epsilon_cGGA, epsilon_cGGArhoa, &
./xc/xc_pbe.F:         epsilon_cGGArhob, ex_unif_a, ex_unif_a1rhoa, ex_unif_arhoa, ex_unif_b, ex_unif_b1rhob, &
./xc/xc_pbe.F:         ex_unif_brhob, f, f1rhoa, f1rhob, frhoa, frhoarhoa, frhoarhob, frhob, frhobrhob, Fx_a, &
./xc/xc_pbe.F:         Fx_a1rhoa, Fx_anorm_drhoa, Fx_arhoa, Fx_b, Fx_b1rhob, Fx_bnorm_drhob, Fx_brhob, &
./xc/xc_pbe.F:         gamma_var, Hnorm_drho, k_frhoa, k_frhoarhoa, k_frhoarhob, k_frhob, k_s, k_s1rhoa, &
./xc/xc_pbe.F:         k_s1rhob, k_srhoa, k_srhob, kappa, kf_a, kf_arhoa, kf_arhoarhoa, kf_b, kf_brhob, &
./xc/xc_pbe.F:         kf_brhobrhob, mu
./xc/xc_pbe.F:      REAL(kind=dp) :: my_norm_drho, my_norm_drhoa, my_norm_drhob, my_rho, my_rhoa, my_rhob, p_1, &
./xc/xc_pbe.F:         p_2, p_3, phi, phi1rhoa, phi1rhob, phirhoa, phirhoarhoa, phirhoarhob, phirhob, &
./xc/xc_pbe.F:         phirhobrhob, rs, rsrhoa, rsrhoarhoa, rsrhoarhob, rsrhob, rsrhobrhob, s_a, s_a1rhoa, &
./xc/xc_pbe.F:         s_anorm_drhoa, s_arhoa, s_b, s_b1rhob, s_bnorm_drhob, s_brhob, t, t1, t100, t1000, t1001, &
./xc/xc_pbe.F:      REAL(kind=dp) :: t192, t1922, t194, t1949, t198, t199, t1rhoa, t1rhob, t2, t20, t200, t201, &
./xc/xc_pbe.F:         t999, tnorm_drho, trhoa, trhoanorm_drho, trhoarhoa, trhoarhob, trhob, trhobnorm_drho, &
./xc/xc_pbe.F:         trhobrhob
./xc/xc_pbe.F:            my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_pbe.F:            my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_pbe.F:            my_rho = my_rhoa+my_rhob
./xc/xc_pbe.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_pbe.F:               my_rhoa = MAX(EPSILON(0.0_dp)*1.e4_dp, my_rhoa)
./xc/xc_pbe.F:               my_rhob = MAX(EPSILON(0.0_dp)*1.e4_dp, my_rhob)
./xc/xc_pbe.F:               my_rho = my_rhoa+my_rhob
./xc/xc_pbe.F:               my_norm_drho = norm_drho(ii)
./xc/xc_pbe.F:               my_norm_drhoa = norm_drhoa(ii)
./xc/xc_pbe.F:               my_norm_drhob = norm_drhob(ii)
./xc/xc_pbe.F:               t1 = my_rhoa-my_rhob
./xc/xc_pbe.F:               t2 = 0.1e1_dp/my_rho
./xc/xc_pbe.F:               t91 = t90*my_rho
./xc/xc_pbe.F:               t96 = my_norm_drho*t95
./xc/xc_pbe.F:               t125 = t90*my_rhoa
./xc/xc_pbe.F:               t130 = my_norm_drhoa*t129
./xc/xc_pbe.F:               t131 = 0.1e1_dp/my_rhoa
./xc/xc_pbe.F:               t140 = my_rhoa*ex_unif_a
./xc/xc_pbe.F:               t142 = t90*my_rhob
./xc/xc_pbe.F:               t147 = my_norm_drhob*t146
./xc/xc_pbe.F:               t148 = 0.1e1_dp/my_rhob
./xc/xc_pbe.F:               t156 = my_rhob*ex_unif_b
./xc/xc_pbe.F:                            /0.2e1_dp+scale_ec*my_rho*epsilon_cGGA
./xc/xc_pbe.F:               t162 = my_rho**2
./xc/xc_pbe.F:               chirhoa = t2-t164
./xc/xc_pbe.F:               rsrhoa = -t6*t167*t163/0.12e2_dp
./xc/xc_pbe.F:               t190 = t179*rsrhoa/0.2e1_dp+beta_2_1*rsrhoa+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t183*rsrhoa+t22*t20*rsrhoa*t187
./xc/xc_pbe.F:               e_c_u_0rhoa = -0.2e1_dp*t171*rsrhoa*t28+t177*t192
./xc/xc_pbe.F:               t211 = t201*rsrhoa/0.2e1_dp+beta_2_2*rsrhoa+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t205*rsrhoa+t40*t38*rsrhoa*t187
./xc/xc_pbe.F:               e_c_u_1rhoa = -0.2e1_dp*t194*rsrhoa*t46+t200*t213
./xc/xc_pbe.F:               t232 = t222*rsrhoa/0.2e1_dp+beta_2_3*rsrhoa+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t226*rsrhoa+t58*t56*rsrhoa*t187
./xc/xc_pbe.F:               alpha_crhoa = 0.2e1_dp*t215*rsrhoa*t64-t221*t234
./xc/xc_pbe.F:               frhoa = (0.4e1_dp/0.3e1_dp*t71*chirhoa-0.4e1_dp/0.3e1_dp &
./xc/xc_pbe.F:                        *t74*chirhoa)*t69
./xc/xc_pbe.F:               t240 = alpha_crhoa*f
./xc/xc_pbe.F:               t242 = alpha_c*frhoa
./xc/xc_pbe.F:               t246 = t245*chirhoa
./xc/xc_pbe.F:               t249 = e_c_u_1rhoa-e_c_u_0rhoa
./xc/xc_pbe.F:               t252 = t84*frhoa
./xc/xc_pbe.F:               t254 = t244*chirhoa
./xc/xc_pbe.F:               epsilon_c_unifrhoa = e_c_u_0rhoa+t240*t82+t242*t82-t248 &
./xc/xc_pbe.F:               phirhoa = t257*chirhoa/0.3e1_dp-t259*chirhoa/0.3e1_dp
./xc/xc_pbe.F:               k_frhoa = t3/t262*t90/0.3e1_dp
./xc/xc_pbe.F:               k_srhoa = t266*k_frhoa*t7
./xc/xc_pbe.F:               t269 = my_norm_drho*t268
./xc/xc_pbe.F:               trhoa = -t269*t98*phirhoa/0.2e1_dp-t96*t274*k_srhoa/ &
./xc/xc_pbe.F:               t282 = epsilon_c_unifrhoa*t100
./xc/xc_pbe.F:               t286 = t285*phirhoa
./xc/xc_pbe.F:               Arhoa = -t101*t281*t289*t107
./xc/xc_pbe.F:               t294 = t123*phirhoa
./xc/xc_pbe.F:               t299 = t298*trhoa
./xc/xc_pbe.F:               t302 = Arhoa*t111
./xc/xc_pbe.F:               t305 = 0.2e1_dp*t303*trhoa
./xc/xc_pbe.F:               t321 = t302+t305+0.2e1_dp*t314*Arhoa+0.4e1_dp*t318*trhoa
./xc/xc_pbe.F:               epsilon_cGGArhoa = epsilon_c_unifrhoa+0.3e1_dp*t293*t294+ &
./xc/xc_pbe.F:               kf_arhoa = t124/t329*t90/0.3e1_dp
./xc/xc_pbe.F:               ex_unif_arhoa = -0.3e1_dp/0.4e1_dp*t7*kf_arhoa
./xc/xc_pbe.F:               t337 = my_norm_drhoa*t336
./xc/xc_pbe.F:               t340 = my_rhoa**2
./xc/xc_pbe.F:               s_arhoa = -t337*t131*kf_arhoa/0.2e1_dp-t130*t341/0.2e1_dp
./xc/xc_pbe.F:               Fx_arhoa = 0.2e1_dp*t346*s_a*s_arhoa
./xc/xc_pbe.F:               t350 = my_rhoa*ex_unif_arhoa
./xc/xc_pbe.F:                                       t350*Fx_a+0.2e1_dp*t140*Fx_arhoa)/0.2e1_dp+scale_ec*( &
./xc/xc_pbe.F:                             epsilon_cGGA+my_rho*epsilon_cGGArhoa)
./xc/xc_pbe.F:               chirhob = -t2-t164
./xc/xc_pbe.F:               rsrhob = rsrhoa
./xc/xc_pbe.F:               t368 = t179*rsrhob/0.2e1_dp+beta_2_1*rsrhob+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t183*rsrhob+t22*t20*rsrhob*t187
./xc/xc_pbe.F:               e_c_u_0rhob = -0.2e1_dp*t171*rsrhob*t28+t177*t368*t191
./xc/xc_pbe.F:               t382 = t201*rsrhob/0.2e1_dp+beta_2_2*rsrhob+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t205*rsrhob+t40*t38*rsrhob*t187
./xc/xc_pbe.F:               e_c_u_1rhob = -0.2e1_dp*t194*rsrhob*t46+t200*t382*t212
./xc/xc_pbe.F:               t396 = t222*rsrhob/0.2e1_dp+beta_2_3*rsrhob+0.3e1_dp/ &
./xc/xc_pbe.F:                      0.2e1_dp*t226*rsrhob+t58*t56*rsrhob*t187
./xc/xc_pbe.F:               alpha_crhob = 0.2e1_dp*t215*rsrhob*t64-t221*t396*t233
./xc/xc_pbe.F:               frhob = (0.4e1_dp/0.3e1_dp*t71*chirhob-0.4e1_dp/0.3e1_dp &
./xc/xc_pbe.F:                        *t74*chirhob)*t69
./xc/xc_pbe.F:               t403 = alpha_crhob*f
./xc/xc_pbe.F:               t405 = alpha_c*frhob
./xc/xc_pbe.F:               t407 = t245*chirhob
./xc/xc_pbe.F:               t410 = e_c_u_1rhob-e_c_u_0rhob
./xc/xc_pbe.F:               t413 = t84*frhob
./xc/xc_pbe.F:               t415 = t244*chirhob
./xc/xc_pbe.F:               epsilon_c_unifrhob = e_c_u_0rhob+t403*t82+t405*t82-t409 &
./xc/xc_pbe.F:               phirhob = t257*chirhob/0.3e1_dp-t259*chirhob/0.3e1_dp
./xc/xc_pbe.F:               k_frhob = k_frhoa
./xc/xc_pbe.F:               k_srhob = t266*k_frhob*t7
./xc/xc_pbe.F:               trhob = -t269*t98*phirhob/0.2e1_dp-t96*t274*k_srhob/ &
./xc/xc_pbe.F:               t427 = epsilon_c_unifrhob*t100
./xc/xc_pbe.F:               t429 = t285*phirhob
./xc/xc_pbe.F:               Arhob = -t101*t281*t432*t107
./xc/xc_pbe.F:               t436 = t123*phirhob
./xc/xc_pbe.F:               t439 = t298*trhob
./xc/xc_pbe.F:               t442 = Arhob*t111
./xc/xc_pbe.F:               t444 = 0.2e1_dp*t303*trhob
./xc/xc_pbe.F:               t453 = t442+t444+0.2e1_dp*t314*Arhob+0.4e1_dp*t318*trhob
./xc/xc_pbe.F:               epsilon_cGGArhob = epsilon_c_unifrhob+0.3e1_dp*t293*t436+ &
./xc/xc_pbe.F:               kf_brhob = t124/t460*t90/0.3e1_dp
./xc/xc_pbe.F:               ex_unif_brhob = -0.3e1_dp/0.4e1_dp*t7*kf_brhob
./xc/xc_pbe.F:               t468 = my_norm_drhob*t467
./xc/xc_pbe.F:               t471 = my_rhob**2
./xc/xc_pbe.F:               s_brhob = -t468*t148*kf_brhob/0.2e1_dp-t147*t472/0.2e1_dp
./xc/xc_pbe.F:               Fx_brhob = 0.2e1_dp*t477*s_b*s_brhob
./xc/xc_pbe.F:               t481 = my_rhob*ex_unif_brhob
./xc/xc_pbe.F:                                       t481*Fx_b+0.2e1_dp*t156*Fx_brhob)/0.2e1_dp+scale_ec*( &
./xc/xc_pbe.F:                             epsilon_cGGA+my_rho*epsilon_cGGArhob)
./xc/xc_pbe.F:               tnorm_drho = t488*t2/0.2e1_dp
./xc/xc_pbe.F:               t494 = A*tnorm_drho
./xc/xc_pbe.F:               t502 = 0.2e1_dp*t303*tnorm_drho+0.4e1_dp*t318*tnorm_drho
./xc/xc_pbe.F:               t505 = 0.2e1_dp*t297*t298*tnorm_drho+0.2e1_dp*t493* &
./xc/xc_pbe.F:               Hnorm_drho = t110*t506
./xc/xc_pbe.F:                              scale_ec*my_rho*Hnorm_drho
./xc/xc_pbe.F:               s_anorm_drhoa = t129*t131/0.2e1_dp
./xc/xc_pbe.F:               Fx_anorm_drhoa = 0.2e1_dp*t346*s_a*s_anorm_drhoa
./xc/xc_pbe.F:                               scale_ex*t140*Fx_anorm_drhoa
./xc/xc_pbe.F:               s_bnorm_drhob = t146*t148/0.2e1_dp
./xc/xc_pbe.F:               Fx_bnorm_drhob = 0.2e1_dp*t477*s_b*s_bnorm_drhob
./xc/xc_pbe.F:                               scale_ex*t156*Fx_bnorm_drhob
./xc/xc_pbe.F:                  t518 = 0.1e1_dp/t162/my_rho
./xc/xc_pbe.F:                  chirhoarhoa = -0.2e1_dp*t163+0.2e1_dp*t519
./xc/xc_pbe.F:                  rsrhoarhoa = -t6/t165/t8*t523/t525/0.18e2_dp+ &
./xc/xc_pbe.F:                  t536 = alpha_1_1*rsrhoa
./xc/xc_pbe.F:                  t550 = rsrhoa**2
./xc/xc_pbe.F:                  e_c_u_0rhoarhoa = -0.2e1_dp*t171*rsrhoarhoa*t28+0.2e1_dp* &
./xc/xc_pbe.F:                                                                           /0.4e1_dp+t179*rsrhoarhoa/0.2e1_dp+beta_2_1*rsrhoarhoa+ &
./xc/xc_pbe.F:                                                                            rsrhoarhoa+t22*t561*t550*t564+t22*t20*rsrhoarhoa* &
./xc/xc_pbe.F:                  e_c_u_01rhoa = e_c_u_0rhoa
./xc/xc_pbe.F:                  t588 = alpha_1_2*rsrhoa
./xc/xc_pbe.F:                  t636 = alpha_1_3*rsrhoa
./xc/xc_pbe.F:                  alpha_c1rhoa = alpha_crhoa
./xc/xc_pbe.F:                  t682 = chirhoa**2
./xc/xc_pbe.F:                  frhoarhoa = (0.4e1_dp/0.9e1_dp*t681*t682+0.4e1_dp/ &
./xc/xc_pbe.F:                               0.3e1_dp*t71*chirhoarhoa+0.4e1_dp/0.9e1_dp*t687*t682- &
./xc/xc_pbe.F:                               0.4e1_dp/0.3e1_dp*t74*chirhoarhoa)*t69
./xc/xc_pbe.F:                  f1rhoa = frhoa
./xc/xc_pbe.F:                  t705 = alpha_c1rhoa*f
./xc/xc_pbe.F:                  t708 = alpha_c*f1rhoa
./xc/xc_pbe.F:                  t726 = e_c_u_1rhoa-e_c_u_01rhoa
./xc/xc_pbe.F:                  t736 = t84*f1rhoa
./xc/xc_pbe.F:                  t745 = -0.4e1_dp*t77*t245*chirhoarhoa+(-0.2e1_dp*t194* &
./xc/xc_pbe.F:                                                         rsrhoarhoa*t46+0.2e1_dp*t588*t590-0.2e1_dp*t595*t596* &
./xc/xc_pbe.F:                                                         t212+t200*(-t600*t550/0.4e1_dp+t201*rsrhoarhoa/ &
./xc/xc_pbe.F:                                                                    0.2e1_dp+beta_2_2*rsrhoarhoa+0.3e1_dp/0.4e1_dp*t606*t550 &
./xc/xc_pbe.F:                                                                    +0.3e1_dp/0.2e1_dp*t205*rsrhoarhoa+t40*t611*t550* &
./xc/xc_pbe.F:                                                                    t564+t40*t38*rsrhoarhoa*t187-t40*t38*t550*t564)* &
./xc/xc_pbe.F:                                                         t212+t626*t596*t628*t34/0.2e1_dp-e_c_u_0rhoarhoa)*f* &
./xc/xc_pbe.F:                         t80+t249*f1rhoa*t80+0.4e1_dp*t250*t254+t726*frhoa* &
./xc/xc_pbe.F:                         t80+t84*frhoarhoa*t80+0.4e1_dp*t252*t254+0.4e1_dp* &
./xc/xc_pbe.F:                         +0.4e1_dp*t85*t244*chirhoarhoa
./xc/xc_pbe.F:                  epsilon_c_unifrhoarhoa = e_c_u_0rhoarhoa+(0.2e1_dp*t215* &
./xc/xc_pbe.F:                                                            rsrhoarhoa*t64-0.2e1_dp*t636*t638+0.2e1_dp*t643*t644* &
./xc/xc_pbe.F:                                                            t233-t221*(-t648*t550/0.4e1_dp+t222*rsrhoarhoa/ &
./xc/xc_pbe.F:                                                                       0.2e1_dp+beta_2_3*rsrhoarhoa+0.3e1_dp/0.4e1_dp*t654*t550 &
./xc/xc_pbe.F:                                                                       +0.3e1_dp/0.2e1_dp*t226*rsrhoarhoa+t58*t659*t550* &
./xc/xc_pbe.F:                                                                       t564+t58*t56*rsrhoarhoa*t187-t58*t56*t550*t564)* &
./xc/xc_pbe.F:                                                            t233-t674*t644*t676*t52/0.2e1_dp)*f*t82+alpha_crhoa &
./xc/xc_pbe.F:                                           *f1rhoa*t82-0.4e1_dp*t240*t246+alpha_c1rhoa*frhoa*t82 &
./xc/xc_pbe.F:                                           +alpha_c*frhoarhoa*t82-0.4e1_dp*t242*t246-0.4e1_dp* &
./xc/xc_pbe.F:                  epsilon_c_unif1rhoa = e_c_u_01rhoa+t705*t82+t708*t82- &
./xc/xc_pbe.F:                  phirhoarhoa = -t750*t682/0.9e1_dp+t257*chirhoarhoa/ &
./xc/xc_pbe.F:                                0.3e1_dp-t755*t682/0.9e1_dp-t259*chirhoarhoa/0.3e1_dp
./xc/xc_pbe.F:                  phi1rhoa = phirhoa
./xc/xc_pbe.F:                  k_frhoarhoa = -0.2e1_dp/0.9e1_dp*t3/t262/t91*t763
./xc/xc_pbe.F:                  t768 = k_frhoa**2
./xc/xc_pbe.F:                  k_s1rhoa = k_srhoa
./xc/xc_pbe.F:                  t775 = my_norm_drho*t105*t97
./xc/xc_pbe.F:                  t776 = t2*phirhoa
./xc/xc_pbe.F:                  t785 = t269*t277*phirhoa/0.2e1_dp
./xc/xc_pbe.F:                  t789 = t2*k_srhoa
./xc/xc_pbe.F:                  t801 = t96*t798*k_srhoa/0.2e1_dp
./xc/xc_pbe.F:                  trhoarhoa = t775*t776*phi1rhoa+t779*t776*k_s1rhoa/ &
./xc/xc_pbe.F:                              0.2e1_dp+t785-t269*t98*phirhoarhoa/0.2e1_dp+t779*t789 &
./xc/xc_pbe.F:                              *phi1rhoa/0.2e1_dp+t795*t789*k_s1rhoa+t801-t96*t274* &
./xc/xc_pbe.F:                              (-t767*t768*t523/0.2e1_dp+t266*k_frhoarhoa*t7)/ &
./xc/xc_pbe.F:                              0.2e1_dp+t269*t277*phi1rhoa/0.2e1_dp+t96*t798*k_s1rhoa &
./xc/xc_pbe.F:                  t1rhoa = -t269*t98*phi1rhoa/0.2e1_dp-t96*t274*k_s1rhoa &
./xc/xc_pbe.F:                  t823 = epsilon_c_unif1rhoa*t100
./xc/xc_pbe.F:                  t825 = t285*phi1rhoa
./xc/xc_pbe.F:                  t840 = t839*phirhoa
./xc/xc_pbe.F:                  Arhoarhoa = 0.2e1_dp*t820*t822*t828-t101*t281*( &
./xc/xc_pbe.F:                              -epsilon_c_unifrhoarhoa*t100*t105+0.3e1_dp*t282*t825+ &
./xc/xc_pbe.F:                              0.3e1_dp*t823*t286-0.12e2_dp*t102*t840*phi1rhoa+ &
./xc/xc_pbe.F:                              0.3e1_dp*t102*t285*phirhoarhoa)*t107-t851*t289*t828* &
./xc/xc_pbe.F:                  A1rhoa = -t101*t281*t828*t107
./xc/xc_pbe.F:                  t865 = A1rhoa*t111
./xc/xc_pbe.F:                  t867 = 0.2e1_dp*t303*t1rhoa
./xc/xc_pbe.F:                  t876 = t865+t867+0.2e1_dp*t314*A1rhoa+0.4e1_dp*t318*t1rhoa
./xc/xc_pbe.F:                  t879 = 0.2e1_dp*t297*t298*t1rhoa+t101*t111*t868*t119 &
./xc/xc_pbe.F:                  t908 = Arhoarhoa*t111
./xc/xc_pbe.F:                  t909 = Arhoa*t
./xc/xc_pbe.F:                  t911 = 0.2e1_dp*t909*t1rhoa
./xc/xc_pbe.F:                  t914 = 0.2e1_dp*A1rhoa*t*trhoa
./xc/xc_pbe.F:                  t917 = 0.2e1_dp*A*t1rhoa*trhoa
./xc/xc_pbe.F:                  t919 = 0.2e1_dp*t303*trhoarhoa
./xc/xc_pbe.F:                  t959 = t908+t911+t914+t917+t919+0.2e1_dp*A1rhoa*t116 &
./xc/xc_pbe.F:                         *Arhoa+0.8e1_dp*t944*Arhoa*t1rhoa+0.2e1_dp*t314* &
./xc/xc_pbe.F:                         Arhoarhoa+0.8e1_dp*t944*trhoa*A1rhoa+0.12e2_dp*t953* &
./xc/xc_pbe.F:                         trhoa*t1rhoa+0.4e1_dp*t318*trhoarhoa
./xc/xc_pbe.F:                  t962 = 0.2e1_dp*t101*t1rhoa*t299+0.2e1_dp*t297*t868* &
./xc/xc_pbe.F:                         t119*trhoa-0.2e1_dp*t297*t313*trhoa*t876+0.2e1_dp* &
./xc/xc_pbe.F:                         t297*t298*trhoarhoa+0.2e1_dp*t297*t904*t1rhoa+t101* &
./xc/xc_pbe.F:                         t876-0.2e1_dp*t297*t313*t321*t1rhoa-t310*t868*t312* &
./xc/xc_pbe.F:                  kf_arhoarhoa = -0.2e1_dp/0.9e1_dp*t124/t329/t125*t763
./xc/xc_pbe.F:                  ex_unif_a1rhoa = ex_unif_arhoa
./xc/xc_pbe.F:                  t985 = kf_arhoa**2
./xc/xc_pbe.F:                  s_a1rhoa = s_arhoa
./xc/xc_pbe.F:                  t1001 = s_arhoa*t135
./xc/xc_pbe.F:                  Fx_a1rhoa = 0.2e1_dp*t346*s_a*s_a1rhoa
./xc/xc_pbe.F:                                scale_ex*(0.2e1_dp*ex_unif_a1rhoa*Fx_a+ &
./xc/xc_pbe.F:                                          0.2e1_dp*ex_unif_a*Fx_a1rhoa+0.2e1_dp*ex_unif_arhoa*Fx_a- &
./xc/xc_pbe.F:                                          0.3e1_dp/0.2e1_dp*my_rhoa*t7*kf_arhoarhoa*Fx_a+0.2e1_dp* &
./xc/xc_pbe.F:                                          t350*Fx_a1rhoa+0.2e1_dp*ex_unif_a*Fx_arhoa+0.2e1_dp*my_rhoa &
./xc/xc_pbe.F:                                          *ex_unif_a1rhoa*Fx_arhoa+0.2e1_dp*t140*(-0.8e1_dp*t1000 &
./xc/xc_pbe.F:                                                                           *t1001*s_a1rhoa+0.2e1_dp*t346*s_a1rhoa*s_arhoa+0.2e1_dp &
./xc/xc_pbe.F:                                                                                *t346*s_a*(my_norm_drhoa/t335/kf_a*t131*t985+t337* &
./xc/xc_pbe.F:                                                                               t341*kf_arhoa-t337*t131*kf_arhoarhoa/0.2e1_dp+t130/ &
./xc/xc_pbe.F:                                                                           t340/my_rhoa)))/0.2e1_dp+scale_ec*(epsilon_c_unif1rhoa+ &
./xc/xc_pbe.F:                                                                           0.3e1_dp*t293*t123*phi1rhoa+t110*t880+epsilon_cGGArhoa+ &
./xc/xc_pbe.F:                                                                       my_rho*(epsilon_c_unifrhoarhoa+0.6e1_dp*t858*t294*phi1rhoa+ &
./xc/xc_pbe.F:                                                                                    0.3e1_dp*t293*t880*phirhoa+0.3e1_dp*t293*t123* &
./xc/xc_pbe.F:                                                                            phirhoarhoa+0.3e1_dp*t293*t326*phi1rhoa+t110*t962*t325 &
./xc/xc_pbe.F:                  chirhoarhob = 0.2e1_dp*t519
./xc/xc_pbe.F:                  rsrhoarhob = rsrhoarhoa
./xc/xc_pbe.F:                  t1033 = alpha_1_1*rsrhob
./xc/xc_pbe.F:                  t1038 = rsrhoa*rsrhob
./xc/xc_pbe.F:                  t1050 = rsrhob*t564*rsrhoa
./xc/xc_pbe.F:                  e_c_u_0rhoarhob = -0.2e1_dp*t171*rsrhoarhob*t28+t536* &
./xc/xc_pbe.F:                                                                                *t1038/0.4e1_dp+t179*rsrhoarhob/0.2e1_dp+beta_2_1* &
./xc/xc_pbe.F:                                                                                 rsrhoarhob+0.3e1_dp/0.4e1_dp*t556*t1038+0.3e1_dp/ &
./xc/xc_pbe.F:                                                                                  0.2e1_dp*t183*rsrhoarhob+t22*t561*t1050+t22*t20* &
./xc/xc_pbe.F:                                                                               rsrhoarhob*t187-t22*t20*t1050)*t191+t578*t190*t580* &
./xc/xc_pbe.F:                  t1071 = alpha_1_2*rsrhob
./xc/xc_pbe.F:                  t1106 = alpha_1_3*rsrhob
./xc/xc_pbe.F:                  frhoarhob = (0.4e1_dp/0.9e1_dp*t681*chirhoa*chirhob+ &
./xc/xc_pbe.F:                               0.4e1_dp/0.3e1_dp*t71*chirhoarhob+0.4e1_dp/0.9e1_dp*t687 &
./xc/xc_pbe.F:                               *chirhoa*chirhob-0.4e1_dp/0.3e1_dp*t74*chirhoarhob)* &
./xc/xc_pbe.F:                  t1164 = t79*chirhoa*chirhob
./xc/xc_pbe.F:                  t1193 = -0.4e1_dp*t77*t245*chirhoarhob+(-0.2e1_dp*t194* &
./xc/xc_pbe.F:                                                          rsrhoarhob*t46+t588*t1069+t1071*t590-0.2e1_dp*t595* &
./xc/xc_pbe.F:                                                          t213*t382+t200*(-t600*t1038/0.4e1_dp+t201*rsrhoarhob/ &
./xc/xc_pbe.F:                                                                          0.2e1_dp+beta_2_2*rsrhoarhob+0.3e1_dp/0.4e1_dp*t606* &
./xc/xc_pbe.F:                                                                          t1038+0.3e1_dp/0.2e1_dp*t205*rsrhoarhob+t40*t611*t1050 &
./xc/xc_pbe.F:                                                                          +t40*t38*rsrhoarhob*t187-t40*t38*t1050)*t212+t626 &
./xc/xc_pbe.F:                                                          *t211*t628*t34*t382/0.2e1_dp-e_c_u_0rhoarhob)*f*t80+ &
./xc/xc_pbe.F:                          t249*frhob*t80+0.4e1_dp*t250*t415+t410*frhoa*t80+ &
./xc/xc_pbe.F:                          t84*frhoarhob*t80+0.4e1_dp*t252*t415+0.4e1_dp*t411* &
./xc/xc_pbe.F:                          t85*t244*chirhoarhob
./xc/xc_pbe.F:                  epsilon_c_unifrhoarhob = e_c_u_0rhoarhob+(0.2e1_dp*t215* &
./xc/xc_pbe.F:                                                            rsrhoarhob*t64-t636*t1104-t1106*t638+0.2e1_dp*t643* &
./xc/xc_pbe.F:                                                            t234*t396-t221*(-t648*t1038/0.4e1_dp+t222*rsrhoarhob/ &
./xc/xc_pbe.F:                                                                            0.2e1_dp+beta_2_3*rsrhoarhob+0.3e1_dp/0.4e1_dp*t654* &
./xc/xc_pbe.F:                                                                            t1038+0.3e1_dp/0.2e1_dp*t226*rsrhoarhob+t58*t659*t1050 &
./xc/xc_pbe.F:                                                                            +t58*t56*rsrhoarhob*t187-t58*t56*t1050)*t233-t674 &
./xc/xc_pbe.F:                                                            *t232*t676*t52*t396/0.2e1_dp)*f*t82+alpha_crhoa* &
./xc/xc_pbe.F:                                           frhob*t82-0.4e1_dp*t240*t407+alpha_crhob*frhoa*t82+ &
./xc/xc_pbe.F:                                           alpha_c*frhoarhob*t82-0.4e1_dp*t242*t407-0.4e1_dp*t403 &
./xc/xc_pbe.F:                  phirhoarhob = -t750*chirhoa*chirhob/0.9e1_dp+t257* &
./xc/xc_pbe.F:                                chirhoarhob/0.3e1_dp-t755*chirhoa*chirhob/0.9e1_dp-t259 &
./xc/xc_pbe.F:                                *chirhoarhob/0.3e1_dp
./xc/xc_pbe.F:                  k_frhoarhob = k_frhoarhoa
./xc/xc_pbe.F:                  t1228 = t269*t277*phirhob/0.2e1_dp
./xc/xc_pbe.F:                  t1231 = t96*t798*k_srhob/0.2e1_dp
./xc/xc_pbe.F:                  trhoarhob = t775*t776*phirhob+t779*t776*k_srhob/ &
./xc/xc_pbe.F:                              0.2e1_dp+t785-t269*t98*phirhoarhob/0.2e1_dp+t779*t789 &
./xc/xc_pbe.F:                              *phirhob/0.2e1_dp+t795*t789*k_srhob+t801-t96*t274*( &
./xc/xc_pbe.F:                              -t767*k_frhoa*t523*k_frhob/0.2e1_dp+t266*k_frhoarhob* &
./xc/xc_pbe.F:                  Arhoarhob = 0.2e1_dp*t820*t822*t432-t101*t281*( &
./xc/xc_pbe.F:                              -epsilon_c_unifrhoarhob*t100*t105+0.3e1_dp*t282*t429+ &
./xc/xc_pbe.F:                              0.3e1_dp*t427*t286-0.12e2_dp*t102*t840*phirhob+ &
./xc/xc_pbe.F:                              0.3e1_dp*t102*t285*phirhoarhob)*t107-t851*t289*t432* &
./xc/xc_pbe.F:                  t1283 = Arhoarhob*t111
./xc/xc_pbe.F:                  t1285 = 0.2e1_dp*t909*trhob
./xc/xc_pbe.F:                  t1286 = Arhob*t
./xc/xc_pbe.F:                  t1288 = 0.2e1_dp*t1286*trhoa
./xc/xc_pbe.F:                  t1291 = 0.2e1_dp*A*trhob*trhoa
./xc/xc_pbe.F:                  t1293 = 0.2e1_dp*t303*trhoarhob
./xc/xc_pbe.F:                  t1327 = t1283+t1285+t1288+t1291+t1293+0.2e1_dp*Arhob* &
./xc/xc_pbe.F:                          t116*Arhoa+0.8e1_dp*t944*Arhoa*trhob+0.2e1_dp*t314* &
./xc/xc_pbe.F:                          Arhoarhob+0.8e1_dp*t944*trhoa*Arhob+0.12e2_dp*t953* &
./xc/xc_pbe.F:                          trhoa*trhob+0.4e1_dp*t318*trhoarhob
./xc/xc_pbe.F:                  t1330 = 0.2e1_dp*t101*trhob*t299+0.2e1_dp*t297*t1269* &
./xc/xc_pbe.F:                          trhoa-0.2e1_dp*t297*t313*trhoa*t453+0.2e1_dp*t297* &
./xc/xc_pbe.F:                          t298*trhoarhob+0.2e1_dp*t297*t904*trhob+t101*t111*( &
./xc/xc_pbe.F:                          0.2e1_dp*t297*t313*t321*trhob-t310*t1304*t321+ &
./xc/xc_pbe.F:                                scale_ec*(epsilon_cGGArhob+epsilon_cGGArhoa+ &
./xc/xc_pbe.F:                                          my_rho*(epsilon_c_unifrhoarhob+0.6e1_dp*t858*t294*phirhob+ &
./xc/xc_pbe.F:                                                  0.3e1_dp*t293*t457*phirhoa+0.3e1_dp*t293*t123* &
./xc/xc_pbe.F:                                                  phirhoarhob+0.3e1_dp*t293*t326*phirhob+t110*t1330*t325 &
./xc/xc_pbe.F:                  chirhobrhob = 0.2e1_dp*t163+0.2e1_dp*t519
./xc/xc_pbe.F:                  rsrhobrhob = rsrhoarhob
./xc/xc_pbe.F:                  t1346 = rsrhob**2
./xc/xc_pbe.F:                  e_c_u_0rhobrhob = -0.2e1_dp*t171*rsrhobrhob*t28+0.2e1_dp* &
./xc/xc_pbe.F:                                                                               t1346/0.4e1_dp+t179*rsrhobrhob/0.2e1_dp+beta_2_1* &
./xc/xc_pbe.F:                                                                               rsrhobrhob+0.3e1_dp/0.4e1_dp*t556*t1346+0.3e1_dp/ &
./xc/xc_pbe.F:                                                                              0.2e1_dp*t183*rsrhobrhob+t22*t561*t1346*t564+t22*t20 &
./xc/xc_pbe.F:                                                                               *rsrhobrhob*t187-t22*t20*t1346*t564)*t191+t578* &
./xc/xc_pbe.F:                  e_c_u_01rhob = e_c_u_0rhob
./xc/xc_pbe.F:                  alpha_c1rhob = alpha_crhob
./xc/xc_pbe.F:                  t1440 = chirhob**2
./xc/xc_pbe.F:                  frhobrhob = (0.4e1_dp/0.9e1_dp*t681*t1440+0.4e1_dp/ &
./xc/xc_pbe.F:                               0.3e1_dp*t71*chirhobrhob+0.4e1_dp/0.9e1_dp*t687*t1440- &
./xc/xc_pbe.F:                               0.4e1_dp/0.3e1_dp*t74*chirhobrhob)*t69
./xc/xc_pbe.F:                  f1rhob = frhob
./xc/xc_pbe.F:                  t1462 = alpha_c1rhob*f
./xc/xc_pbe.F:                  t1465 = alpha_c*f1rhob
./xc/xc_pbe.F:                  t1482 = e_c_u_1rhob-e_c_u_01rhob
./xc/xc_pbe.F:                  t1492 = t84*f1rhob
./xc/xc_pbe.F:                  t1501 = -0.4e1_dp*t77*t245*chirhobrhob+(-0.2e1_dp*t194* &
./xc/xc_pbe.F:                                                          rsrhobrhob*t46+0.2e1_dp*t1071*t1069-0.2e1_dp*t595* &
./xc/xc_pbe.F:                                                          t1377*t212+t200*(-t600*t1346/0.4e1_dp+t201*rsrhobrhob &
./xc/xc_pbe.F:                                                                           /0.2e1_dp+beta_2_2*rsrhobrhob+0.3e1_dp/0.4e1_dp*t606* &
./xc/xc_pbe.F:                                                                           t1346+0.3e1_dp/0.2e1_dp*t205*rsrhobrhob+t40*t611*t1346 &
./xc/xc_pbe.F:                                                                           *t564+t40*t38*rsrhobrhob*t187-t40*t38*t1346*t564) &
./xc/xc_pbe.F:                                                          *t212+t626*t1377*t628*t34/0.2e1_dp-e_c_u_0rhobrhob)*f &
./xc/xc_pbe.F:                          *t80+t410*f1rhob*t80+0.4e1_dp*t411*t415+t1482* &
./xc/xc_pbe.F:                          frhob*t80+t84*frhobrhob*t80+0.4e1_dp*t413*t415+ &
./xc/xc_pbe.F:                          *t79*t1440+0.4e1_dp*t85*t244*chirhobrhob
./xc/xc_pbe.F:                  epsilon_c_unifrhobrhob = e_c_u_0rhobrhob+(0.2e1_dp*t215* &
./xc/xc_pbe.F:                                                            rsrhobrhob*t64-0.2e1_dp*t1106*t1104+0.2e1_dp*t643* &
./xc/xc_pbe.F:                                                            t1411*t233-t221*(-t648*t1346/0.4e1_dp+t222*rsrhobrhob &
./xc/xc_pbe.F:                                                                             /0.2e1_dp+beta_2_3*rsrhobrhob+0.3e1_dp/0.4e1_dp*t654* &
./xc/xc_pbe.F:                                                                            t1346+0.3e1_dp/0.2e1_dp*t226*rsrhobrhob+t58*t659*t1346 &
./xc/xc_pbe.F:                                                                             *t564+t58*t56*rsrhobrhob*t187-t58*t56*t1346*t564) &
./xc/xc_pbe.F:                                           alpha_crhob*f1rhob*t82-0.4e1_dp*t403*t407+alpha_c1rhob* &
./xc/xc_pbe.F:                                           frhob*t82+alpha_c*frhobrhob*t82-0.4e1_dp*t405*t407- &
./xc/xc_pbe.F:                  epsilon_c_unif1rhob = e_c_u_01rhob+t1462*t82+t1465*t82- &
./xc/xc_pbe.F:                  phirhobrhob = -t750*t1440/0.9e1_dp+t257*chirhobrhob/ &
./xc/xc_pbe.F:                                0.3e1_dp-t755*t1440/0.9e1_dp-t259*chirhobrhob/0.3e1_dp
./xc/xc_pbe.F:                  phi1rhob = phirhob
./xc/xc_pbe.F:                  t1514 = k_frhob**2
./xc/xc_pbe.F:                  k_s1rhob = k_srhob
./xc/xc_pbe.F:                  t1520 = t2*phirhob
./xc/xc_pbe.F:                  t1529 = t2*k_srhob
./xc/xc_pbe.F:                  trhobrhob = t775*t1520*phi1rhob+t779*t1520*k_s1rhob/ &
./xc/xc_pbe.F:                              0.2e1_dp+t1228-t269*t98*phirhobrhob/0.2e1_dp+t779* &
./xc/xc_pbe.F:                              t1529*phi1rhob/0.2e1_dp+t795*t1529*k_s1rhob+t1231-t96 &
./xc/xc_pbe.F:                              *t274*(-t767*t1514*t523/0.2e1_dp+t266*k_frhoarhob*t7) &
./xc/xc_pbe.F:                              /0.2e1_dp+t269*t277*phi1rhob/0.2e1_dp+t96*t798* &
./xc/xc_pbe.F:                              k_s1rhob/0.2e1_dp+t812
./xc/xc_pbe.F:                  t1rhob = -t269*t98*phi1rhob/0.2e1_dp-t96*t274*k_s1rhob &
./xc/xc_pbe.F:                  t1550 = epsilon_c_unif1rhob*t100
./xc/xc_pbe.F:                  t1552 = t285*phi1rhob
./xc/xc_pbe.F:                  Arhobrhob = 0.2e1_dp*t820*t432*t821*t1555-t101*t281* &
./xc/xc_pbe.F:                              (-epsilon_c_unifrhobrhob*t100*t105+0.3e1_dp*t427*t1552+ &
./xc/xc_pbe.F:                               0.3e1_dp*t1550*t429-0.12e2_dp*t102*t839*phirhob* &
./xc/xc_pbe.F:                               phi1rhob+0.3e1_dp*t102*t285*phirhobrhob)*t107-t851* &
./xc/xc_pbe.F:                  A1rhob = -t101*t281*t1555*t107
./xc/xc_pbe.F:                  t1588 = A1rhob*t111
./xc/xc_pbe.F:                  t1590 = 0.2e1_dp*t303*t1rhob
./xc/xc_pbe.F:                  t1599 = t1588+t1590+0.2e1_dp*t314*A1rhob+0.4e1_dp*t318 &
./xc/xc_pbe.F:                          *t1rhob
./xc/xc_pbe.F:                  t1602 = 0.2e1_dp*t297*t298*t1rhob+t101*t111*t1591* &
./xc/xc_pbe.F:                  t1630 = Arhobrhob*t111
./xc/xc_pbe.F:                  t1632 = 0.2e1_dp*t1286*t1rhob
./xc/xc_pbe.F:                  t1635 = 0.2e1_dp*A1rhob*t*trhob
./xc/xc_pbe.F:                  t1638 = 0.2e1_dp*A*t1rhob*trhob
./xc/xc_pbe.F:                  t1640 = 0.2e1_dp*t303*trhobrhob
./xc/xc_pbe.F:                  t1674 = t1630+t1632+t1635+t1638+t1640+0.2e1_dp*A1rhob &
./xc/xc_pbe.F:                          *t116*Arhob+0.8e1_dp*t944*Arhob*t1rhob+0.2e1_dp*t314 &
./xc/xc_pbe.F:                          *Arhobrhob+0.8e1_dp*t944*trhob*A1rhob+0.12e2_dp*t953* &
./xc/xc_pbe.F:                          trhob*t1rhob+0.4e1_dp*t318*trhobrhob
./xc/xc_pbe.F:                  t1677 = 0.2e1_dp*t101*t1rhob*t439+0.2e1_dp*t297*t1591 &
./xc/xc_pbe.F:                          *t119*trhob-0.2e1_dp*t297*t313*trhob*t1599+0.2e1_dp* &
./xc/xc_pbe.F:                          t297*t298*trhobrhob+0.2e1_dp*t297*t1269*t1rhob+t101* &
./xc/xc_pbe.F:                          t1304*t1599-0.2e1_dp*t297*t313*t453*t1rhob-t310* &
./xc/xc_pbe.F:                  kf_brhobrhob = -0.2e1_dp/0.9e1_dp*t124/t460/t142*t763
./xc/xc_pbe.F:                  ex_unif_b1rhob = ex_unif_brhob
./xc/xc_pbe.F:                  t1698 = kf_brhob**2
./xc/xc_pbe.F:                  s_b1rhob = s_brhob
./xc/xc_pbe.F:                  t1713 = s_brhob*t135
./xc/xc_pbe.F:                  Fx_b1rhob = 0.2e1_dp*t477*s_b*s_b1rhob
./xc/xc_pbe.F:                                scale_ex*(0.2e1_dp*ex_unif_b1rhob*Fx_b+ &
./xc/xc_pbe.F:                                          0.2e1_dp*ex_unif_b*Fx_b1rhob+0.2e1_dp*ex_unif_brhob*Fx_b- &
./xc/xc_pbe.F:                                          0.3e1_dp/0.2e1_dp*my_rhob*t7*kf_brhobrhob*Fx_b+0.2e1_dp* &
./xc/xc_pbe.F:                                          t481*Fx_b1rhob+0.2e1_dp*ex_unif_b*Fx_brhob+0.2e1_dp*my_rhob &
./xc/xc_pbe.F:                                          *ex_unif_b1rhob*Fx_brhob+0.2e1_dp*t156*(-0.8e1_dp*t1712 &
./xc/xc_pbe.F:                                                                           *t1713*s_b1rhob+0.2e1_dp*t477*s_b1rhob*s_brhob+0.2e1_dp &
./xc/xc_pbe.F:                                                                               *t477*s_b*(my_norm_drhob/t466/kf_b*t148*t1698+t468* &
./xc/xc_pbe.F:                                                                               t472*kf_brhob-t468*t148*kf_brhobrhob/0.2e1_dp+t147/ &
./xc/xc_pbe.F:                                                                           t471/my_rhob)))/0.2e1_dp+scale_ec*(epsilon_c_unif1rhob+ &
./xc/xc_pbe.F:                                                                           0.3e1_dp*t293*t123*phi1rhob+t110*t1603+epsilon_cGGArhob &
./xc/xc_pbe.F:                                                                       +my_rho*(epsilon_c_unifrhobrhob+0.6e1_dp*t858*t436*phi1rhob &
./xc/xc_pbe.F:                                                                                  +0.3e1_dp*t293*t1603*phirhob+0.3e1_dp*t293*t123* &
./xc/xc_pbe.F:                                                                               phirhobrhob+0.3e1_dp*t293*t457*phi1rhob+t110*t1677* &
./xc/xc_pbe.F:                  trhoanorm_drho = -t1739*t776/0.2e1_dp-t1741*t789/ &
./xc/xc_pbe.F:                  t1748 = t101*tnorm_drho
./xc/xc_pbe.F:                  t1765 = t909*tnorm_drho
./xc/xc_pbe.F:                  t1766 = t494*trhoa
./xc/xc_pbe.F:                  t1767 = t303*trhoanorm_drho
./xc/xc_pbe.F:                          trhoa-0.2e1_dp*t297*t313*trhoa*t502+0.2e1_dp*t297* &
./xc/xc_pbe.F:                          t298*trhoanorm_drho+0.2e1_dp*t297*t904*tnorm_drho+t101* &
./xc/xc_pbe.F:                          tnorm_drho-0.2e1_dp*t493*t494*t312*t321+0.2e1_dp*t310 &
./xc/xc_pbe.F:                                                     t1766+0.2e1_dp*t1767+0.8e1_dp*t944*Arhoa*tnorm_drho+ &
./xc/xc_pbe.F:                                                     0.12e2_dp*t953*trhoa*tnorm_drho+0.4e1_dp*t318* &
./xc/xc_pbe.F:                                                     trhoanorm_drho)
./xc/xc_pbe.F:                                 scale_ec*(Hnorm_drho+my_rho*(0.3e1_dp* &
./xc/xc_pbe.F:                                                              t293*t506*phirhoa+t110*t1801*t325-t110*t967*t505))
./xc/xc_pbe.F:                  trhobnorm_drho = -t1739*t1520/0.2e1_dp-t1741*t1529/ &
./xc/xc_pbe.F:                  t1829 = t1286*tnorm_drho
./xc/xc_pbe.F:                  t1830 = t494*trhob
./xc/xc_pbe.F:                  t1831 = t303*trhobnorm_drho
./xc/xc_pbe.F:                          trhob-0.2e1_dp*t297*t313*trhob*t502+0.2e1_dp*t297* &
./xc/xc_pbe.F:                          t298*trhobnorm_drho+0.2e1_dp*t297*t1269*tnorm_drho+t101 &
./xc/xc_pbe.F:                          tnorm_drho-0.2e1_dp*t493*t494*t312*t453+0.2e1_dp*t310 &
./xc/xc_pbe.F:                                                     t1830+0.2e1_dp*t1831+0.8e1_dp*t944*Arhob*tnorm_drho+ &
./xc/xc_pbe.F:                                                     0.12e2_dp*t953*trhob*tnorm_drho+0.4e1_dp*t318* &
./xc/xc_pbe.F:                                                     trhobnorm_drho)
./xc/xc_pbe.F:                                 scale_ec*(Hnorm_drho+my_rho*(0.3e1_dp* &
./xc/xc_pbe.F:                                                              t293*t506*phirhob+t110*t1865*t325-t110*t1680*t505))
./xc/xc_pbe.F:                  t1871 = tnorm_drho**2
./xc/xc_pbe.F:                                  scale_ec*my_rho*(t110*(0.2e1_dp* &
./xc/xc_pbe.F:                                                         0.4e1_dp*t297*t313*tnorm_drho*t502-0.4e1_dp*t493*t494 &
./xc/xc_pbe.F:                                            Fx_anorm_drhoa+0.2e1_dp*t350*Fx_anorm_drhoa+0.2e1_dp*t140 &
./xc/xc_pbe.F:                                            *(-0.8e1_dp*t1000*t1001*s_anorm_drhoa+0.2e1_dp*t346* &
./xc/xc_pbe.F:                                              s_anorm_drhoa*s_arhoa+0.2e1_dp*t346*s_a*(-t336*t131* &
./xc/xc_pbe.F:                                                                                    kf_arhoa/0.2e1_dp-t129*t341/0.2e1_dp)))/0.2e1_dp
./xc/xc_pbe.F:                  t1922 = s_anorm_drhoa**2
./xc/xc_pbe.F:                                            Fx_bnorm_drhob+0.2e1_dp*t481*Fx_bnorm_drhob+0.2e1_dp*t156 &
./xc/xc_pbe.F:                                            *(-0.8e1_dp*t1712*t1713*s_bnorm_drhob+0.2e1_dp*t477* &
./xc/xc_pbe.F:                                              s_bnorm_drhob*s_brhob+0.2e1_dp*t477*s_b*(-t467*t148* &
./xc/xc_pbe.F:                                                                                    kf_brhob/0.2e1_dp-t146*t472/0.2e1_dp)))/0.2e1_dp
./xc/xc_pbe.F:                  t1949 = s_bnorm_drhob**2
./xc/xc_tfw.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_tfw.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_tfw.F:                                              xc_rho_set_type
./xc/xc_tfw.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_tfw.F:      eps_rho = cutoff
./xc/xc_tfw.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_tfw.F:         needs%rho = .TRUE.
./xc/xc_tfw.F:         needs%rho_1_3 = .TRUE.
./xc/xc_tfw.F:         needs%norm_drho = .TRUE.
./xc/xc_tfw.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_tfw.F:         needs%rho_spin = .TRUE.
./xc/xc_tfw.F:         needs%rho_spin_1_3 = .TRUE.
./xc/xc_tfw.F:         needs%norm_drho = .TRUE.
./xc/xc_tfw.F:!> \param rho_set ...
./xc/xc_tfw.F:   SUBROUTINE tfw_lda_eval(rho_set, deriv_set, order)
./xc/xc_tfw.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_tfw.F:      REAL(KIND=dp)                                      :: epsilon_rho
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_0, e_ndrho, e_ndrho_ndrho, e_rho, &
./xc/xc_tfw.F:         e_rho_ndrho, e_rho_ndrho_ndrho, e_rho_rho, e_rho_rho_ndrho, e_rho_rho_rho, grho, r13, rho
./xc/xc_tfw.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_tfw.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_tfw.F:      CALL xc_rho_set_get(rho_set, rho_1_3=r13, rho=rho, &
./xc/xc_tfw.F:                          norm_drho=grho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_tfw.F:      CALL tfw_init(epsilon_rho)
./xc/xc_tfw.F:      CALL calc_s(rho, grho, s, npoints)
./xc/xc_tfw.F:         CALL tfw_u_0(rho, r13, s, e_0, npoints)
./xc/xc_tfw.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_tfw.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_tfw.F:         CALL tfw_u_1(rho, grho, r13, s, e_rho, e_ndrho, npoints)
./xc/xc_tfw.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_tfw.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(norm_drho)", &
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_tfw.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_tfw.F:         CALL tfw_u_2(rho, grho, r13, s, e_rho_rho, e_rho_ndrho, &
./xc/xc_tfw.F:                      e_ndrho_ndrho, npoints)
./xc/xc_tfw.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_tfw.F:                                         "(rho)(rho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_tfw.F:                                         "(rho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_tfw.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_tfw.F:         CALL tfw_u_3(rho, grho, r13, s, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                      e_rho_ndrho_ndrho, npoints)
./xc/xc_tfw.F:!> \param rho ...
./xc/xc_tfw.F:!> \param grho ...
./xc/xc_tfw.F:   SUBROUTINE calc_s(rho, grho, s, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(in)            :: rho, grho
./xc/xc_tfw.F:!$OMP     SHARED(npoints,rho,eps_rho,s,grho)
./xc/xc_tfw.F:         IF (rho(ip) < eps_rho) THEN
./xc/xc_tfw.F:            s(ip) = grho(ip)*grho(ip)/rho(ip)
./xc/xc_tfw.F:!> \param rho_set ...
./xc/xc_tfw.F:   SUBROUTINE tfw_lsd_eval(rho_set, deriv_set, order)
./xc/xc_tfw.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_tfw.F:         norm_drho_spin_name = (/"(norm_drhoa)", "(norm_drhob)"/)
./xc/xc_tfw.F:      CHARACTER(len=6), DIMENSION(2), PARAMETER :: rho_spin_name = (/"(rhoa)", "(rhob)"/)
./xc/xc_tfw.F:      REAL(KIND=dp)                                      :: epsilon_rho
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_ndrho, e_ndrho_ndrho, e_rho, &
./xc/xc_tfw.F:                                                            e_rho_ndrho, e_rho_ndrho_ndrho, &
./xc/xc_tfw.F:                                                            e_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                                                            e_rho_rho_rho
./xc/xc_tfw.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: norm_drho, rho, rho_1_3
./xc/xc_tfw.F:         NULLIFY (norm_drho(i)%array, rho(i)%array, rho_1_3(i)%array)
./xc/xc_tfw.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_tfw.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_tfw.F:      CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_tfw.F:                          rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_tfw.F:                          rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_tfw.F:                          norm_drhob=norm_drho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_tfw.F:      CALL tfw_init(epsilon_rho)
./xc/xc_tfw.F:         CALL calc_s(rho(ispin)%array, norm_drho(ispin)%array, s, npoints)
./xc/xc_tfw.F:            CALL tfw_p_0(rho(ispin)%array, &
./xc/xc_tfw.F:                         rho_1_3(ispin)%array, s, e_0, npoints)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin), &
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin), &
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_tfw.F:            CALL tfw_p_1(rho(ispin)%array, norm_drho(ispin)%array, &
./xc/xc_tfw.F:                         rho_1_3(ispin)%array, s, e_rho, e_ndrho, npoints)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_tfw.F:                                            rho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_tfw.F:                                            norm_drho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin)// &
./xc/xc_tfw.F:                                            norm_drho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_tfw.F:            CALL tfw_p_2(rho(ispin)%array, norm_drho(ispin)%array, &
./xc/xc_tfw.F:                         rho_1_3(ispin)%array, s, e_rho_rho, e_rho_ndrho, &
./xc/xc_tfw.F:                         e_ndrho_ndrho, npoints)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_tfw.F:                                            rho_spin_name(ispin)//rho_spin_name(ispin), &
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_tfw.F:                                            rho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_tfw.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_tfw.F:                                            norm_drho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_tfw.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_tfw.F:            CALL tfw_p_3(rho(ispin)%array, norm_drho(ispin)%array, &
./xc/xc_tfw.F:                         rho_1_3(ispin)%array, s, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                         e_rho_ndrho_ndrho, npoints)
./xc/xc_tfw.F:!> \param rho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_u_0(rho, r13, s, e_0, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_tfw.F:!$OMP SHARED(npoints,rho,eps_rho,e_0,flda,r13,s,fvw)
./xc/xc_tfw.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_0(ip) = e_0(ip)+flda*r13(ip)*r13(ip)*rho(ip)+fvw*s(ip)
./xc/xc_tfw.F:!> \param rho ...
./xc/xc_tfw.F:!> \param grho ...
./xc/xc_tfw.F:!> \param e_rho ...
./xc/xc_tfw.F:!> \param e_ndrho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_u_1(rho, grho, r13, s, e_rho, e_ndrho, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13, s
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho, e_ndrho
./xc/xc_tfw.F:!$OMP SHARED(npoints,rho,eps_rho,e_rho,e_ndrho,grho,s,r13,f,fvw)
./xc/xc_tfw.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_rho(ip) = e_rho(ip)+f*r13(ip)*r13(ip)-fvw*s(ip)/rho(ip)
./xc/xc_tfw.F:            e_ndrho(ip) = e_ndrho(ip)+2.0_dp*fvw*grho(ip)/rho(ip)
./xc/xc_tfw.F:!> \param rho ...
./xc/xc_tfw.F:!> \param grho ...
./xc/xc_tfw.F:!> \param e_rho_rho ...
./xc/xc_tfw.F:!> \param e_rho_ndrho ...
./xc/xc_tfw.F:!> \param e_ndrho_ndrho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_u_2(rho, grho, r13, s, e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13, s
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho, e_rho_ndrho, e_ndrho_ndrho
./xc/xc_tfw.F:!$OMP SHARED(npoints,rho,eps_rho,e_rho_rho,e_rho_ndrho,e_ndrho_ndrho,grho,f,fvw)
./xc/xc_tfw.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_rho_rho(ip) = e_rho_rho(ip)+f/r13(ip)+2.0_dp*fvw*s(ip)/(rho(ip)*rho(ip))
./xc/xc_tfw.F:            e_rho_ndrho(ip) = e_rho_ndrho(ip)-2.0_dp*fvw*grho(ip)/(rho(ip)*rho(ip))
./xc/xc_tfw.F:            e_ndrho_ndrho(ip) = e_ndrho_ndrho(ip)+2.0_dp*fvw/rho(ip)
./xc/xc_tfw.F:!> \param rho ...
./xc/xc_tfw.F:!> \param grho ...
./xc/xc_tfw.F:!> \param e_rho_rho_rho ...
./xc/xc_tfw.F:!> \param e_rho_rho_ndrho ...
./xc/xc_tfw.F:!> \param e_rho_ndrho_ndrho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_u_3(rho, grho, r13, s, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                      e_rho_ndrho_ndrho, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13, s
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                                                            e_rho_ndrho_ndrho
./xc/xc_tfw.F:!$OMP SHARED(npoints,rho,eps_rho,e_rho_rho_rho,r13,s,e_rho_rho_ndrho,e_rho_ndrho_ndrho,f,fvw)
./xc/xc_tfw.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip)+f/(r13(ip)*rho(ip)) &
./xc/xc_tfw.F:                                -6.0_dp*fvw*s(ip)/(rho(ip)*rho(ip)*rho(ip))
./xc/xc_tfw.F:            e_rho_rho_ndrho(ip) = e_rho_rho_ndrho(ip) &
./xc/xc_tfw.F:                                  +4.0_dp*fvw*grho(ip)/(rho(ip)*rho(ip)*rho(ip))
./xc/xc_tfw.F:            e_rho_ndrho_ndrho(ip) = e_rho_ndrho_ndrho(ip) &
./xc/xc_tfw.F:                                    -2.0_dp*fvw/(rho(ip)*rho(ip))
./xc/xc_tfw.F:!> \param rhoa ...
./xc/xc_tfw.F:   SUBROUTINE tfw_p_0(rhoa, r13a, sa, e_0, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a, sa
./xc/xc_tfw.F:!$OMP SHARED(npoints, rhoa,eps_rho,e_0,r13a,sa,flsd,fvw)
./xc/xc_tfw.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_0(ip) = e_0(ip)+flsd*r13a(ip)*r13a(ip)*rhoa(ip)+fvw*sa(ip)
./xc/xc_tfw.F:!> \param rhoa ...
./xc/xc_tfw.F:!> \param grhoa ...
./xc/xc_tfw.F:!> \param e_rho ...
./xc/xc_tfw.F:!> \param e_ndrho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_p_1(rhoa, grhoa, r13a, sa, e_rho, e_ndrho, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, grhoa, r13a, sa
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho, e_ndrho
./xc/xc_tfw.F:!$OMP SHARED(npoints,rhoa,eps_rho,r13a,sa,fvw,grhoa,e_rho,e_ndrho,f)
./xc/xc_tfw.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_rho(ip) = e_rho(ip)+f*r13a(ip)*r13a(ip)-fvw*sa(ip)/rhoa(ip)
./xc/xc_tfw.F:            e_ndrho(ip) = e_ndrho(ip)+2.0_dp*fvw*grhoa(ip)/rhoa(ip)
./xc/xc_tfw.F:!> \param rhoa ...
./xc/xc_tfw.F:!> \param grhoa ...
./xc/xc_tfw.F:!> \param e_rho_rho ...
./xc/xc_tfw.F:!> \param e_rho_ndrho ...
./xc/xc_tfw.F:!> \param e_ndrho_ndrho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_p_2(rhoa, grhoa, r13a, sa, e_rho_rho, e_rho_ndrho, &
./xc/xc_tfw.F:                      e_ndrho_ndrho, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, grhoa, r13a, sa
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho, e_rho_ndrho, e_ndrho_ndrho
./xc/xc_tfw.F:!$OMP SHARED(npoints,rhoa,eps_rho,e_rho_rho,f,fvw,r13a,sa,e_rho_ndrho,e_ndrho_ndrho)
./xc/xc_tfw.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_rho_rho(ip) = e_rho_rho(ip) &
./xc/xc_tfw.F:                            +f/r13a(ip)+2.0_dp*fvw*sa(ip)/(rhoa(ip)*rhoa(ip))
./xc/xc_tfw.F:            e_rho_ndrho(ip) = e_rho_ndrho(ip) &
./xc/xc_tfw.F:                              -2.0_dp*fvw*grhoa(ip)/(rhoa(ip)*rhoa(ip))
./xc/xc_tfw.F:            e_ndrho_ndrho(ip) = e_ndrho_ndrho(ip)+2.0_dp*fvw/rhoa(ip)
./xc/xc_tfw.F:!> \param rhoa ...
./xc/xc_tfw.F:!> \param grhoa ...
./xc/xc_tfw.F:!> \param e_rho_rho_rho ...
./xc/xc_tfw.F:!> \param e_rho_rho_ndrho ...
./xc/xc_tfw.F:!> \param e_rho_ndrho_ndrho ...
./xc/xc_tfw.F:   SUBROUTINE tfw_p_3(rhoa, grhoa, r13a, sa, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                      e_rho_ndrho_ndrho, npoints)
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, grhoa, r13a, sa
./xc/xc_tfw.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_tfw.F:                                                            e_rho_ndrho_ndrho
./xc/xc_tfw.F:!$OMP SHARED(npoints,rhoa,eps_rho,e_rho_rho_rho,e_rho_rho_ndrho,e_rho_ndrho_ndrho,f,fvw,sa,grhoa)
./xc/xc_tfw.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_tfw.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip) &
./xc/xc_tfw.F:                                +f/(r13a(ip)*rhoa(ip)) &
./xc/xc_tfw.F:                                -6.0_dp*fvw*sa(ip)/(rhoa(ip)*rhoa(ip)*rhoa(ip))
./xc/xc_tfw.F:            e_rho_rho_ndrho(ip) = e_rho_rho_ndrho(ip) &
./xc/xc_tfw.F:                                  +4.0_dp*fvw*grhoa(ip)/(rhoa(ip)*rhoa(ip)*rhoa(ip))
./xc/xc_tfw.F:            e_rho_ndrho_ndrho(ip) = e_rho_ndrho_ndrho(ip) &
./xc/xc_tfw.F:                                    -2.0_dp*fvw/(rhoa(ip)*rhoa(ip))
./xc/xc_hcth.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_hcth.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_hcth.F:                                              xc_rho_set_type
./xc/xc_hcth.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_hcth.F:         needs%rho = .TRUE.
./xc/xc_hcth.F:         needs%norm_drho = .TRUE.
./xc/xc_hcth.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_hcth.F:   SUBROUTINE hcth_lda_eval(iparset, rho_set, deriv_set, grad_deriv)
./xc/xc_hcth.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_hcth.F:      REAL(kind=dp)                                      :: epsilon_rho
./xc/xc_hcth.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_ndrho, e_rho, norm_drho, rho
./xc/xc_hcth.F:      NULLIFY (bo, e_0, e_ndrho, e_rho, norm_drho, rho)
./xc/xc_hcth.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_hcth.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_hcth.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_hcth.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_hcth.F:      deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_hcth.F:      CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_hcth.F:      deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_hcth.F:      CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_hcth.F:      CALL hcth_lda_calc(iparset=iparset, rho=rho, norm_drho=norm_drho, &
./xc/xc_hcth.F:                         e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_hcth.F:                         npoints=npoints, epsilon_rho=epsilon_rho)
./xc/xc_hcth.F:!> \param rho the density
./xc/xc_hcth.F:!> \param norm_drho the norm of the gradient of the density
./xc/xc_hcth.F:!> \param e_rho the derivative of the functional wrt. rho
./xc/xc_hcth.F:!> \param e_ndrho the derivative of the functional wrt. norm_drho
./xc/xc_hcth.F:!> \param epsilon_rho the cutoff on rho
./xc/xc_hcth.F:   SUBROUTINE hcth_lda_calc(iparset, rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_hcth.F:                            epsilon_rho, npoints)
./xc/xc_hcth.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, norm_drho
./xc/xc_hcth.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_0, e_rho, e_ndrho
./xc/xc_hcth.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho
./xc/xc_hcth.F:      REAL(KIND=dp) :: cx_vwn_e, cx_vwn_v, dgcabddrho, dgcabdrho, dgcabds, dgcssddrho, dgcssdrho, &
./xc/xc_hcth.F:         dgcssds, dgdrs, dgxssddrho, dgxssdrho, dgxssds, drho, drhos, drsdrho, ecab, ecss, exss, &
./xc/xc_hcth.F:         g, gcab, gcss, gs2, gxss, my_rho, p, q, rho13, rho43, rhos, rhos13, rhos43, rs, rs12, &
./xc/xc_hcth.F:!$OMP     PARALLEL DO DEFAULT(NONE) SHARED(rho,norm_drho,cxss,ccss,&
./xc/xc_hcth.F:!$OMP             ccab,cx_vwn_e, cx_vwn_v, rsfac, two13,epsilon_rho,npoints, &
./xc/xc_hcth.F:!$OMP             e_0,e_rho,e_ndrho)&
./xc/xc_hcth.F:!$OMP           PRIVATE(ii, dgcabddrho, dgcabdrho, dgcabds, dgcssddrho, &
./xc/xc_hcth.F:!$OMP             dgcssdrho, dgcssds, dgdrs, dgxssddrho, dgxssdrho, dgxssds,&
./xc/xc_hcth.F:!$OMP             drhos, drsdrho, ecab, ecss, exss, g, gcab, gcss, gs2, &
./xc/xc_hcth.F:!$OMP             gxss, p, q, rho13, rho43, rhos, rhos13, rhos43, rs, rs12,&
./xc/xc_hcth.F:!$OMP             s, s2, u, vcab, vcss, vxss, x, y, my_rho, drho)
./xc/xc_hcth.F:         !     *** rho_sigma = rho/2 = rho_alpha = rho_beta (same for |nabla rho|) ***
./xc/xc_hcth.F:         IF (rho(ii) > epsilon_rho) THEN
./xc/xc_hcth.F:            my_rho = MAX(rho(ii), epsilon_rho)
./xc/xc_hcth.F:            drho = norm_drho(ii)
./xc/xc_hcth.F:            rhos = 0.5_dp*my_rho
./xc/xc_hcth.F:            drhos = 0.5_dp*drho
./xc/xc_hcth.F:            rhos13 = rhos**f13
./xc/xc_hcth.F:            rhos43 = rhos13*rhos
./xc/xc_hcth.F:            rho13 = two13*rhos13
./xc/xc_hcth.F:            rho43 = rho13*my_rho
./xc/xc_hcth.F:            exss = cx_vwn_e*rho43
./xc/xc_hcth.F:            vxss = cx_vwn_v*rho13
./xc/xc_hcth.F:            !     *** G(rho_sigma,0) => spin polarisation zeta = 1 ***
./xc/xc_hcth.F:            rs = rsfac/rhos13
./xc/xc_hcth.F:            drsdrho = -f13*rs/my_rho
./xc/xc_hcth.F:            ecss = my_rho*g
./xc/xc_hcth.F:            vcss = g+my_rho*dgdrs*drsdrho
./xc/xc_hcth.F:            !     *** G(rho_alpha,rho_beta) => spin polarisation zeta = 0 ***
./xc/xc_hcth.F:            rs = rsfac/rho13
./xc/xc_hcth.F:            drsdrho = -f13*rs/my_rho
./xc/xc_hcth.F:            ecab = my_rho*g-ecss
./xc/xc_hcth.F:            vcab = g+my_rho*dgdrs*drsdrho-vcss
./xc/xc_hcth.F:            s = drhos/rhos43
./xc/xc_hcth.F:            x = -f83/my_rho
./xc/xc_hcth.F:            y = 2.0_dp/(drho*drho)
./xc/xc_hcth.F:            !     *** g_x(rho_sigma,rho_sigma) ***
./xc/xc_hcth.F:            dgxssdrho = x*dgxssds
./xc/xc_hcth.F:            dgxssddrho = y*dgxssds
./xc/xc_hcth.F:            !     *** g_c(rho_sigma,rho_sigma) ***
./xc/xc_hcth.F:            dgcssdrho = x*dgcssds
./xc/xc_hcth.F:            dgcssddrho = y*dgcssds
./xc/xc_hcth.F:            !     *** g_c(rho_alpha,rho_beta) ***
./xc/xc_hcth.F:            dgcabdrho = x*dgcabds
./xc/xc_hcth.F:            dgcabddrho = y*dgcabds
./xc/xc_hcth.F:            e_rho(ii) = e_rho(ii)+vxss*gxss+exss*dgxssdrho+ &
./xc/xc_hcth.F:                        vcss*gcss+ecss*dgcssdrho+ &
./xc/xc_hcth.F:                        vcab*gcab+ecab*dgcabdrho
./xc/xc_hcth.F:            e_ndrho(ii) = e_ndrho(ii)+(exss*dgxssddrho+ecss*dgcssddrho+ecab*dgcabddrho)*drho
./xc/xc_xbecke88.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xbecke88.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xbecke88.F:                                              xc_rho_set_type
./xc/xc_xbecke88.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke88.F:         needs%rho = .TRUE.
./xc/xc_xbecke88.F:         needs%rho_1_3 = .TRUE.
./xc/xc_xbecke88.F:         needs%norm_drho = .TRUE.
./xc/xc_xbecke88.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke88.F:         needs%rho_spin = .TRUE.
./xc/xc_xbecke88.F:         needs%rho_spin_1_3 = .TRUE.
./xc/xc_xbecke88.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xbecke88.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbecke88.F:   SUBROUTINE xb88_lda_eval(rho_set, deriv_set, grad_deriv, xb88_params)
./xc/xc_xbecke88.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke88.F:      REAL(kind=dp)                                      :: epsilon_rho, sx
./xc/xc_xbecke88.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_xbecke88.F:         e_ndrho_ndrho_ndrho, e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, &
./xc/xc_xbecke88.F:         e_rho_rho_rho, norm_drho, rho, rho_1_3
./xc/xc_xbecke88.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke88.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke88.F:      CALL xc_rho_set_get(rho_set, rho_1_3=rho_1_3, rho=rho, &
./xc/xc_xbecke88.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xbecke88.F:      dummy => rho
./xc/xc_xbecke88.F:      e_rho => dummy
./xc/xc_xbecke88.F:      e_ndrho => dummy
./xc/xc_xbecke88.F:      e_rho_rho => dummy
./xc/xc_xbecke88.F:      e_ndrho_rho => dummy
./xc/xc_xbecke88.F:      e_ndrho_ndrho => dummy
./xc/xc_xbecke88.F:      e_rho_rho_rho => dummy
./xc/xc_xbecke88.F:      e_ndrho_rho_rho => dummy
./xc/xc_xbecke88.F:      e_ndrho_ndrho_rho => dummy
./xc/xc_xbecke88.F:      e_ndrho_ndrho_ndrho => dummy
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_xbecke88.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_xbecke88.F:                                         "(norm_drho)(rho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho)
./xc/xc_xbecke88.F:                                         "(norm_drho)(norm_drho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho)
./xc/xc_xbecke88.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_xbecke88.F:!$OMP              SHARED(rho, rho_1_3, norm_drho, e_0, e_rho) &
./xc/xc_xbecke88.F:!$OMP              SHARED(e_ndrho, e_rho_rho, e_ndrho_rho) &
./xc/xc_xbecke88.F:!$OMP              SHARED(e_ndrho_ndrho, e_rho_rho_rho) &
./xc/xc_xbecke88.F:!$OMP              SHARED(e_ndrho_rho_rho, e_ndrho_ndrho_rho) &
./xc/xc_xbecke88.F:!$OMP              SHARED(e_ndrho_ndrho_ndrho, grad_deriv, npoints) &
./xc/xc_xbecke88.F:!$OMP              SHARED(epsilon_rho, sx)
./xc/xc_xbecke88.F:      CALL xb88_lda_calc(rho=rho, rho_1_3=rho_1_3, norm_drho=norm_drho, &
./xc/xc_xbecke88.F:                         e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_rho_rho=e_rho_rho, &
./xc/xc_xbecke88.F:                         e_ndrho_rho=e_ndrho_rho, e_ndrho_ndrho=e_ndrho_ndrho, &
./xc/xc_xbecke88.F:                         e_rho_rho_rho=e_rho_rho_rho, e_ndrho_rho_rho=e_ndrho_rho_rho, &
./xc/xc_xbecke88.F:                         e_ndrho_ndrho_rho=e_ndrho_ndrho_rho, &
./xc/xc_xbecke88.F:                         e_ndrho_ndrho_ndrho=e_ndrho_ndrho_ndrho, grad_deriv=grad_deriv, &
./xc/xc_xbecke88.F:                         npoints=npoints, epsilon_rho=epsilon_rho, sx=sx)
./xc/xc_xbecke88.F:!> \param rho the density where you want to evaluate the functional
./xc/xc_xbecke88.F:!> \param rho_1_3 ...
./xc/xc_xbecke88.F:!> \param norm_drho ...
./xc/xc_xbecke88.F:!> \param e_rho ...
./xc/xc_xbecke88.F:!> \param e_ndrho ...
./xc/xc_xbecke88.F:!> \param e_rho_rho ...
./xc/xc_xbecke88.F:!> \param e_ndrho_rho ...
./xc/xc_xbecke88.F:!> \param e_ndrho_ndrho ...
./xc/xc_xbecke88.F:!> \param e_rho_rho_rho ...
./xc/xc_xbecke88.F:!> \param e_ndrho_rho_rho ...
./xc/xc_xbecke88.F:!> \param e_ndrho_ndrho_rho ...
./xc/xc_xbecke88.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_xbecke88.F:!> \param epsilon_rho ...
./xc/xc_xbecke88.F:   SUBROUTINE xb88_lda_calc(rho, rho_1_3, norm_drho, &
./xc/xc_xbecke88.F:                            e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xbecke88.F:                            e_ndrho_ndrho, e_rho_rho_rho, e_ndrho_rho_rho, e_ndrho_ndrho_rho, &
./xc/xc_xbecke88.F:                            e_ndrho_ndrho_ndrho, grad_deriv, npoints, epsilon_rho, sx)
./xc/xc_xbecke88.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho_ndrho_ndrho, &
./xc/xc_xbecke88.F:         e_ndrho_ndrho_rho, e_ndrho_rho_rho, e_rho_rho_rho, e_ndrho_ndrho, e_ndrho_rho, e_rho_rho, &
./xc/xc_xbecke88.F:         e_ndrho, e_rho, e_0
./xc/xc_xbecke88.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho_1_3, rho
./xc/xc_xbecke88.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx
./xc/xc_xbecke88.F:      REAL(kind=dp) :: c, epsilon_rho43, my_rho, my_rho_1_3, t1, t10, t100, t104, t11, t12, t126, &
./xc/xc_xbecke88.F:      epsilon_rho43 = epsilon_rho**(4./3.)
./xc/xc_xbecke88.F:            my_rho = rho(ii)
./xc/xc_xbecke88.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke88.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbecke88.F:               t3 = my_rho_1_3*my_rho
./xc/xc_xbecke88.F:               x = norm_drho(ii)/MAX(t3, epsilon_rho43)
./xc/xc_xbecke88.F:            my_rho = rho(ii)
./xc/xc_xbecke88.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke88.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbecke88.F:               t3 = my_rho_1_3*my_rho
./xc/xc_xbecke88.F:               x = norm_drho(ii)/t3
./xc/xc_xbecke88.F:               t23 = t2*my_rho_1_3
./xc/xc_xbecke88.F:               e_rho(ii) = e_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho(ii) = e_ndrho(ii) &
./xc/xc_xbecke88.F:            my_rho = rho(ii)
./xc/xc_xbecke88.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke88.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbecke88.F:               t3 = my_rho_1_3*my_rho
./xc/xc_xbecke88.F:               x = norm_drho(ii)/t3
./xc/xc_xbecke88.F:               t23 = t2*my_rho_1_3
./xc/xc_xbecke88.F:               e_rho(ii) = e_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho(ii) = e_ndrho(ii) &
./xc/xc_xbecke88.F:            my_rho = rho(ii)
./xc/xc_xbecke88.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke88.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbecke88.F:               t3 = my_rho_1_3*my_rho
./xc/xc_xbecke88.F:               x = norm_drho(ii)/t3
./xc/xc_xbecke88.F:               t23 = t2*my_rho_1_3
./xc/xc_xbecke88.F:               e_rho(ii) = e_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho(ii) = e_ndrho(ii) &
./xc/xc_xbecke88.F:               t49 = my_rho_1_3**2
./xc/xc_xbecke88.F:               t98 = 0.1e1_dp/my_rho
./xc/xc_xbecke88.F:               e_rho_rho(ii) = e_rho_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho_rho(ii) = e_ndrho_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii) &
./xc/xc_xbecke88.F:            my_rho = rho(ii)
./xc/xc_xbecke88.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke88.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbecke88.F:               t3 = my_rho_1_3*my_rho
./xc/xc_xbecke88.F:               x = norm_drho(ii)/t3
./xc/xc_xbecke88.F:               t23 = t2*my_rho_1_3
./xc/xc_xbecke88.F:               t49 = my_rho_1_3**2
./xc/xc_xbecke88.F:               t98 = 0.1e1_dp/my_rho
./xc/xc_xbecke88.F:               e_rho_rho(ii) = e_rho_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho_rho(ii) = e_ndrho_rho(ii) &
./xc/xc_xbecke88.F:               e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii) &
./xc/xc_xbecke88.F:            my_rho = rho(ii)
./xc/xc_xbecke88.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke88.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_xbecke88.F:               t3 = my_rho_1_3*my_rho
./xc/xc_xbecke88.F:               x = norm_drho(ii)/t3
./xc/xc_xbecke88.F:               t23 = t2*my_rho_1_3
./xc/xc_xbecke88.F:                  e_rho(ii) = e_rho(ii) &
./xc/xc_xbecke88.F:                  e_ndrho(ii) = e_ndrho(ii) &
./xc/xc_xbecke88.F:               t49 = my_rho_1_3**2
./xc/xc_xbecke88.F:               t98 = 0.1e1_dp/my_rho
./xc/xc_xbecke88.F:                  e_rho_rho(ii) = e_rho_rho(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii) &
./xc/xc_xbecke88.F:               t176 = t2/t49/my_rho
./xc/xc_xbecke88.F:               t189 = my_rho**2
./xc/xc_xbecke88.F:                  e_rho_rho_rho(ii) = e_rho_rho_rho(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_rho_rho(ii) = e_ndrho_rho_rho(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_ndrho_ndrho(ii) = e_ndrho_ndrho_ndrho(ii) &
./xc/xc_xbecke88.F:!> \param rho_set ...
./xc/xc_xbecke88.F:   SUBROUTINE xb88_lsd_eval(rho_set, deriv_set, grad_deriv, xb88_params)
./xc/xc_xbecke88.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke88.F:      REAL(kind=dp)                                      :: epsilon_rho, sx
./xc/xc_xbecke88.F:      TYPE(cp_3d_r_p_type), DIMENSION(2) :: e_ndrho, e_ndrho_ndrho, e_ndrho_ndrho_ndrho, &
./xc/xc_xbecke88.F:         e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_xbecke88.F:         norm_drho, rho, rho_1_3
./xc/xc_xbecke88.F:         NULLIFY (norm_drho(i)%array, rho(i)%array, rho_1_3(i)%array)
./xc/xc_xbecke88.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke88.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke88.F:      CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_xbecke88.F:                          rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_xbecke88.F:                          rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_xbecke88.F:                          norm_drhob=norm_drho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_xbecke88.F:      dummy => rho(1)%array
./xc/xc_xbecke88.F:         e_rho(i)%array => dummy
./xc/xc_xbecke88.F:         e_ndrho(i)%array => dummy
./xc/xc_xbecke88.F:         e_rho_rho(i)%array => dummy
./xc/xc_xbecke88.F:         e_ndrho_rho(i)%array => dummy
./xc/xc_xbecke88.F:         e_ndrho_ndrho(i)%array => dummy
./xc/xc_xbecke88.F:         e_rho_rho_rho(i)%array => dummy
./xc/xc_xbecke88.F:         e_ndrho_rho_rho(i)%array => dummy
./xc/xc_xbecke88.F:         e_ndrho_ndrho_rho(i)%array => dummy
./xc/xc_xbecke88.F:         e_ndrho_ndrho_ndrho(i)%array => dummy
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(1)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(2)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(1)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(2)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho(1)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho(2)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho(1)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho(2)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho(1)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho(2)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho(1)%array)
./xc/xc_xbecke88.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho(2)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhoa)(rhoa)(rhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho(1)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhob)(rhob)(rhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho(2)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhoa)(norm_drhoa)(rhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho(1)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhob)(norm_drhob)(rhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho(2)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhoa)(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho(1)%array)
./xc/xc_xbecke88.F:                                         "(norm_drhob)(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho(2)%array)
./xc/xc_xbecke88.F:!$OMP                 SHARED(rho, ispin, rho_1_3, norm_drho, e_0) &
./xc/xc_xbecke88.F:!$OMP                 SHARED(e_rho, e_ndrho, e_rho_rho, e_ndrho_rho) &
./xc/xc_xbecke88.F:!$OMP                 SHARED(e_ndrho_ndrho, e_rho_rho_rho) &
./xc/xc_xbecke88.F:!$OMP                 SHARED(e_ndrho_rho_rho, e_ndrho_ndrho_rho) &
./xc/xc_xbecke88.F:!$OMP                 SHARED(e_ndrho_ndrho_ndrho, grad_deriv, npoints) &
./xc/xc_xbecke88.F:!$OMP                 SHARED(epsilon_rho, sx)
./xc/xc_xbecke88.F:            rho_spin=rho(ispin)%array, &
./xc/xc_xbecke88.F:            rho_1_3_spin=rho_1_3(ispin)%array, &
./xc/xc_xbecke88.F:            norm_drho_spin=norm_drho(ispin)%array, &
./xc/xc_xbecke88.F:            e_rho_spin=e_rho(ispin)%array, &
./xc/xc_xbecke88.F:            e_ndrho_spin=e_ndrho(ispin)%array, &
./xc/xc_xbecke88.F:            e_rho_rho_spin=e_rho_rho(ispin)%array, &
./xc/xc_xbecke88.F:            e_ndrho_rho_spin=e_ndrho_rho(ispin)%array, &
./xc/xc_xbecke88.F:            e_ndrho_ndrho_spin=e_ndrho_ndrho(ispin)%array, &
./xc/xc_xbecke88.F:            e_rho_rho_rho_spin=e_rho_rho_rho(ispin)%array, &
./xc/xc_xbecke88.F:            e_ndrho_rho_rho_spin=e_ndrho_rho_rho(ispin)%array, &
./xc/xc_xbecke88.F:            e_ndrho_ndrho_rho_spin=e_ndrho_ndrho_rho(ispin)%array, &
./xc/xc_xbecke88.F:            e_ndrho_ndrho_ndrho_spin=e_ndrho_ndrho_ndrho(ispin)%array, &
./xc/xc_xbecke88.F:            epsilon_rho=epsilon_rho, sx=sx)
./xc/xc_xbecke88.F:!> \param rho_spin alpha or beta spin density
./xc/xc_xbecke88.F:!> \param rho_1_3_spin rho_spin**(1./3.)
./xc/xc_xbecke88.F:!> \param norm_drho_spin || grad rho_spin ||
./xc/xc_xbecke88.F:!> \param e_rho_spin e_*_spin: derivative of the functional wrt. to the variables
./xc/xc_xbecke88.F:!> \param e_ndrho_spin ...
./xc/xc_xbecke88.F:!> \param e_rho_rho_spin ...
./xc/xc_xbecke88.F:!> \param e_ndrho_rho_spin ...
./xc/xc_xbecke88.F:!> \param e_ndrho_ndrho_spin ...
./xc/xc_xbecke88.F:!> \param e_rho_rho_rho_spin ...
./xc/xc_xbecke88.F:!> \param e_ndrho_rho_rho_spin ...
./xc/xc_xbecke88.F:!> \param e_ndrho_ndrho_rho_spin ...
./xc/xc_xbecke88.F:!> \param e_ndrho_ndrho_ndrho_spin ...
./xc/xc_xbecke88.F:!> \param epsilon_rho ...
./xc/xc_xbecke88.F:   SUBROUTINE xb88_lsd_calc(rho_spin, rho_1_3_spin, norm_drho_spin, e_0, &
./xc/xc_xbecke88.F:                            e_rho_spin, e_ndrho_spin, e_rho_rho_spin, e_ndrho_rho_spin, &
./xc/xc_xbecke88.F:                            e_ndrho_ndrho_spin, e_rho_rho_rho_spin, e_ndrho_rho_rho_spin, &
./xc/xc_xbecke88.F:                            e_ndrho_ndrho_rho_spin, &
./xc/xc_xbecke88.F:                            e_ndrho_ndrho_ndrho_spin, grad_deriv, npoints, epsilon_rho, sx)
./xc/xc_xbecke88.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rho_spin, rho_1_3_spin, norm_drho_spin
./xc/xc_xbecke88.F:      REAL(kind=dp), DIMENSION(*), INTENT(inout) :: e_0, e_rho_spin, e_ndrho_spin, e_rho_rho_spin, &
./xc/xc_xbecke88.F:         e_ndrho_rho_spin, e_ndrho_ndrho_spin, e_rho_rho_rho_spin, e_ndrho_rho_rho_spin, &
./xc/xc_xbecke88.F:         e_ndrho_ndrho_rho_spin, e_ndrho_ndrho_ndrho_spin
./xc/xc_xbecke88.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx
./xc/xc_xbecke88.F:      REAL(kind=dp) :: c, epsilon_rho43, my_epsilon_rho, my_rho, t1, t103, t11, t12, t127, t133, &
./xc/xc_xbecke88.F:      my_epsilon_rho = 0.5_dp*epsilon_rho
./xc/xc_xbecke88.F:      epsilon_rho43 = my_epsilon_rho**(4._dp/3._dp)
./xc/xc_xbecke88.F:            my_rho = rho_spin(ii)
./xc/xc_xbecke88.F:            IF (my_rho > my_epsilon_rho) THEN
./xc/xc_xbecke88.F:               t1 = rho_1_3_spin(ii)*my_rho
./xc/xc_xbecke88.F:               x = norm_drho_spin(ii)/t1
./xc/xc_xbecke88.F:            my_rho = rho_spin(ii)
./xc/xc_xbecke88.F:            IF (my_rho > my_epsilon_rho) THEN
./xc/xc_xbecke88.F:               t1 = rho_1_3_spin(ii)*my_rho
./xc/xc_xbecke88.F:               x = norm_drho_spin(ii)/t1
./xc/xc_xbecke88.F:               e_rho_spin(ii) = e_rho_spin(ii) &
./xc/xc_xbecke88.F:                                -(0.4e1_dp/0.3e1_dp*rho_1_3_spin(ii)*t30*x- &
./xc/xc_xbecke88.F:                                  0.4e1_dp/0.3e1_dp*rho_1_3_spin(ii)*t14)*sx
./xc/xc_xbecke88.F:               e_ndrho_spin(ii) = e_ndrho_spin(ii) &
./xc/xc_xbecke88.F:            my_rho = rho_spin(ii)
./xc/xc_xbecke88.F:            IF (my_rho > my_epsilon_rho) THEN
./xc/xc_xbecke88.F:               t1 = rho_1_3_spin(ii)*my_rho
./xc/xc_xbecke88.F:               x = norm_drho_spin(ii)/t1
./xc/xc_xbecke88.F:                  e_rho_spin(ii) = e_rho_spin(ii) &
./xc/xc_xbecke88.F:                                   -(0.4e1_dp/0.3e1_dp*rho_1_3_spin(ii)*t30*x- &
./xc/xc_xbecke88.F:                                     0.4e1_dp/0.3e1_dp*rho_1_3_spin(ii)*t14)*sx
./xc/xc_xbecke88.F:                  e_ndrho_spin(ii) = e_ndrho_spin(ii) &
./xc/xc_xbecke88.F:               t35 = rho_1_3_spin(ii)**2
./xc/xc_xbecke88.F:               t75 = 0.1e1_dp/my_rho
./xc/xc_xbecke88.F:                  e_rho_rho_spin(ii) = e_rho_rho_spin(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_rho_spin(ii) = e_ndrho_rho_spin(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_ndrho_spin(ii) = e_ndrho_ndrho_spin(ii)+ &
./xc/xc_xbecke88.F:               t138 = 0.1e1_dp/t35/my_rho
./xc/xc_xbecke88.F:               t151 = my_rho**2
./xc/xc_xbecke88.F:                  e_rho_rho_rho_spin(ii) = e_rho_rho_rho_spin(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_rho_rho_spin(ii) = e_ndrho_rho_rho_spin(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_ndrho_rho_spin(ii) = e_ndrho_ndrho_rho_spin(ii) &
./xc/xc_xbecke88.F:                  e_ndrho_ndrho_ndrho_spin(ii) = e_ndrho_ndrho_ndrho_spin(ii) &
./xc/xc_xpbe_hole_t_c_lr.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xpbe_hole_t_c_lr.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xpbe_hole_t_c_lr.F:                                              xc_rho_set_type
./xc/xc_xpbe_hole_t_c_lr.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xpbe_hole_t_c_lr.F:         needs%rho = .TRUE.
./xc/xc_xpbe_hole_t_c_lr.F:         needs%norm_drho = .TRUE.
./xc/xc_xpbe_hole_t_c_lr.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xpbe_hole_t_c_lr.F:         needs%rho_spin = .TRUE.
./xc/xc_xpbe_hole_t_c_lr.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xpbe_hole_t_c_lr.F:   SUBROUTINE xpbe_hole_t_c_lr_lda_eval(rho_set, deriv_set, order, params)
./xc/xc_xpbe_hole_t_c_lr.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp)                                      :: epsilon_rho, R, sx
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_ndrho, e_rho, norm_drho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                            rho
./xc/xc_xpbe_hole_t_c_lr.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xpbe_hole_t_c_lr.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xpbe_hole_t_c_lr.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_xpbe_hole_t_c_lr.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xpbe_hole_t_c_lr.F:      dummy => rho
./xc/xc_xpbe_hole_t_c_lr.F:      e_rho => dummy
./xc/xc_xpbe_hole_t_c_lr.F:      e_ndrho => dummy
./xc/xc_xpbe_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xpbe_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xpbe_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xpbe_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:!$OMP              SHARED(npoints, order, rho, norm_drho, e_0, e_rho) &
./xc/xc_xpbe_hole_t_c_lr.F:!$OMP              SHARED(e_ndrho, epsilon_rho) &
./xc/xc_xpbe_hole_t_c_lr.F:      CALL xpbe_hole_t_c_lr_lda_calc(npoints, order, rho=rho, norm_drho=norm_drho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                     e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                     epsilon_rho=epsilon_rho, &
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho value of density on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param norm_drho value of gradient on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_rho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_ndrho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param epsilon_rho cutoffs
./xc/xc_xpbe_hole_t_c_lr.F:   SUBROUTINE xpbe_hole_t_c_lr_lda_calc(npoints, order, rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                        epsilon_rho, sx, R)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: rho, norm_drho, e_0, e_rho, e_ndrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp)                                           :: my_ndrho, my_rho
./xc/xc_xpbe_hole_t_c_lr.F:         my_rho = MAX(rho(ip), 0.0_dp)
./xc/xc_xpbe_hole_t_c_lr.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xpbe_hole_t_c_lr.F:            my_ndrho = MAX(norm_drho(ip), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_xpbe_hole_t_c_lr.F:            t2 = t1*my_rho
./xc/xc_xpbe_hole_t_c_lr.F:            t6 = my_ndrho*t4
./xc/xc_xpbe_hole_t_c_lr.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_xpbe_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_1(e_0(ip), e_rho(ip), e_ndrho(ip), &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, order)
./xc/xc_xpbe_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_2(e_0(ip), e_rho(ip), e_ndrho(ip), &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, order)
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xpbe_hole_t_c_lr.F:   SUBROUTINE xpbe_hole_t_c_lr_lsd_eval(rho_set, deriv_set, order, params)
./xc/xc_xpbe_hole_t_c_lr.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp)                                      :: epsilon_rho, R, sx
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_ndrhoa, e_ndrhob, e_rhoa, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                            e_rhob, norm_drhoa, norm_drhob, rhoa, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                            rhob
./xc/xc_xpbe_hole_t_c_lr.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xpbe_hole_t_c_lr.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xpbe_hole_t_c_lr.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, &
./xc/xc_xpbe_hole_t_c_lr.F:                          norm_drhoa=norm_drhoa, norm_drhob=norm_drhob, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xpbe_hole_t_c_lr.F:      dummy => rhoa
./xc/xc_xpbe_hole_t_c_lr.F:      e_rhoa => dummy
./xc/xc_xpbe_hole_t_c_lr.F:      e_rhob => dummy
./xc/xc_xpbe_hole_t_c_lr.F:      e_ndrhoa => dummy
./xc/xc_xpbe_hole_t_c_lr.F:      e_ndrhob => dummy
./xc/xc_xpbe_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xpbe_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_xpbe_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xpbe_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_xpbe_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xpbe_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_xpbe_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xpbe_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_xpbe_hole_t_c_lr.F:!$OMP              SHARED(npoints, order, rhoa, norm_drhoa, e_0, e_rhoa) &
./xc/xc_xpbe_hole_t_c_lr.F:!$OMP              SHARED(epsilon_rho, sx, r) &
./xc/xc_xpbe_hole_t_c_lr.F:!$OMP              SHARED(rhob, norm_drhob, e_rhob, e_ndrhoa, e_ndrhob)
./xc/xc_xpbe_hole_t_c_lr.F:      CALL xpbe_hole_t_c_lr_lsd_calc(npoints, order, rho=rhoa, norm_drho=norm_drhoa, &
./xc/xc_xpbe_hole_t_c_lr.F:                                     e_0=e_0, e_rho=e_rhoa, e_ndrho=e_ndrhoa, &
./xc/xc_xpbe_hole_t_c_lr.F:                                     epsilon_rho=epsilon_rho, sx=sx, R=R)
./xc/xc_xpbe_hole_t_c_lr.F:      CALL xpbe_hole_t_c_lr_lsd_calc(npoints, order, rho=rhob, norm_drho=norm_drhob, &
./xc/xc_xpbe_hole_t_c_lr.F:                                     e_0=e_0, e_rho=e_rhob, e_ndrho=e_ndrhob, &
./xc/xc_xpbe_hole_t_c_lr.F:                                     epsilon_rho=epsilon_rho, sx=sx, R=R)
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho density on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param norm_drho gradient on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_rho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_ndrho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param epsilon_rho cutoffs
./xc/xc_xpbe_hole_t_c_lr.F:   SUBROUTINE xpbe_hole_t_c_lr_lsd_calc(npoints, order, rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                        epsilon_rho, sx, R)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: rho, norm_drho, e_0, e_rho, e_ndrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp)                                           :: my_ndrho, my_rho
./xc/xc_xpbe_hole_t_c_lr.F:         my_rho = 2.0_dp*MAX(rho(ip), 0.0_dp)
./xc/xc_xpbe_hole_t_c_lr.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xpbe_hole_t_c_lr.F:            my_ndrho = 2.0_dp*MAX(norm_drho(ip), 0.0_dp)
./xc/xc_xpbe_hole_t_c_lr.F:            t2 = t1*my_rho
./xc/xc_xpbe_hole_t_c_lr.F:            t6 = my_ndrho*t4
./xc/xc_xpbe_hole_t_c_lr.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_xpbe_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_1(e_tmp, e_rho(ip), e_ndrho(ip), &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, order)
./xc/xc_xpbe_hole_t_c_lr.F:               CALL xpbe_hole_t_c_lr_lda_calc_2(e_tmp, e_rho(ip), e_ndrho(ip), &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_rho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                                my_ndrho, sscale, sx, R, order)
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_rho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_ndrho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho value of density on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param ndrho value of gradient on the grid
./xc/xc_xpbe_hole_t_c_lr.F:   SUBROUTINE xpbe_hole_t_c_lr_lda_calc_1(e_0, e_rho, e_ndrho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                          rho, ndrho, sscale, sx, R, order)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, sscale, sx, R
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(KIND=dp) :: p, pndrho, prho, q, qndrho, qrho, sndrho, srho, ssval, t1, t103, t104, &
./xc/xc_xpbe_hole_t_c_lr.F:         t3 = ndrho*t2
./xc/xc_xpbe_hole_t_c_lr.F:         t5 = t4*rho
./xc/xc_xpbe_hole_t_c_lr.F:         t8 = 0.1e1_dp/rho
./xc/xc_xpbe_hole_t_c_lr.F:         t11 = red(rho, ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:         t44 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xpbe_hole_t_c_lr.F:         t45 = t44*rho
./xc/xc_xpbe_hole_t_c_lr.F:         t209 = rho**2
./xc/xc_xpbe_hole_t_c_lr.F:         srho = -t3/t164*t8*t4/0.18e2_dp-t3*t7/t209/0.6e1_dp
./xc/xc_xpbe_hole_t_c_lr.F:         sndrho = t214*t8/0.6e1_dp
./xc/xc_xpbe_hole_t_c_lr.F:         t218 = dsdrho(rho, ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:         qrho = t222+t234-t251+t255
./xc/xc_xpbe_hole_t_c_lr.F:         prho = 0.9e1_dp/0.2e1_dp*t256*t257*t218+0.9e1_dp/0.4e1_dp*t14*t262 &
./xc/xc_xpbe_hole_t_c_lr.F:         t269 = dsdndrho(rho)
./xc/xc_xpbe_hole_t_c_lr.F:         pndrho = 0.9e1_dp/0.2e1_dp*t256*t257*t269+0.9e1_dp/0.4e1_dp*t14* &
./xc/xc_xpbe_hole_t_c_lr.F:         qndrho = 2*t217*t125*t37*t269+t14*t279*t39-t236*t125 &
./xc/xc_xpbe_hole_t_c_lr.F:         t308 = dexeirho(P, Q, Prho, Qrho)
./xc/xc_xpbe_hole_t_c_lr.F:                /0.4e1_dp*t92*prho*t93*t99+0.3e1_dp/0.2e1_dp*t401*t405 &
./xc/xc_xpbe_hole_t_c_lr.F:         e_rho = e_rho+(0.4e1_dp/0.3e1_dp*t44*t202*Clda+t45*(-0.4e1_dp/0.9e1_dp* &
./xc/xc_xpbe_hole_t_c_lr.F:                                                             A*t308-0.4e1_dp/0.27e2_dp*A*qrho*t314*t322+0.4e1_dp/0.27e2_dp &
./xc/xc_xpbe_hole_t_c_lr.F:         t640 = dexeindrho(P, Q, Pndrho, Qndrho)
./xc/xc_xpbe_hole_t_c_lr.F:                /0.4e1_dp*t92*pndrho*t93*t99+0.3e1_dp/0.2e1_dp*t401*t405 &
./xc/xc_xpbe_hole_t_c_lr.F:         e_ndrho = e_ndrho+(t45*(-0.4e1_dp/0.9e1_dp*A*t640-0.4e1_dp/0.27e2_dp*A*qndrho &
./xc/xc_xpbe_hole_t_c_lr.F:                                 +0.4e1_dp/0.9e1_dp*t195*qndrho*t199)*Clda)*sx
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_rho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param e_ndrho derivatives of the energy on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho value of density on the grid
./xc/xc_xpbe_hole_t_c_lr.F:!> \param ndrho value of gradient on the grid
./xc/xc_xpbe_hole_t_c_lr.F:   SUBROUTINE xpbe_hole_t_c_lr_lda_calc_2(e_0, e_rho, e_ndrho, &
./xc/xc_xpbe_hole_t_c_lr.F:                                          rho, ndrho, sscale, sx, R, order)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, sscale, sx, R
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(KIND=dp) :: p, pndrho, prho, q, qndrho, qrho, sndrho, srho, ssval, t1, t102, t106, t11, &
./xc/xc_xpbe_hole_t_c_lr.F:         t3 = ndrho*t2
./xc/xc_xpbe_hole_t_c_lr.F:         t5 = t4*rho
./xc/xc_xpbe_hole_t_c_lr.F:         t8 = 0.1e1_dp/rho
./xc/xc_xpbe_hole_t_c_lr.F:         t11 = red(rho, ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:         t44 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xpbe_hole_t_c_lr.F:         t45 = t44*rho
./xc/xc_xpbe_hole_t_c_lr.F:         t165 = rho**2
./xc/xc_xpbe_hole_t_c_lr.F:         srho = -t3/t127*t8*t4/0.18e2_dp-t3*t7/t165/0.6e1_dp
./xc/xc_xpbe_hole_t_c_lr.F:         sndrho = t170*t8/0.6e1_dp
./xc/xc_xpbe_hole_t_c_lr.F:         t174 = dsdrho(rho, ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:         qrho = t178+t190-t207+t211
./xc/xc_xpbe_hole_t_c_lr.F:         prho = 0.9e1_dp/0.2e1_dp*t212*t213*t174+0.9e1_dp/0.4e1_dp*t14*t217 &
./xc/xc_xpbe_hole_t_c_lr.F:         t225 = dsdndrho(rho)
./xc/xc_xpbe_hole_t_c_lr.F:         pndrho = 0.9e1_dp/0.2e1_dp*t212*t213*t225+0.9e1_dp/0.4e1_dp*t14* &
./xc/xc_xpbe_hole_t_c_lr.F:         qndrho = 2*t173*t93*t37*t225+t14*t235*t39-t192*t93 &
./xc/xc_xpbe_hole_t_c_lr.F:         t264 = dexeirho(P, Q, Prho, Qrho)
./xc/xc_xpbe_hole_t_c_lr.F:         e_rho = e_rho+(0.4e1_dp/0.3e1_dp*t44*t158*Clda+t45*(-0.4e1_dp/0.9e1_dp* &
./xc/xc_xpbe_hole_t_c_lr.F:                                                             A*t264-0.4e1_dp/0.27e2_dp*A*qrho*t272*t280+0.4e1_dp/0.27e2_dp &
./xc/xc_xpbe_hole_t_c_lr.F:         t485 = dexeindrho(P, Q, Pndrho, Qndrho)
./xc/xc_xpbe_hole_t_c_lr.F:         e_ndrho = e_ndrho+(t45*(-0.4e1_dp/0.9e1_dp*A*t485-0.4e1_dp/0.27e2_dp*A*qndrho &
./xc/xc_xpbe_hole_t_c_lr.F:                                                                   -2*t142*t143*t581), KIND=dp)*t155+0.4e1_dp/0.9e1_dp*t151*qndrho &
./xc/xc_xpbe_hole_t_c_lr.F:!>      rho and norm_drho.
./xc/xc_xpbe_hole_t_c_lr.F:!> \param dPrho ...
./xc/xc_xpbe_hole_t_c_lr.F:!> \param dQrho ...
./xc/xc_xpbe_hole_t_c_lr.F:   FUNCTION dexeirho(P, Q, dPrho, dQrho)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp), INTENT(IN)                               :: P, Q, dPrho, dQrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp)                                           :: dexeirho
./xc/xc_xpbe_hole_t_c_lr.F:      dexeirho = dPrho*exei(P, Q)-(dPrho+dQrho)/(P+Q)*EXP(-Q)
./xc/xc_xpbe_hole_t_c_lr.F:   END FUNCTION dexeirho
./xc/xc_xpbe_hole_t_c_lr.F:!> \param dPndrho ...
./xc/xc_xpbe_hole_t_c_lr.F:!> \param dQndrho ...
./xc/xc_xpbe_hole_t_c_lr.F:   FUNCTION dexeindrho(P, Q, dPndrho, dQndrho)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp), INTENT(IN)                               :: P, Q, dPndrho, dQndrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp)                                           :: dexeindrho
./xc/xc_xpbe_hole_t_c_lr.F:      dexeindrho = dPndrho*exei(P, Q)-(dPndrho+dQndrho)/(P+Q)*EXP(-Q)
./xc/xc_xpbe_hole_t_c_lr.F:   END FUNCTION dexeindrho
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho ...
./xc/xc_xpbe_hole_t_c_lr.F:!> \param ndrho ...
./xc/xc_xpbe_hole_t_c_lr.F:   FUNCTION red(rho, ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho
./xc/xc_xpbe_hole_t_c_lr.F:      red = 1.0_dp/6.0_dp*ndrho*3.0_dp**(2.0_dp/3.0_dp)
./xc/xc_xpbe_hole_t_c_lr.F:      red = red*MAX(1.0_dp/rho**(4.0_dp/3.0_dp), EPS_RHO)
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho ...
./xc/xc_xpbe_hole_t_c_lr.F:!> \param ndrho ...
./xc/xc_xpbe_hole_t_c_lr.F:   FUNCTION dsdrho(rho, ndrho)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp)                                           :: dsdrho
./xc/xc_xpbe_hole_t_c_lr.F:      dsdrho = -2.0_dp/9.0_dp*ndrho*3.0**(2.0_dp/3.0_dp)
./xc/xc_xpbe_hole_t_c_lr.F:      dsdrho = dsdrho/(pi**(2.0_dp/3.0_dp))
./xc/xc_xpbe_hole_t_c_lr.F:      dsdrho = dsdrho*MAX(1.0_dp/rho**(7.0_dp/3.0_dp), EPS_RHO)
./xc/xc_xpbe_hole_t_c_lr.F:   END FUNCTION dsdrho
./xc/xc_xpbe_hole_t_c_lr.F:!> \param rho ...
./xc/xc_xpbe_hole_t_c_lr.F:   FUNCTION dsdndrho(rho)
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp), INTENT(IN)                               :: rho
./xc/xc_xpbe_hole_t_c_lr.F:      REAL(dp)                                           :: dsdndrho
./xc/xc_xpbe_hole_t_c_lr.F:      dsdndrho = 1.0_dp/6.0_dp*3.0_dp**(2.0_dp/3.0_dp)
./xc/xc_xpbe_hole_t_c_lr.F:      dsdndrho = dsdndrho/(pi**(2.0_dp/3.0_dp))
./xc/xc_xpbe_hole_t_c_lr.F:      dsdndrho = dsdndrho*MAX(1.0_dp/rho**(4.0_dp/3.0_dp), EPS_RHO)
./xc/xc_xpbe_hole_t_c_lr.F:   END FUNCTION dsdndrho
./xc/xc_xbecke_roussel.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xbecke_roussel.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xbecke_roussel.F:                                              xc_rho_set_type
./xc/xc_xbecke_roussel.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke_roussel.F:         needs%rho = .TRUE.
./xc/xc_xbecke_roussel.F:         needs%norm_drho = .TRUE.
./xc/xc_xbecke_roussel.F:         needs%laplace_rho = .TRUE.
./xc/xc_xbecke_roussel.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke_roussel.F:         needs%rho_spin = .TRUE.
./xc/xc_xbecke_roussel.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xbecke_roussel.F:         needs%laplace_rho_spin = .TRUE.
./xc/xc_xbecke_roussel.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbecke_roussel.F:   SUBROUTINE xbecke_roussel_lda_eval(rho_set, deriv_set, grad_deriv, br_params)
./xc/xc_xbecke_roussel.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke_roussel.F:      REAL(kind=dp)                                      :: epsilon_rho
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_laplace_rho, e_ndrho, &
./xc/xc_xbecke_roussel.F:                                                            e_rho, e_tau, laplace_rho, norm_drho, &
./xc/xc_xbecke_roussel.F:                                                            rho, tau
./xc/xc_xbecke_roussel.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke_roussel.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke_roussel.F:      CALL xc_rho_set_get(rho_set, rho=rho, norm_drho=norm_drho, &
./xc/xc_xbecke_roussel.F:                          tau=tau, laplace_rho=laplace_rho, local_bounds=bo, &
./xc/xc_xbecke_roussel.F:                          rho_cutoff=epsilon_rho)
./xc/xc_xbecke_roussel.F:      dummy => rho
./xc/xc_xbecke_roussel.F:      e_rho => dummy
./xc/xc_xbecke_roussel.F:      e_ndrho => dummy
./xc/xc_xbecke_roussel.F:      e_laplace_rho => dummy
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(laplace_rho)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_laplace_rho)
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(rho, norm_drho, laplace_rho, tau, e_0, e_rho) &
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(e_ndrho, e_tau, e_laplace_rho, grad_deriv) &
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(npoints, epsilon_rho) &
./xc/xc_xbecke_roussel.F:      CALL xbecke_roussel_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_xbecke_roussel.F:                                   laplace_rho=laplace_rho, tau=tau, e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_xbecke_roussel.F:                                   e_tau=e_tau, e_laplace_rho=e_laplace_rho, grad_deriv=grad_deriv, &
./xc/xc_xbecke_roussel.F:                                   npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbecke_roussel.F:!> \param rho grid values
./xc/xc_xbecke_roussel.F:!> \param norm_drho grid values
./xc/xc_xbecke_roussel.F:!> \param laplace_rho grid values
./xc/xc_xbecke_roussel.F:!> \param e_rho energies and derivatives
./xc/xc_xbecke_roussel.F:!> \param e_ndrho energies and derivatives
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho energies and derivatives
./xc/xc_xbecke_roussel.F:!> \param epsilon_rho cutoffs
./xc/xc_xbecke_roussel.F:   SUBROUTINE xbecke_roussel_lda_calc(rho, norm_drho, laplace_rho, tau, e_0, e_rho, &
./xc/xc_xbecke_roussel.F:                                      e_ndrho, e_tau, e_laplace_rho, grad_deriv, npoints, &
./xc/xc_xbecke_roussel.F:                                      epsilon_rho, sx, R, gamma)
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_laplace_rho, e_tau, e_ndrho, e_rho, e_0
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: tau, laplace_rho, norm_drho, rho
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R, gamma
./xc/xc_xbecke_roussel.F:      REAL(dp)                                           :: e_diff, e_old, my_laplace_rho, my_ndrho, &
./xc/xc_xbecke_roussel.F:                                                            my_rho, my_tau, t1, t15, t16, t2, t3, &
./xc/xc_xbecke_roussel.F:         my_rho = 0.5_dp*MAX(rho(ip), 0.0_dp)
./xc/xc_xbecke_roussel.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke_roussel.F:            my_ndrho = 0.5_dp*MAX(norm_drho(ip), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_xbecke_roussel.F:            my_laplace_rho = 0.5_dp*laplace_rho(ip)
./xc/xc_xbecke_roussel.F:            t3 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:            t5 = t4*my_rho
./xc/xc_xbecke_roussel.F:            t8 = my_ndrho**2
./xc/xc_xbecke_roussel.F:            t9 = 0.1e1_dp/my_rho
./xc/xc_xbecke_roussel.F:            t15 = my_laplace_rho/0.6e1_dp-gamma*(2.0_dp*my_tau-t8*t9/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_lte_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                        e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_gt_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                       e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_lte_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                               e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_gt_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                              e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbecke_roussel.F:   SUBROUTINE xbecke_roussel_lsd_eval(rho_set, deriv_set, grad_deriv, br_params)
./xc/xc_xbecke_roussel.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke_roussel.F:      REAL(kind=dp)                                      :: epsilon_rho
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_laplace_rhoa, e_laplace_rhob, &
./xc/xc_xbecke_roussel.F:         e_ndrhoa, e_ndrhob, e_rhoa, e_rhob, e_tau_a, e_tau_b, laplace_rhoa, laplace_rhob, &
./xc/xc_xbecke_roussel.F:         norm_drhoa, norm_drhob, rhoa, rhob, tau_a, tau_b
./xc/xc_xbecke_roussel.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke_roussel.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke_roussel.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_xbecke_roussel.F:                          norm_drhob=norm_drhob, tau_a=tau_a, tau_b=tau_b, laplace_rhoa=laplace_rhoa, &
./xc/xc_xbecke_roussel.F:                          laplace_rhob=laplace_rhob, local_bounds=bo, &
./xc/xc_xbecke_roussel.F:                          rho_cutoff=epsilon_rho)
./xc/xc_xbecke_roussel.F:      dummy => rhoa
./xc/xc_xbecke_roussel.F:      e_rhoa => dummy
./xc/xc_xbecke_roussel.F:      e_rhob => dummy
./xc/xc_xbecke_roussel.F:      e_ndrhoa => dummy
./xc/xc_xbecke_roussel.F:      e_ndrhob => dummy
./xc/xc_xbecke_roussel.F:      e_laplace_rhoa => dummy
./xc/xc_xbecke_roussel.F:      e_laplace_rhob => dummy
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(laplace_rhoa)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_laplace_rhoa)
./xc/xc_xbecke_roussel.F:         deriv => xc_dset_get_derivative(deriv_set, "(laplace_rhob)", &
./xc/xc_xbecke_roussel.F:         CALL xc_derivative_get(deriv, deriv_data=e_laplace_rhob)
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(rhoa, norm_drhoa, laplace_rhoa, tau_a, e_0) &
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(e_rhoa, e_ndrhoa, e_tau_a, e_laplace_rhoa) &
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(grad_deriv, npoints, epsilon_rho) &
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(rhob, norm_drhob, laplace_rhob, tau_b, e_rhob) &
./xc/xc_xbecke_roussel.F:!$OMP              SHARED(e_ndrhob, e_tau_b, e_laplace_rhob)
./xc/xc_xbecke_roussel.F:      CALL xbecke_roussel_lsd_calc(rho=rhoa, norm_drho=norm_drhoa, &
./xc/xc_xbecke_roussel.F:                                   laplace_rho=laplace_rhoa, tau=tau_a, e_0=e_0, e_rho=e_rhoa, e_ndrho=e_ndrhoa, &
./xc/xc_xbecke_roussel.F:                                   e_tau=e_tau_a, e_laplace_rho=e_laplace_rhoa, grad_deriv=grad_deriv, &
./xc/xc_xbecke_roussel.F:                                   npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbecke_roussel.F:      CALL xbecke_roussel_lsd_calc(rho=rhob, norm_drho=norm_drhob, &
./xc/xc_xbecke_roussel.F:                                   laplace_rho=laplace_rhob, tau=tau_b, e_0=e_0, e_rho=e_rhob, e_ndrho=e_ndrhob, &
./xc/xc_xbecke_roussel.F:                                   e_tau=e_tau_b, e_laplace_rho=e_laplace_rhob, grad_deriv=grad_deriv, &
./xc/xc_xbecke_roussel.F:                                   npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbecke_roussel.F:!> \param rho grid values
./xc/xc_xbecke_roussel.F:!> \param norm_drho grid values
./xc/xc_xbecke_roussel.F:!> \param laplace_rho grid values
./xc/xc_xbecke_roussel.F:!> \param e_rho energies and derivatives
./xc/xc_xbecke_roussel.F:!> \param e_ndrho energies and derivatives
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho energies and derivatives
./xc/xc_xbecke_roussel.F:!> \param epsilon_rho cutoffs
./xc/xc_xbecke_roussel.F:   SUBROUTINE xbecke_roussel_lsd_calc(rho, norm_drho, laplace_rho, tau, e_0, e_rho, &
./xc/xc_xbecke_roussel.F:                                      e_ndrho, e_tau, e_laplace_rho, grad_deriv, npoints, &
./xc/xc_xbecke_roussel.F:                                      epsilon_rho, sx, R, gamma)
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_laplace_rho, e_tau, e_ndrho, e_rho, e_0
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: tau, laplace_rho, norm_drho, rho
./xc/xc_xbecke_roussel.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R, gamma
./xc/xc_xbecke_roussel.F:      REAL(dp)                                           :: my_laplace_rho, my_ndrho, my_rho, &
./xc/xc_xbecke_roussel.F:         my_rho = MAX(rho(ip), 0.0_dp)
./xc/xc_xbecke_roussel.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xbecke_roussel.F:            my_ndrho = MAX(norm_drho(ip), EPSILON(0.0_dp)*1.e4_dp)
./xc/xc_xbecke_roussel.F:            my_laplace_rho = 1.0_dp*laplace_rho(ip)
./xc/xc_xbecke_roussel.F:            t3 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:            t5 = t4*my_rho
./xc/xc_xbecke_roussel.F:            t8 = my_ndrho**2
./xc/xc_xbecke_roussel.F:            t9 = 0.1e1_dp/my_rho
./xc/xc_xbecke_roussel.F:            t15 = my_laplace_rho/0.6e1_dp-gamma*(2.0_dp*my_tau-t8*t9/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_lte_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                        e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_gt_0(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                       e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_lte_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                               e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:                  CALL x_br_lsd_y_gt_0_cutoff(my_rho, my_ndrho, my_tau, my_laplace_rho, e_0(ip), &
./xc/xc_xbecke_roussel.F:                                              e_rho(ip), e_ndrho(ip), e_tau(ip), e_laplace_rho(ip), &
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_lte_0(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                               e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:         t3 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:         t5 = t4*rho
./xc/xc_xbecke_roussel.F:         t9 = ndrho**2
./xc/xc_xbecke_roussel.F:         t16 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t9/rho/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:         t19 = t3*rho
./xc/xc_xbecke_roussel.F:         t34 = rho**2
./xc/xc_xbecke_roussel.F:         t35 = t34*rho
./xc/xc_xbecke_roussel.F:         t45 = t44*rho
./xc/xc_xbecke_roussel.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t3*t20*t91*t102-t21*t202*t91* &
./xc/xc_xbecke_roussel.F:         t252 = t22*t246*gamma*ndrho*t249*t88
./xc/xc_xbecke_roussel.F:         t255 = t113*ndrho
./xc/xc_xbecke_roussel.F:         t259 = t134*ndrho
./xc/xc_xbecke_roussel.F:         t263 = t142*ndrho
./xc/xc_xbecke_roussel.F:         t267 = t152*ndrho
./xc/xc_xbecke_roussel.F:         t271 = t165*ndrho
./xc/xc_xbecke_roussel.F:         t308 = ndrho*t120
./xc/xc_xbecke_roussel.F:         e_ndrho = e_ndrho+(-t21*(t252/0.27e2_dp+t276/0.3e1_dp-t295/0.3e1_dp)*t91 &
./xc/xc_xbecke_roussel.F:         e_laplace_rho = e_laplace_rho+(-t21*(t422/0.27e2_dp+t436/0.3e1_dp-t450/0.3e1_dp)*t91* &
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_gt_0(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                              e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:         t3 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:         t5 = t4*rho
./xc/xc_xbecke_roussel.F:         t9 = ndrho**2
./xc/xc_xbecke_roussel.F:         t16 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t9/rho/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:         t19 = t3*rho
./xc/xc_xbecke_roussel.F:         t32 = rho**2
./xc/xc_xbecke_roussel.F:         t33 = t32*rho
./xc/xc_xbecke_roussel.F:         t60 = t59*rho
./xc/xc_xbecke_roussel.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t3*t20*t106*t117-t21*t240*t106 &
./xc/xc_xbecke_roussel.F:         t285 = t124*gamma*ndrho
./xc/xc_xbecke_roussel.F:                ndrho/0.9e1_dp+t154*t285/0.4e1_dp
./xc/xc_xbecke_roussel.F:         t301 = t167*ndrho
./xc/xc_xbecke_roussel.F:         t305 = t142*ndrho
./xc/xc_xbecke_roussel.F:         t309 = t180*ndrho
./xc/xc_xbecke_roussel.F:         t313 = t190*ndrho
./xc/xc_xbecke_roussel.F:         t317 = t203*ndrho
./xc/xc_xbecke_roussel.F:         e_ndrho = e_ndrho+(-t21*t341*t106*t117/0.3e1_dp+t248*t249*t115*t297 &
./xc/xc_xbecke_roussel.F:         e_laplace_rho = e_laplace_rho+(-t21*t487*t106*t117/0.3e1_dp+t248*t249*t115*t458 &
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_lte_0_cutoff(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                      e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:      t6 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:      t11 = ndrho**2
./xc/xc_xbecke_roussel.F:      t12 = 0.1e1_dp/rho
./xc/xc_xbecke_roussel.F:      t18 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t11*t12/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:      t20 = t7*rho/t18
./xc/xc_xbecke_roussel.F:      t33 = rho**2
./xc/xc_xbecke_roussel.F:      t38 = t6*t33*rho/t36
./xc/xc_xbecke_roussel.F:      t47 = t43*rho/t36/t18
./xc/xc_xbecke_roussel.F:         CALL x_br_lsd_y_lte_0_cutoff_R_gt_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                             e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:         CALL x_br_lsd_y_lte_0_cutoff_R_lte_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                              e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_lte_0_cutoff_R_gt_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                             e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:         t4 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:         t6 = t5*rho
./xc/xc_xbecke_roussel.F:         t9 = ndrho**2
./xc/xc_xbecke_roussel.F:         t10 = 0.1e1_dp/rho
./xc/xc_xbecke_roussel.F:         t16 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t9*t10/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:         t29 = rho**2
./xc/xc_xbecke_roussel.F:         t30 = t29*rho
./xc/xc_xbecke_roussel.F:         t40 = t39*rho
./xc/xc_xbecke_roussel.F:         t124 = rho*t123
./xc/xc_xbecke_roussel.F:         t153 = t4*rho
./xc/xc_xbecke_roussel.F:         e_rho = e_rho+(t123*REAL(t85, KIND=dp)*t101/0.8e1_dp+rho*t305*t102/0.8e1_dp &
./xc/xc_xbecke_roussel.F:         t314 = gamma*ndrho
./xc/xc_xbecke_roussel.F:         t319 = t134*ndrho
./xc/xc_xbecke_roussel.F:         t323 = t155*ndrho
./xc/xc_xbecke_roussel.F:         t327 = t163*ndrho
./xc/xc_xbecke_roussel.F:         t331 = t173*ndrho
./xc/xc_xbecke_roussel.F:         t335 = t186*ndrho
./xc/xc_xbecke_roussel.F:         t414 = ndrho*t141*t65*t114
./xc/xc_xbecke_roussel.F:         e_ndrho = e_ndrho+(rho*t443*t102/0.8e1_dp-t124*t231*t388/0.24e2_dp)*sx
./xc/xc_xbecke_roussel.F:         e_tau = e_tau+(rho*t563*t102/0.8e1_dp-t124*t231*t516/0.24e2_dp)*sx
./xc/xc_xbecke_roussel.F:         e_laplace_rho = e_laplace_rho+(rho*t672*t102/0.8e1_dp-t124*t231*t628/0.24e2_dp)*sx
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_lte_0_cutoff_R_lte_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                              e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:         t4 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:         t6 = t5*rho
./xc/xc_xbecke_roussel.F:         t9 = ndrho**2
./xc/xc_xbecke_roussel.F:         t10 = 0.1e1_dp/rho
./xc/xc_xbecke_roussel.F:         t16 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t9*t10/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:         t29 = rho**2
./xc/xc_xbecke_roussel.F:         t30 = t29*rho
./xc/xc_xbecke_roussel.F:         t40 = t39*rho
./xc/xc_xbecke_roussel.F:         t119 = rho*t118
./xc/xc_xbecke_roussel.F:         t157 = t4*rho
./xc/xc_xbecke_roussel.F:         e_rho = e_rho+(t118*t121*t102/0.8e1_dp+rho*t302*t123/0.8e1_dp-t119 &
./xc/xc_xbecke_roussel.F:         t315 = t133*ndrho
./xc/xc_xbecke_roussel.F:         t324 = t159*ndrho
./xc/xc_xbecke_roussel.F:         t328 = t167*ndrho
./xc/xc_xbecke_roussel.F:         t332 = t177*ndrho
./xc/xc_xbecke_roussel.F:         t336 = t190*ndrho
./xc/xc_xbecke_roussel.F:         t368 = gamma*ndrho
./xc/xc_xbecke_roussel.F:         e_ndrho = e_ndrho+(rho*t432*t123/0.8e1_dp-t119*t429*t123/0.8e1_dp-t310 &
./xc/xc_xbecke_roussel.F:         e_tau = e_tau+(rho*t552*t123/0.8e1_dp-t119*t549*t123/0.8e1_dp-t310 &
./xc/xc_xbecke_roussel.F:         e_laplace_rho = e_laplace_rho+(rho*t659*t123/0.8e1_dp-t119*t656*t123/0.8e1_dp-t310 &
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_gt_0_cutoff(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                     e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:      t8 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:      t10 = t9*rho
./xc/xc_xbecke_roussel.F:      t14 = ndrho**2
./xc/xc_xbecke_roussel.F:      t15 = 0.1e1_dp/rho
./xc/xc_xbecke_roussel.F:      t21 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t14*t15/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:      t28 = rho**2
./xc/xc_xbecke_roussel.F:      t33 = t8*t28*rho/t31
./xc/xc_xbecke_roussel.F:      t62 = t58*rho/t31/t21
./xc/xc_xbecke_roussel.F:         CALL x_br_lsd_y_gt_0_cutoff_R_gt_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                            e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:         CALL x_br_lsd_y_gt_0_cutoff_R_lte_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                             e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_gt_0_cutoff_R_gt_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                            e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:         t6 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:         t8 = t7*rho
./xc/xc_xbecke_roussel.F:         t12 = ndrho**2
./xc/xc_xbecke_roussel.F:         t13 = 0.1e1_dp/rho
./xc/xc_xbecke_roussel.F:         t19 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t12*t13/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:         t26 = rho**2
./xc/xc_xbecke_roussel.F:         t27 = t26*rho
./xc/xc_xbecke_roussel.F:         t55 = t54*rho
./xc/xc_xbecke_roussel.F:         t139 = rho*t138
./xc/xc_xbecke_roussel.F:         t162 = t6*rho
./xc/xc_xbecke_roussel.F:         e_rho = e_rho+(t138*REAL(t100, KIND=dp)*t116/0.8e1_dp+rho*t343*t117/0.8e1_dp &
./xc/xc_xbecke_roussel.F:         t351 = t145*gamma*ndrho
./xc/xc_xbecke_roussel.F:         t363 = 0.2500000000000000e0_dp*t5*t351-t355*t7*t30*gamma*ndrho &
./xc/xc_xbecke_roussel.F:         t367 = t188*ndrho
./xc/xc_xbecke_roussel.F:         t371 = t164*ndrho
./xc/xc_xbecke_roussel.F:         t375 = t201*ndrho
./xc/xc_xbecke_roussel.F:         t379 = t211*ndrho
./xc/xc_xbecke_roussel.F:         t383 = t224*ndrho
./xc/xc_xbecke_roussel.F:         e_ndrho = e_ndrho+(rho*t469*t117/0.8e1_dp-t139*t269*t428/0.24e2_dp)*sx
./xc/xc_xbecke_roussel.F:         e_tau = e_tau+(rho*t584*t117/0.8e1_dp-t139*t269*t543/0.24e2_dp)*sx
./xc/xc_xbecke_roussel.F:         e_laplace_rho = e_laplace_rho+(rho*t690*t117/0.8e1_dp-t139*t269*t649/0.24e2_dp)*sx
./xc/xc_xbecke_roussel.F:!> \param rho ...
./xc/xc_xbecke_roussel.F:!> \param ndrho ...
./xc/xc_xbecke_roussel.F:!> \param laplace_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_rho ...
./xc/xc_xbecke_roussel.F:!> \param e_ndrho ...
./xc/xc_xbecke_roussel.F:!> \param e_laplace_rho ...
./xc/xc_xbecke_roussel.F:   SUBROUTINE x_br_lsd_y_gt_0_cutoff_R_lte_b(rho, ndrho, tau, laplace_rho, e_0, &
./xc/xc_xbecke_roussel.F:                                             e_rho, e_ndrho, e_tau, e_laplace_rho, &
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(IN)                               :: rho, ndrho, tau, laplace_rho
./xc/xc_xbecke_roussel.F:      REAL(dp), INTENT(INOUT)                            :: e_0, e_rho, e_ndrho, e_tau, e_laplace_rho
./xc/xc_xbecke_roussel.F:         t6 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke_roussel.F:         t8 = t7*rho
./xc/xc_xbecke_roussel.F:         t12 = ndrho**2
./xc/xc_xbecke_roussel.F:         t13 = 0.1e1_dp/rho
./xc/xc_xbecke_roussel.F:         t19 = laplace_rho/0.6e1_dp-gamma*(REAL(2*tau, KIND=dp)-t12*t13/0.4e1_dp)/0.3e1_dp
./xc/xc_xbecke_roussel.F:         t26 = rho**2
./xc/xc_xbecke_roussel.F:         t27 = t26*rho
./xc/xc_xbecke_roussel.F:         t55 = t54*rho
./xc/xc_xbecke_roussel.F:         t134 = rho*t133
./xc/xc_xbecke_roussel.F:         t161 = t6*rho
./xc/xc_xbecke_roussel.F:         e_rho = e_rho+(t133*t136*t117/0.8e1_dp+rho*t340*t138/0.8e1_dp-t134 &
./xc/xc_xbecke_roussel.F:         t353 = t144*gamma*ndrho
./xc/xc_xbecke_roussel.F:         t365 = 0.2500000000000000e0_dp*t5*t353-t357*t7*t30*gamma*ndrho &
./xc/xc_xbecke_roussel.F:         t371 = t192*ndrho
./xc/xc_xbecke_roussel.F:         t375 = t163*ndrho
./xc/xc_xbecke_roussel.F:         t379 = t205*ndrho
./xc/xc_xbecke_roussel.F:         t383 = t215*ndrho
./xc/xc_xbecke_roussel.F:         t387 = t228*ndrho
./xc/xc_xbecke_roussel.F:         e_ndrho = e_ndrho+(rho*t465*t138/0.8e1_dp-t134*t462*t138/0.8e1_dp-t348 &
./xc/xc_xbecke_roussel.F:         e_tau = e_tau+(rho*t578*t138/0.8e1_dp-t134*t575*t138/0.8e1_dp-t348 &
./xc/xc_xbecke_roussel.F:         e_laplace_rho = e_laplace_rho+(rho*t682*t138/0.8e1_dp-t134*t679*t138/0.8e1_dp-t348 &
./xc/xc_perdew_wang.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_perdew_wang.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_perdew_wang.F:                                              xc_rho_set_type
./xc/xc_perdew_wang.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_perdew_wang.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_perdew_wang.F:            needs%rho_spin = .TRUE.
./xc/xc_perdew_wang.F:            needs%rho = .TRUE.
./xc/xc_perdew_wang.F:      eps_rho = cutoff
./xc/xc_perdew_wang.F:!>      wrt to rho (the electron density) up to 3rd order. This
./xc/xc_perdew_wang.F:!> \param rho_set ...
./xc/xc_perdew_wang.F:   SUBROUTINE perdew_wang_lda_eval(method, rho_set, deriv_set, order, scale)
./xc/xc_perdew_wang.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_perdew_wang.F:      REAL(KIND=dp)                                      :: rho_cutoff
./xc/xc_perdew_wang.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_rho, e_rho_rho, &
./xc/xc_perdew_wang.F:                                                            e_rho_rho_rho, rho
./xc/xc_perdew_wang.F:      NULLIFY (bo, rho, e_0, e_rho, e_rho_rho, e_rho_rho_rho, dummy)
./xc/xc_perdew_wang.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_perdew_wang.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_perdew_wang.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_perdew_wang.F:                          local_bounds=bo, rho_cutoff=rho_cutoff)
./xc/xc_perdew_wang.F:      CALL perdew_wang_init(method, rho_cutoff)
./xc/xc_perdew_wang.F:      dummy => rho
./xc/xc_perdew_wang.F:      e_rho => dummy
./xc/xc_perdew_wang.F:      e_rho_rho => dummy
./xc/xc_perdew_wang.F:      e_rho_rho_rho => dummy
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_perdew_wang.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_perdew_wang.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_perdew_wang.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_perdew_wang.F:      CALL perdew_wang_lda_calc(rho, e_0, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_perdew_wang.F:!> \param rho ...
./xc/xc_perdew_wang.F:!> \param e_rho ...
./xc/xc_perdew_wang.F:!> \param e_rho_rho ...
./xc/xc_perdew_wang.F:!> \param e_rho_rho_rho ...
./xc/xc_perdew_wang.F:   SUBROUTINE perdew_wang_lda_calc(rho, e_0, e_rho, e_rho_rho, e_rho_rho_rho, npoints, order, scale)
./xc/xc_perdew_wang.F:      REAL(KIND=dp), DIMENSION(*), INTENT(in)            :: rho
./xc/xc_perdew_wang.F:      REAL(KIND=dp), DIMENSION(*), INTENT(inout)         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho
./xc/xc_perdew_wang.F:!$OMP SHARED(npoints,rho,eps_rho,abs_order,scale,e_0,e_rho,e_rho_rho,e_rho_rho_rho,order)
./xc/xc_perdew_wang.F:         IF (rho(k) > eps_rho) THEN
./xc/xc_perdew_wang.F:            CALL pw_lda_ed_loc(rho(k), ed, abs_order)
./xc/xc_perdew_wang.F:               e_0(k) = e_0(k)+rho(k)*ed(0)
./xc/xc_perdew_wang.F:               e_rho(k) = e_rho(k)+ed(0)+rho(k)*ed(1)
./xc/xc_perdew_wang.F:               e_rho_rho(k) = e_rho_rho(k)+2.0_dp*ed(1)+rho(k)*ed(2)
./xc/xc_perdew_wang.F:               e_rho_rho_rho(k) = e_rho_rho_rho(k)+3.0_dp*ed(2)+rho(k)*ed(3)
./xc/xc_perdew_wang.F:!>      wrt to rho (the electron density) up to 3rd order. This
./xc/xc_perdew_wang.F:!> \param rho_set ...
./xc/xc_perdew_wang.F:   SUBROUTINE perdew_wang_lsd_eval(method, rho_set, deriv_set, order, scale)
./xc/xc_perdew_wang.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_perdew_wang.F:      REAL(KIND=dp)                                      :: rho_cutoff
./xc/xc_perdew_wang.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_perdew_wang.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_perdew_wang.F:      CALL xc_rho_set_get(rho_set, rhoa=a, rhob=b, &
./xc/xc_perdew_wang.F:                          local_bounds=bo, rho_cutoff=rho_cutoff)
./xc/xc_perdew_wang.F:      CALL perdew_wang_init(method, rho_cutoff)
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhob)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)(rhob)", &
./xc/xc_perdew_wang.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_perdew_wang.F:!> \param rhoa ...
./xc/xc_perdew_wang.F:!> \param rhob ...
./xc/xc_perdew_wang.F:   SUBROUTINE perdew_wang_lsd_calc(rhoa, rhob, e_0, ea, eb, eaa, eab, ebb, eaaa, eaab, eabb, &
./xc/xc_perdew_wang.F:      REAL(KIND=dp), DIMENSION(*), INTENT(in)            :: rhoa, rhob
./xc/xc_perdew_wang.F:      REAL(KIND=dp)                                      :: rho
./xc/xc_perdew_wang.F:!$OMP PARALLEL DO PRIVATE (k, rho, ed) DEFAULT(NONE)&
./xc/xc_perdew_wang.F:!$OMP SHARED(npoints,rhoa,rhob,eps_rho,abs_order,order,e_0,ea,eb,eaa,eab,ebb,eaaa,eaab,eabb,ebbb,scale)
./xc/xc_perdew_wang.F:         rho = rhoa(k)+rhob(k)
./xc/xc_perdew_wang.F:         IF (rho > eps_rho) THEN
./xc/xc_perdew_wang.F:            CALL pw_lsd_ed_loc(rhoa(k), rhob(k), ed, abs_order)
./xc/xc_perdew_wang.F:               e_0(k) = e_0(k)+rho*ed(0)
./xc/xc_perdew_wang.F:               ea(k) = ea(k)+ed(0)+rho*ed(1)
./xc/xc_perdew_wang.F:               eb(k) = eb(k)+ed(0)+rho*ed(2)
./xc/xc_perdew_wang.F:               eaa(k) = eaa(k)+2.0_dp*ed(1)+rho*ed(3)
./xc/xc_perdew_wang.F:               eab(k) = eab(k)+ed(1)+ed(2)+rho*ed(4)
./xc/xc_perdew_wang.F:               ebb(k) = ebb(k)+2.0_dp*ed(2)+rho*ed(5)
./xc/xc_perdew_wang.F:               eaaa(k) = eaaa(k)+3.0_dp*ed(3)+rho*ed(6)
./xc/xc_perdew_wang.F:               eaab(k) = eaab(k)+2.0_dp*ed(4)+ed(3)+rho*ed(7)
./xc/xc_perdew_wang.F:               eabb(k) = eabb(k)+2.0_dp*ed(4)+ed(5)+rho*ed(8)
./xc/xc_perdew_wang.F:               ebbb(k) = ebbb(k)+3.0_dp*ed(5)+rho*ed(9)
./xc/xc_perdew_wang.F:!> \param rho ...
./xc/xc_perdew_wang.F:   SUBROUTINE pw_lda_ed_loc(rho, ed, order)
./xc/xc_perdew_wang.F:      REAL(KIND=dp), INTENT(IN)                          :: rho
./xc/xc_perdew_wang.F:      CALL calc_rs(rho, r(0))
./xc/xc_perdew_wang.F:      IF (order_ >= 1) r(1) = (-1.0_dp/3.0_dp)*r(0)/rho
./xc/xc_perdew_wang.F:      IF (order_ >= 2) r(2) = (-4.0_dp/3.0_dp)*r(1)/rho
./xc/xc_perdew_wang.F:      IF (order_ >= 3) r(3) = (-7.0_dp/3.0_dp)*r(2)/rho
./xc/xc_perdew_wang.F:      REAL(KIND=dp)                                      :: rho, tr, trr, trrr, trrz, trz, trzz, tz, &
./xc/xc_perdew_wang.F:      rho = a+b
./xc/xc_perdew_wang.F:      CALL calc_rs(rho, r(0))
./xc/xc_perdew_wang.F:         r(1) = (-1.0_dp/3.0_dp)*r(0)/rho
./xc/xc_perdew_wang.F:         r(2) = (-4.0_dp/3.0_dp)*r(1)/rho
./xc/xc_perdew_wang.F:         r(3) = (-7.0_dp/3.0_dp)*r(2)/rho
./xc/xc_xbecke88_lr_adiabatic.F:!>        Ec = 2*lambda*Ex(rho/lambda) + lambda^2*d/dlambda(Ex(rho/lambda)),
./xc/xc_xbecke88_lr_adiabatic.F:!>      where rho/lambda is the scaled density
./xc/xc_xbecke88_lr_adiabatic.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xbecke88_lr_adiabatic.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xbecke88_lr_adiabatic.F:                                              xc_rho_set_type
./xc/xc_xbecke88_lr_adiabatic.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke88_lr_adiabatic.F:         needs%rho = .TRUE.
./xc/xc_xbecke88_lr_adiabatic.F:         needs%norm_drho = .TRUE.
./xc/xc_xbecke88_lr_adiabatic.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xbecke88_lr_adiabatic.F:         needs%rho_spin = .TRUE.
./xc/xc_xbecke88_lr_adiabatic.F:         needs%rho_spin_1_3 = .TRUE.
./xc/xc_xbecke88_lr_adiabatic.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xbecke88_lr_adiabatic.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xbecke88_lr_adiabatic.F:   SUBROUTINE xb88_lr_adiabatic_lda_eval(rho_set, deriv_set, grad_deriv, xb88_lr_ad_params)
./xc/xc_xbecke88_lr_adiabatic.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp)                                      :: epsilon_rho, lambda, omega, sx
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho_ndrho, e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_rho_rho_rho, norm_drho, rho
./xc/xc_xbecke88_lr_adiabatic.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke88_lr_adiabatic.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke88_lr_adiabatic.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_xbecke88_lr_adiabatic.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xbecke88_lr_adiabatic.F:      dummy => rho
./xc/xc_xbecke88_lr_adiabatic.F:      e_rho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_ndrho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_rho_rho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_ndrho_rho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_ndrho_ndrho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_rho_rho_rho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_ndrho_rho_rho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_ndrho_ndrho_rho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:      e_ndrho_ndrho_ndrho => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drho)(rho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drho)(norm_drho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP              SHARED(rho, norm_drho, e_0, e_rho, e_ndrho, e_rho_rho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP              SHARED(e_ndrho_rho, e_ndrho_ndrho, e_rho_rho_rho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP              SHARED(e_ndrho_rho_rho, e_ndrho_ndrho_rho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP              SHARED(e_ndrho_ndrho_ndrho, grad_deriv, npoints) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP              SHARED(epsilon_rho, sx, omega, lambda)
./xc/xc_xbecke88_lr_adiabatic.F:      CALL xb88_lr_adiabatic_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                      e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_rho_rho=e_rho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                      e_ndrho_rho=e_ndrho_rho, e_ndrho_ndrho=e_ndrho_ndrho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                      e_rho_rho_rho=e_rho_rho_rho, e_ndrho_rho_rho=e_ndrho_rho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                      e_ndrho_ndrho_rho=e_ndrho_ndrho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                      e_ndrho_ndrho_ndrho=e_ndrho_ndrho_ndrho, grad_deriv=grad_deriv, &
./xc/xc_xbecke88_lr_adiabatic.F:                                      npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:!> \param rho alpha or beta spin density
./xc/xc_xbecke88_lr_adiabatic.F:!> \param norm_drho || grad rho ||
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_rho e_*: derivative of the functional wrt. to the variables
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_rho_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_ndrho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_rho_rho_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_rho_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_ndrho_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param epsilon_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:!>      - Just took the lsd code and scaled rho and ndrho by 1/2 (e_0 with 2.0)
./xc/xc_xbecke88_lr_adiabatic.F:   SUBROUTINE xb88_lr_adiabatic_lda_calc(rho, norm_drho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_ndrho_ndrho, e_rho_rho_rho, e_ndrho_rho_rho, e_ndrho_ndrho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_ndrho_ndrho_ndrho, grad_deriv, npoints, epsilon_rho, sx, &
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho_ndrho_ndrho, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho_rho, e_ndrho_rho_rho, e_rho_rho_rho, e_ndrho_ndrho, e_ndrho_rho, e_rho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho, e_rho, e_0
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, omega, lambda
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(KIND=dp) :: Cx, epsilon_rho43, my_epsilon_rho, my_ndrho, my_rho, t1, t10, t1000, t1002, &
./xc/xc_xbecke88_lr_adiabatic.F:      my_epsilon_rho = epsilon_rho
./xc/xc_xbecke88_lr_adiabatic.F:      epsilon_rho43 = my_epsilon_rho**(4.0_dp/3.0_dp)
./xc/xc_xbecke88_lr_adiabatic.F:         my_rho = rho(ii)*0.5_dp
./xc/xc_xbecke88_lr_adiabatic.F:         my_ndrho = norm_drho(ii)*0.5_dp
./xc/xc_xbecke88_lr_adiabatic.F:         IF (my_rho > my_epsilon_rho) THEN
./xc/xc_xbecke88_lr_adiabatic.F:               t1 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke88_lr_adiabatic.F:               xx = my_ndrho*MAX(1.0_dp/t1/my_rho, epsilon_rho43)
./xc/xc_xbecke88_lr_adiabatic.F:               t4 = lambda*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t6 = my_ndrho**2
./xc/xc_xbecke88_lr_adiabatic.F:               t12 = my_rho**2
./xc/xc_xbecke88_lr_adiabatic.F:               t18 = my_rho*t17
./xc/xc_xbecke88_lr_adiabatic.F:               t24 = beta*my_ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t31 = LOG(my_ndrho*t25*t27+SQRT((my_ndrho*t25*t27)**0.2e1_dp+ &
./xc/xc_xbecke88_lr_adiabatic.F:               t83 = my_rho*t41*omega
./xc/xc_xbecke88_lr_adiabatic.F:               t94 = t12*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t99 = t98*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t116 = t115*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t122 = my_ndrho*t11
./xc/xc_xbecke88_lr_adiabatic.F:               t123 = t114*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t126 = -4*my_ndrho*t107*t27+4*t122*t123
./xc/xc_xbecke88_lr_adiabatic.F:               t144 = my_rho*t42
./xc/xc_xbecke88_lr_adiabatic.F:               t156 = t68*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t172 = my_rho*t25
./xc/xc_xbecke88_lr_adiabatic.F:               t183 = t56*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t289 = my_rho*t48*omega
./xc/xc_xbecke88_lr_adiabatic.F:               t313 = t311*t36*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t317 = my_rho*t233
./xc/xc_xbecke88_lr_adiabatic.F:               t343 = t342*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t347 = t311*t132*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t356 = my_ndrho*t219
./xc/xc_xbecke88_lr_adiabatic.F:               t357 = t341*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t365 = t6*my_ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t367 = t308*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t417 = t194*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t446 = t74*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t451 = my_rho*t225
./xc/xc_xbecke88_lr_adiabatic.F:               t489 = t27*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_rho(ii) = e_rho(ii)+(-0.4444444448e0_dp*t214*t79-0.6666666672e0_dp*t217*t46 &
./xc/xc_xbecke88_lr_adiabatic.F:               t608 = my_rho*t557
./xc/xc_xbecke88_lr_adiabatic.F:               t628 = t627*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t635 = -4*t108+4*t332*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho(ii) = e_ndrho(ii)+(-0.6666666672e0_dp*t217*t46*t78*t561-0.4444444448e0_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t905 = my_rho*t150
./xc/xc_xbecke88_lr_adiabatic.F:               t946 = t944*t36*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t954 = my_rho*t772
./xc/xc_xbecke88_lr_adiabatic.F:               t958 = my_rho*t800
./xc/xc_xbecke88_lr_adiabatic.F:               t1004 = t1002*t31*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1008 = t944*t132*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1021 = t1019*t371*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1040 = my_ndrho*t764
./xc/xc_xbecke88_lr_adiabatic.F:                       t1002*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1054 = beta*t785*my_ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t1100 = my_rho*t777
./xc/xc_xbecke88_lr_adiabatic.F:               t1292 = t278*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1340 = t22*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_rho_rho(ii) = e_rho_rho(ii)+(-0.1333333334e1_dp*t747*t84*t237-0.8888888896e0_dp*t214 &
./xc/xc_xbecke88_lr_adiabatic.F:               t1518 = 0.1e1_dp/my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1598 = t326*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1602 = my_rho*t1443
./xc/xc_xbecke88_lr_adiabatic.F:               t1652 = t795*t371*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1667 = 0.28e2_dp/0.3e1_dp*t332-0.28e2_dp/0.3e1_dp*t987*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1962 = t585*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_rho(ii) = e_ndrho_rho(ii)+(-t1406-t1408-t1413-t1417-t1451-t1455-0.4444444448e0_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)+(-t1406-t1413-t1455-t1451-t1408-t1417-0.4444444448e0_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t2492 = t1014*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t2569 = -0.8088888890e3_dp*t24*t2182*t2480*t31*my_rho-0.1518222222e4_dp &
./xc/xc_xbecke88_lr_adiabatic.F:                       *t2437*t2439*t132*my_rho+0.6542222223e3_dp*t786/t2204 &
./xc/xc_xbecke88_lr_adiabatic.F:                       /t19/t2492*t218*t371*my_rho-0.6222222223e2_dp*t24*t2205 &
./xc/xc_xbecke88_lr_adiabatic.F:                             *my_ndrho*t2182*t2480*my_rho)*t132+0.8088888890e3_dp*t24*t2537 &
./xc/xc_xbecke88_lr_adiabatic.F:                       *t2190-0.1551407408e4_dp*t2437*t2439*t36*my_rho+0.960e2_dp* &
./xc/xc_xbecke88_lr_adiabatic.F:                       *t7*t2451*t36-0.960e2_dp*t93*t2455*my_rho*t2196 &
./xc/xc_xbecke88_lr_adiabatic.F:                       *my_rho*t2226+0.480e2_dp*t102*t22*t2585*t136*t2196-0.1760000000e3_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t2732 = my_rho*t2205
./xc/xc_xbecke88_lr_adiabatic.F:                       *t14+0.8888888888e1_dp*t155*t97*my_rho*t2205+0.6750000000e1_dp &
./xc/xc_xbecke88_lr_adiabatic.F:                       t22*t496*t1200-0.3333333336e0_dp*t516*t2292*t65*my_rho* &
./xc/xc_xbecke88_lr_adiabatic.F:               t3248 = t889*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               t3278 = my_rho*t398
./xc/xc_xbecke88_lr_adiabatic.F:               e_rho_rho_rho(ii) = e_rho_rho_rho(ii)+t3291*sx
./xc/xc_xbecke88_lr_adiabatic.F:               t3608 = t973*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:                                                                 0.9e1_dp*t987+0.280e3_dp/0.9e1_dp*t2537*my_rho)*t132-0.60e1_dp*t7 &
./xc/xc_xbecke88_lr_adiabatic.F:                       -0.160e2_dp*t93*t316*my_rho*t3378+0.2346666666e3_dp*t93* &
./xc/xc_xbecke88_lr_adiabatic.F:               t4512 = t1531*my_rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_rho_rho(ii) = e_ndrho_rho_rho(ii)+t4700*sx
./xc/xc_xbecke88_lr_adiabatic.F:               t5065 = my_rho*t4713
./xc/xc_xbecke88_lr_adiabatic.F:               t5069 = my_rho*t4725
./xc/xc_xbecke88_lr_adiabatic.F:               t5108 = t126*t371*my_ndrho
./xc/xc_xbecke88_lr_adiabatic.F:                       *my_rho+0.120e2_dp*t550*t637-0.180e2_dp*t5106*t5108-0.120e2_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t5367 = 0.1666666667e0_dp*t445*t4782*my_rho*t413
./xc/xc_xbecke88_lr_adiabatic.F:               t5503 = 0.180e2_dp*t5106*t360*t371*my_ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t5558 = 0.320e2_dp*t5060*t97*t104*my_rho*t233
./xc/xc_xbecke88_lr_adiabatic.F:               t5585 = 0.160e2_dp*t93*t316*my_rho*t4849
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii)+t6227*sx
./xc/xc_xbecke88_lr_adiabatic.F:                       *t4736*t1300*my_rho*t5002*t149-0.3000000000e1_dp*t2009 &
./xc/xc_xbecke88_lr_adiabatic.F:               t6479 = -t5752+0.1666666667e0_dp*t445*t2042*my_rho*t668-t5756 &
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_ndrho_ndrho(ii) = e_ndrho_ndrho_ndrho(ii)+t6669*sx
./xc/xc_xbecke88_lr_adiabatic.F:!> \param rho_set ...
./xc/xc_xbecke88_lr_adiabatic.F:   SUBROUTINE xb88_lr_adiabatic_lsd_eval(rho_set, deriv_set, grad_deriv, xb88_lr_ad_params)
./xc/xc_xbecke88_lr_adiabatic.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp)                                      :: epsilon_rho, lambda, omega, sx
./xc/xc_xbecke88_lr_adiabatic.F:      TYPE(cp_3d_r_p_type), DIMENSION(2) :: e_ndrho, e_ndrho_ndrho, e_ndrho_ndrho_ndrho, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:         norm_drho, rho
./xc/xc_xbecke88_lr_adiabatic.F:         NULLIFY (norm_drho(i)%array, rho(i)%array)
./xc/xc_xbecke88_lr_adiabatic.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xbecke88_lr_adiabatic.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xbecke88_lr_adiabatic.F:      CALL xc_rho_set_get(rho_set, &
./xc/xc_xbecke88_lr_adiabatic.F:                          rhoa=rho(1)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:                          rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:                          norm_drhob=norm_drho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:      dummy => rho(1)%array
./xc/xc_xbecke88_lr_adiabatic.F:         e_rho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_rho_rho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_rho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_rho_rho_rho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_rho_rho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho_rho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho_ndrho(i)%array => dummy
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhoa)(rhoa)(rhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhob)(rhob)(rhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhoa)(norm_drhoa)(rhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhob)(norm_drhob)(rhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhoa)(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho(1)%array)
./xc/xc_xbecke88_lr_adiabatic.F:                                         "(norm_drhob)(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xbecke88_lr_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho(2)%array)
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP                 SHARED(rho, ispin, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP                 SHARED(e_rho_rho, e_ndrho_rho, e_ndrho_ndrho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP                 SHARED(e_rho_rho_rho, e_ndrho_rho_rho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP                 SHARED(e_ndrho_ndrho_rho, e_ndrho_ndrho_ndrho) &
./xc/xc_xbecke88_lr_adiabatic.F:!$OMP                 SHARED(grad_deriv, npoints, epsilon_rho, sx, omega) &
./xc/xc_xbecke88_lr_adiabatic.F:            rho_spin=rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            norm_drho_spin=norm_drho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_rho_spin=e_rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_ndrho_spin=e_ndrho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_rho_rho_spin=e_rho_rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_ndrho_rho_spin=e_ndrho_rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_ndrho_ndrho_spin=e_ndrho_ndrho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_rho_rho_rho_spin=e_rho_rho_rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_ndrho_rho_rho_spin=e_ndrho_rho_rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_ndrho_ndrho_rho_spin=e_ndrho_ndrho_rho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            e_ndrho_ndrho_ndrho_spin=e_ndrho_ndrho_ndrho(ispin)%array, &
./xc/xc_xbecke88_lr_adiabatic.F:            epsilon_rho=epsilon_rho, &
./xc/xc_xbecke88_lr_adiabatic.F:!> \param rho_spin alpha or beta spin density
./xc/xc_xbecke88_lr_adiabatic.F:!> \param norm_drho_spin || grad rho_spin ||
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_rho_spin e_*_spin: derivative of the functional wrt. to the variables
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_rho_rho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_rho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_ndrho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_rho_rho_rho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_rho_rho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_ndrho_rho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param e_ndrho_ndrho_ndrho_spin ...
./xc/xc_xbecke88_lr_adiabatic.F:!> \param epsilon_rho ...
./xc/xc_xbecke88_lr_adiabatic.F:   SUBROUTINE xb88_lr_adiabatic_lsd_calc(rho_spin, norm_drho_spin, e_0, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_rho_spin, e_ndrho_spin, e_rho_rho_spin, e_ndrho_rho_spin, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_ndrho_ndrho_spin, e_rho_rho_rho_spin, e_ndrho_rho_rho_spin, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_ndrho_ndrho_rho_spin, &
./xc/xc_xbecke88_lr_adiabatic.F:                                         e_ndrho_ndrho_ndrho_spin, grad_deriv, npoints, epsilon_rho, sx, &
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rho_spin, norm_drho_spin
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), DIMENSION(*), INTENT(inout) :: e_0, e_rho_spin, e_ndrho_spin, e_rho_rho_spin, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_rho_spin, e_ndrho_ndrho_spin, e_rho_rho_rho_spin, e_ndrho_rho_rho_spin, &
./xc/xc_xbecke88_lr_adiabatic.F:         e_ndrho_ndrho_rho_spin, e_ndrho_ndrho_ndrho_spin
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, omega, lambda
./xc/xc_xbecke88_lr_adiabatic.F:      REAL(kind=dp) :: Cx, epsilon_rho43, my_epsilon_rho, ndrho, rho, t1, t10, t1000, t1002, &
./xc/xc_xbecke88_lr_adiabatic.F:      my_epsilon_rho = 0.5_dp*epsilon_rho
./xc/xc_xbecke88_lr_adiabatic.F:      epsilon_rho43 = my_epsilon_rho**(4.0_dp/3.0_dp)
./xc/xc_xbecke88_lr_adiabatic.F:         rho = rho_spin(ii)
./xc/xc_xbecke88_lr_adiabatic.F:         ndrho = norm_drho_spin(ii)
./xc/xc_xbecke88_lr_adiabatic.F:         IF (rho > my_epsilon_rho) THEN
./xc/xc_xbecke88_lr_adiabatic.F:               t1 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xbecke88_lr_adiabatic.F:               xx = ndrho*MAX(1.0_dp/t1/rho, epsilon_rho43)
./xc/xc_xbecke88_lr_adiabatic.F:               t4 = lambda*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t6 = ndrho**2
./xc/xc_xbecke88_lr_adiabatic.F:               t12 = rho**2
./xc/xc_xbecke88_lr_adiabatic.F:               t18 = rho*t17
./xc/xc_xbecke88_lr_adiabatic.F:               t24 = beta*ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t31 = LOG(ndrho*t25*t27+SQRT((ndrho*t25*t27)**0.2e1_dp+ &
./xc/xc_xbecke88_lr_adiabatic.F:               t83 = rho*t41*omega
./xc/xc_xbecke88_lr_adiabatic.F:               t94 = t12*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t99 = t98*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t116 = t115*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t122 = ndrho*t11
./xc/xc_xbecke88_lr_adiabatic.F:               t123 = t114*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t126 = -4*ndrho*t107*t27+4*t122*t123
./xc/xc_xbecke88_lr_adiabatic.F:               t144 = rho*t42
./xc/xc_xbecke88_lr_adiabatic.F:               t156 = t68*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t172 = rho*t25
./xc/xc_xbecke88_lr_adiabatic.F:               t183 = t56*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t289 = rho*t48*omega
./xc/xc_xbecke88_lr_adiabatic.F:               t313 = t311*t36*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t317 = rho*t233
./xc/xc_xbecke88_lr_adiabatic.F:               t343 = t342*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t347 = t311*t132*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t356 = ndrho*t219
./xc/xc_xbecke88_lr_adiabatic.F:               t357 = t341*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t365 = t6*ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t367 = t308*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t417 = t194*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t446 = t74*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t451 = rho*t225
./xc/xc_xbecke88_lr_adiabatic.F:               t489 = t27*rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_rho_spin(ii) = e_rho_spin(ii)+(-0.4444444448e0_dp*t214*t79-0.6666666672e0_dp*t217*t46 &
./xc/xc_xbecke88_lr_adiabatic.F:               t608 = rho*t557
./xc/xc_xbecke88_lr_adiabatic.F:               t628 = t627*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t635 = -4*t108+4*t332*rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_spin(ii) = e_ndrho_spin(ii)+(-0.6666666672e0_dp*t217*t46*t78*t561-0.4444444448e0_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t905 = rho*t150
./xc/xc_xbecke88_lr_adiabatic.F:               t946 = t944*t36*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t954 = rho*t772
./xc/xc_xbecke88_lr_adiabatic.F:               t958 = rho*t800
./xc/xc_xbecke88_lr_adiabatic.F:               t1004 = t1002*t31*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1008 = t944*t132*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1021 = t1019*t371*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1040 = ndrho*t764
./xc/xc_xbecke88_lr_adiabatic.F:                       t1002*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1054 = beta*t785*ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t1100 = rho*t777
./xc/xc_xbecke88_lr_adiabatic.F:               t1292 = t278*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1340 = t22*rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_rho_rho_spin(ii) = e_rho_rho_spin(ii)+(-0.1333333334e1_dp*t747*t84*t237-0.8888888896e0_dp*t214 &
./xc/xc_xbecke88_lr_adiabatic.F:               t1518 = 0.1e1_dp/rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1598 = t326*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1602 = rho*t1443
./xc/xc_xbecke88_lr_adiabatic.F:               t1652 = t795*t371*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1667 = 0.28e2_dp/0.3e1_dp*t332-0.28e2_dp/0.3e1_dp*t987*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t1962 = t585*rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_rho_spin(ii) = e_ndrho_rho_spin(ii)+(-t1406-t1408-t1413-t1417-t1451-t1455-0.4444444448e0_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_ndrho_spin(ii) = e_ndrho_ndrho_spin(ii)+(-t1406-t1413-t1455-t1451-t1408-t1417- &
./xc/xc_xbecke88_lr_adiabatic.F:               t2492 = t1014*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t2569 = -0.8088888890e3_dp*t24*t2182*t2480*t31*rho-0.1518222222e4_dp &
./xc/xc_xbecke88_lr_adiabatic.F:                       *t2437*t2439*t132*rho+0.6542222223e3_dp*t786/t2204 &
./xc/xc_xbecke88_lr_adiabatic.F:                       /t19/t2492*t218*t371*rho-0.6222222223e2_dp*t24*t2205 &
./xc/xc_xbecke88_lr_adiabatic.F:                             *ndrho*t2182*t2480*rho)*t132+0.8088888890e3_dp*t24*t2537 &
./xc/xc_xbecke88_lr_adiabatic.F:                       *t2190-0.1551407408e4_dp*t2437*t2439*t36*rho+0.960e2_dp* &
./xc/xc_xbecke88_lr_adiabatic.F:                       *t7*t2451*t36-0.960e2_dp*t93*t2455*rho*t2196 &
./xc/xc_xbecke88_lr_adiabatic.F:                       *rho*t2226+0.480e2_dp*t102*t22*t2585*t136*t2196-0.1760000000e3_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t2732 = rho*t2205
./xc/xc_xbecke88_lr_adiabatic.F:                       *t14+0.8888888888e1_dp*t155*t97*rho*t2205+0.6750000000e1_dp &
./xc/xc_xbecke88_lr_adiabatic.F:                       t22*t496*t1200-0.3333333336e0_dp*t516*t2292*t65*rho* &
./xc/xc_xbecke88_lr_adiabatic.F:               t3248 = t889*rho
./xc/xc_xbecke88_lr_adiabatic.F:               t3278 = rho*t398
./xc/xc_xbecke88_lr_adiabatic.F:               e_rho_rho_rho_spin(ii) = e_rho_rho_rho_spin(ii)+t3291*sx
./xc/xc_xbecke88_lr_adiabatic.F:               t3608 = t973*rho
./xc/xc_xbecke88_lr_adiabatic.F:                                                                    0.9e1_dp*t987+0.280e3_dp/0.9e1_dp*t2537*rho)*t132-0.60e1_dp*t7 &
./xc/xc_xbecke88_lr_adiabatic.F:                       -0.160e2_dp*t93*t316*rho*t3378+0.2346666666e3_dp*t93* &
./xc/xc_xbecke88_lr_adiabatic.F:               t4512 = t1531*rho
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_rho_rho_spin(ii) = e_ndrho_rho_rho_spin(ii)+t4700*sx
./xc/xc_xbecke88_lr_adiabatic.F:               t5065 = rho*t4713
./xc/xc_xbecke88_lr_adiabatic.F:               t5069 = rho*t4725
./xc/xc_xbecke88_lr_adiabatic.F:               t5108 = t126*t371*ndrho
./xc/xc_xbecke88_lr_adiabatic.F:                       *rho+0.120e2_dp*t550*t637-0.180e2_dp*t5106*t5108-0.120e2_dp &
./xc/xc_xbecke88_lr_adiabatic.F:               t5367 = 0.1666666667e0_dp*t445*t4782*rho*t413
./xc/xc_xbecke88_lr_adiabatic.F:               t5503 = 0.180e2_dp*t5106*t360*t371*ndrho
./xc/xc_xbecke88_lr_adiabatic.F:               t5558 = 0.320e2_dp*t5060*t97*t104*rho*t233
./xc/xc_xbecke88_lr_adiabatic.F:               t5585 = 0.160e2_dp*t93*t316*rho*t4849
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_ndrho_rho_spin(ii) = e_ndrho_ndrho_rho_spin(ii)+t6227*sx
./xc/xc_xbecke88_lr_adiabatic.F:                       *t4736*t1300*rho*t5002*t149-0.3000000000e1_dp*t2009 &
./xc/xc_xbecke88_lr_adiabatic.F:               t6479 = -t5752+0.1666666667e0_dp*t445*t2042*rho*t668-t5756 &
./xc/xc_xbecke88_lr_adiabatic.F:               e_ndrho_ndrho_ndrho_spin(ii) = e_ndrho_ndrho_ndrho_spin(ii)+t6669*sx
./xc/xc_optx.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_optx.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_optx.F:                                              xc_rho_set_type
./xc/xc_optx.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_optx.F:         needs%rho = .TRUE.
./xc/xc_optx.F:         needs%norm_drho = .TRUE.
./xc/xc_optx.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_optx.F:         needs%rho_spin = .TRUE.
./xc/xc_optx.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_optx.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_optx.F:   SUBROUTINE optx_lda_eval(rho_set, deriv_set, grad_deriv, optx_params)
./xc/xc_optx.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_optx.F:      REAL(kind=dp)                                      :: a1, a2, epsilon_drho, epsilon_rho, gam, &
./xc/xc_optx.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_ndrho, e_rho, norm_drho, rho
./xc/xc_optx.F:      NULLIFY (bo, e_0, e_ndrho, e_rho, norm_drho, rho)
./xc/xc_optx.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_optx.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_optx.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_optx.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_optx.F:                          drho_cutoff=epsilon_drho)
./xc/xc_optx.F:      deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_optx.F:      CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_optx.F:      deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_optx.F:      CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_optx.F:      CALL optx_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_optx.F:                         e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_optx.F:                         npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_optx.F:                         epsilon_drho=epsilon_drho, sx=sx, &
./xc/xc_optx.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_optx.F:   SUBROUTINE optx_lsd_eval(rho_set, deriv_set, grad_deriv, optx_params)
./xc/xc_optx.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_optx.F:      REAL(kind=dp)                                      :: a1, a2, epsilon_drho, epsilon_rho, gam, &
./xc/xc_optx.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: e_ndrho, e_rho, ndrho, rho
./xc/xc_optx.F:         NULLIFY (e_rho(ispin)%array)
./xc/xc_optx.F:         NULLIFY (e_ndrho(ispin)%array)
./xc/xc_optx.F:         NULLIFY (rho(ispin)%array)
./xc/xc_optx.F:         NULLIFY (ndrho(ispin)%array)
./xc/xc_optx.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_optx.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_optx.F:      CALL xc_rho_set_get(rho_set, rhoa=rho(1)%array, rhob=rho(2)%array, &
./xc/xc_optx.F:                          norm_drhoa=ndrho(1)%array, &
./xc/xc_optx.F:                          norm_drhob=ndrho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_optx.F:                          drho_cutoff=epsilon_drho, local_bounds=bo)
./xc/xc_optx.F:      deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_optx.F:      CALL xc_derivative_get(deriv, deriv_data=e_rho(1)%array)
./xc/xc_optx.F:      deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_optx.F:      CALL xc_derivative_get(deriv, deriv_data=e_rho(2)%array)
./xc/xc_optx.F:      deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_optx.F:      CALL xc_derivative_get(deriv, deriv_data=e_ndrho(1)%array)
./xc/xc_optx.F:      deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_optx.F:      CALL xc_derivative_get(deriv, deriv_data=e_ndrho(2)%array)
./xc/xc_optx.F:         CALL optx_lsd_calc(rho=rho(ispin)%array, norm_drho=ndrho(ispin)%array, &
./xc/xc_optx.F:                            e_0=e_0, e_rho=e_rho(ispin)%array, e_ndrho=e_ndrho(ispin)%array, &
./xc/xc_optx.F:                            npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_optx.F:                            epsilon_drho=epsilon_drho, sx=sx, &
./xc/xc_optx.F:!> \param rho the full density
./xc/xc_optx.F:!> \param norm_drho the norm of the gradient of the full density
./xc/xc_optx.F:!> \param e_rho the derivative of the functional wrt. rho
./xc/xc_optx.F:!> \param e_ndrho the derivative of the functional wrt. norm_drho
./xc/xc_optx.F:!> \param epsilon_rho the cutoff on rho
./xc/xc_optx.F:!> \param epsilon_drho ...
./xc/xc_optx.F:   SUBROUTINE optx_lda_calc(rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_optx.F:                            epsilon_rho, epsilon_drho, npoints, sx, &
./xc/xc_optx.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, norm_drho
./xc/xc_optx.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_0, e_rho, e_ndrho
./xc/xc_optx.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, epsilon_drho
./xc/xc_optx.F:      REAL(KIND=dp)                                      :: denom, ex, gamxsxs, myndrho, myrho, &
./xc/xc_optx.F:                                                            rho43, tmp, xs
./xc/xc_optx.F:!$OMP                 SHARED(rho, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_optx.F:!$OMP                 SHARED(epsilon_rho, epsilon_drho, sx, npoints) &
./xc/xc_optx.F:!$OMP                 PRIVATE(ii, myrho, myndrho, rho43, xs, gamxsxs) &
./xc/xc_optx.F:         myrho = 0.5_dp*rho(ii)
./xc/xc_optx.F:         myndrho = 0.5_dp*MAX(norm_drho(ii), epsilon_drho)
./xc/xc_optx.F:         IF (myrho > 0.5_dp*epsilon_rho) THEN
./xc/xc_optx.F:            rho43 = myrho**o43
./xc/xc_optx.F:            xs = (myndrho/rho43)
./xc/xc_optx.F:            ex = rho43*(a1*cx+a2*(gamxsxs*denom)**2)
./xc/xc_optx.F:            tmp = rho43*2.0_dp*a2*gamxsxs*denom**2*(1.0_dp-gamxsxs*denom)
./xc/xc_optx.F:            ! derive e_0 wrt to rho (full) and ndrho (also full)
./xc/xc_optx.F:            e_rho(ii) = e_rho(ii)-((o43*ex+tmp*gamxsxs*(-2.0_dp*o43))/myrho)*sx
./xc/xc_optx.F:            e_ndrho(ii) = e_ndrho(ii)-((tmp*gam*2.0_dp*myndrho/rho43**2))*sx
./xc/xc_optx.F:!> \param rho the *spin* density
./xc/xc_optx.F:!> \param norm_drho the norm of the gradient of the *spin* density
./xc/xc_optx.F:!> \param e_rho the derivative of the functional wrt. rho
./xc/xc_optx.F:!> \param e_ndrho the derivative of the functional wrt. norm_drho
./xc/xc_optx.F:!> \param epsilon_rho the cutoff on rho
./xc/xc_optx.F:!> \param epsilon_drho ...
./xc/xc_optx.F:   SUBROUTINE optx_lsd_calc(rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_optx.F:                            epsilon_rho, epsilon_drho, npoints, sx, &
./xc/xc_optx.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, norm_drho
./xc/xc_optx.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_0, e_rho, e_ndrho
./xc/xc_optx.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, epsilon_drho
./xc/xc_optx.F:      REAL(KIND=dp)                                      :: denom, ex, gamxsxs, myndrho, myrho, &
./xc/xc_optx.F:                                                            rho43, tmp, xs
./xc/xc_optx.F:!$OMP                 SHARED(rho, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_optx.F:!$OMP                 SHARED(epsilon_rho, epsilon_drho, npoints, sx) &
./xc/xc_optx.F:!$OMP                 PRIVATE(ii, denom, ex, gamxsxs, myndrho, myrho) &
./xc/xc_optx.F:!$OMP                 PRIVATE(rho43, tmp, xs)
./xc/xc_optx.F:         myrho = rho(ii)
./xc/xc_optx.F:         myndrho = MAX(norm_drho(ii), epsilon_drho)
./xc/xc_optx.F:         IF (myrho > epsilon_rho) THEN
./xc/xc_optx.F:            rho43 = myrho**o43
./xc/xc_optx.F:            xs = (myndrho/rho43)
./xc/xc_optx.F:            ex = rho43*(a1*cx+a2*(gamxsxs*denom)**2)
./xc/xc_optx.F:            tmp = rho43*2.0_dp*a2*gamxsxs*denom**2*(1.0_dp-gamxsxs*denom)
./xc/xc_optx.F:            ! derive e_0 wrt to rho and ndrho
./xc/xc_optx.F:            e_rho(ii) = e_rho(ii)-((o43*ex+tmp*gamxsxs*(-2.0_dp*o43))/myrho)*sx
./xc/xc_optx.F:            e_ndrho(ii) = e_ndrho(ii)-((tmp*gam*2.0_dp*myndrho/rho43**2))*sx
./xc/xc_b97.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_b97.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_b97.F:                                              xc_rho_set_type
./xc/xc_b97.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_b97.F:         needs%rho = .TRUE.
./xc/xc_b97.F:         needs%norm_drho = .TRUE.
./xc/xc_b97.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_b97.F:         needs%rho_spin = .TRUE.
./xc/xc_b97.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_b97.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_b97.F:   SUBROUTINE b97_lda_eval(rho_set, deriv_set, grad_deriv, b97_params)
./xc/xc_b97.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_b97.F:      REAL(kind=dp)                                      :: epsilon_norm_drho, epsilon_rho, scale_c, &
./xc/xc_b97.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_b97.F:         e_ndrho_ndrho_ndrho, e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, &
./xc/xc_b97.F:         e_rho_rho_rho, norm_drho, rho
./xc/xc_b97.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_b97.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_b97.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_b97.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_b97.F:                          drho_cutoff=epsilon_norm_drho)
./xc/xc_b97.F:      dummy => rho
./xc/xc_b97.F:      e_rho => dummy
./xc/xc_b97.F:      e_ndrho => dummy
./xc/xc_b97.F:      e_rho_rho => dummy
./xc/xc_b97.F:      e_ndrho_rho => dummy
./xc/xc_b97.F:      e_ndrho_ndrho => dummy
./xc/xc_b97.F:      e_rho_rho_rho => dummy
./xc/xc_b97.F:      e_ndrho_rho_rho => dummy
./xc/xc_b97.F:      e_ndrho_ndrho_rho => dummy
./xc/xc_b97.F:      e_ndrho_ndrho_ndrho => dummy
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_b97.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_b97.F:                                         "(norm_drho)(rho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho)
./xc/xc_b97.F:                                         "(norm_drho)(norm_drho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho)
./xc/xc_b97.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_b97.F:!$OMP              SHARED(rho, norm_drho, e_0, e_rho, e_ndrho, e_rho_rho) &
./xc/xc_b97.F:!$OMP              SHARED(e_ndrho_rho, e_ndrho_ndrho) &
./xc/xc_b97.F:!$OMP              SHARED(grad_deriv, npoints, epsilon_rho) &
./xc/xc_b97.F:!$OMP              SHARED(epsilon_norm_drho, param, scale_c, scale_x)
./xc/xc_b97.F:      CALL b97_lda_calc(rho_tot=rho, norm_drho=norm_drho, &
./xc/xc_b97.F:                        e_0=e_0, e_r=e_rho, e_ndr=e_ndrho, e_r_r=e_rho_rho, &
./xc/xc_b97.F:                        e_r_ndr=e_ndrho_rho, e_ndr_ndr=e_ndrho_ndrho, &
./xc/xc_b97.F:                        ! e_rho_rho_rho=e_rho_rho_rho, e_ndrho_rho_rho=e_ndrho_rho_rho,&
./xc/xc_b97.F:                        ! e_ndrho_ndrho_rho=e_ndrho_ndrho_rho,e_ndrho_ndrho_ndrho=e_ndrho_ndrho_ndrho,&
./xc/xc_b97.F:                        npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_b97.F:!> \param rho_set ...
./xc/xc_b97.F:   SUBROUTINE b97_lsd_eval(rho_set, deriv_set, grad_deriv, b97_params)
./xc/xc_b97.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_b97.F:      REAL(kind=dp)                                      :: epsilon_rho, scale_c, scale_x
./xc/xc_b97.F:         e_rb, e_rb_rb, norm_drhoa, norm_drhob, rhoa, rhob
./xc/xc_b97.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_b97.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_b97.F:      CALL xc_rho_set_get(rho_set, &
./xc/xc_b97.F:                          rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_b97.F:                          norm_drhob=norm_drhob, &
./xc/xc_b97.F:                          rho_cutoff=epsilon_rho, &
./xc/xc_b97.F:      dummy => rhoa
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhob)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_b97.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhoa)", &
./xc/xc_b97.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:                                         "(norm_drhoa)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_b97.F:!$OMP              SHARED(rhoa, rhob, norm_drhoa, norm_drhob, e_0, e_ra) &
./xc/xc_b97.F:!$OMP              SHARED(epsilon_rho)
./xc/xc_b97.F:         rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_b97.F:         norm_drhob=norm_drhob, e_0=e_0, &
./xc/xc_b97.F:         epsilon_rho=epsilon_rho, &
./xc/xc_b97.F:!> \param rhoa alpha spin density
./xc/xc_b97.F:!> \param rhob beta spin desnity
./xc/xc_b97.F:!> \param norm_drhoa || grad rhoa ||
./xc/xc_b97.F:!> \param norm_drhob || grad rhoa ||
./xc/xc_b97.F:!> \param epsilon_rho ...
./xc/xc_b97.F:   SUBROUTINE b97_lsd_calc(rhoa, rhob, norm_drhoa, norm_drhob, &
./xc/xc_b97.F:                           grad_deriv, npoints, epsilon_rho, &
./xc/xc_b97.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rhoa, rhob, norm_drhoa, norm_drhob
./xc/xc_b97.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho
./xc/xc_b97.F:      REAL(kind=dp) :: A_1, A_2, A_3, alpha_1_1, alpha_1_2, alpha_1_3, alpha_c, alpha_c1rhoa, &
./xc/xc_b97.F:         alpha_c1rhob, alpha_crhoa, alpha_crhob, beta_1_1, beta_1_2, beta_1_3, beta_2_1, beta_2_2, &
./xc/xc_b97.F:         c_cab_2, c_css_0, c_css_1, c_css_2, c_x_0, c_x_1, c_x_2, chi, chirhoa, chirhoarhoa, &
./xc/xc_b97.F:         chirhoarhob, chirhob, chirhobrhob, e_c_u_0, e_c_u_01rhoa, e_c_u_01rhob, e_c_u_0rhoa, &
./xc/xc_b97.F:         e_c_u_0rhoarhoa, e_c_u_0rhoarhob, e_c_u_0rhob, e_c_u_0rhobrhob, e_c_u_1rhoa, e_c_u_1rhob, &
./xc/xc_b97.F:         e_lsda_c_a, e_lsda_c_a1rhoa, e_lsda_c_ab, e_lsda_c_abrhoa
./xc/xc_b97.F:      REAL(kind=dp) :: e_lsda_c_abrhob, e_lsda_c_arhoa, e_lsda_c_arhoarhoa, e_lsda_c_b, &
./xc/xc_b97.F:         e_lsda_c_b1rhob, e_lsda_c_brhob, e_lsda_c_brhobrhob, e_lsda_x_a, e_lsda_x_arhoa, &
./xc/xc_b97.F:         e_lsda_x_b, e_lsda_x_brhob, epsilon_c_unif, epsilon_c_unif1rhoa, epsilon_c_unif1rhob, &
./xc/xc_b97.F:         epsilon_c_unif_a, epsilon_c_unif_a1rhoa, epsilon_c_unif_arhoa, epsilon_c_unif_b, &
./xc/xc_b97.F:         epsilon_c_unif_b1rhob, epsilon_c_unif_brhob, epsilon_c_unifrhoa, epsilon_c_unifrhob, exc, &
./xc/xc_b97.F:         exc_norm_drhoa, exc_norm_drhoa_norm_drhoa, exc_norm_drhoa_norm_drhob, exc_norm_drhob, &
./xc/xc_b97.F:         exc_norm_drhob_norm_drhob, exc_rhoa, exc_rhoa_norm_drhoa, exc_rhoa_norm_drhob
./xc/xc_b97.F:      REAL(kind=dp) :: exc_rhoa_rhoa, exc_rhoa_rhob, exc_rhob, exc_rhob_norm_drhoa, &
./xc/xc_b97.F:         exc_rhob_norm_drhob, exc_rhob_rhob, f, f1rhoa, f1rhob, frhoa, frhoarhoa, frhoarhob, &
./xc/xc_b97.F:         frhob, frhobrhob, gamma_c_ab, gamma_c_ss, gamma_x, gc_a, gc_ab, gc_abnorm_drhoa, &
./xc/xc_b97.F:         gc_abnorm_drhob, gc_abrhoa, gc_abrhob, gc_anorm_drhoa, gc_arhoa, gc_b, gc_bnorm_drhob, &
./xc/xc_b97.F:         gc_brhob, gx_a, gx_anorm_drhoa, gx_arhoa, gx_b, gx_bnorm_drhob, gx_brhob, my_norm_drhoa, &
./xc/xc_b97.F:         my_norm_drhob, my_rhoa, my_rhob, p_1, p_2, p_3, rho, rs, rs_a, rs_arhoa, rs_arhoarhoa, &
./xc/xc_b97.F:         rs_b, rs_brhob, rs_brhobrhob, rsrhoa, rsrhoarhoa, rsrhoarhob, rsrhob, rsrhobrhob, s_a
./xc/xc_b97.F:      REAL(kind=dp) :: s_a_2, s_a_21norm_drhoa, s_a_21rhoa, s_a_2norm_drhoa, &
./xc/xc_b97.F:         s_a_2norm_drhoanorm_drhoa, s_a_2rhoa, s_a_2rhoanorm_drhoa, s_a_2rhoarhoa, s_anorm_drhoa, &
./xc/xc_b97.F:         s_arhoa, s_arhoanorm_drhoa, s_arhoarhoa, s_avg_2, s_avg_21norm_drhoa, s_avg_21norm_drhob, &
./xc/xc_b97.F:         s_avg_21rhoa, s_avg_21rhob, s_avg_2norm_drhoa, s_avg_2norm_drhoanorm_drhoa, &
./xc/xc_b97.F:         s_avg_2norm_drhob, s_avg_2norm_drhobnorm_drhob, s_avg_2rhoa, s_avg_2rhoanorm_drhoa, &
./xc/xc_b97.F:         s_avg_2rhoarhoa, s_avg_2rhob, s_avg_2rhobnorm_drhob, s_avg_2rhobrhob, s_b, s_b_2, &
./xc/xc_b97.F:         s_b_21norm_drhob, s_b_21rhob, s_b_2norm_drhob, s_b_2norm_drhobnorm_drhob, s_b_2rhob, &
./xc/xc_b97.F:         s_b_2rhobnorm_drhob
./xc/xc_b97.F:      REAL(kind=dp) :: s_b_2rhobrhob, s_bnorm_drhob, s_brhob, s_brhobnorm_drhob, s_brhobrhob, &
./xc/xc_b97.F:         t97, t974, t976, t98, t981, t99, t993, u_c_a, u_c_a1rhoa, u_c_ab, u_c_ab1rhoa, &
./xc/xc_b97.F:         u_c_ab1rhob, u_c_abnorm_drhoa, u_c_abnorm_drhoanorm_drhoa, u_c_abnorm_drhoanorm_drhob, &
./xc/xc_b97.F:         u_c_abnorm_drhob, u_c_abnorm_drhobnorm_drhob, u_c_abrhoa
./xc/xc_b97.F:      REAL(kind=dp) :: u_c_abrhoanorm_drhoa, u_c_abrhoanorm_drhob, u_c_abrhoarhoa, u_c_abrhoarhob, &
./xc/xc_b97.F:         u_c_abrhob, u_c_abrhobnorm_drhoa, u_c_abrhobnorm_drhob, u_c_abrhobrhob, u_c_anorm_drhoa, &
./xc/xc_b97.F:         u_c_anorm_drhoanorm_drhoa, u_c_arhoa, u_c_arhoanorm_drhoa, u_c_arhoarhoa, u_c_b, &
./xc/xc_b97.F:         u_c_b1rhob, u_c_bnorm_drhob, u_c_bnorm_drhobnorm_drhob, u_c_brhob, u_c_brhobnorm_drhob, &
./xc/xc_b97.F:         u_c_brhobrhob, u_x_a, u_x_a1rhoa, u_x_anorm_drhoa, u_x_anorm_drhoanorm_drhoa, u_x_arhoa, &
./xc/xc_b97.F:         u_x_arhoanorm_drhoa, u_x_arhoarhoa, u_x_b, u_x_b1rhob, u_x_bnorm_drhob, &
./xc/xc_b97.F:         u_x_bnorm_drhobnorm_drhob, u_x_brhob, u_x_brhobnorm_drhob, u_x_brhobrhob
./xc/xc_b97.F:            my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_b97.F:            my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_b97.F:            rho = my_rhoa+my_rhob
./xc/xc_b97.F:            IF (rho > epsilon_rho) THEN
./xc/xc_b97.F:               my_rhoa = MAX(my_rhoa, 0.5_dp*epsilon_rho)
./xc/xc_b97.F:               my_rhob = MAX(my_rhob, 0.5_dp*epsilon_rho)
./xc/xc_b97.F:               rho = my_rhoa+my_rhob
./xc/xc_b97.F:               my_norm_drhoa = norm_drhoa(ii)
./xc/xc_b97.F:               my_norm_drhob = norm_drhob(ii)
./xc/xc_b97.F:               t7 = my_rhoa**(0.1e1_dp/0.3e1_dp)
./xc/xc_b97.F:               t8 = t7*my_rhoa
./xc/xc_b97.F:               s_a = my_norm_drhoa*t12
./xc/xc_b97.F:               t20 = my_rhob**(0.1e1_dp/0.3e1_dp)
./xc/xc_b97.F:               t21 = t20*my_rhob
./xc/xc_b97.F:               s_b = my_norm_drhob*t25
./xc/xc_b97.F:               t33 = my_rhoa-my_rhob
./xc/xc_b97.F:               t34 = 0.1e1_dp/rho
./xc/xc_b97.F:               t116 = t35/my_rhoa
./xc/xc_b97.F:               t138 = t35/my_rhob
./xc/xc_b97.F:               e_lsda_c_a = epsilon_c_unif_a*my_rhoa
./xc/xc_b97.F:               e_lsda_c_b = epsilon_c_unif_b*my_rhob
./xc/xc_b97.F:               e_lsda_c_ab = epsilon_c_unif*rho-e_lsda_c_a-e_lsda_c_b
./xc/xc_b97.F:                  e_lsda_x_arhoa = -t4*t6*t7/0.2e1_dp
./xc/xc_b97.F:                  t186 = my_rhoa**2
./xc/xc_b97.F:                  s_arhoa = -0.4e1_dp/0.3e1_dp*my_norm_drhoa*t188
./xc/xc_b97.F:                  t192 = t16*s_arhoa
./xc/xc_b97.F:                  t199 = t198*s_arhoa
./xc/xc_b97.F:                  u_x_arhoa = 0.2e1_dp*t191*t192-0.2e1_dp*t196*t199
./xc/xc_b97.F:                  gx_arhoa = u_x_arhoa*t18+u_x_a*u_x_arhoa*c_x_2
./xc/xc_b97.F:                  t207 = rho**2
./xc/xc_b97.F:                  chirhoa = t34-t209
./xc/xc_b97.F:                  rsrhoa = -t4*t212*t208/0.12e2_dp
./xc/xc_b97.F:                  t235 = t224*rsrhoa/0.2e1_dp+beta_2_1*rsrhoa+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t228*rsrhoa+t50*t48*rsrhoa*t232
./xc/xc_b97.F:                  e_c_u_0rhoa = -0.2e1_dp*t216*rsrhoa*t56+t222*t237
./xc/xc_b97.F:                  t256 = t246*rsrhoa/0.2e1_dp+beta_2_2*rsrhoa+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t250*rsrhoa+t68*t66*rsrhoa*t232
./xc/xc_b97.F:                  e_c_u_1rhoa = -0.2e1_dp*t239*rsrhoa*t74+t245*t258
./xc/xc_b97.F:                  t277 = t267*rsrhoa/0.2e1_dp+beta_2_3*rsrhoa+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t271*rsrhoa+t86*t84*rsrhoa*t232
./xc/xc_b97.F:                  alpha_crhoa = 0.2e1_dp*t260*rsrhoa*t92-t266*t279
./xc/xc_b97.F:                  frhoa = (0.4e1_dp/0.3e1_dp*t99*chirhoa-0.4e1_dp/0.3e1_dp &
./xc/xc_b97.F:                           *t102*chirhoa)*t97
./xc/xc_b97.F:                  t285 = alpha_crhoa*f
./xc/xc_b97.F:                  t287 = alpha_c*frhoa
./xc/xc_b97.F:                  t291 = t290*chirhoa
./xc/xc_b97.F:                  t294 = e_c_u_1rhoa-e_c_u_0rhoa
./xc/xc_b97.F:                  t297 = t112*frhoa
./xc/xc_b97.F:                  t299 = t289*chirhoa
./xc/xc_b97.F:                  epsilon_c_unifrhoa = e_c_u_0rhoa+t285*t110+t287*t110- &
./xc/xc_b97.F:                  rs_arhoa = -t4*t304/t186/0.12e2_dp
./xc/xc_b97.F:                  t327 = t316*rs_arhoa/0.2e1_dp+beta_2_2*rs_arhoa+0.3e1_dp &
./xc/xc_b97.F:                         /0.2e1_dp*t320*rs_arhoa+t128*t66*rs_arhoa*t324
./xc/xc_b97.F:                  epsilon_c_unif_arhoa = -0.2e1_dp*t239*rs_arhoa*t134+t314* &
./xc/xc_b97.F:                  s_a_2rhoa = 0.2e1_dp*s_a*s_arhoa
./xc/xc_b97.F:                  s_avg_2rhoa = s_a_2rhoa/0.2e1_dp
./xc/xc_b97.F:                  e_lsda_c_arhoa = epsilon_c_unif_arhoa*my_rhoa+epsilon_c_unif_a
./xc/xc_b97.F:                  u_c_abrhoa = gamma_c_ab*s_avg_2rhoa*t162-t337*t339*s_avg_2rhoa
./xc/xc_b97.F:                  u_c_arhoa = gamma_c_ss*s_a_2rhoa*t165-t345*t347*s_a_2rhoa
./xc/xc_b97.F:                  e_lsda_c_abrhoa = epsilon_c_unifrhoa*rho+epsilon_c_unif- &
./xc/xc_b97.F:                                    e_lsda_c_arhoa
./xc/xc_b97.F:                  gc_abrhoa = u_c_abrhoa*t170+u_c_ab*u_c_abrhoa*c_cab_2
./xc/xc_b97.F:                  gc_arhoa = u_c_arhoa*t173+u_c_a*u_c_arhoa*c_css_2
./xc/xc_b97.F:                     exc_rhoa = scale_x*(e_lsda_x_arhoa*gx_a+e_lsda_x_a* &
./xc/xc_b97.F:                                         gx_arhoa)+scale_c*(e_lsda_c_abrhoa*gc_ab+e_lsda_c_ab* &
./xc/xc_b97.F:                                                            gc_abrhoa+e_lsda_c_arhoa*gc_a+e_lsda_c_a*gc_arhoa)
./xc/xc_b97.F:                     e_ra(ii) = e_ra(ii)+exc_rhoa
./xc/xc_b97.F:                  e_lsda_x_brhob = -t4*t6*t20/0.2e1_dp
./xc/xc_b97.F:                  t365 = my_rhob**2
./xc/xc_b97.F:                  s_brhob = -0.4e1_dp/0.3e1_dp*my_norm_drhob*t367
./xc/xc_b97.F:                  t371 = t29*s_brhob
./xc/xc_b97.F:                  t377 = t376*s_brhob
./xc/xc_b97.F:                  u_x_brhob = 0.2e1_dp*t370*t371-0.2e1_dp*t374*t377
./xc/xc_b97.F:                  gx_brhob = u_x_brhob*t31+u_x_b*u_x_brhob*c_x_2
./xc/xc_b97.F:                  chirhob = -t34-t209
./xc/xc_b97.F:                  rsrhob = rsrhoa
./xc/xc_b97.F:                  t396 = t224*rsrhob/0.2e1_dp+beta_2_1*rsrhob+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t228*rsrhob+t50*t48*rsrhob*t232
./xc/xc_b97.F:                  e_c_u_0rhob = -0.2e1_dp*t216*rsrhob*t56+t222*t396*t236
./xc/xc_b97.F:                  t410 = t246*rsrhob/0.2e1_dp+beta_2_2*rsrhob+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t250*rsrhob+t68*t66*rsrhob*t232
./xc/xc_b97.F:                  e_c_u_1rhob = -0.2e1_dp*t239*rsrhob*t74+t245*t410*t257
./xc/xc_b97.F:                  t424 = t267*rsrhob/0.2e1_dp+beta_2_3*rsrhob+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t271*rsrhob+t86*t84*rsrhob*t232
./xc/xc_b97.F:                  alpha_crhob = 0.2e1_dp*t260*rsrhob*t92-t266*t424*t278
./xc/xc_b97.F:                  frhob = (0.4e1_dp/0.3e1_dp*t99*chirhob-0.4e1_dp/0.3e1_dp &
./xc/xc_b97.F:                           *t102*chirhob)*t97
./xc/xc_b97.F:                  t431 = alpha_crhob*f
./xc/xc_b97.F:                  t433 = alpha_c*frhob
./xc/xc_b97.F:                  t435 = t290*chirhob
./xc/xc_b97.F:                  t438 = e_c_u_1rhob-e_c_u_0rhob
./xc/xc_b97.F:                  t441 = t112*frhob
./xc/xc_b97.F:                  t443 = t289*chirhob
./xc/xc_b97.F:                  epsilon_c_unifrhob = e_c_u_0rhob+t431*t110+t433*t110- &
./xc/xc_b97.F:                  rs_brhob = -t4*t448/t365/0.12e2_dp
./xc/xc_b97.F:                  t471 = t460*rs_brhob/0.2e1_dp+beta_2_2*rs_brhob+0.3e1_dp &
./xc/xc_b97.F:                         /0.2e1_dp*rs_brhob*t464+t150*t66*rs_brhob*t468
./xc/xc_b97.F:                  epsilon_c_unif_brhob = -0.2e1_dp*t239*rs_brhob*t156+t458* &
./xc/xc_b97.F:                  s_b_2rhob = 0.2e1_dp*s_b*s_brhob
./xc/xc_b97.F:                  s_avg_2rhob = s_b_2rhob/0.2e1_dp
./xc/xc_b97.F:                  e_lsda_c_brhob = epsilon_c_unif_brhob*my_rhob+epsilon_c_unif_b
./xc/xc_b97.F:                  t480 = t339*s_avg_2rhob
./xc/xc_b97.F:                  u_c_abrhob = gamma_c_ab*s_avg_2rhob*t162-t337*t480
./xc/xc_b97.F:                  u_c_brhob = gamma_c_ss*s_b_2rhob*t168-t484*t486*s_b_2rhob
./xc/xc_b97.F:                  e_lsda_c_abrhob = epsilon_c_unifrhob*rho+epsilon_c_unif- &
./xc/xc_b97.F:                                    e_lsda_c_brhob
./xc/xc_b97.F:                  gc_abrhob = u_c_abrhob*t170+u_c_ab*u_c_abrhob*c_cab_2
./xc/xc_b97.F:                  gc_brhob = u_c_brhob*t176+u_c_b*u_c_brhob*c_css_2
./xc/xc_b97.F:                     exc_rhob = scale_x*(e_lsda_x_brhob*gx_b+e_lsda_x_b* &
./xc/xc_b97.F:                                         gx_brhob)+scale_c*(e_lsda_c_abrhob*gc_ab+e_lsda_c_ab* &
./xc/xc_b97.F:                                                            gc_abrhob+e_lsda_c_brhob*gc_b+e_lsda_c_b*gc_brhob)
./xc/xc_b97.F:                     e_rb(ii) = e_rb(ii)+exc_rhob
./xc/xc_b97.F:                  s_anorm_drhoa = t12
./xc/xc_b97.F:                  u_x_anorm_drhoa = 0.2e1_dp*t191*t16*s_anorm_drhoa-0.2e1_dp &
./xc/xc_b97.F:                                    *t196*t198*s_anorm_drhoa
./xc/xc_b97.F:                  gx_anorm_drhoa = u_x_anorm_drhoa*t18+u_x_a*u_x_anorm_drhoa*c_x_2
./xc/xc_b97.F:                  s_a_2norm_drhoa = 0.2e1_dp*s_a*s_anorm_drhoa
./xc/xc_b97.F:                  s_avg_2norm_drhoa = s_a_2norm_drhoa/0.2e1_dp
./xc/xc_b97.F:                  t512 = t339*s_avg_2norm_drhoa
./xc/xc_b97.F:                  u_c_abnorm_drhoa = gamma_c_ab*s_avg_2norm_drhoa*t162-t337*t512
./xc/xc_b97.F:                  t516 = t347*s_a_2norm_drhoa
./xc/xc_b97.F:                  u_c_anorm_drhoa = gamma_c_ss*s_a_2norm_drhoa*t165-t345*t516
./xc/xc_b97.F:                  gc_abnorm_drhoa = u_c_abnorm_drhoa*t170+u_c_ab* &
./xc/xc_b97.F:                                    u_c_abnorm_drhoa*c_cab_2
./xc/xc_b97.F:                  gc_anorm_drhoa = u_c_anorm_drhoa*t173+u_c_a*u_c_anorm_drhoa &
./xc/xc_b97.F:                     exc_norm_drhoa = scale_x*e_lsda_x_a*gx_anorm_drhoa+scale_c* &
./xc/xc_b97.F:                                      (e_lsda_c_ab*gc_abnorm_drhoa+e_lsda_c_a*gc_anorm_drhoa)
./xc/xc_b97.F:                     e_ndra(ii) = e_ndra(ii)+exc_norm_drhoa
./xc/xc_b97.F:                  s_bnorm_drhob = t25
./xc/xc_b97.F:                  u_x_bnorm_drhob = 0.2e1_dp*t370*t29*s_bnorm_drhob-0.2e1_dp &
./xc/xc_b97.F:                                    *t374*t376*s_bnorm_drhob
./xc/xc_b97.F:                  gx_bnorm_drhob = u_x_bnorm_drhob*t31+u_x_b*u_x_bnorm_drhob*c_x_2
./xc/xc_b97.F:                  s_b_2norm_drhob = 0.2e1_dp*s_b*s_bnorm_drhob
./xc/xc_b97.F:                  s_avg_2norm_drhob = s_b_2norm_drhob/0.2e1_dp
./xc/xc_b97.F:                  t539 = t339*s_avg_2norm_drhob
./xc/xc_b97.F:                  u_c_abnorm_drhob = gamma_c_ab*s_avg_2norm_drhob*t162-t337*t539
./xc/xc_b97.F:                  t543 = t486*s_b_2norm_drhob
./xc/xc_b97.F:                  u_c_bnorm_drhob = gamma_c_ss*s_b_2norm_drhob*t168-t484*t543
./xc/xc_b97.F:                  gc_abnorm_drhob = u_c_abnorm_drhob*t170+u_c_ab* &
./xc/xc_b97.F:                                    u_c_abnorm_drhob*c_cab_2
./xc/xc_b97.F:                  gc_bnorm_drhob = u_c_bnorm_drhob*t176+u_c_b*u_c_bnorm_drhob &
./xc/xc_b97.F:                     exc_norm_drhob = scale_x*e_lsda_x_b*gx_bnorm_drhob+scale_c* &
./xc/xc_b97.F:                                      (e_lsda_c_ab*gc_abnorm_drhob+e_lsda_c_b*gc_bnorm_drhob)
./xc/xc_b97.F:                     e_ndrb(ii) = e_ndrb(ii)+exc_norm_drhob
./xc/xc_b97.F:                     t560 = t186*my_rhoa
./xc/xc_b97.F:                     s_arhoarhoa = 0.28e2_dp/0.9e1_dp*my_norm_drhoa/t7/t560
./xc/xc_b97.F:                     t564 = s_arhoa**2
./xc/xc_b97.F:                     u_x_arhoarhoa = 0.2e1_dp*gamma_x*t564*t16-0.10e2_dp*t568 &
./xc/xc_b97.F:                                     *t198*t564+0.2e1_dp*t191*t16*s_arhoarhoa+0.8e1_dp* &
./xc/xc_b97.F:                                     t577*t579*t564-0.2e1_dp*t196*t198*s_arhoarhoa
./xc/xc_b97.F:                     u_x_a1rhoa = u_x_arhoa
./xc/xc_b97.F:                     t600 = 0.1e1_dp/t207/rho
./xc/xc_b97.F:                     chirhoarhoa = -0.2e1_dp*t208+0.2e1_dp*t601
./xc/xc_b97.F:                     rsrhoarhoa = -t4/t210/t36*t606/t608/0.18e2_dp+ &
./xc/xc_b97.F:                     t619 = alpha_1_1*rsrhoa
./xc/xc_b97.F:                     t633 = rsrhoa**2
./xc/xc_b97.F:                     e_c_u_0rhoarhoa = -0.2e1_dp*t216*rsrhoarhoa*t56+0.2e1_dp* &
./xc/xc_b97.F:                                                                           /0.4e1_dp+t224*rsrhoarhoa/0.2e1_dp+beta_2_1*rsrhoarhoa+ &
./xc/xc_b97.F:                                                                               rsrhoarhoa+t50*t644*t633*t647+t50*t48*rsrhoarhoa* &
./xc/xc_b97.F:                     e_c_u_01rhoa = e_c_u_0rhoa
./xc/xc_b97.F:                     t671 = alpha_1_2*rsrhoa
./xc/xc_b97.F:                     t719 = alpha_1_3*rsrhoa
./xc/xc_b97.F:                     alpha_c1rhoa = alpha_crhoa
./xc/xc_b97.F:                     t766 = chirhoa**2
./xc/xc_b97.F:                     frhoarhoa = (0.4e1_dp/0.9e1_dp*t765*t766+0.4e1_dp/ &
./xc/xc_b97.F:                                  0.3e1_dp*t99*chirhoarhoa+0.4e1_dp/0.9e1_dp*t772*t766- &
./xc/xc_b97.F:                                  0.4e1_dp/0.3e1_dp*t102*chirhoarhoa)*t97
./xc/xc_b97.F:                     f1rhoa = frhoa
./xc/xc_b97.F:                     t790 = alpha_c1rhoa*f
./xc/xc_b97.F:                     t793 = alpha_c*f1rhoa
./xc/xc_b97.F:                     t811 = e_c_u_1rhoa-e_c_u_01rhoa
./xc/xc_b97.F:                     t821 = t112*f1rhoa
./xc/xc_b97.F:                     t830 = -0.4e1_dp*t105*t290*chirhoarhoa+(-0.2e1_dp*t239* &
./xc/xc_b97.F:                                                             rsrhoarhoa*t74+0.2e1_dp*t671*t673-0.2e1_dp*t678*t679 &
./xc/xc_b97.F:                                                             *t257+t245*(-t683*t633/0.4e1_dp+t246*rsrhoarhoa/ &
./xc/xc_b97.F:                                                                         0.2e1_dp+beta_2_2*rsrhoarhoa+0.3e1_dp/0.4e1_dp*t689*t633 &
./xc/xc_b97.F:                                                                         +0.3e1_dp/0.2e1_dp*t250*rsrhoarhoa+t68*t694*t633* &
./xc/xc_b97.F:                                                                         t647+t68*t66*rsrhoarhoa*t232-t68*t66*t633*t647)* &
./xc/xc_b97.F:                                                             t257+t709*t679*t711*t62/0.2e1_dp-e_c_u_0rhoarhoa)*f* &
./xc/xc_b97.F:                            t108+t294*f1rhoa*t108+0.4e1_dp*t295*t299+t811*frhoa &
./xc/xc_b97.F:                            *t108+t112*frhoarhoa*t108+0.4e1_dp*t297*t299+0.4e1_dp &
./xc/xc_b97.F:                            t766+0.4e1_dp*t113*t289*chirhoarhoa
./xc/xc_b97.F:                     epsilon_c_unif1rhoa = e_c_u_01rhoa+t790*t110+t793*t110- &
./xc/xc_b97.F:                     rs_arhoarhoa = -t4/t302/t116*t606/t838/0.18e2_dp+ &
./xc/xc_b97.F:                     t864 = rs_arhoa**2
./xc/xc_b97.F:                     epsilon_c_unif_a1rhoa = epsilon_c_unif_arhoa
./xc/xc_b97.F:                     s_a_2rhoarhoa = 0.2e1_dp*t564+0.2e1_dp*s_a*s_arhoarhoa
./xc/xc_b97.F:                     s_a_21rhoa = s_a_2rhoa
./xc/xc_b97.F:                     s_avg_2rhoarhoa = s_a_2rhoarhoa/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21rhoa = s_a_21rhoa/0.2e1_dp
./xc/xc_b97.F:                     e_lsda_c_arhoarhoa = (-0.2e1_dp*t239*rs_arhoarhoa*t134+ &
./xc/xc_b97.F:                                           0.2e1_dp*alpha_1_2*rs_arhoa*t313*t327*t328-0.2e1_dp* &
./xc/xc_b97.F:                                                                         0.4e1_dp+t316*rs_arhoarhoa/0.2e1_dp+beta_2_2*rs_arhoarhoa &
./xc/xc_b97.F:                                                                          0.2e1_dp*t320*rs_arhoarhoa+t128*t694*t864*t877+t128* &
./xc/xc_b97.F:                                                                          t66*rs_arhoarhoa*t324-t128*t66*t864*t877)*t328+t120 &
./xc/xc_b97.F:                                           /t889*t858/t892*t62/0.2e1_dp)*my_rhoa+epsilon_c_unif_arhoa &
./xc/xc_b97.F:                                          +epsilon_c_unif_a1rhoa
./xc/xc_b97.F:                     e_lsda_c_a1rhoa = epsilon_c_unif_a1rhoa*my_rhoa+epsilon_c_unif_a
./xc/xc_b97.F:                     t906 = t336*s_avg_2rhoa
./xc/xc_b97.F:                     t907 = t339*s_avg_21rhoa
./xc/xc_b97.F:                     t914 = t913*s_avg_2rhoa
./xc/xc_b97.F:                     u_c_abrhoarhoa = gamma_c_ab*s_avg_2rhoarhoa*t162-0.2e1_dp* &
./xc/xc_b97.F:                                      t906*t907+0.2e1_dp*t911*t914*s_avg_21rhoa-t337*t339* &
./xc/xc_b97.F:                                      s_avg_2rhoarhoa
./xc/xc_b97.F:                     u_c_ab1rhoa = gamma_c_ab*s_avg_21rhoa*t162-t337*t907
./xc/xc_b97.F:                     t925 = t344*s_a_2rhoa
./xc/xc_b97.F:                     t926 = t347*s_a_21rhoa
./xc/xc_b97.F:                     t933 = t932*s_a_2rhoa
./xc/xc_b97.F:                     u_c_arhoarhoa = gamma_c_ss*s_a_2rhoarhoa*t165-0.2e1_dp* &
./xc/xc_b97.F:                                     t925*t926+0.2e1_dp*t930*t933*s_a_21rhoa-t345*t347* &
./xc/xc_b97.F:                                     s_a_2rhoarhoa
./xc/xc_b97.F:                     u_c_a1rhoa = gamma_c_ss*s_a_21rhoa*t165-t345*t926
./xc/xc_b97.F:                        exc_rhoa_rhoa = scale_x*(-t4*t6/t555*gx_a/0.6e1_dp &
./xc/xc_b97.F:                                                 +e_lsda_x_arhoa*(u_x_a1rhoa*t18+u_x_a*u_x_a1rhoa*c_x_2) &
./xc/xc_b97.F:                                                 +e_lsda_x_arhoa*gx_arhoa+e_lsda_x_a*(u_x_arhoarhoa*t18+ &
./xc/xc_b97.F:                                                                          0.2e1_dp*u_x_arhoa*u_x_a1rhoa*c_x_2+u_x_a*u_x_arhoarhoa* &
./xc/xc_b97.F:                                                                                c_x_2))+scale_c*(((e_c_u_0rhoarhoa+(0.2e1_dp*t260* &
./xc/xc_b97.F:                                                                             rsrhoarhoa*t92-0.2e1_dp*t719*t721+0.2e1_dp*t726*t727* &
./xc/xc_b97.F:                                                                                   t278-t266*(-t731*t633/0.4e1_dp+t267*rsrhoarhoa/ &
./xc/xc_b97.F:                                                                          0.2e1_dp+beta_2_3*rsrhoarhoa+0.3e1_dp/0.4e1_dp*t737*t633 &
./xc/xc_b97.F:                                                                                 +0.3e1_dp/0.2e1_dp*t271*rsrhoarhoa+t86*t742*t633* &
./xc/xc_b97.F:                                                                                  t647+t86*t84*rsrhoarhoa*t232-t86*t84*t633*t647)* &
./xc/xc_b97.F:                                                                              t278-t757*t727*t759*t80/0.2e1_dp)*f*t110+alpha_crhoa &
./xc/xc_b97.F:                                                                               *f1rhoa*t110-0.4e1_dp*t285*t291+alpha_c1rhoa*frhoa* &
./xc/xc_b97.F:                                                                                   t110+alpha_c*frhoarhoa*t110-0.4e1_dp*t287*t291- &
./xc/xc_b97.F:                                                                                           t796*t766+t830)*rho+epsilon_c_unifrhoa+ &
./xc/xc_b97.F:                                                                     epsilon_c_unif1rhoa-e_lsda_c_arhoarhoa)*gc_ab+e_lsda_c_abrhoa &
./xc/xc_b97.F:                                                                                  *(u_c_ab1rhoa*t170+u_c_ab*u_c_ab1rhoa*c_cab_2)+( &
./xc/xc_b97.F:                                                                          epsilon_c_unif1rhoa*rho+epsilon_c_unif-e_lsda_c_a1rhoa)* &
./xc/xc_b97.F:                                                                              gc_abrhoa+e_lsda_c_ab*(u_c_abrhoarhoa*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                             u_c_abrhoa*u_c_ab1rhoa*c_cab_2+u_c_ab*u_c_abrhoarhoa* &
./xc/xc_b97.F:                                                                       c_cab_2)+e_lsda_c_arhoarhoa*gc_a+e_lsda_c_arhoa*(u_c_a1rhoa &
./xc/xc_b97.F:                                                                          *t173+u_c_a*u_c_a1rhoa*c_css_2)+e_lsda_c_a1rhoa*gc_arhoa &
./xc/xc_b97.F:                                                                               +e_lsda_c_a*(u_c_arhoarhoa*t173+0.2e1_dp*u_c_arhoa* &
./xc/xc_b97.F:                                                                                    u_c_a1rhoa*c_css_2+u_c_a*u_c_arhoarhoa*c_css_2))
./xc/xc_b97.F:                        e_ra_ra(ii) = e_ra_ra(ii)+exc_rhoa_rhoa
./xc/xc_b97.F:                     chirhoarhob = 0.2e1_dp*t601
./xc/xc_b97.F:                     rsrhoarhob = rsrhoarhoa
./xc/xc_b97.F:                     t976 = alpha_1_1*rsrhob
./xc/xc_b97.F:                     t981 = rsrhoa*rsrhob
./xc/xc_b97.F:                     t993 = rsrhob*t647*rsrhoa
./xc/xc_b97.F:                     e_c_u_0rhoarhob = -0.2e1_dp*t216*rsrhoarhob*t56+t619* &
./xc/xc_b97.F:                                                                                  t981/0.4e1_dp+t224*rsrhoarhob/0.2e1_dp+beta_2_1* &
./xc/xc_b97.F:                                                                          rsrhoarhob+0.3e1_dp/0.4e1_dp*t639*t981+0.3e1_dp/0.2e1_dp &
./xc/xc_b97.F:                                                                                *t228*rsrhoarhob+t50*t644*t993+t50*t48*rsrhoarhob* &
./xc/xc_b97.F:                     t1014 = alpha_1_2*rsrhob
./xc/xc_b97.F:                     t1049 = alpha_1_3*rsrhob
./xc/xc_b97.F:                     frhoarhob = (0.4e1_dp/0.9e1_dp*t765*chirhoa*chirhob+ &
./xc/xc_b97.F:                                  0.4e1_dp/0.3e1_dp*t99*chirhoarhob+0.4e1_dp/0.9e1_dp*t772 &
./xc/xc_b97.F:                                  *chirhoa*chirhob-0.4e1_dp/0.3e1_dp*t102*chirhoarhob)* &
./xc/xc_b97.F:                     t1107 = t107*chirhoa*chirhob
./xc/xc_b97.F:                     t1136 = -0.4e1_dp*t105*t290*chirhoarhob+(-0.2e1_dp*t239 &
./xc/xc_b97.F:                                                              *rsrhoarhob*t74+t671*t1012+t1014*t673-0.2e1_dp*t678* &
./xc/xc_b97.F:                                                              t258*t410+t245*(-t683*t981/0.4e1_dp+t246*rsrhoarhob/ &
./xc/xc_b97.F:                                                                              0.2e1_dp+beta_2_2*rsrhoarhob+0.3e1_dp/0.4e1_dp*t689* &
./xc/xc_b97.F:                                                                             t981+0.3e1_dp/0.2e1_dp*t250*rsrhoarhob+t68*t694*t993+ &
./xc/xc_b97.F:                                                                              t68*t66*rsrhoarhob*t232-t68*t66*t993)*t257+t709* &
./xc/xc_b97.F:                                                              t256*t711*t62*t410/0.2e1_dp-e_c_u_0rhoarhob)*f*t108+ &
./xc/xc_b97.F:                             t294*frhob*t108+0.4e1_dp*t295*t443+t438*frhoa*t108+ &
./xc/xc_b97.F:                             t112*frhoarhob*t108+0.4e1_dp*t297*t443+0.4e1_dp*t439 &
./xc/xc_b97.F:                             0.4e1_dp*t113*t289*chirhoarhob
./xc/xc_b97.F:                     u_c_abrhoarhob = -0.2e1_dp*t906*t480+0.2e1_dp*t911*t914 &
./xc/xc_b97.F:                                      *s_avg_2rhob
./xc/xc_b97.F:                        exc_rhoa_rhob = scale_c*(((e_c_u_0rhoarhob+(0.2e1_dp*t260* &
./xc/xc_b97.F:                                                                    rsrhoarhob*t92-t719*t1047-t1049*t721+0.2e1_dp*t726* &
./xc/xc_b97.F:                                                                    t279*t424-t266*(-t731*t981/0.4e1_dp+t267*rsrhoarhob/ &
./xc/xc_b97.F:                                                                          0.2e1_dp+beta_2_3*rsrhoarhob+0.3e1_dp/0.4e1_dp*t737*t981 &
./xc/xc_b97.F:                                                                              +0.3e1_dp/0.2e1_dp*t271*rsrhoarhob+t86*t742*t993+t86 &
./xc/xc_b97.F:                                                                                 *t84*rsrhoarhob*t232-t86*t84*t993)*t278-t757*t277 &
./xc/xc_b97.F:                                                                    *t759*t80*t424/0.2e1_dp)*f*t110+alpha_crhoa*frhob* &
./xc/xc_b97.F:                                                   t110-0.4e1_dp*t285*t435+alpha_crhob*frhoa*t110+alpha_c &
./xc/xc_b97.F:                                                   *frhoarhob*t110-0.4e1_dp*t287*t435-0.4e1_dp*t431* &
./xc/xc_b97.F:                                                   t1136)*rho+epsilon_c_unifrhoa+epsilon_c_unifrhob)*gc_ab+ &
./xc/xc_b97.F:                                                 e_lsda_c_abrhoa*gc_abrhob+e_lsda_c_abrhob*gc_abrhoa+ &
./xc/xc_b97.F:                                                 e_lsda_c_ab*(u_c_abrhoarhob*t170+0.2e1_dp*u_c_abrhoa* &
./xc/xc_b97.F:                                                              u_c_abrhob*c_cab_2+u_c_ab*u_c_abrhoarhob*c_cab_2))
./xc/xc_b97.F:                        e_ra_rb(ii) = e_ra_rb(ii)+exc_rhoa_rhob
./xc/xc_b97.F:                     t1157 = t365*my_rhob
./xc/xc_b97.F:                     s_brhobrhob = 0.28e2_dp/0.9e1_dp*my_norm_drhob/t20/t1157
./xc/xc_b97.F:                     t1161 = s_brhob**2
./xc/xc_b97.F:                     u_x_brhobrhob = 0.2e1_dp*gamma_x*t1161*t29-0.10e2_dp* &
./xc/xc_b97.F:                                     t1165*t376*t1161+0.2e1_dp*t370*t29*s_brhobrhob+ &
./xc/xc_b97.F:                                     s_brhobrhob
./xc/xc_b97.F:                     u_x_b1rhob = u_x_brhob
./xc/xc_b97.F:                     chirhobrhob = 0.2e1_dp*t208+0.2e1_dp*t601
./xc/xc_b97.F:                     rsrhobrhob = rsrhoarhob
./xc/xc_b97.F:                     t1205 = rsrhob**2
./xc/xc_b97.F:                     e_c_u_0rhobrhob = -0.2e1_dp*t216*rsrhobrhob*t56+0.2e1_dp* &
./xc/xc_b97.F:                                                                                t1205/0.4e1_dp+t224*rsrhobrhob/0.2e1_dp+beta_2_1* &
./xc/xc_b97.F:                                                                                rsrhobrhob+0.3e1_dp/0.4e1_dp*t639*t1205+0.3e1_dp/ &
./xc/xc_b97.F:                                                                              0.2e1_dp*t228*rsrhobrhob+t50*t644*t1205*t647+t50*t48 &
./xc/xc_b97.F:                                                                                *rsrhobrhob*t232-t50*t48*t1205*t647)*t236+t661* &
./xc/xc_b97.F:                     e_c_u_01rhob = e_c_u_0rhob
./xc/xc_b97.F:                     alpha_c1rhob = alpha_crhob
./xc/xc_b97.F:                     t1299 = chirhob**2
./xc/xc_b97.F:                     frhobrhob = (0.4e1_dp/0.9e1_dp*t765*t1299+0.4e1_dp/ &
./xc/xc_b97.F:                                  0.3e1_dp*t99*chirhobrhob+0.4e1_dp/0.9e1_dp*t772*t1299- &
./xc/xc_b97.F:                                  0.4e1_dp/0.3e1_dp*t102*chirhobrhob)*t97
./xc/xc_b97.F:                     f1rhob = frhob
./xc/xc_b97.F:                     t1321 = alpha_c1rhob*f
./xc/xc_b97.F:                     t1324 = alpha_c*f1rhob
./xc/xc_b97.F:                     t1341 = e_c_u_1rhob-e_c_u_01rhob
./xc/xc_b97.F:                     t1351 = t112*f1rhob
./xc/xc_b97.F:                     t1360 = -0.4e1_dp*t105*t290*chirhobrhob+(-0.2e1_dp*t239 &
./xc/xc_b97.F:                                                              *rsrhobrhob*t74+0.2e1_dp*t1014*t1012-0.2e1_dp*t678* &
./xc/xc_b97.F:                                                              t1236*t257+t245*(-t683*t1205/0.4e1_dp+t246*rsrhobrhob &
./xc/xc_b97.F:                                                                             /0.2e1_dp+beta_2_2*rsrhobrhob+0.3e1_dp/0.4e1_dp*t689* &
./xc/xc_b97.F:                                                                            t1205+0.3e1_dp/0.2e1_dp*t250*rsrhobrhob+t68*t694*t1205 &
./xc/xc_b97.F:                                                                               *t647+t68*t66*rsrhobrhob*t232-t68*t66*t1205*t647) &
./xc/xc_b97.F:                                                              *t257+t709*t1236*t711*t62/0.2e1_dp-e_c_u_0rhobrhob)*f &
./xc/xc_b97.F:                             *t108+t438*f1rhob*t108+0.4e1_dp*t439*t443+t1341* &
./xc/xc_b97.F:                             frhob*t108+t112*frhobrhob*t108+0.4e1_dp*t441*t443+ &
./xc/xc_b97.F:                             *t107*t1299+0.4e1_dp*t113*t289*chirhobrhob
./xc/xc_b97.F:                     epsilon_c_unif1rhob = e_c_u_01rhob+t1321*t110+t1324*t110- &
./xc/xc_b97.F:                     rs_brhobrhob = -t4/t446/t138*t606/t1368/0.18e2_dp &
./xc/xc_b97.F:                     t1394 = rs_brhob**2
./xc/xc_b97.F:                     epsilon_c_unif_b1rhob = epsilon_c_unif_brhob
./xc/xc_b97.F:                     s_b_2rhobrhob = 0.2e1_dp*t1161+0.2e1_dp*s_b*s_brhobrhob
./xc/xc_b97.F:                     s_b_21rhob = s_b_2rhob
./xc/xc_b97.F:                     s_avg_2rhobrhob = s_b_2rhobrhob/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21rhob = s_b_21rhob/0.2e1_dp
./xc/xc_b97.F:                     e_lsda_c_brhobrhob = (-0.2e1_dp*t239*rs_brhobrhob*t156+ &
./xc/xc_b97.F:                                           0.2e1_dp*alpha_1_2*rs_brhob*t457*t471*t472-0.2e1_dp* &
./xc/xc_b97.F:                                                                           /0.4e1_dp+t460*rs_brhobrhob/0.2e1_dp+beta_2_2* &
./xc/xc_b97.F:                                                                           rs_brhobrhob+0.3e1_dp/0.4e1_dp*beta_3_2*t459*t1394+ &
./xc/xc_b97.F:                                                                           0.3e1_dp/0.2e1_dp*t464*rs_brhobrhob+t150*t694*t1394* &
./xc/xc_b97.F:                                                                           t1407+t150*t66*rs_brhobrhob*t468-t150*t66*t1394* &
./xc/xc_b97.F:                                          my_rhob+epsilon_c_unif_brhob+epsilon_c_unif_b1rhob
./xc/xc_b97.F:                     e_lsda_c_b1rhob = epsilon_c_unif_b1rhob*my_rhob+epsilon_c_unif_b
./xc/xc_b97.F:                     t1436 = t336*s_avg_2rhob
./xc/xc_b97.F:                     t1437 = t339*s_avg_21rhob
./xc/xc_b97.F:                     t1440 = t913*s_avg_2rhob
./xc/xc_b97.F:                     u_c_abrhobrhob = gamma_c_ab*s_avg_2rhobrhob*t162-0.2e1_dp* &
./xc/xc_b97.F:                                      t1436*t1437+0.2e1_dp*t911*t1440*s_avg_21rhob-t337*t339 &
./xc/xc_b97.F:                                      *s_avg_2rhobrhob
./xc/xc_b97.F:                     u_c_ab1rhob = gamma_c_ab*s_avg_21rhob*t162-t337*t1437
./xc/xc_b97.F:                     t1451 = t344*s_b_2rhob
./xc/xc_b97.F:                     t1452 = t486*s_b_21rhob
./xc/xc_b97.F:                     t1458 = t1457*s_b_2rhob
./xc/xc_b97.F:                     u_c_brhobrhob = gamma_c_ss*s_b_2rhobrhob*t168-0.2e1_dp* &
./xc/xc_b97.F:                                     t1451*t1452+0.2e1_dp*t1455*t1458*s_b_21rhob-t484*t486 &
./xc/xc_b97.F:                                     *s_b_2rhobrhob
./xc/xc_b97.F:                     u_c_b1rhob = gamma_c_ss*s_b_21rhob*t168-t484*t1452
./xc/xc_b97.F:                        exc_rhob_rhob = scale_x*(-t4*t6/t1152*gx_b/ &
./xc/xc_b97.F:                                                 0.6e1_dp+e_lsda_x_brhob*(u_x_b1rhob*t31+u_x_b*u_x_b1rhob* &
./xc/xc_b97.F:                                                                         c_x_2)+e_lsda_x_brhob*gx_brhob+e_lsda_x_b*(u_x_brhobrhob* &
./xc/xc_b97.F:                                                                                    t31+0.2e1_dp*u_x_brhob*u_x_b1rhob*c_x_2+u_x_b* &
./xc/xc_b97.F:                                                                       u_x_brhobrhob*c_x_2))+scale_c*(((e_c_u_0rhobrhob+(0.2e1_dp* &
./xc/xc_b97.F:                                                                                t260*rsrhobrhob*t92-0.2e1_dp*t1049*t1047+0.2e1_dp* &
./xc/xc_b97.F:                                                                         rsrhobrhob/0.2e1_dp+beta_2_3*rsrhobrhob+0.3e1_dp/0.4e1_dp &
./xc/xc_b97.F:                                                                                *t737*t1205+0.3e1_dp/0.2e1_dp*t271*rsrhobrhob+t86* &
./xc/xc_b97.F:                                                                                  t742*t1205*t647+t86*t84*rsrhobrhob*t232-t86*t84* &
./xc/xc_b97.F:                                                                                  t110+alpha_crhob*f1rhob*t110-0.4e1_dp*t431*t435+ &
./xc/xc_b97.F:                                                                           alpha_c1rhob*frhob*t110+alpha_c*frhobrhob*t110-0.4e1_dp &
./xc/xc_b97.F:                                                                           0.12e2_dp*t105*t796*t1299+t1360)*rho+epsilon_c_unifrhob &
./xc/xc_b97.F:                                                                                   +epsilon_c_unif1rhob-e_lsda_c_brhobrhob)*gc_ab+ &
./xc/xc_b97.F:                                                                             e_lsda_c_abrhob*(u_c_ab1rhob*t170+u_c_ab*u_c_ab1rhob* &
./xc/xc_b97.F:                                                                                 c_cab_2)+(epsilon_c_unif1rhob*rho+epsilon_c_unif- &
./xc/xc_b97.F:                                                                       e_lsda_c_b1rhob)*gc_abrhob+e_lsda_c_ab*(u_c_abrhobrhob*t170 &
./xc/xc_b97.F:                                                                                  +0.2e1_dp*u_c_abrhob*u_c_ab1rhob*c_cab_2+u_c_ab* &
./xc/xc_b97.F:                                                                                  u_c_abrhobrhob*c_cab_2)+e_lsda_c_brhobrhob*gc_b+ &
./xc/xc_b97.F:                                                                         e_lsda_c_brhob*(u_c_b1rhob*t176+u_c_b*u_c_b1rhob*c_css_2) &
./xc/xc_b97.F:                                                                         +e_lsda_c_b1rhob*gc_brhob+e_lsda_c_b*(u_c_brhobrhob*t176+ &
./xc/xc_b97.F:                                                                         0.2e1_dp*u_c_brhob*u_c_b1rhob*c_css_2+u_c_b*u_c_brhobrhob &
./xc/xc_b97.F:                        e_rb_rb(ii) = e_rb_rb(ii)+exc_rhob_rhob
./xc/xc_b97.F:                     s_arhoanorm_drhoa = -0.4e1_dp/0.3e1_dp*t188
./xc/xc_b97.F:                     u_x_arhoanorm_drhoa = 0.2e1_dp*gamma_x*s_anorm_drhoa*t192- &
./xc/xc_b97.F:                                           0.10e2_dp*t568*t199*s_anorm_drhoa+0.2e1_dp*t191*t16* &
./xc/xc_b97.F:                                           s_arhoanorm_drhoa+0.8e1_dp*t577*t579*s_arhoa*s_anorm_drhoa &
./xc/xc_b97.F:                                           -0.2e1_dp*t196*t198*s_arhoanorm_drhoa
./xc/xc_b97.F:                     s_a_2rhoanorm_drhoa = 0.2e1_dp*s_anorm_drhoa*s_arhoa+ &
./xc/xc_b97.F:                                           0.2e1_dp*s_a*s_arhoanorm_drhoa
./xc/xc_b97.F:                     s_avg_2rhoanorm_drhoa = s_a_2rhoanorm_drhoa/0.2e1_dp
./xc/xc_b97.F:                     u_c_abrhoanorm_drhoa = gamma_c_ab*s_avg_2rhoanorm_drhoa*t162- &
./xc/xc_b97.F:                                            0.2e1_dp*t906*t512+0.2e1_dp*t911*t914*s_avg_2norm_drhoa &
./xc/xc_b97.F:                                            -t337*t339*s_avg_2rhoanorm_drhoa
./xc/xc_b97.F:                     u_c_arhoanorm_drhoa = gamma_c_ss*s_a_2rhoanorm_drhoa*t165- &
./xc/xc_b97.F:                                           0.2e1_dp*t925*t516+0.2e1_dp*t930*t933*s_a_2norm_drhoa- &
./xc/xc_b97.F:                                           t345*t347*s_a_2rhoanorm_drhoa
./xc/xc_b97.F:                        exc_rhoa_norm_drhoa = scale_x*(e_lsda_x_arhoa*gx_anorm_drhoa+ &
./xc/xc_b97.F:                                                       e_lsda_x_a*(u_x_arhoanorm_drhoa*t18+0.2e1_dp*u_x_arhoa* &
./xc/xc_b97.F:                                                                   u_x_anorm_drhoa*c_x_2+u_x_a*u_x_arhoanorm_drhoa*c_x_2))+ &
./xc/xc_b97.F:                                              scale_c*(e_lsda_c_abrhoa*gc_abnorm_drhoa+e_lsda_c_ab*( &
./xc/xc_b97.F:                                                       u_c_abrhoanorm_drhoa*t170+0.2e1_dp*u_c_abrhoa* &
./xc/xc_b97.F:                                                       u_c_abnorm_drhoa*c_cab_2+u_c_ab*u_c_abrhoanorm_drhoa*c_cab_2 &
./xc/xc_b97.F:                                                       )+e_lsda_c_arhoa*gc_anorm_drhoa+e_lsda_c_a*( &
./xc/xc_b97.F:                                                       u_c_arhoanorm_drhoa*t173+0.2e1_dp*u_c_arhoa*u_c_anorm_drhoa &
./xc/xc_b97.F:                                                       *c_css_2+u_c_a*u_c_arhoanorm_drhoa*c_css_2))
./xc/xc_b97.F:                        e_ra_ndra(ii) = e_ra_ndra(ii)+exc_rhoa_norm_drhoa
./xc/xc_b97.F:                     u_c_abrhobnorm_drhoa = -0.2e1_dp*t1436*t512+0.2e1_dp*t911 &
./xc/xc_b97.F:                                            *t1440*s_avg_2norm_drhoa
./xc/xc_b97.F:                        exc_rhob_norm_drhoa = scale_c*(e_lsda_c_abrhob*gc_abnorm_drhoa &
./xc/xc_b97.F:                                                       +e_lsda_c_ab*(u_c_abrhobnorm_drhoa*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                     u_c_abrhob*u_c_abnorm_drhoa*c_cab_2+u_c_ab* &
./xc/xc_b97.F:                                                                     u_c_abrhobnorm_drhoa*c_cab_2))
./xc/xc_b97.F:                        e_rb_ndra(ii) = e_rb_ndra(ii)+exc_rhob_norm_drhoa
./xc/xc_b97.F:                     t1571 = s_anorm_drhoa**2
./xc/xc_b97.F:                     u_x_anorm_drhoanorm_drhoa = 0.2e1_dp*gamma_x*t1571*t16- &
./xc/xc_b97.F:                     s_a_2norm_drhoanorm_drhoa = 0.2e1_dp*t1571
./xc/xc_b97.F:                     s_a_21norm_drhoa = s_a_2norm_drhoa
./xc/xc_b97.F:                     s_avg_2norm_drhoanorm_drhoa = s_a_2norm_drhoanorm_drhoa/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21norm_drhoa = s_a_21norm_drhoa/0.2e1_dp
./xc/xc_b97.F:                     t1589 = t336*s_avg_2norm_drhoa
./xc/xc_b97.F:                     t1590 = t339*s_avg_21norm_drhoa
./xc/xc_b97.F:                     t1593 = t913*s_avg_2norm_drhoa
./xc/xc_b97.F:                     u_c_abnorm_drhoanorm_drhoa = gamma_c_ab* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhoanorm_drhoa*t162-0.2e1_dp*t1589*t1590+ &
./xc/xc_b97.F:                                                  0.2e1_dp*t911*t1593*s_avg_21norm_drhoa-t337*t339* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhoanorm_drhoa
./xc/xc_b97.F:                     t1605 = t347*s_a_21norm_drhoa
./xc/xc_b97.F:                     u_c_anorm_drhoanorm_drhoa = gamma_c_ss*s_a_2norm_drhoanorm_drhoa &
./xc/xc_b97.F:                                                 *t165-0.2e1_dp*t344*s_a_2norm_drhoa*t1605+0.2e1_dp* &
./xc/xc_b97.F:                                                 t930*t932*s_a_2norm_drhoa*s_a_21norm_drhoa-t345*t347* &
./xc/xc_b97.F:                                                 s_a_2norm_drhoanorm_drhoa
./xc/xc_b97.F:                        exc_norm_drhoa_norm_drhoa = scale_x*e_lsda_x_a*( &
./xc/xc_b97.F:                                                    u_x_anorm_drhoanorm_drhoa*t18+0.2e1_dp*u_x_anorm_drhoa**2* &
./xc/xc_b97.F:                                                    c_x_2+u_x_a*u_x_anorm_drhoanorm_drhoa*c_x_2)+scale_c*( &
./xc/xc_b97.F:                                                    e_lsda_c_ab*(u_c_abnorm_drhoanorm_drhoa*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                 u_c_abnorm_drhoa*(gamma_c_ab*s_avg_21norm_drhoa*t162-t337* &
./xc/xc_b97.F:                                                                        t1590)*c_cab_2+u_c_ab*u_c_abnorm_drhoanorm_drhoa*c_cab_2)+ &
./xc/xc_b97.F:                                                    e_lsda_c_a*(u_c_anorm_drhoanorm_drhoa*t173+0.2e1_dp* &
./xc/xc_b97.F:                                                                u_c_anorm_drhoa*(gamma_c_ss*s_a_21norm_drhoa*t165-t345* &
./xc/xc_b97.F:                                                                            t1605)*c_css_2+u_c_a*u_c_anorm_drhoanorm_drhoa*c_css_2))
./xc/xc_b97.F:                        e_ndra_ndra(ii) = e_ndra_ndra(ii)+exc_norm_drhoa_norm_drhoa
./xc/xc_b97.F:                     u_c_abrhoanorm_drhob = -0.2e1_dp*t906*t539+0.2e1_dp*t911* &
./xc/xc_b97.F:                                            t914*s_avg_2norm_drhob
./xc/xc_b97.F:                        exc_rhoa_norm_drhob = scale_c*(e_lsda_c_abrhoa*gc_abnorm_drhob &
./xc/xc_b97.F:                                                       +e_lsda_c_ab*(u_c_abrhoanorm_drhob*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                     u_c_abrhoa*u_c_abnorm_drhob*c_cab_2+u_c_ab* &
./xc/xc_b97.F:                                                                     u_c_abrhoanorm_drhob*c_cab_2))
./xc/xc_b97.F:                        e_ra_ndrb(ii) = e_ra_ndrb(ii)+exc_rhoa_norm_drhob
./xc/xc_b97.F:                     s_brhobnorm_drhob = -0.4e1_dp/0.3e1_dp*t367
./xc/xc_b97.F:                     u_x_brhobnorm_drhob = 0.2e1_dp*gamma_x*s_bnorm_drhob*t371- &
./xc/xc_b97.F:                                           0.10e2_dp*t1165*t377*s_bnorm_drhob+0.2e1_dp*t370*t29* &
./xc/xc_b97.F:                                           s_brhobnorm_drhob+0.8e1_dp*t1173*t1175*s_brhob* &
./xc/xc_b97.F:                                           s_bnorm_drhob-0.2e1_dp*t374*t376*s_brhobnorm_drhob
./xc/xc_b97.F:                     s_b_2rhobnorm_drhob = 0.2e1_dp*s_bnorm_drhob*s_brhob+ &
./xc/xc_b97.F:                                           0.2e1_dp*s_b*s_brhobnorm_drhob
./xc/xc_b97.F:                     s_avg_2rhobnorm_drhob = s_b_2rhobnorm_drhob/0.2e1_dp
./xc/xc_b97.F:                     u_c_abrhobnorm_drhob = gamma_c_ab*s_avg_2rhobnorm_drhob*t162- &
./xc/xc_b97.F:                                            s_avg_2norm_drhob-t337*t339*s_avg_2rhobnorm_drhob
./xc/xc_b97.F:                     u_c_brhobnorm_drhob = gamma_c_ss*s_b_2rhobnorm_drhob*t168- &
./xc/xc_b97.F:                                           0.2e1_dp*t1451*t543+0.2e1_dp*t1455*t1458*s_b_2norm_drhob &
./xc/xc_b97.F:                                           -t484*t486*s_b_2rhobnorm_drhob
./xc/xc_b97.F:                        exc_rhob_norm_drhob = scale_x*(e_lsda_x_brhob*gx_bnorm_drhob+ &
./xc/xc_b97.F:                                                       e_lsda_x_b*(u_x_brhobnorm_drhob*t31+0.2e1_dp*u_x_brhob* &
./xc/xc_b97.F:                                                                   u_x_bnorm_drhob*c_x_2+u_x_b*u_x_brhobnorm_drhob*c_x_2))+ &
./xc/xc_b97.F:                                              scale_c*(e_lsda_c_abrhob*gc_abnorm_drhob+e_lsda_c_ab*( &
./xc/xc_b97.F:                                                       u_c_abrhobnorm_drhob*t170+0.2e1_dp*u_c_abrhob* &
./xc/xc_b97.F:                                                       u_c_abnorm_drhob*c_cab_2+u_c_ab*u_c_abrhobnorm_drhob*c_cab_2 &
./xc/xc_b97.F:                                                       )+e_lsda_c_brhob*gc_bnorm_drhob+e_lsda_c_b*( &
./xc/xc_b97.F:                                                       u_c_brhobnorm_drhob*t176+0.2e1_dp*u_c_brhob*u_c_bnorm_drhob &
./xc/xc_b97.F:                                                       *c_css_2+u_c_b*u_c_brhobnorm_drhob*c_css_2))
./xc/xc_b97.F:                        e_rb_ndrb(ii) = e_rb_ndrb(ii)+exc_rhob_norm_drhob
./xc/xc_b97.F:                     u_c_abnorm_drhoanorm_drhob = -0.2e1_dp*t1589*t539+0.2e1_dp* &
./xc/xc_b97.F:                                                  t911*t1593*s_avg_2norm_drhob
./xc/xc_b97.F:                        exc_norm_drhoa_norm_drhob = scale_c*e_lsda_c_ab*( &
./xc/xc_b97.F:                                                    u_c_abnorm_drhoanorm_drhob*t170+0.2e1_dp*u_c_abnorm_drhoa* &
./xc/xc_b97.F:                                                    u_c_abnorm_drhob*c_cab_2+u_c_ab*u_c_abnorm_drhoanorm_drhob* &
./xc/xc_b97.F:                        e_ndra_ndrb(ii) = e_ndra_ndrb(ii)+exc_norm_drhoa_norm_drhob
./xc/xc_b97.F:                     t1719 = s_bnorm_drhob**2
./xc/xc_b97.F:                     u_x_bnorm_drhobnorm_drhob = 0.2e1_dp*gamma_x*t1719*t29- &
./xc/xc_b97.F:                     s_b_2norm_drhobnorm_drhob = 0.2e1_dp*t1719
./xc/xc_b97.F:                     s_b_21norm_drhob = s_b_2norm_drhob
./xc/xc_b97.F:                     s_avg_2norm_drhobnorm_drhob = s_b_2norm_drhobnorm_drhob/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21norm_drhob = s_b_21norm_drhob/0.2e1_dp
./xc/xc_b97.F:                     t1738 = t339*s_avg_21norm_drhob
./xc/xc_b97.F:                     u_c_abnorm_drhobnorm_drhob = gamma_c_ab* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhobnorm_drhob*t162-0.2e1_dp*t336* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhob*t1738+0.2e1_dp*t911*t913* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhob*s_avg_21norm_drhob-t337*t339* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhobnorm_drhob
./xc/xc_b97.F:                     t1753 = t486*s_b_21norm_drhob
./xc/xc_b97.F:                     u_c_bnorm_drhobnorm_drhob = gamma_c_ss*s_b_2norm_drhobnorm_drhob &
./xc/xc_b97.F:                                                 *t168-0.2e1_dp*t344*s_b_2norm_drhob*t1753+0.2e1_dp* &
./xc/xc_b97.F:                                                 t1455*t1457*s_b_2norm_drhob*s_b_21norm_drhob-t484*t486* &
./xc/xc_b97.F:                                                 s_b_2norm_drhobnorm_drhob
./xc/xc_b97.F:                        exc_norm_drhob_norm_drhob = scale_x*e_lsda_x_b*( &
./xc/xc_b97.F:                                                    u_x_bnorm_drhobnorm_drhob*t31+0.2e1_dp*u_x_bnorm_drhob**2* &
./xc/xc_b97.F:                                                    c_x_2+u_x_b*u_x_bnorm_drhobnorm_drhob*c_x_2)+scale_c*( &
./xc/xc_b97.F:                                                    e_lsda_c_ab*(u_c_abnorm_drhobnorm_drhob*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                 u_c_abnorm_drhob*(gamma_c_ab*s_avg_21norm_drhob*t162-t337* &
./xc/xc_b97.F:                                                                        t1738)*c_cab_2+u_c_ab*u_c_abnorm_drhobnorm_drhob*c_cab_2)+ &
./xc/xc_b97.F:                                                    e_lsda_c_b*(u_c_bnorm_drhobnorm_drhob*t176+0.2e1_dp* &
./xc/xc_b97.F:                                                                u_c_bnorm_drhob*(gamma_c_ss*s_b_21norm_drhob*t168-t484* &
./xc/xc_b97.F:                                                                            t1753)*c_css_2+u_c_b*u_c_bnorm_drhobnorm_drhob*c_css_2))
./xc/xc_b97.F:                        e_ndrb_ndrb(ii) = e_ndrb_ndrb(ii)+exc_norm_drhob_norm_drhob
./xc/xc_b97.F:            END IF ! rho>epsilon_rho
./xc/xc_b97.F:!> \param rho_tot ...
./xc/xc_b97.F:!> \param norm_drho || grad (rhoa+rhob) ||
./xc/xc_b97.F:!> \param epsilon_rho ...
./xc/xc_b97.F:   SUBROUTINE b97_lda_calc(rho_tot, norm_drho, &
./xc/xc_b97.F:                           grad_deriv, npoints, epsilon_rho, &
./xc/xc_b97.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rho_tot, norm_drho
./xc/xc_b97.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho
./xc/xc_b97.F:      REAL(kind=dp) :: A_1, A_2, A_3, alpha_1_1, alpha_1_2, alpha_1_3, alpha_c, alpha_c1rhoa, &
./xc/xc_b97.F:         alpha_c1rhob, alpha_crhoa, alpha_crhob, beta_1_1, beta_1_2, beta_1_3, beta_2_1, beta_2_2, &
./xc/xc_b97.F:         c_cab_2, c_css_0, c_css_1, c_css_2, c_x_0, c_x_1, c_x_2, chi, chirhoa, chirhoarhoa, &
./xc/xc_b97.F:         chirhoarhob, chirhob, chirhobrhob, e_c_u_0, e_c_u_01rhoa, e_c_u_01rhob, e_c_u_0rhoa, &
./xc/xc_b97.F:         e_c_u_0rhoarhoa, e_c_u_0rhoarhob, e_c_u_0rhob, e_c_u_0rhobrhob, e_c_u_1rhoa, e_c_u_1rhob, &
./xc/xc_b97.F:         e_lsda_c_a, e_lsda_c_a1rhoa, e_lsda_c_ab, e_lsda_c_abrhoa
./xc/xc_b97.F:      REAL(kind=dp) :: e_lsda_c_abrhob, e_lsda_c_arhoa, e_lsda_c_arhoarhoa, e_lsda_c_b, &
./xc/xc_b97.F:         e_lsda_c_b1rhob, e_lsda_c_brhob, e_lsda_c_brhobrhob, e_lsda_x_a, e_lsda_x_arhoa, &
./xc/xc_b97.F:         e_lsda_x_b, e_lsda_x_brhob, epsilon_c_unif, epsilon_c_unif1rhoa, epsilon_c_unif1rhob, &
./xc/xc_b97.F:         epsilon_c_unif_a, epsilon_c_unif_a1rhoa, epsilon_c_unif_arhoa, epsilon_c_unif_b, &
./xc/xc_b97.F:         epsilon_c_unif_b1rhob, epsilon_c_unif_brhob, epsilon_c_unifrhoa, epsilon_c_unifrhob, exc, &
./xc/xc_b97.F:         exc_norm_drhoa, exc_norm_drhoa_norm_drhoa, exc_norm_drhoa_norm_drhob, exc_norm_drhob, &
./xc/xc_b97.F:         exc_norm_drhob_norm_drhob, exc_rhoa, exc_rhoa_norm_drhoa, exc_rhoa_norm_drhob
./xc/xc_b97.F:      REAL(kind=dp) :: exc_rhoa_rhoa, exc_rhoa_rhob, exc_rhob, exc_rhob_norm_drhoa, &
./xc/xc_b97.F:         exc_rhob_norm_drhob, exc_rhob_rhob, f, f1rhoa, f1rhob, frhoa, frhoarhoa, frhoarhob, &
./xc/xc_b97.F:         frhob, frhobrhob, gamma_c_ab, gamma_c_ss, gamma_x, gc_a, gc_ab, gc_abnorm_drhoa, &
./xc/xc_b97.F:         gc_abnorm_drhob, gc_abrhoa, gc_abrhob, gc_anorm_drhoa, gc_arhoa, gc_b, gc_bnorm_drhob, &
./xc/xc_b97.F:         gc_brhob, gx_a, gx_anorm_drhoa, gx_arhoa, gx_b, gx_bnorm_drhob, gx_brhob, my_norm_drhoa, &
./xc/xc_b97.F:         my_norm_drhob, my_rhoa, my_rhob, p_1, p_2, p_3, rho, rs, rs_a, rs_arhoa, rs_arhoarhoa, &
./xc/xc_b97.F:         rs_b, rs_brhob, rs_brhobrhob, rsrhoa, rsrhoarhoa, rsrhoarhob, rsrhob, rsrhobrhob, s_a
./xc/xc_b97.F:      REAL(kind=dp) :: s_a_2, s_a_21norm_drhoa, s_a_21rhoa, s_a_2norm_drhoa, &
./xc/xc_b97.F:         s_a_2norm_drhoanorm_drhoa, s_a_2rhoa, s_a_2rhoanorm_drhoa, s_a_2rhoarhoa, s_anorm_drhoa, &
./xc/xc_b97.F:         s_arhoa, s_arhoanorm_drhoa, s_arhoarhoa, s_avg_2, s_avg_21norm_drhoa, s_avg_21norm_drhob, &
./xc/xc_b97.F:         s_avg_21rhoa, s_avg_21rhob, s_avg_2norm_drhoa, s_avg_2norm_drhoanorm_drhoa, &
./xc/xc_b97.F:         s_avg_2norm_drhob, s_avg_2norm_drhobnorm_drhob, s_avg_2rhoa, s_avg_2rhoanorm_drhoa, &
./xc/xc_b97.F:         s_avg_2rhoarhoa, s_avg_2rhob, s_avg_2rhobnorm_drhob, s_avg_2rhobrhob, s_b, s_b_2, &
./xc/xc_b97.F:         s_b_21norm_drhob, s_b_21rhob, s_b_2norm_drhob, s_b_2norm_drhobnorm_drhob, s_b_2rhob, &
./xc/xc_b97.F:         s_b_2rhobnorm_drhob
./xc/xc_b97.F:      REAL(kind=dp) :: s_b_2rhobrhob, s_bnorm_drhob, s_brhob, s_brhobnorm_drhob, s_brhobrhob, &
./xc/xc_b97.F:         t97, t974, t976, t98, t981, t99, t993, u_c_a, u_c_a1rhoa, u_c_ab, u_c_ab1rhoa, &
./xc/xc_b97.F:         u_c_ab1rhob, u_c_abnorm_drhoa, u_c_abnorm_drhoanorm_drhoa, u_c_abnorm_drhoanorm_drhob, &
./xc/xc_b97.F:         u_c_abnorm_drhob, u_c_abnorm_drhobnorm_drhob, u_c_abrhoa
./xc/xc_b97.F:      REAL(kind=dp) :: u_c_abrhoanorm_drhoa, u_c_abrhoanorm_drhob, u_c_abrhoarhoa, u_c_abrhoarhob, &
./xc/xc_b97.F:         u_c_abrhob, u_c_abrhobnorm_drhoa, u_c_abrhobnorm_drhob, u_c_abrhobrhob, u_c_anorm_drhoa, &
./xc/xc_b97.F:         u_c_anorm_drhoanorm_drhoa, u_c_arhoa, u_c_arhoanorm_drhoa, u_c_arhoarhoa, u_c_b, &
./xc/xc_b97.F:         u_c_b1rhob, u_c_bnorm_drhob, u_c_bnorm_drhobnorm_drhob, u_c_brhob, u_c_brhobnorm_drhob, &
./xc/xc_b97.F:         u_c_brhobrhob, u_x_a, u_x_a1rhoa, u_x_anorm_drhoa, u_x_anorm_drhoanorm_drhoa, u_x_arhoa, &
./xc/xc_b97.F:         u_x_arhoanorm_drhoa, u_x_arhoarhoa, u_x_b, u_x_b1rhob, u_x_bnorm_drhob, &
./xc/xc_b97.F:         u_x_bnorm_drhobnorm_drhob, u_x_brhob, u_x_brhobnorm_drhob, u_x_brhobrhob
./xc/xc_b97.F:            my_rhoa = 0.5_dp*MAX(rho_tot(ii), 0.0_dp)
./xc/xc_b97.F:            my_rhob = my_rhoa
./xc/xc_b97.F:            rho = my_rhoa+my_rhob
./xc/xc_b97.F:            IF (rho > epsilon_rho) THEN
./xc/xc_b97.F:               my_rhoa = MAX(my_rhoa, 0.5_dp*epsilon_rho)
./xc/xc_b97.F:               my_rhob = MAX(my_rhob, 0.5_dp*epsilon_rho)
./xc/xc_b97.F:               rho = my_rhoa+my_rhob
./xc/xc_b97.F:               my_norm_drhoa = 0.5_dp*norm_drho(ii)
./xc/xc_b97.F:               my_norm_drhob = 0.5_dp*norm_drho(ii)
./xc/xc_b97.F:               t7 = my_rhoa**(0.1e1_dp/0.3e1_dp)
./xc/xc_b97.F:               t8 = t7*my_rhoa
./xc/xc_b97.F:               s_a = my_norm_drhoa*t12
./xc/xc_b97.F:               t20 = my_rhob**(0.1e1_dp/0.3e1_dp)
./xc/xc_b97.F:               t21 = t20*my_rhob
./xc/xc_b97.F:               s_b = my_norm_drhob*t25
./xc/xc_b97.F:               t33 = my_rhoa-my_rhob
./xc/xc_b97.F:               t34 = 0.1e1_dp/rho
./xc/xc_b97.F:               t116 = t35/my_rhoa
./xc/xc_b97.F:               t138 = t35/my_rhob
./xc/xc_b97.F:               e_lsda_c_a = epsilon_c_unif_a*my_rhoa
./xc/xc_b97.F:               e_lsda_c_b = epsilon_c_unif_b*my_rhob
./xc/xc_b97.F:               e_lsda_c_ab = epsilon_c_unif*rho-e_lsda_c_a-e_lsda_c_b
./xc/xc_b97.F:                  e_lsda_x_arhoa = -t4*t6*t7/0.2e1_dp
./xc/xc_b97.F:                  t186 = my_rhoa**2
./xc/xc_b97.F:                  s_arhoa = -0.4e1_dp/0.3e1_dp*my_norm_drhoa*t188
./xc/xc_b97.F:                  t192 = t16*s_arhoa
./xc/xc_b97.F:                  t199 = t198*s_arhoa
./xc/xc_b97.F:                  u_x_arhoa = 0.2e1_dp*t191*t192-0.2e1_dp*t196*t199
./xc/xc_b97.F:                  gx_arhoa = u_x_arhoa*t18+u_x_a*u_x_arhoa*c_x_2
./xc/xc_b97.F:                  t207 = rho**2
./xc/xc_b97.F:                  chirhoa = t34-t209
./xc/xc_b97.F:                  rsrhoa = -t4*t212*t208/0.12e2_dp
./xc/xc_b97.F:                  t235 = t224*rsrhoa/0.2e1_dp+beta_2_1*rsrhoa+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t228*rsrhoa+t50*t48*rsrhoa*t232
./xc/xc_b97.F:                  e_c_u_0rhoa = -0.2e1_dp*t216*rsrhoa*t56+t222*t237
./xc/xc_b97.F:                  t256 = t246*rsrhoa/0.2e1_dp+beta_2_2*rsrhoa+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t250*rsrhoa+t68*t66*rsrhoa*t232
./xc/xc_b97.F:                  e_c_u_1rhoa = -0.2e1_dp*t239*rsrhoa*t74+t245*t258
./xc/xc_b97.F:                  t277 = t267*rsrhoa/0.2e1_dp+beta_2_3*rsrhoa+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t271*rsrhoa+t86*t84*rsrhoa*t232
./xc/xc_b97.F:                  alpha_crhoa = 0.2e1_dp*t260*rsrhoa*t92-t266*t279
./xc/xc_b97.F:                  frhoa = (0.4e1_dp/0.3e1_dp*t99*chirhoa-0.4e1_dp/0.3e1_dp &
./xc/xc_b97.F:                           *t102*chirhoa)*t97
./xc/xc_b97.F:                  t285 = alpha_crhoa*f
./xc/xc_b97.F:                  t287 = alpha_c*frhoa
./xc/xc_b97.F:                  t291 = t290*chirhoa
./xc/xc_b97.F:                  t294 = e_c_u_1rhoa-e_c_u_0rhoa
./xc/xc_b97.F:                  t297 = t112*frhoa
./xc/xc_b97.F:                  t299 = t289*chirhoa
./xc/xc_b97.F:                  epsilon_c_unifrhoa = e_c_u_0rhoa+t285*t110+t287*t110- &
./xc/xc_b97.F:                  rs_arhoa = -t4*t304/t186/0.12e2_dp
./xc/xc_b97.F:                  t327 = t316*rs_arhoa/0.2e1_dp+beta_2_2*rs_arhoa+0.3e1_dp &
./xc/xc_b97.F:                         /0.2e1_dp*t320*rs_arhoa+t128*t66*rs_arhoa*t324
./xc/xc_b97.F:                  epsilon_c_unif_arhoa = -0.2e1_dp*t239*rs_arhoa*t134+t314* &
./xc/xc_b97.F:                  s_a_2rhoa = 0.2e1_dp*s_a*s_arhoa
./xc/xc_b97.F:                  s_avg_2rhoa = s_a_2rhoa/0.2e1_dp
./xc/xc_b97.F:                  e_lsda_c_arhoa = epsilon_c_unif_arhoa*my_rhoa+epsilon_c_unif_a
./xc/xc_b97.F:                  u_c_abrhoa = gamma_c_ab*s_avg_2rhoa*t162-t337*t339*s_avg_2rhoa
./xc/xc_b97.F:                  u_c_arhoa = gamma_c_ss*s_a_2rhoa*t165-t345*t347*s_a_2rhoa
./xc/xc_b97.F:                  e_lsda_c_abrhoa = epsilon_c_unifrhoa*rho+epsilon_c_unif- &
./xc/xc_b97.F:                                    e_lsda_c_arhoa
./xc/xc_b97.F:                  gc_abrhoa = u_c_abrhoa*t170+u_c_ab*u_c_abrhoa*c_cab_2
./xc/xc_b97.F:                  gc_arhoa = u_c_arhoa*t173+u_c_a*u_c_arhoa*c_css_2
./xc/xc_b97.F:                     exc_rhoa = scale_x*(e_lsda_x_arhoa*gx_a+e_lsda_x_a* &
./xc/xc_b97.F:                                         gx_arhoa)+scale_c*(e_lsda_c_abrhoa*gc_ab+e_lsda_c_ab* &
./xc/xc_b97.F:                                                            gc_abrhoa+e_lsda_c_arhoa*gc_a+e_lsda_c_a*gc_arhoa)
./xc/xc_b97.F:                     e_r(ii) = e_r(ii)+0.5_dp*exc_rhoa
./xc/xc_b97.F:                  e_lsda_x_brhob = -t4*t6*t20/0.2e1_dp
./xc/xc_b97.F:                  t365 = my_rhob**2
./xc/xc_b97.F:                  s_brhob = -0.4e1_dp/0.3e1_dp*my_norm_drhob*t367
./xc/xc_b97.F:                  t371 = t29*s_brhob
./xc/xc_b97.F:                  t377 = t376*s_brhob
./xc/xc_b97.F:                  u_x_brhob = 0.2e1_dp*t370*t371-0.2e1_dp*t374*t377
./xc/xc_b97.F:                  gx_brhob = u_x_brhob*t31+u_x_b*u_x_brhob*c_x_2
./xc/xc_b97.F:                  chirhob = -t34-t209
./xc/xc_b97.F:                  rsrhob = rsrhoa
./xc/xc_b97.F:                  t396 = t224*rsrhob/0.2e1_dp+beta_2_1*rsrhob+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t228*rsrhob+t50*t48*rsrhob*t232
./xc/xc_b97.F:                  e_c_u_0rhob = -0.2e1_dp*t216*rsrhob*t56+t222*t396*t236
./xc/xc_b97.F:                  t410 = t246*rsrhob/0.2e1_dp+beta_2_2*rsrhob+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t250*rsrhob+t68*t66*rsrhob*t232
./xc/xc_b97.F:                  e_c_u_1rhob = -0.2e1_dp*t239*rsrhob*t74+t245*t410*t257
./xc/xc_b97.F:                  t424 = t267*rsrhob/0.2e1_dp+beta_2_3*rsrhob+0.3e1_dp/ &
./xc/xc_b97.F:                         0.2e1_dp*t271*rsrhob+t86*t84*rsrhob*t232
./xc/xc_b97.F:                  alpha_crhob = 0.2e1_dp*t260*rsrhob*t92-t266*t424*t278
./xc/xc_b97.F:                  frhob = (0.4e1_dp/0.3e1_dp*t99*chirhob-0.4e1_dp/0.3e1_dp &
./xc/xc_b97.F:                           *t102*chirhob)*t97
./xc/xc_b97.F:                  t431 = alpha_crhob*f
./xc/xc_b97.F:                  t433 = alpha_c*frhob
./xc/xc_b97.F:                  t435 = t290*chirhob
./xc/xc_b97.F:                  t438 = e_c_u_1rhob-e_c_u_0rhob
./xc/xc_b97.F:                  t441 = t112*frhob
./xc/xc_b97.F:                  t443 = t289*chirhob
./xc/xc_b97.F:                  epsilon_c_unifrhob = e_c_u_0rhob+t431*t110+t433*t110- &
./xc/xc_b97.F:                  rs_brhob = -t4*t448/t365/0.12e2_dp
./xc/xc_b97.F:                  t471 = t460*rs_brhob/0.2e1_dp+beta_2_2*rs_brhob+0.3e1_dp &
./xc/xc_b97.F:                         /0.2e1_dp*rs_brhob*t464+t150*t66*rs_brhob*t468
./xc/xc_b97.F:                  epsilon_c_unif_brhob = -0.2e1_dp*t239*rs_brhob*t156+t458* &
./xc/xc_b97.F:                  s_b_2rhob = 0.2e1_dp*s_b*s_brhob
./xc/xc_b97.F:                  s_avg_2rhob = s_b_2rhob/0.2e1_dp
./xc/xc_b97.F:                  e_lsda_c_brhob = epsilon_c_unif_brhob*my_rhob+epsilon_c_unif_b
./xc/xc_b97.F:                  t480 = t339*s_avg_2rhob
./xc/xc_b97.F:                  u_c_abrhob = gamma_c_ab*s_avg_2rhob*t162-t337*t480
./xc/xc_b97.F:                  u_c_brhob = gamma_c_ss*s_b_2rhob*t168-t484*t486*s_b_2rhob
./xc/xc_b97.F:                  e_lsda_c_abrhob = epsilon_c_unifrhob*rho+epsilon_c_unif- &
./xc/xc_b97.F:                                    e_lsda_c_brhob
./xc/xc_b97.F:                  gc_abrhob = u_c_abrhob*t170+u_c_ab*u_c_abrhob*c_cab_2
./xc/xc_b97.F:                  gc_brhob = u_c_brhob*t176+u_c_b*u_c_brhob*c_css_2
./xc/xc_b97.F:                     exc_rhob = scale_x*(e_lsda_x_brhob*gx_b+e_lsda_x_b* &
./xc/xc_b97.F:                                         gx_brhob)+scale_c*(e_lsda_c_abrhob*gc_ab+e_lsda_c_ab* &
./xc/xc_b97.F:                                                            gc_abrhob+e_lsda_c_brhob*gc_b+e_lsda_c_b*gc_brhob)
./xc/xc_b97.F:                     e_r(ii) = e_r(ii)+0.5_dp*exc_rhob
./xc/xc_b97.F:                  s_anorm_drhoa = t12
./xc/xc_b97.F:                  u_x_anorm_drhoa = 0.2e1_dp*t191*t16*s_anorm_drhoa-0.2e1_dp &
./xc/xc_b97.F:                                    *t196*t198*s_anorm_drhoa
./xc/xc_b97.F:                  gx_anorm_drhoa = u_x_anorm_drhoa*t18+u_x_a*u_x_anorm_drhoa*c_x_2
./xc/xc_b97.F:                  s_a_2norm_drhoa = 0.2e1_dp*s_a*s_anorm_drhoa
./xc/xc_b97.F:                  s_avg_2norm_drhoa = s_a_2norm_drhoa/0.2e1_dp
./xc/xc_b97.F:                  t512 = t339*s_avg_2norm_drhoa
./xc/xc_b97.F:                  u_c_abnorm_drhoa = gamma_c_ab*s_avg_2norm_drhoa*t162-t337*t512
./xc/xc_b97.F:                  t516 = t347*s_a_2norm_drhoa
./xc/xc_b97.F:                  u_c_anorm_drhoa = gamma_c_ss*s_a_2norm_drhoa*t165-t345*t516
./xc/xc_b97.F:                  gc_abnorm_drhoa = u_c_abnorm_drhoa*t170+u_c_ab* &
./xc/xc_b97.F:                                    u_c_abnorm_drhoa*c_cab_2
./xc/xc_b97.F:                  gc_anorm_drhoa = u_c_anorm_drhoa*t173+u_c_a*u_c_anorm_drhoa &
./xc/xc_b97.F:                     exc_norm_drhoa = scale_x*e_lsda_x_a*gx_anorm_drhoa+scale_c* &
./xc/xc_b97.F:                                      (e_lsda_c_ab*gc_abnorm_drhoa+e_lsda_c_a*gc_anorm_drhoa)
./xc/xc_b97.F:                     e_ndr(ii) = e_ndr(ii)+0.5_dp*exc_norm_drhoa
./xc/xc_b97.F:                  s_bnorm_drhob = t25
./xc/xc_b97.F:                  u_x_bnorm_drhob = 0.2e1_dp*t370*t29*s_bnorm_drhob-0.2e1_dp &
./xc/xc_b97.F:                                    *t374*t376*s_bnorm_drhob
./xc/xc_b97.F:                  gx_bnorm_drhob = u_x_bnorm_drhob*t31+u_x_b*u_x_bnorm_drhob*c_x_2
./xc/xc_b97.F:                  s_b_2norm_drhob = 0.2e1_dp*s_b*s_bnorm_drhob
./xc/xc_b97.F:                  s_avg_2norm_drhob = s_b_2norm_drhob/0.2e1_dp
./xc/xc_b97.F:                  t539 = t339*s_avg_2norm_drhob
./xc/xc_b97.F:                  u_c_abnorm_drhob = gamma_c_ab*s_avg_2norm_drhob*t162-t337*t539
./xc/xc_b97.F:                  t543 = t486*s_b_2norm_drhob
./xc/xc_b97.F:                  u_c_bnorm_drhob = gamma_c_ss*s_b_2norm_drhob*t168-t484*t543
./xc/xc_b97.F:                  gc_abnorm_drhob = u_c_abnorm_drhob*t170+u_c_ab* &
./xc/xc_b97.F:                                    u_c_abnorm_drhob*c_cab_2
./xc/xc_b97.F:                  gc_bnorm_drhob = u_c_bnorm_drhob*t176+u_c_b*u_c_bnorm_drhob &
./xc/xc_b97.F:                     exc_norm_drhob = scale_x*e_lsda_x_b*gx_bnorm_drhob+scale_c* &
./xc/xc_b97.F:                                      (e_lsda_c_ab*gc_abnorm_drhob+e_lsda_c_b*gc_bnorm_drhob)
./xc/xc_b97.F:                     e_ndr(ii) = e_ndr(ii)+0.5_dp*exc_norm_drhob
./xc/xc_b97.F:                     t560 = t186*my_rhoa
./xc/xc_b97.F:                     s_arhoarhoa = 0.28e2_dp/0.9e1_dp*my_norm_drhoa/t7/t560
./xc/xc_b97.F:                     t564 = s_arhoa**2
./xc/xc_b97.F:                     u_x_arhoarhoa = 0.2e1_dp*gamma_x*t564*t16-0.10e2_dp*t568 &
./xc/xc_b97.F:                                     *t198*t564+0.2e1_dp*t191*t16*s_arhoarhoa+0.8e1_dp* &
./xc/xc_b97.F:                                     t577*t579*t564-0.2e1_dp*t196*t198*s_arhoarhoa
./xc/xc_b97.F:                     u_x_a1rhoa = u_x_arhoa
./xc/xc_b97.F:                     t600 = 0.1e1_dp/t207/rho
./xc/xc_b97.F:                     chirhoarhoa = -0.2e1_dp*t208+0.2e1_dp*t601
./xc/xc_b97.F:                     rsrhoarhoa = -t4/t210/t36*t606/t608/0.18e2_dp+ &
./xc/xc_b97.F:                     t619 = alpha_1_1*rsrhoa
./xc/xc_b97.F:                     t633 = rsrhoa**2
./xc/xc_b97.F:                     e_c_u_0rhoarhoa = -0.2e1_dp*t216*rsrhoarhoa*t56+0.2e1_dp* &
./xc/xc_b97.F:                                                                           /0.4e1_dp+t224*rsrhoarhoa/0.2e1_dp+beta_2_1*rsrhoarhoa+ &
./xc/xc_b97.F:                                                                               rsrhoarhoa+t50*t644*t633*t647+t50*t48*rsrhoarhoa* &
./xc/xc_b97.F:                     e_c_u_01rhoa = e_c_u_0rhoa
./xc/xc_b97.F:                     t671 = alpha_1_2*rsrhoa
./xc/xc_b97.F:                     t719 = alpha_1_3*rsrhoa
./xc/xc_b97.F:                     alpha_c1rhoa = alpha_crhoa
./xc/xc_b97.F:                     t766 = chirhoa**2
./xc/xc_b97.F:                     frhoarhoa = (0.4e1_dp/0.9e1_dp*t765*t766+0.4e1_dp/ &
./xc/xc_b97.F:                                  0.3e1_dp*t99*chirhoarhoa+0.4e1_dp/0.9e1_dp*t772*t766- &
./xc/xc_b97.F:                                  0.4e1_dp/0.3e1_dp*t102*chirhoarhoa)*t97
./xc/xc_b97.F:                     f1rhoa = frhoa
./xc/xc_b97.F:                     t790 = alpha_c1rhoa*f
./xc/xc_b97.F:                     t793 = alpha_c*f1rhoa
./xc/xc_b97.F:                     t811 = e_c_u_1rhoa-e_c_u_01rhoa
./xc/xc_b97.F:                     t821 = t112*f1rhoa
./xc/xc_b97.F:                     t830 = -0.4e1_dp*t105*t290*chirhoarhoa+(-0.2e1_dp*t239* &
./xc/xc_b97.F:                                                             rsrhoarhoa*t74+0.2e1_dp*t671*t673-0.2e1_dp*t678*t679 &
./xc/xc_b97.F:                                                             *t257+t245*(-t683*t633/0.4e1_dp+t246*rsrhoarhoa/ &
./xc/xc_b97.F:                                                                         0.2e1_dp+beta_2_2*rsrhoarhoa+0.3e1_dp/0.4e1_dp*t689*t633 &
./xc/xc_b97.F:                                                                         +0.3e1_dp/0.2e1_dp*t250*rsrhoarhoa+t68*t694*t633* &
./xc/xc_b97.F:                                                                         t647+t68*t66*rsrhoarhoa*t232-t68*t66*t633*t647)* &
./xc/xc_b97.F:                                                             t257+t709*t679*t711*t62/0.2e1_dp-e_c_u_0rhoarhoa)*f* &
./xc/xc_b97.F:                            t108+t294*f1rhoa*t108+0.4e1_dp*t295*t299+t811*frhoa &
./xc/xc_b97.F:                            *t108+t112*frhoarhoa*t108+0.4e1_dp*t297*t299+0.4e1_dp &
./xc/xc_b97.F:                            t766+0.4e1_dp*t113*t289*chirhoarhoa
./xc/xc_b97.F:                     epsilon_c_unif1rhoa = e_c_u_01rhoa+t790*t110+t793*t110- &
./xc/xc_b97.F:                     rs_arhoarhoa = -t4/t302/t116*t606/t838/0.18e2_dp+ &
./xc/xc_b97.F:                     t864 = rs_arhoa**2
./xc/xc_b97.F:                     epsilon_c_unif_a1rhoa = epsilon_c_unif_arhoa
./xc/xc_b97.F:                     s_a_2rhoarhoa = 0.2e1_dp*t564+0.2e1_dp*s_a*s_arhoarhoa
./xc/xc_b97.F:                     s_a_21rhoa = s_a_2rhoa
./xc/xc_b97.F:                     s_avg_2rhoarhoa = s_a_2rhoarhoa/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21rhoa = s_a_21rhoa/0.2e1_dp
./xc/xc_b97.F:                     e_lsda_c_arhoarhoa = (-0.2e1_dp*t239*rs_arhoarhoa*t134+ &
./xc/xc_b97.F:                                           0.2e1_dp*alpha_1_2*rs_arhoa*t313*t327*t328-0.2e1_dp* &
./xc/xc_b97.F:                                                                         0.4e1_dp+t316*rs_arhoarhoa/0.2e1_dp+beta_2_2*rs_arhoarhoa &
./xc/xc_b97.F:                                                                          0.2e1_dp*t320*rs_arhoarhoa+t128*t694*t864*t877+t128* &
./xc/xc_b97.F:                                                                          t66*rs_arhoarhoa*t324-t128*t66*t864*t877)*t328+t120 &
./xc/xc_b97.F:                                           /t889*t858/t892*t62/0.2e1_dp)*my_rhoa+epsilon_c_unif_arhoa &
./xc/xc_b97.F:                                          +epsilon_c_unif_a1rhoa
./xc/xc_b97.F:                     e_lsda_c_a1rhoa = epsilon_c_unif_a1rhoa*my_rhoa+epsilon_c_unif_a
./xc/xc_b97.F:                     t906 = t336*s_avg_2rhoa
./xc/xc_b97.F:                     t907 = t339*s_avg_21rhoa
./xc/xc_b97.F:                     t914 = t913*s_avg_2rhoa
./xc/xc_b97.F:                     u_c_abrhoarhoa = gamma_c_ab*s_avg_2rhoarhoa*t162-0.2e1_dp* &
./xc/xc_b97.F:                                      t906*t907+0.2e1_dp*t911*t914*s_avg_21rhoa-t337*t339* &
./xc/xc_b97.F:                                      s_avg_2rhoarhoa
./xc/xc_b97.F:                     u_c_ab1rhoa = gamma_c_ab*s_avg_21rhoa*t162-t337*t907
./xc/xc_b97.F:                     t925 = t344*s_a_2rhoa
./xc/xc_b97.F:                     t926 = t347*s_a_21rhoa
./xc/xc_b97.F:                     t933 = t932*s_a_2rhoa
./xc/xc_b97.F:                     u_c_arhoarhoa = gamma_c_ss*s_a_2rhoarhoa*t165-0.2e1_dp* &
./xc/xc_b97.F:                                     t925*t926+0.2e1_dp*t930*t933*s_a_21rhoa-t345*t347* &
./xc/xc_b97.F:                                     s_a_2rhoarhoa
./xc/xc_b97.F:                     u_c_a1rhoa = gamma_c_ss*s_a_21rhoa*t165-t345*t926
./xc/xc_b97.F:                        exc_rhoa_rhoa = scale_x*(-t4*t6/t555*gx_a/0.6e1_dp &
./xc/xc_b97.F:                                                 +e_lsda_x_arhoa*(u_x_a1rhoa*t18+u_x_a*u_x_a1rhoa*c_x_2) &
./xc/xc_b97.F:                                                 +e_lsda_x_arhoa*gx_arhoa+e_lsda_x_a*(u_x_arhoarhoa*t18+ &
./xc/xc_b97.F:                                                                          0.2e1_dp*u_x_arhoa*u_x_a1rhoa*c_x_2+u_x_a*u_x_arhoarhoa* &
./xc/xc_b97.F:                                                                                c_x_2))+scale_c*(((e_c_u_0rhoarhoa+(0.2e1_dp*t260* &
./xc/xc_b97.F:                                                                             rsrhoarhoa*t92-0.2e1_dp*t719*t721+0.2e1_dp*t726*t727* &
./xc/xc_b97.F:                                                                                   t278-t266*(-t731*t633/0.4e1_dp+t267*rsrhoarhoa/ &
./xc/xc_b97.F:                                                                          0.2e1_dp+beta_2_3*rsrhoarhoa+0.3e1_dp/0.4e1_dp*t737*t633 &
./xc/xc_b97.F:                                                                                 +0.3e1_dp/0.2e1_dp*t271*rsrhoarhoa+t86*t742*t633* &
./xc/xc_b97.F:                                                                                  t647+t86*t84*rsrhoarhoa*t232-t86*t84*t633*t647)* &
./xc/xc_b97.F:                                                                              t278-t757*t727*t759*t80/0.2e1_dp)*f*t110+alpha_crhoa &
./xc/xc_b97.F:                                                                               *f1rhoa*t110-0.4e1_dp*t285*t291+alpha_c1rhoa*frhoa* &
./xc/xc_b97.F:                                                                                   t110+alpha_c*frhoarhoa*t110-0.4e1_dp*t287*t291- &
./xc/xc_b97.F:                                                                                           t796*t766+t830)*rho+epsilon_c_unifrhoa+ &
./xc/xc_b97.F:                                                                     epsilon_c_unif1rhoa-e_lsda_c_arhoarhoa)*gc_ab+e_lsda_c_abrhoa &
./xc/xc_b97.F:                                                                                  *(u_c_ab1rhoa*t170+u_c_ab*u_c_ab1rhoa*c_cab_2)+( &
./xc/xc_b97.F:                                                                          epsilon_c_unif1rhoa*rho+epsilon_c_unif-e_lsda_c_a1rhoa)* &
./xc/xc_b97.F:                                                                              gc_abrhoa+e_lsda_c_ab*(u_c_abrhoarhoa*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                             u_c_abrhoa*u_c_ab1rhoa*c_cab_2+u_c_ab*u_c_abrhoarhoa* &
./xc/xc_b97.F:                                                                       c_cab_2)+e_lsda_c_arhoarhoa*gc_a+e_lsda_c_arhoa*(u_c_a1rhoa &
./xc/xc_b97.F:                                                                          *t173+u_c_a*u_c_a1rhoa*c_css_2)+e_lsda_c_a1rhoa*gc_arhoa &
./xc/xc_b97.F:                                                                               +e_lsda_c_a*(u_c_arhoarhoa*t173+0.2e1_dp*u_c_arhoa* &
./xc/xc_b97.F:                                                                                    u_c_a1rhoa*c_css_2+u_c_a*u_c_arhoarhoa*c_css_2))
./xc/xc_b97.F:                        e_r_r(ii) = e_r_r(ii)+0.5_dp*0.5_dp*exc_rhoa_rhoa
./xc/xc_b97.F:                     chirhoarhob = 0.2e1_dp*t601
./xc/xc_b97.F:                     rsrhoarhob = rsrhoarhoa
./xc/xc_b97.F:                     t976 = alpha_1_1*rsrhob
./xc/xc_b97.F:                     t981 = rsrhoa*rsrhob
./xc/xc_b97.F:                     t993 = rsrhob*t647*rsrhoa
./xc/xc_b97.F:                     e_c_u_0rhoarhob = -0.2e1_dp*t216*rsrhoarhob*t56+t619* &
./xc/xc_b97.F:                                                                                  t981/0.4e1_dp+t224*rsrhoarhob/0.2e1_dp+beta_2_1* &
./xc/xc_b97.F:                                                                          rsrhoarhob+0.3e1_dp/0.4e1_dp*t639*t981+0.3e1_dp/0.2e1_dp &
./xc/xc_b97.F:                                                                                *t228*rsrhoarhob+t50*t644*t993+t50*t48*rsrhoarhob* &
./xc/xc_b97.F:                     t1014 = alpha_1_2*rsrhob
./xc/xc_b97.F:                     t1049 = alpha_1_3*rsrhob
./xc/xc_b97.F:                     frhoarhob = (0.4e1_dp/0.9e1_dp*t765*chirhoa*chirhob+ &
./xc/xc_b97.F:                                  0.4e1_dp/0.3e1_dp*t99*chirhoarhob+0.4e1_dp/0.9e1_dp*t772 &
./xc/xc_b97.F:                                  *chirhoa*chirhob-0.4e1_dp/0.3e1_dp*t102*chirhoarhob)* &
./xc/xc_b97.F:                     t1107 = t107*chirhoa*chirhob
./xc/xc_b97.F:                     t1136 = -0.4e1_dp*t105*t290*chirhoarhob+(-0.2e1_dp*t239 &
./xc/xc_b97.F:                                                              *rsrhoarhob*t74+t671*t1012+t1014*t673-0.2e1_dp*t678* &
./xc/xc_b97.F:                                                              t258*t410+t245*(-t683*t981/0.4e1_dp+t246*rsrhoarhob/ &
./xc/xc_b97.F:                                                                              0.2e1_dp+beta_2_2*rsrhoarhob+0.3e1_dp/0.4e1_dp*t689* &
./xc/xc_b97.F:                                                                             t981+0.3e1_dp/0.2e1_dp*t250*rsrhoarhob+t68*t694*t993+ &
./xc/xc_b97.F:                                                                              t68*t66*rsrhoarhob*t232-t68*t66*t993)*t257+t709* &
./xc/xc_b97.F:                                                              t256*t711*t62*t410/0.2e1_dp-e_c_u_0rhoarhob)*f*t108+ &
./xc/xc_b97.F:                             t294*frhob*t108+0.4e1_dp*t295*t443+t438*frhoa*t108+ &
./xc/xc_b97.F:                             t112*frhoarhob*t108+0.4e1_dp*t297*t443+0.4e1_dp*t439 &
./xc/xc_b97.F:                             0.4e1_dp*t113*t289*chirhoarhob
./xc/xc_b97.F:                     u_c_abrhoarhob = -0.2e1_dp*t906*t480+0.2e1_dp*t911*t914 &
./xc/xc_b97.F:                                      *s_avg_2rhob
./xc/xc_b97.F:                        exc_rhoa_rhob = scale_c*(((e_c_u_0rhoarhob+(0.2e1_dp*t260* &
./xc/xc_b97.F:                                                                    rsrhoarhob*t92-t719*t1047-t1049*t721+0.2e1_dp*t726* &
./xc/xc_b97.F:                                                                    t279*t424-t266*(-t731*t981/0.4e1_dp+t267*rsrhoarhob/ &
./xc/xc_b97.F:                                                                          0.2e1_dp+beta_2_3*rsrhoarhob+0.3e1_dp/0.4e1_dp*t737*t981 &
./xc/xc_b97.F:                                                                              +0.3e1_dp/0.2e1_dp*t271*rsrhoarhob+t86*t742*t993+t86 &
./xc/xc_b97.F:                                                                                 *t84*rsrhoarhob*t232-t86*t84*t993)*t278-t757*t277 &
./xc/xc_b97.F:                                                                    *t759*t80*t424/0.2e1_dp)*f*t110+alpha_crhoa*frhob* &
./xc/xc_b97.F:                                                   t110-0.4e1_dp*t285*t435+alpha_crhob*frhoa*t110+alpha_c &
./xc/xc_b97.F:                                                   *frhoarhob*t110-0.4e1_dp*t287*t435-0.4e1_dp*t431* &
./xc/xc_b97.F:                                                   t1136)*rho+epsilon_c_unifrhoa+epsilon_c_unifrhob)*gc_ab+ &
./xc/xc_b97.F:                                                 e_lsda_c_abrhoa*gc_abrhob+e_lsda_c_abrhob*gc_abrhoa+ &
./xc/xc_b97.F:                                                 e_lsda_c_ab*(u_c_abrhoarhob*t170+0.2e1_dp*u_c_abrhoa* &
./xc/xc_b97.F:                                                              u_c_abrhob*c_cab_2+u_c_ab*u_c_abrhoarhob*c_cab_2))
./xc/xc_b97.F:                        e_r_r(ii) = e_r_r(ii)+0.5_dp*exc_rhoa_rhob
./xc/xc_b97.F:                     t1157 = t365*my_rhob
./xc/xc_b97.F:                     s_brhobrhob = 0.28e2_dp/0.9e1_dp*my_norm_drhob/t20/t1157
./xc/xc_b97.F:                     t1161 = s_brhob**2
./xc/xc_b97.F:                     u_x_brhobrhob = 0.2e1_dp*gamma_x*t1161*t29-0.10e2_dp* &
./xc/xc_b97.F:                                     t1165*t376*t1161+0.2e1_dp*t370*t29*s_brhobrhob+ &
./xc/xc_b97.F:                                     s_brhobrhob
./xc/xc_b97.F:                     u_x_b1rhob = u_x_brhob
./xc/xc_b97.F:                     chirhobrhob = 0.2e1_dp*t208+0.2e1_dp*t601
./xc/xc_b97.F:                     rsrhobrhob = rsrhoarhob
./xc/xc_b97.F:                     t1205 = rsrhob**2
./xc/xc_b97.F:                     e_c_u_0rhobrhob = -0.2e1_dp*t216*rsrhobrhob*t56+0.2e1_dp* &
./xc/xc_b97.F:                                                                                t1205/0.4e1_dp+t224*rsrhobrhob/0.2e1_dp+beta_2_1* &
./xc/xc_b97.F:                                                                                rsrhobrhob+0.3e1_dp/0.4e1_dp*t639*t1205+0.3e1_dp/ &
./xc/xc_b97.F:                                                                              0.2e1_dp*t228*rsrhobrhob+t50*t644*t1205*t647+t50*t48 &
./xc/xc_b97.F:                                                                                *rsrhobrhob*t232-t50*t48*t1205*t647)*t236+t661* &
./xc/xc_b97.F:                     e_c_u_01rhob = e_c_u_0rhob
./xc/xc_b97.F:                     alpha_c1rhob = alpha_crhob
./xc/xc_b97.F:                     t1299 = chirhob**2
./xc/xc_b97.F:                     frhobrhob = (0.4e1_dp/0.9e1_dp*t765*t1299+0.4e1_dp/ &
./xc/xc_b97.F:                                  0.3e1_dp*t99*chirhobrhob+0.4e1_dp/0.9e1_dp*t772*t1299- &
./xc/xc_b97.F:                                  0.4e1_dp/0.3e1_dp*t102*chirhobrhob)*t97
./xc/xc_b97.F:                     f1rhob = frhob
./xc/xc_b97.F:                     t1321 = alpha_c1rhob*f
./xc/xc_b97.F:                     t1324 = alpha_c*f1rhob
./xc/xc_b97.F:                     t1341 = e_c_u_1rhob-e_c_u_01rhob
./xc/xc_b97.F:                     t1351 = t112*f1rhob
./xc/xc_b97.F:                     t1360 = -0.4e1_dp*t105*t290*chirhobrhob+(-0.2e1_dp*t239 &
./xc/xc_b97.F:                                                              *rsrhobrhob*t74+0.2e1_dp*t1014*t1012-0.2e1_dp*t678* &
./xc/xc_b97.F:                                                              t1236*t257+t245*(-t683*t1205/0.4e1_dp+t246*rsrhobrhob &
./xc/xc_b97.F:                                                                             /0.2e1_dp+beta_2_2*rsrhobrhob+0.3e1_dp/0.4e1_dp*t689* &
./xc/xc_b97.F:                                                                            t1205+0.3e1_dp/0.2e1_dp*t250*rsrhobrhob+t68*t694*t1205 &
./xc/xc_b97.F:                                                                               *t647+t68*t66*rsrhobrhob*t232-t68*t66*t1205*t647) &
./xc/xc_b97.F:                                                              *t257+t709*t1236*t711*t62/0.2e1_dp-e_c_u_0rhobrhob)*f &
./xc/xc_b97.F:                             *t108+t438*f1rhob*t108+0.4e1_dp*t439*t443+t1341* &
./xc/xc_b97.F:                             frhob*t108+t112*frhobrhob*t108+0.4e1_dp*t441*t443+ &
./xc/xc_b97.F:                             *t107*t1299+0.4e1_dp*t113*t289*chirhobrhob
./xc/xc_b97.F:                     epsilon_c_unif1rhob = e_c_u_01rhob+t1321*t110+t1324*t110- &
./xc/xc_b97.F:                     rs_brhobrhob = -t4/t446/t138*t606/t1368/0.18e2_dp &
./xc/xc_b97.F:                     t1394 = rs_brhob**2
./xc/xc_b97.F:                     epsilon_c_unif_b1rhob = epsilon_c_unif_brhob
./xc/xc_b97.F:                     s_b_2rhobrhob = 0.2e1_dp*t1161+0.2e1_dp*s_b*s_brhobrhob
./xc/xc_b97.F:                     s_b_21rhob = s_b_2rhob
./xc/xc_b97.F:                     s_avg_2rhobrhob = s_b_2rhobrhob/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21rhob = s_b_21rhob/0.2e1_dp
./xc/xc_b97.F:                     e_lsda_c_brhobrhob = (-0.2e1_dp*t239*rs_brhobrhob*t156+ &
./xc/xc_b97.F:                                           0.2e1_dp*alpha_1_2*rs_brhob*t457*t471*t472-0.2e1_dp* &
./xc/xc_b97.F:                                                                           /0.4e1_dp+t460*rs_brhobrhob/0.2e1_dp+beta_2_2* &
./xc/xc_b97.F:                                                                           rs_brhobrhob+0.3e1_dp/0.4e1_dp*beta_3_2*t459*t1394+ &
./xc/xc_b97.F:                                                                           0.3e1_dp/0.2e1_dp*t464*rs_brhobrhob+t150*t694*t1394* &
./xc/xc_b97.F:                                                                           t1407+t150*t66*rs_brhobrhob*t468-t150*t66*t1394* &
./xc/xc_b97.F:                                          my_rhob+epsilon_c_unif_brhob+epsilon_c_unif_b1rhob
./xc/xc_b97.F:                     e_lsda_c_b1rhob = epsilon_c_unif_b1rhob*my_rhob+epsilon_c_unif_b
./xc/xc_b97.F:                     t1436 = t336*s_avg_2rhob
./xc/xc_b97.F:                     t1437 = t339*s_avg_21rhob
./xc/xc_b97.F:                     t1440 = t913*s_avg_2rhob
./xc/xc_b97.F:                     u_c_abrhobrhob = gamma_c_ab*s_avg_2rhobrhob*t162-0.2e1_dp* &
./xc/xc_b97.F:                                      t1436*t1437+0.2e1_dp*t911*t1440*s_avg_21rhob-t337*t339 &
./xc/xc_b97.F:                                      *s_avg_2rhobrhob
./xc/xc_b97.F:                     u_c_ab1rhob = gamma_c_ab*s_avg_21rhob*t162-t337*t1437
./xc/xc_b97.F:                     t1451 = t344*s_b_2rhob
./xc/xc_b97.F:                     t1452 = t486*s_b_21rhob
./xc/xc_b97.F:                     t1458 = t1457*s_b_2rhob
./xc/xc_b97.F:                     u_c_brhobrhob = gamma_c_ss*s_b_2rhobrhob*t168-0.2e1_dp* &
./xc/xc_b97.F:                                     t1451*t1452+0.2e1_dp*t1455*t1458*s_b_21rhob-t484*t486 &
./xc/xc_b97.F:                                     *s_b_2rhobrhob
./xc/xc_b97.F:                     u_c_b1rhob = gamma_c_ss*s_b_21rhob*t168-t484*t1452
./xc/xc_b97.F:                        exc_rhob_rhob = scale_x*(-t4*t6/t1152*gx_b/ &
./xc/xc_b97.F:                                                 0.6e1_dp+e_lsda_x_brhob*(u_x_b1rhob*t31+u_x_b*u_x_b1rhob* &
./xc/xc_b97.F:                                                                         c_x_2)+e_lsda_x_brhob*gx_brhob+e_lsda_x_b*(u_x_brhobrhob* &
./xc/xc_b97.F:                                                                                    t31+0.2e1_dp*u_x_brhob*u_x_b1rhob*c_x_2+u_x_b* &
./xc/xc_b97.F:                                                                       u_x_brhobrhob*c_x_2))+scale_c*(((e_c_u_0rhobrhob+(0.2e1_dp* &
./xc/xc_b97.F:                                                                                t260*rsrhobrhob*t92-0.2e1_dp*t1049*t1047+0.2e1_dp* &
./xc/xc_b97.F:                                                                         rsrhobrhob/0.2e1_dp+beta_2_3*rsrhobrhob+0.3e1_dp/0.4e1_dp &
./xc/xc_b97.F:                                                                                *t737*t1205+0.3e1_dp/0.2e1_dp*t271*rsrhobrhob+t86* &
./xc/xc_b97.F:                                                                                  t742*t1205*t647+t86*t84*rsrhobrhob*t232-t86*t84* &
./xc/xc_b97.F:                                                                                  t110+alpha_crhob*f1rhob*t110-0.4e1_dp*t431*t435+ &
./xc/xc_b97.F:                                                                           alpha_c1rhob*frhob*t110+alpha_c*frhobrhob*t110-0.4e1_dp &
./xc/xc_b97.F:                                                                           0.12e2_dp*t105*t796*t1299+t1360)*rho+epsilon_c_unifrhob &
./xc/xc_b97.F:                                                                                   +epsilon_c_unif1rhob-e_lsda_c_brhobrhob)*gc_ab+ &
./xc/xc_b97.F:                                                                             e_lsda_c_abrhob*(u_c_ab1rhob*t170+u_c_ab*u_c_ab1rhob* &
./xc/xc_b97.F:                                                                                 c_cab_2)+(epsilon_c_unif1rhob*rho+epsilon_c_unif- &
./xc/xc_b97.F:                                                                       e_lsda_c_b1rhob)*gc_abrhob+e_lsda_c_ab*(u_c_abrhobrhob*t170 &
./xc/xc_b97.F:                                                                                  +0.2e1_dp*u_c_abrhob*u_c_ab1rhob*c_cab_2+u_c_ab* &
./xc/xc_b97.F:                                                                                  u_c_abrhobrhob*c_cab_2)+e_lsda_c_brhobrhob*gc_b+ &
./xc/xc_b97.F:                                                                         e_lsda_c_brhob*(u_c_b1rhob*t176+u_c_b*u_c_b1rhob*c_css_2) &
./xc/xc_b97.F:                                                                         +e_lsda_c_b1rhob*gc_brhob+e_lsda_c_b*(u_c_brhobrhob*t176+ &
./xc/xc_b97.F:                                                                         0.2e1_dp*u_c_brhob*u_c_b1rhob*c_css_2+u_c_b*u_c_brhobrhob &
./xc/xc_b97.F:                        e_r_r(ii) = e_r_r(ii)+0.5_dp*0.5_dp*exc_rhob_rhob
./xc/xc_b97.F:                     s_arhoanorm_drhoa = -0.4e1_dp/0.3e1_dp*t188
./xc/xc_b97.F:                     u_x_arhoanorm_drhoa = 0.2e1_dp*gamma_x*s_anorm_drhoa*t192- &
./xc/xc_b97.F:                                           0.10e2_dp*t568*t199*s_anorm_drhoa+0.2e1_dp*t191*t16* &
./xc/xc_b97.F:                                           s_arhoanorm_drhoa+0.8e1_dp*t577*t579*s_arhoa*s_anorm_drhoa &
./xc/xc_b97.F:                                           -0.2e1_dp*t196*t198*s_arhoanorm_drhoa
./xc/xc_b97.F:                     s_a_2rhoanorm_drhoa = 0.2e1_dp*s_anorm_drhoa*s_arhoa+ &
./xc/xc_b97.F:                                           0.2e1_dp*s_a*s_arhoanorm_drhoa
./xc/xc_b97.F:                     s_avg_2rhoanorm_drhoa = s_a_2rhoanorm_drhoa/0.2e1_dp
./xc/xc_b97.F:                     u_c_abrhoanorm_drhoa = gamma_c_ab*s_avg_2rhoanorm_drhoa*t162- &
./xc/xc_b97.F:                                            0.2e1_dp*t906*t512+0.2e1_dp*t911*t914*s_avg_2norm_drhoa &
./xc/xc_b97.F:                                            -t337*t339*s_avg_2rhoanorm_drhoa
./xc/xc_b97.F:                     u_c_arhoanorm_drhoa = gamma_c_ss*s_a_2rhoanorm_drhoa*t165- &
./xc/xc_b97.F:                                           0.2e1_dp*t925*t516+0.2e1_dp*t930*t933*s_a_2norm_drhoa- &
./xc/xc_b97.F:                                           t345*t347*s_a_2rhoanorm_drhoa
./xc/xc_b97.F:                        exc_rhoa_norm_drhoa = scale_x*(e_lsda_x_arhoa*gx_anorm_drhoa+ &
./xc/xc_b97.F:                                                       e_lsda_x_a*(u_x_arhoanorm_drhoa*t18+0.2e1_dp*u_x_arhoa* &
./xc/xc_b97.F:                                                                   u_x_anorm_drhoa*c_x_2+u_x_a*u_x_arhoanorm_drhoa*c_x_2))+ &
./xc/xc_b97.F:                                              scale_c*(e_lsda_c_abrhoa*gc_abnorm_drhoa+e_lsda_c_ab*( &
./xc/xc_b97.F:                                                       u_c_abrhoanorm_drhoa*t170+0.2e1_dp*u_c_abrhoa* &
./xc/xc_b97.F:                                                       u_c_abnorm_drhoa*c_cab_2+u_c_ab*u_c_abrhoanorm_drhoa*c_cab_2 &
./xc/xc_b97.F:                                                       )+e_lsda_c_arhoa*gc_anorm_drhoa+e_lsda_c_a*( &
./xc/xc_b97.F:                                                       u_c_arhoanorm_drhoa*t173+0.2e1_dp*u_c_arhoa*u_c_anorm_drhoa &
./xc/xc_b97.F:                                                       *c_css_2+u_c_a*u_c_arhoanorm_drhoa*c_css_2))
./xc/xc_b97.F:                        e_r_ndr(ii) = e_r_ndr(ii)+0.5_dp*0.5_dp*exc_rhoa_norm_drhoa
./xc/xc_b97.F:                     u_c_abrhobnorm_drhoa = -0.2e1_dp*t1436*t512+0.2e1_dp*t911 &
./xc/xc_b97.F:                                            *t1440*s_avg_2norm_drhoa
./xc/xc_b97.F:                        exc_rhob_norm_drhoa = scale_c*(e_lsda_c_abrhob*gc_abnorm_drhoa &
./xc/xc_b97.F:                                                       +e_lsda_c_ab*(u_c_abrhobnorm_drhoa*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                     u_c_abrhob*u_c_abnorm_drhoa*c_cab_2+u_c_ab* &
./xc/xc_b97.F:                                                                     u_c_abrhobnorm_drhoa*c_cab_2))
./xc/xc_b97.F:                        e_r_ndr(ii) = e_r_ndr(ii)+0.5_dp*0.5_dp*exc_rhob_norm_drhoa
./xc/xc_b97.F:                     t1571 = s_anorm_drhoa**2
./xc/xc_b97.F:                     u_x_anorm_drhoanorm_drhoa = 0.2e1_dp*gamma_x*t1571*t16- &
./xc/xc_b97.F:                     s_a_2norm_drhoanorm_drhoa = 0.2e1_dp*t1571
./xc/xc_b97.F:                     s_a_21norm_drhoa = s_a_2norm_drhoa
./xc/xc_b97.F:                     s_avg_2norm_drhoanorm_drhoa = s_a_2norm_drhoanorm_drhoa/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21norm_drhoa = s_a_21norm_drhoa/0.2e1_dp
./xc/xc_b97.F:                     t1589 = t336*s_avg_2norm_drhoa
./xc/xc_b97.F:                     t1590 = t339*s_avg_21norm_drhoa
./xc/xc_b97.F:                     t1593 = t913*s_avg_2norm_drhoa
./xc/xc_b97.F:                     u_c_abnorm_drhoanorm_drhoa = gamma_c_ab* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhoanorm_drhoa*t162-0.2e1_dp*t1589*t1590+ &
./xc/xc_b97.F:                                                  0.2e1_dp*t911*t1593*s_avg_21norm_drhoa-t337*t339* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhoanorm_drhoa
./xc/xc_b97.F:                     t1605 = t347*s_a_21norm_drhoa
./xc/xc_b97.F:                     u_c_anorm_drhoanorm_drhoa = gamma_c_ss*s_a_2norm_drhoanorm_drhoa &
./xc/xc_b97.F:                                                 *t165-0.2e1_dp*t344*s_a_2norm_drhoa*t1605+0.2e1_dp* &
./xc/xc_b97.F:                                                 t930*t932*s_a_2norm_drhoa*s_a_21norm_drhoa-t345*t347* &
./xc/xc_b97.F:                                                 s_a_2norm_drhoanorm_drhoa
./xc/xc_b97.F:                        exc_norm_drhoa_norm_drhoa = scale_x*e_lsda_x_a*( &
./xc/xc_b97.F:                                                    u_x_anorm_drhoanorm_drhoa*t18+0.2e1_dp*u_x_anorm_drhoa**2* &
./xc/xc_b97.F:                                                    c_x_2+u_x_a*u_x_anorm_drhoanorm_drhoa*c_x_2)+scale_c*( &
./xc/xc_b97.F:                                                    e_lsda_c_ab*(u_c_abnorm_drhoanorm_drhoa*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                 u_c_abnorm_drhoa*(gamma_c_ab*s_avg_21norm_drhoa*t162-t337* &
./xc/xc_b97.F:                                                                        t1590)*c_cab_2+u_c_ab*u_c_abnorm_drhoanorm_drhoa*c_cab_2)+ &
./xc/xc_b97.F:                                                    e_lsda_c_a*(u_c_anorm_drhoanorm_drhoa*t173+0.2e1_dp* &
./xc/xc_b97.F:                                                                u_c_anorm_drhoa*(gamma_c_ss*s_a_21norm_drhoa*t165-t345* &
./xc/xc_b97.F:                                                                            t1605)*c_css_2+u_c_a*u_c_anorm_drhoanorm_drhoa*c_css_2))
./xc/xc_b97.F:                        e_ndr_ndr(ii) = e_ndr_ndr(ii)+0.5_dp*0.5_dp*exc_norm_drhoa_norm_drhoa
./xc/xc_b97.F:                     u_c_abrhoanorm_drhob = -0.2e1_dp*t906*t539+0.2e1_dp*t911* &
./xc/xc_b97.F:                                            t914*s_avg_2norm_drhob
./xc/xc_b97.F:                        exc_rhoa_norm_drhob = scale_c*(e_lsda_c_abrhoa*gc_abnorm_drhob &
./xc/xc_b97.F:                                                       +e_lsda_c_ab*(u_c_abrhoanorm_drhob*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                     u_c_abrhoa*u_c_abnorm_drhob*c_cab_2+u_c_ab* &
./xc/xc_b97.F:                                                                     u_c_abrhoanorm_drhob*c_cab_2))
./xc/xc_b97.F:                        e_r_ndr(ii) = e_r_ndr(ii)+0.5_dp*0.5_dp*exc_rhoa_norm_drhob
./xc/xc_b97.F:                     s_brhobnorm_drhob = -0.4e1_dp/0.3e1_dp*t367
./xc/xc_b97.F:                     u_x_brhobnorm_drhob = 0.2e1_dp*gamma_x*s_bnorm_drhob*t371- &
./xc/xc_b97.F:                                           0.10e2_dp*t1165*t377*s_bnorm_drhob+0.2e1_dp*t370*t29* &
./xc/xc_b97.F:                                           s_brhobnorm_drhob+0.8e1_dp*t1173*t1175*s_brhob* &
./xc/xc_b97.F:                                           s_bnorm_drhob-0.2e1_dp*t374*t376*s_brhobnorm_drhob
./xc/xc_b97.F:                     s_b_2rhobnorm_drhob = 0.2e1_dp*s_bnorm_drhob*s_brhob+ &
./xc/xc_b97.F:                                           0.2e1_dp*s_b*s_brhobnorm_drhob
./xc/xc_b97.F:                     s_avg_2rhobnorm_drhob = s_b_2rhobnorm_drhob/0.2e1_dp
./xc/xc_b97.F:                     u_c_abrhobnorm_drhob = gamma_c_ab*s_avg_2rhobnorm_drhob*t162- &
./xc/xc_b97.F:                                            s_avg_2norm_drhob-t337*t339*s_avg_2rhobnorm_drhob
./xc/xc_b97.F:                     u_c_brhobnorm_drhob = gamma_c_ss*s_b_2rhobnorm_drhob*t168- &
./xc/xc_b97.F:                                           0.2e1_dp*t1451*t543+0.2e1_dp*t1455*t1458*s_b_2norm_drhob &
./xc/xc_b97.F:                                           -t484*t486*s_b_2rhobnorm_drhob
./xc/xc_b97.F:                        exc_rhob_norm_drhob = scale_x*(e_lsda_x_brhob*gx_bnorm_drhob+ &
./xc/xc_b97.F:                                                       e_lsda_x_b*(u_x_brhobnorm_drhob*t31+0.2e1_dp*u_x_brhob* &
./xc/xc_b97.F:                                                                   u_x_bnorm_drhob*c_x_2+u_x_b*u_x_brhobnorm_drhob*c_x_2))+ &
./xc/xc_b97.F:                                              scale_c*(e_lsda_c_abrhob*gc_abnorm_drhob+e_lsda_c_ab*( &
./xc/xc_b97.F:                                                       u_c_abrhobnorm_drhob*t170+0.2e1_dp*u_c_abrhob* &
./xc/xc_b97.F:                                                       u_c_abnorm_drhob*c_cab_2+u_c_ab*u_c_abrhobnorm_drhob*c_cab_2 &
./xc/xc_b97.F:                                                       )+e_lsda_c_brhob*gc_bnorm_drhob+e_lsda_c_b*( &
./xc/xc_b97.F:                                                       u_c_brhobnorm_drhob*t176+0.2e1_dp*u_c_brhob*u_c_bnorm_drhob &
./xc/xc_b97.F:                                                       *c_css_2+u_c_b*u_c_brhobnorm_drhob*c_css_2))
./xc/xc_b97.F:                        e_r_ndr(ii) = e_r_ndr(ii)+0.5_dp*0.5_dp*exc_rhob_norm_drhob
./xc/xc_b97.F:                     u_c_abnorm_drhoanorm_drhob = -0.2e1_dp*t1589*t539+0.2e1_dp* &
./xc/xc_b97.F:                                                  t911*t1593*s_avg_2norm_drhob
./xc/xc_b97.F:                        exc_norm_drhoa_norm_drhob = scale_c*e_lsda_c_ab*( &
./xc/xc_b97.F:                                                    u_c_abnorm_drhoanorm_drhob*t170+0.2e1_dp*u_c_abnorm_drhoa* &
./xc/xc_b97.F:                                                    u_c_abnorm_drhob*c_cab_2+u_c_ab*u_c_abnorm_drhoanorm_drhob* &
./xc/xc_b97.F:                        e_ndr_ndr(ii) = e_ndr_ndr(ii)+0.5_dp*exc_norm_drhoa_norm_drhob
./xc/xc_b97.F:                     t1719 = s_bnorm_drhob**2
./xc/xc_b97.F:                     u_x_bnorm_drhobnorm_drhob = 0.2e1_dp*gamma_x*t1719*t29- &
./xc/xc_b97.F:                     s_b_2norm_drhobnorm_drhob = 0.2e1_dp*t1719
./xc/xc_b97.F:                     s_b_21norm_drhob = s_b_2norm_drhob
./xc/xc_b97.F:                     s_avg_2norm_drhobnorm_drhob = s_b_2norm_drhobnorm_drhob/0.2e1_dp
./xc/xc_b97.F:                     s_avg_21norm_drhob = s_b_21norm_drhob/0.2e1_dp
./xc/xc_b97.F:                     t1738 = t339*s_avg_21norm_drhob
./xc/xc_b97.F:                     u_c_abnorm_drhobnorm_drhob = gamma_c_ab* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhobnorm_drhob*t162-0.2e1_dp*t336* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhob*t1738+0.2e1_dp*t911*t913* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhob*s_avg_21norm_drhob-t337*t339* &
./xc/xc_b97.F:                                                  s_avg_2norm_drhobnorm_drhob
./xc/xc_b97.F:                     t1753 = t486*s_b_21norm_drhob
./xc/xc_b97.F:                     u_c_bnorm_drhobnorm_drhob = gamma_c_ss*s_b_2norm_drhobnorm_drhob &
./xc/xc_b97.F:                                                 *t168-0.2e1_dp*t344*s_b_2norm_drhob*t1753+0.2e1_dp* &
./xc/xc_b97.F:                                                 t1455*t1457*s_b_2norm_drhob*s_b_21norm_drhob-t484*t486* &
./xc/xc_b97.F:                                                 s_b_2norm_drhobnorm_drhob
./xc/xc_b97.F:                        exc_norm_drhob_norm_drhob = scale_x*e_lsda_x_b*( &
./xc/xc_b97.F:                                                    u_x_bnorm_drhobnorm_drhob*t31+0.2e1_dp*u_x_bnorm_drhob**2* &
./xc/xc_b97.F:                                                    c_x_2+u_x_b*u_x_bnorm_drhobnorm_drhob*c_x_2)+scale_c*( &
./xc/xc_b97.F:                                                    e_lsda_c_ab*(u_c_abnorm_drhobnorm_drhob*t170+0.2e1_dp* &
./xc/xc_b97.F:                                                                 u_c_abnorm_drhob*(gamma_c_ab*s_avg_21norm_drhob*t162-t337* &
./xc/xc_b97.F:                                                                        t1738)*c_cab_2+u_c_ab*u_c_abnorm_drhobnorm_drhob*c_cab_2)+ &
./xc/xc_b97.F:                                                    e_lsda_c_b*(u_c_bnorm_drhobnorm_drhob*t176+0.2e1_dp* &
./xc/xc_b97.F:                                                                u_c_bnorm_drhob*(gamma_c_ss*s_b_21norm_drhob*t168-t484* &
./xc/xc_b97.F:                                                                            t1753)*c_css_2+u_c_b*u_c_bnorm_drhobnorm_drhob*c_css_2))
./xc/xc_b97.F:                        e_ndr_ndr(ii) = e_ndr_ndr(ii)+0.5_dp*0.5_dp*exc_norm_drhob_norm_drhob
./xc/xc_b97.F:            END IF ! rho>epsilon_rho
./xc/xc_functionals_utilities.F:   REAL(KIND=dp), SAVE :: eps_rho
./xc/xc_functionals_utilities.F:      eps_rho = cutoff
./xc/xc_functionals_utilities.F:!> \param rho ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_rs_single(rho, rs)
./xc/xc_functionals_utilities.F:!   rs parameter : f*rho**(-1/3)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), INTENT(IN)                          :: rho
./xc/xc_functionals_utilities.F:      IF (rho < eps_rho) THEN
./xc/xc_functionals_utilities.F:         rs = rsfac*rho**(-f13)
./xc/xc_functionals_utilities.F:!> \param rho ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_rs_array(rho, rs)
./xc/xc_functionals_utilities.F:!   rs parameter : f*rho**(-1/3)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), DIMENSION(:), INTENT(IN)            :: rho
./xc/xc_functionals_utilities.F:      IF (SIZE(rs) < SIZE(rho)) THEN
./xc/xc_functionals_utilities.F:!$OMP PARALLEL DO PRIVATE(k) DEFAULT(NONE) SHARED(rs,eps_rho,rho)
./xc/xc_functionals_utilities.F:         IF (rho(k) < eps_rho) THEN
./xc/xc_functionals_utilities.F:            rs(k) = rsfac*rho(k)**(-f13)
./xc/xc_functionals_utilities.F:!> \param rho ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_rs_pw(rho, rs, n)
./xc/xc_functionals_utilities.F:!   rs parameter : f*rho**(-1/3)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho
./xc/xc_functionals_utilities.F:!$OMP PARALLEL DO PRIVATE(k) SHARED(n,rs,rho,eps_rho) DEFAULT(NONE)
./xc/xc_functionals_utilities.F:         IF (rho(k) < eps_rho) THEN
./xc/xc_functionals_utilities.F:            rs(k) = rsfac*rho(k)**(-f13)
./xc/xc_functionals_utilities.F:!> \param rho ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_srs_pw(rho, x, n)
./xc/xc_functionals_utilities.F:!   rs parameter : f*rho**(-1/3)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho
./xc/xc_functionals_utilities.F:      CALL calc_rs_pw(rho, x, n)
./xc/xc_functionals_utilities.F:!> \param rho ...
./xc/xc_functionals_utilities.F:!> \param grho ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_wave_vector(tag, rho, grho, s)
./xc/xc_functionals_utilities.F:!   wave vector s = |nabla rho| / (2(3pi^2)^1/3 * rho^4/3)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho
./xc/xc_functionals_utilities.F:      n = SIZE(s) !FM it was size(rho)
./xc/xc_functionals_utilities.F:      !FM IF ( n > SIZE(grho) ) &
./xc/xc_functionals_utilities.F:!$OMP PARALLEL DO PRIVATE(ip) DEFAULT(NONE) SHARED(rho,eps_rho,s,fac,grho,n)
./xc/xc_functionals_utilities.F:         IF (rho(ip) < eps_rho) THEN
./xc/xc_functionals_utilities.F:            s(ip) = fac*grho(ip)*rho(ip)**(-f43)
./xc/xc_functionals_utilities.F:!> \param rhoa ...
./xc/xc_functionals_utilities.F:!> \param rhob ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_fx_array(n, rhoa, rhob, fx, m)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, rhob
./xc/xc_functionals_utilities.F:      REAL(KIND=dp)                                      :: rhoab, x
./xc/xc_functionals_utilities.F:!$OMP PARALLEL DO PRIVATE(ip,x,rhoab) DEFAULT(NONE) SHARED(fx,m,eps_rho,n)
./xc/xc_functionals_utilities.F:         rhoab = rhoa(ip)+rhob(ip)
./xc/xc_functionals_utilities.F:         IF (rhoab < eps_rho) THEN
./xc/xc_functionals_utilities.F:            x = (rhoa(ip)-rhob(ip))/rhoab
./xc/xc_functionals_utilities.F:!> \param rhoa ...
./xc/xc_functionals_utilities.F:!> \param rhob ...
./xc/xc_functionals_utilities.F:   SUBROUTINE calc_fx_single(rhoa, rhob, fx, m)
./xc/xc_functionals_utilities.F:      REAL(KIND=dp), INTENT(IN)                          :: rhoa, rhob
./xc/xc_functionals_utilities.F:      REAL(KIND=dp)                                      :: rhoab, x
./xc/xc_functionals_utilities.F:      rhoab = rhoa+rhob
./xc/xc_functionals_utilities.F:      IF (rhoab < eps_rho) THEN
./xc/xc_functionals_utilities.F:         x = (rhoa-rhob)/rhoab
./xc/xc_exchange_gga.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_exchange_gga.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_exchange_gga.F:                                              xc_rho_set_type
./xc/xc_exchange_gga.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_exchange_gga.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_exchange_gga.F:            reference = "J.P. Perdew, K. Burke, M Ernzerhof, Phys. Rev. Lett, 77, 3865 (1996)"
./xc/xc_exchange_gga.F:            needs%rho_spin = .TRUE.
./xc/xc_exchange_gga.F:            needs%rho_spin_1_3 = .TRUE.
./xc/xc_exchange_gga.F:            needs%norm_drho_spin = .TRUE.
./xc/xc_exchange_gga.F:            needs%rho = .TRUE.
./xc/xc_exchange_gga.F:            needs%rho_1_3 = .TRUE.
./xc/xc_exchange_gga.F:            needs%norm_drho = .TRUE.
./xc/xc_exchange_gga.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_exchange_gga.F:   SUBROUTINE xgga_eval(functional, lsd, rho_set, deriv_set, order)
./xc/xc_exchange_gga.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_exchange_gga.F:      CHARACTER(len=12), DIMENSION(2)                    :: norm_drho_spin_name
./xc/xc_exchange_gga.F:      CHARACTER(len=6), DIMENSION(2)                     :: rho_spin_name
./xc/xc_exchange_gga.F:      REAL(KIND=dp)                                      :: drho_cutoff, rho_cutoff
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_exchange_gga.F:         e_ndrho_ndrho_ndrho, e_rho, e_rho_ndrho, e_rho_ndrho_ndrho, e_rho_rho, e_rho_rho_ndrho, &
./xc/xc_exchange_gga.F:         e_rho_rho_rho
./xc/xc_exchange_gga.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: norm_drho, rho, rho_1_3
./xc/xc_exchange_gga.F:      NULLIFY (bo, e_0, e_ndrho, e_ndrho_ndrho, e_ndrho_ndrho_ndrho, e_rho_ndrho_ndrho, &
./xc/xc_exchange_gga.F:               e_rho_ndrho, e_rho_rho_ndrho, e_rho, e_rho_rho, e_rho_rho_rho)
./xc/xc_exchange_gga.F:         NULLIFY (norm_drho(ispin)%array, rho(ispin)%array, rho_1_3(ispin)%array)
./xc/xc_exchange_gga.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_exchange_gga.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_exchange_gga.F:         CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_exchange_gga.F:                             rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_exchange_gga.F:                             rhob=rho(2)%array, norm_drhoa=norm_drho(1)%array, &
./xc/xc_exchange_gga.F:                             norm_drhob=norm_drho(2)%array, rho_cutoff=rho_cutoff, &
./xc/xc_exchange_gga.F:                             drho_cutoff=drho_cutoff, local_bounds=bo)
./xc/xc_exchange_gga.F:         rho_spin_name = (/"(rhoa)", "(rhob)"/)
./xc/xc_exchange_gga.F:         norm_drho_spin_name = (/"(norm_drhoa)", "(norm_drhob)"/)
./xc/xc_exchange_gga.F:         CALL xc_rho_set_get(rho_set, rho=rho(1)%array, rho_1_3=rho_1_3(1)%array, &
./xc/xc_exchange_gga.F:                             norm_drho=norm_drho(1)%array, local_bounds=bo, rho_cutoff=rho_cutoff, &
./xc/xc_exchange_gga.F:                             drho_cutoff=drho_cutoff)
./xc/xc_exchange_gga.F:         rho_spin_name = (/"(rho) ", "(---) "/)
./xc/xc_exchange_gga.F:         norm_drho_spin_name = (/"(norm_drho) ", "(----_----) "/)
./xc/xc_exchange_gga.F:      CALL xgga_init(rho_cutoff)
./xc/xc_exchange_gga.F:            CALL calc_wave_vector("p", rho(ispin)%array, norm_drho(ispin)%array, s)
./xc/xc_exchange_gga.F:            CALL calc_wave_vector("u", rho(ispin)%array, &
./xc/xc_exchange_gga.F:                                  norm_drho(ispin)%array, s)
./xc/xc_exchange_gga.F:            CALL x_p_0(rho(ispin)%array, rho_1_3(ispin)%array, fs, e_0, &
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin), &
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin), &
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_exchange_gga.F:            CALL x_p_1(rho(ispin)%array, &
./xc/xc_exchange_gga.F:                       rho_1_3(ispin)%array, s, fs, e_rho, e_ndrho, npoints)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            rho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            norm_drho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            norm_drho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_exchange_gga.F:            CALL x_p_2(rho(ispin)%array, &
./xc/xc_exchange_gga.F:                       rho_1_3(ispin)%array, s, fs, e_rho_rho, e_rho_ndrho, &
./xc/xc_exchange_gga.F:                       e_ndrho_ndrho, npoints)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            rho_spin_name(ispin)//rho_spin_name(ispin), &
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            rho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            norm_drho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_exchange_gga.F:            deriv => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin)// &
./xc/xc_exchange_gga.F:                                            norm_drho_spin_name(ispin)//norm_drho_spin_name(ispin), &
./xc/xc_exchange_gga.F:            CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_exchange_gga.F:            CALL x_p_3(rho(ispin)%array, &
./xc/xc_exchange_gga.F:                       rho_1_3(ispin)%array, s, fs, e_rho_rho_rho, &
./xc/xc_exchange_gga.F:                       e_rho_rho_ndrho, e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, &
./xc/xc_exchange_gga.F:      eps_rho = cutoff
./xc/xc_exchange_gga.F:!> \param rho ...
./xc/xc_exchange_gga.F:   SUBROUTINE x_p_0(rho, r13, fs, e_0, npoints)
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_exchange_gga.F:!$OMP                 SHARED (npoints, rho, eps_rho, fact, r13, fs, e_0) &
./xc/xc_exchange_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_exchange_gga.F:            e_0(ip) = e_0(ip)+fact*r13(ip)*rho(ip)*fs(ip, 1)
./xc/xc_exchange_gga.F:!> \param rho ...
./xc/xc_exchange_gga.F:!> \param e_rho ...
./xc/xc_exchange_gga.F:!> \param e_ndrho ...
./xc/xc_exchange_gga.F:   SUBROUTINE x_p_1(rho, r13, s, fs, e_rho, e_ndrho, npoints)
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho, e_ndrho
./xc/xc_exchange_gga.F:!$OMP                 SHARED(npoints, rho, eps_rho, fact, r13, tact, fs) &
./xc/xc_exchange_gga.F:!$OMP                 SHARED(e_rho, e_ndrho, sfac, s) &
./xc/xc_exchange_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_exchange_gga.F:            a0 = fact*r13(ip)*rho(ip)
./xc/xc_exchange_gga.F:            sx = -f43*s(ip)/rho(ip)
./xc/xc_exchange_gga.F:            sy = sfac*tact/(r13(ip)*rho(ip))
./xc/xc_exchange_gga.F:            e_rho(ip) = e_rho(ip)+a1*fs(ip, 1)+a0*fs(ip, 2)*sx
./xc/xc_exchange_gga.F:            e_ndrho(ip) = e_ndrho(ip)+a0*fs(ip, 2)*sy
./xc/xc_exchange_gga.F:!> \param rho ...
./xc/xc_exchange_gga.F:!> \param e_rho_rho ...
./xc/xc_exchange_gga.F:!> \param e_rho_ndrho ...
./xc/xc_exchange_gga.F:!> \param e_ndrho_ndrho ...
./xc/xc_exchange_gga.F:   SUBROUTINE x_p_2(rho, r13, s, fs, e_rho_rho, e_rho_ndrho, &
./xc/xc_exchange_gga.F:                    e_ndrho_ndrho, npoints)
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho, e_rho_ndrho, e_ndrho_ndrho
./xc/xc_exchange_gga.F:!$OMP                 SHARED(npoints, rho, eps_rho, r13, fact, e_rho_rho) &
./xc/xc_exchange_gga.F:!$OMP                 SHARED(e_rho_ndrho, e_ndrho_ndrho, fs, sfac, tact, s) &
./xc/xc_exchange_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_exchange_gga.F:            a0 = fact*r13(ip)*rho(ip)
./xc/xc_exchange_gga.F:            sx = -f43*s(ip)/rho(ip)
./xc/xc_exchange_gga.F:            sy = sfac*tact/(r13(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sxx = 28.0_dp/9.0_dp*s(ip)/(rho(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sxy = -f43*sfac*tact/(r13(ip)*rho(ip)*rho(ip))
./xc/xc_exchange_gga.F:            e_rho_rho(ip) = e_rho_rho(ip)+a2*fs(ip, 1)+2.0_dp*a1*fs(ip, 2)*sx+ &
./xc/xc_exchange_gga.F:            e_rho_ndrho(ip) = e_rho_ndrho(ip) &
./xc/xc_exchange_gga.F:            e_ndrho_ndrho(ip) = e_ndrho_ndrho(ip)+a0*fs(ip, 3)*sy*sy
./xc/xc_exchange_gga.F:!> \param rho ...
./xc/xc_exchange_gga.F:!> \param e_rho_rho_rho ...
./xc/xc_exchange_gga.F:!> \param e_rho_rho_ndrho ...
./xc/xc_exchange_gga.F:!> \param e_rho_ndrho_ndrho ...
./xc/xc_exchange_gga.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_exchange_gga.F:   SUBROUTINE x_p_3(rho, r13, s, fs, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_exchange_gga.F:                    e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, npoints)
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13, s
./xc/xc_exchange_gga.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_exchange_gga.F:                                                            e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho
./xc/xc_exchange_gga.F:!$OMP                 SHARED(npoints, rho, eps_rho, r13, fact, fs) &
./xc/xc_exchange_gga.F:!$OMP                 SHARED(e_rho_rho_rho, e_rho_rho_ndrho) &
./xc/xc_exchange_gga.F:!$OMP                 SHARED(e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho) &
./xc/xc_exchange_gga.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_exchange_gga.F:            a0 = fact*r13(ip)*rho(ip)
./xc/xc_exchange_gga.F:            a3 = -f23*f13*f43*fact/(r13(ip)*r13(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sx = -f43*s(ip)/rho(ip)
./xc/xc_exchange_gga.F:            sy = sfac*tact/(r13(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sxx = 28.0_dp/9.0_dp*s(ip)/(rho(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sxy = -f43*sfac*tact/(r13(ip)*rho(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sxxx = -280.0_dp/27.0_dp*s(ip)/(rho(ip)*rho(ip)*rho(ip))
./xc/xc_exchange_gga.F:            sxxy = 28.0_dp/9.0_dp*sfac*tact/(r13(ip)*rho(ip)*rho(ip)*rho(ip))
./xc/xc_exchange_gga.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip) &
./xc/xc_exchange_gga.F:            e_rho_rho_ndrho(ip) = e_rho_rho_ndrho(ip) &
./xc/xc_exchange_gga.F:            e_rho_ndrho_ndrho(ip) = e_rho_ndrho_ndrho(ip) &
./xc/xc_exchange_gga.F:            e_ndrho_ndrho_ndrho(ip) = e_ndrho_ndrho_ndrho(ip) &
./xc/xc_lyp_adiabatic.F:!>        Ec = 2*lambda*Ec(rho/lambda) + lambda^2*d/dlambda(Ec(rho/lambda)),
./xc/xc_lyp_adiabatic.F:!>      where rho/lambda is the scaled density
./xc/xc_lyp_adiabatic.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_lyp_adiabatic.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_lyp_adiabatic.F:                                              xc_rho_set_type
./xc/xc_lyp_adiabatic.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_lyp_adiabatic.F:         needs%rho = .TRUE.
./xc/xc_lyp_adiabatic.F:         needs%rho_1_3 = .TRUE.
./xc/xc_lyp_adiabatic.F:         needs%norm_drho = .TRUE.
./xc/xc_lyp_adiabatic.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_lyp_adiabatic.F:         needs%rho_spin = .TRUE.
./xc/xc_lyp_adiabatic.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_lyp_adiabatic.F:         needs%norm_drho = .TRUE.
./xc/xc_lyp_adiabatic.F:!> \param rho_set ...
./xc/xc_lyp_adiabatic.F:   SUBROUTINE lyp_adiabatic_lda_eval(rho_set, deriv_set, grad_deriv, lyp_adiabatic_params)
./xc/xc_lyp_adiabatic.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp)                                      :: epsilon_norm_drho, epsilon_rho, lambda
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_ndrho, e_rho, norm_drho, &
./xc/xc_lyp_adiabatic.F:                                                            rho, rho_1_3
./xc/xc_lyp_adiabatic.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_lyp_adiabatic.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_lyp_adiabatic.F:      CALL xc_rho_set_get(rho_set, rho_1_3=rho_1_3, rho=rho, &
./xc/xc_lyp_adiabatic.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_lyp_adiabatic.F:                          drho_cutoff=epsilon_norm_drho)
./xc/xc_lyp_adiabatic.F:      dummy => rho
./xc/xc_lyp_adiabatic.F:      e_rho => dummy
./xc/xc_lyp_adiabatic.F:      e_ndrho => dummy
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_lyp_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_lyp_adiabatic.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_lyp_adiabatic.F:!$OMP              SHARED(rho, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_lyp_adiabatic.F:!$OMP              SHARED(epsilon_rho, lambda)
./xc/xc_lyp_adiabatic.F:      CALL lyp_adiabatic_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_lyp_adiabatic.F:                                  e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, &
./xc/xc_lyp_adiabatic.F:                                  npoints=npoints, epsilon_rho=epsilon_rho, lambda=lambda)
./xc/xc_lyp_adiabatic.F:!> \param rho ...
./xc/xc_lyp_adiabatic.F:!> \param norm_drho ...
./xc/xc_lyp_adiabatic.F:!> \param e_rho ...
./xc/xc_lyp_adiabatic.F:!> \param e_ndrho ...
./xc/xc_lyp_adiabatic.F:!> \param epsilon_rho ...
./xc/xc_lyp_adiabatic.F:   SUBROUTINE lyp_adiabatic_lda_calc(rho, norm_drho, &
./xc/xc_lyp_adiabatic.F:                                     e_0, e_rho, e_ndrho, &
./xc/xc_lyp_adiabatic.F:                                     grad_deriv, npoints, epsilon_rho, lambda)
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho, e_rho, e_0
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, lambda
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp) :: cf, my_ndrho, my_rho, t10, t107, t11, t117, t12, t122, t125, t13, t14, t15, &
./xc/xc_lyp_adiabatic.F:         my_rho = rho(ii)
./xc/xc_lyp_adiabatic.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_lyp_adiabatic.F:               my_ndrho = norm_drho(ii)
./xc/xc_lyp_adiabatic.F:               t3 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_lyp_adiabatic.F:               t10 = t9*my_rho
./xc/xc_lyp_adiabatic.F:               t15 = my_ndrho**2
./xc/xc_lyp_adiabatic.F:               t16 = my_rho**2
./xc/xc_lyp_adiabatic.F:               t50 = 0.1e1_dp/t17/my_rho
./xc/xc_lyp_adiabatic.F:               e_0(ii) = e_0(ii)+0.20e1_dp*lambda*(-a*my_rho*t7-t10*t29)+t34*(a*t17 &
./xc/xc_lyp_adiabatic.F:               t87 = t16*my_rho
./xc/xc_lyp_adiabatic.F:               t94 = 0.1e1_dp/t3/my_rho
./xc/xc_lyp_adiabatic.F:               e_rho(ii) = e_rho(ii)+0.20e1_dp*lambda*(-a*t7-t71*t38*lambda/0.3e1_dp-t9* &
./xc/xc_lyp_adiabatic.F:               t195 = t14*my_ndrho*t25
./xc/xc_lyp_adiabatic.F:               e_ndrho(ii) = e_ndrho(ii)+0.55555555555555555556e-1_dp*lambda*a*b*t50*t195+t34 &
./xc/xc_lyp_adiabatic.F:                               *t180*t13*t37*my_ndrho*t25*d+0.27777777777777777778e-1_dp* &
./xc/xc_lyp_adiabatic.F:                               t51*t14*my_ndrho*t63)
./xc/xc_lyp_adiabatic.F:!> \param rho_set ...
./xc/xc_lyp_adiabatic.F:   SUBROUTINE lyp_adiabatic_lsd_eval(rho_set, deriv_set, grad_deriv, lyp_adiabatic_params)
./xc/xc_lyp_adiabatic.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp)                                      :: epsilon_rho, lambda
./xc/xc_lyp_adiabatic.F:         e_ndrb_rb, e_ra, e_ra_ra, e_ra_rb, e_rb, e_rb_rb, norm_drho, norm_drhoa, norm_drhob, &
./xc/xc_lyp_adiabatic.F:         rhoa, rhob
./xc/xc_lyp_adiabatic.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_lyp_adiabatic.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_lyp_adiabatic.F:      CALL xc_rho_set_get(rho_set, &
./xc/xc_lyp_adiabatic.F:                          rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_lyp_adiabatic.F:                          norm_drhob=norm_drhob, norm_drho=norm_drho, &
./xc/xc_lyp_adiabatic.F:                          rho_cutoff=epsilon_rho, &
./xc/xc_lyp_adiabatic.F:      dummy => rhoa
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_lyp_adiabatic.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_lyp_adiabatic.F:!$OMP              SHARED(rhoa, rhob, norm_drho, norm_drhoa, norm_drhob) &
./xc/xc_lyp_adiabatic.F:!$OMP              SHARED(epsilon_rho, lambda)
./xc/xc_lyp_adiabatic.F:         rhoa=rhoa, rhob=rhob, norm_drho=norm_drho, norm_drhoa=norm_drhoa, &
./xc/xc_lyp_adiabatic.F:         norm_drhob=norm_drhob, e_0=e_0, e_ra=e_ra, e_rb=e_rb, &
./xc/xc_lyp_adiabatic.F:         epsilon_rho=epsilon_rho, lambda=lambda)
./xc/xc_lyp_adiabatic.F:!> \param rhoa ...
./xc/xc_lyp_adiabatic.F:!> \param rhob ...
./xc/xc_lyp_adiabatic.F:!> \param norm_drho ...
./xc/xc_lyp_adiabatic.F:!> \param norm_drhoa ...
./xc/xc_lyp_adiabatic.F:!> \param norm_drhob ...
./xc/xc_lyp_adiabatic.F:!> \param epsilon_rho ...
./xc/xc_lyp_adiabatic.F:   SUBROUTINE lyp_adiabatic_lsd_calc(rhoa, rhob, norm_drho, norm_drhoa, norm_drhob, &
./xc/xc_lyp_adiabatic.F:                                     grad_deriv, npoints, epsilon_rho, lambda)
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rhoa, rhob, norm_drho, norm_drhoa, &
./xc/xc_lyp_adiabatic.F:                                                            norm_drhob
./xc/xc_lyp_adiabatic.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, lambda
./xc/xc_lyp_adiabatic.F:      REAL(KIND=dp) :: cf, my_ndrho, my_ndrhoa, my_ndrhob, my_rhoa, my_rhob, t1, t10, t100, t102, &
./xc/xc_lyp_adiabatic.F:         my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_lyp_adiabatic.F:         my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_lyp_adiabatic.F:         IF (my_rhoa+my_rhob > epsilon_rho) THEN
./xc/xc_lyp_adiabatic.F:            my_ndrhoa = norm_drhoa(ii)
./xc/xc_lyp_adiabatic.F:            my_ndrhob = norm_drhob(ii)
./xc/xc_lyp_adiabatic.F:            my_ndrho = norm_drho(ii)
./xc/xc_lyp_adiabatic.F:               t1 = a*my_rhoa
./xc/xc_lyp_adiabatic.F:               t2 = my_rhoa+my_rhob
./xc/xc_lyp_adiabatic.F:               t4 = my_rhob*t3
./xc/xc_lyp_adiabatic.F:               t25 = my_rhoa*my_rhob
./xc/xc_lyp_adiabatic.F:               t26 = my_rhoa**2
./xc/xc_lyp_adiabatic.F:               t27 = my_rhoa**(0.1e1_dp/0.3e1_dp)
./xc/xc_lyp_adiabatic.F:               t30 = my_rhob**2
./xc/xc_lyp_adiabatic.F:               t31 = my_rhob**(0.1e1_dp/0.3e1_dp)
./xc/xc_lyp_adiabatic.F:               t42 = my_ndrho**2
./xc/xc_lyp_adiabatic.F:               t47 = my_ndrhoa**2
./xc/xc_lyp_adiabatic.F:               t48 = my_ndrhob**2
./xc/xc_lyp_adiabatic.F:               t55 = my_rhoa*t3*t47+t4*t48
./xc/xc_lyp_adiabatic.F:               t74 = t1*my_rhob
./xc/xc_lyp_adiabatic.F:               t96 = t23*my_rhoa
./xc/xc_lyp_adiabatic.F:               t119 = my_rhob*t118
./xc/xc_lyp_adiabatic.F:               t124 = a*my_rhob
./xc/xc_lyp_adiabatic.F:               t129 = my_rhob*t128
./xc/xc_lyp_adiabatic.F:               t186 = my_rhoa*t128*t47
./xc/xc_lyp_adiabatic.F:               t196 = 0.13333333333333333333e1_dp*my_rhob
./xc/xc_lyp_adiabatic.F:               t199 = 0.13333333333333333333e1_dp*my_rhoa
./xc/xc_lyp_adiabatic.F:               t202 = my_rhob*t58+t25*(0.33864555775321588795e2_dp*Cf*t28*my_rhoa &
./xc/xc_lyp_adiabatic.F:                                                                                         *my_rhoa+t196)*t48+t200*t47
./xc/xc_lyp_adiabatic.F:               t270 = 0.11e2_dp/0.3e1_dp*t95*t153*my_rhoa*t119
./xc/xc_lyp_adiabatic.F:                      t266+t270-t18*t24*t119-t95*t96*my_rhob*(t288-t294- &
./xc/xc_lyp_adiabatic.F:               t325 = my_rhoa*t58+t25*(0.33864555775321588795e2_dp*Cf*t32*my_rhob &
./xc/xc_lyp_adiabatic.F:                      *t48+(t199-0.6666666667e0_dp*my_rhob)*t47
./xc/xc_lyp_adiabatic.F:                      +t270-t18*t24*my_rhoa*t118-t95*t96*my_rhob*(t288-t294 &
./xc/xc_lyp_adiabatic.F:               t355 = t3*my_ndrhoa
./xc/xc_lyp_adiabatic.F:               t362 = t25*(-REAL(2*t46*my_ndrhoa, dp)-0.2222222222e0_dp*t51*my_rhoa &
./xc/xc_lyp_adiabatic.F:                           *t355)+REAL(2*t65*my_ndrhoa, dp)
./xc/xc_lyp_adiabatic.F:                                                                        t362+t18*t90*t362*d-t95*t96*my_rhob*(-REAL(2*t113* &
./xc/xc_lyp_adiabatic.F:                                                                                my_ndrhoa, dp)-0.2222222222e0_dp*t115*my_rhoa*t355))
./xc/xc_lyp_adiabatic.F:               t387 = t3*my_ndrhob
./xc/xc_lyp_adiabatic.F:               t394 = t25*(-REAL(2*t46*my_ndrhob, dp)-0.2222222222e0_dp*t51*my_rhob &
./xc/xc_lyp_adiabatic.F:                           *t387)+REAL(2*t63*my_ndrhob, dp)
./xc/xc_lyp_adiabatic.F:                                                                        t394+t18*t90*t394*d-t95*t96*my_rhob*(-REAL(2*t113* &
./xc/xc_lyp_adiabatic.F:                                                                                my_ndrhob, dp)-0.2222222222e0_dp*t115*my_rhob*t387))
./xc/xc_lyp_adiabatic.F:               t421 = REAL(2*t25*t41*my_ndrho, dp)-0.1333333333e1_dp*REAL(t19, dp)*REAL(my_ndrho, dp)
./xc/xc_lyp_adiabatic.F:                                                                      +t18*t90*t421*d-REAL(2*t95*t96*my_rhob*t108*my_ndrho, dp))
./xc/xc_pade.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_pade.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_type
./xc/xc_pade.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_pade.F:      eps_rho = cutoff
./xc/xc_pade.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_pade.F:            needs%rho_spin = .TRUE.
./xc/xc_pade.F:            needs%rho = .TRUE.
./xc/xc_pade.F:!> \param rho_set ...
./xc/xc_pade.F:   SUBROUTINE pade_lda_pw_eval(deriv_set, rho_set, order)
./xc/xc_pade.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_pade.F:      n = PRODUCT(rho_set%local_bounds(2, :)-rho_set%local_bounds(1, :)+(/1, 1, 1/))
./xc/xc_pade.F:      CALL calc_rs_pw(rho_set%rho, rs, n)
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_pade.F:         CALL pade_lda_01(n, rho_set%rho, rs, e_0, e_r)
./xc/xc_pade.F:         CALL pade_lda_0(n, rho_set%rho, rs, e_0)
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_pade.F:         CALL pade_lda_1(n, rho_set%rho, rs, e_r)
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_pade.F:         CALL pade_lda_2(n, rho_set%rho, rs, e_rr)
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_pade.F:         CALL pade_lda_3(n, rho_set%rho, rs, e_rrr)
./xc/xc_pade.F:!> \param rho_set ...
./xc/xc_pade.F:   SUBROUTINE pade_lsd_pw_eval(deriv_set, rho_set, order)
./xc/xc_pade.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_pade.F:      REAL(KIND=dp)                                      :: rhoa, rhob, rs
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhob)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)(rhob)", &
./xc/xc_pade.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_pade.F:!$OMP PARALLEL DO PRIVATE(i,j,k,fx,rhoa,rhob,rs) DEFAULT(NONE)&
./xc/xc_pade.F:!$OMP SHARED(rho_set,order,e_0,e_ra,e_rb,calc,e_rara,e_rarb,e_rbrb,e_rarara,e_rararb,e_rarbrb,e_rbrbrb)
./xc/xc_pade.F:      DO i = rho_set%local_bounds(1, 1), rho_set%local_bounds(2, 1)
./xc/xc_pade.F:         DO j = rho_set%local_bounds(1, 2), rho_set%local_bounds(2, 2)
./xc/xc_pade.F:            DO k = rho_set%local_bounds(1, 3), rho_set%local_bounds(2, 3)
./xc/xc_pade.F:               rhoa = rho_set%rhoa(i, j, k)
./xc/xc_pade.F:               rhob = rho_set%rhob(i, j, k)
./xc/xc_pade.F:               fx(1) = rhoa+rhob
./xc/xc_pade.F:               CALL calc_fx(rhoa, rhob, fx, ABS(order))
./xc/xc_pade.F:                  CALL pade_lsd_01(rhoa, rhob, rs, fx, &
./xc/xc_pade.F:                  CALL pade_lsd_0(rhoa, rhob, rs, fx, e_0(i, j, k))
./xc/xc_pade.F:                  CALL pade_lsd_1(rhoa, rhob, rs, fx, &
./xc/xc_pade.F:                  CALL pade_lsd_2(rhoa, rhob, rs, fx, &
./xc/xc_pade.F:                  CALL pade_lsd_3(rhoa, rhob, rs, fx, &
./xc/xc_pade.F:!> \param rho ...
./xc/xc_pade.F:   SUBROUTINE pade_lda_0(n, rho, rs, pot)
./xc/xc_pade.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, rs
./xc/xc_pade.F:!$OMP SHARED(n,rho,eps_rho,pot,rs)
./xc/xc_pade.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_pade.F:            pot(ip) = pot(ip)+epade*rho(ip)
./xc/xc_pade.F:!> \param rho ...
./xc/xc_pade.F:   SUBROUTINE pade_lda_1(n, rho, rs, pot)
./xc/xc_pade.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, rs
./xc/xc_pade.F:!$OMP SHARED(n,rho,eps_rho,rs,pot)
./xc/xc_pade.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_pade.F:!> \param rho ...
./xc/xc_pade.F:   SUBROUTINE pade_lda_01(n, rho, rs, pot0, pot1)
./xc/xc_pade.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, rs
./xc/xc_pade.F:!$OMP SHARED(n,rho,eps_rho,pot0,pot1)
./xc/xc_pade.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_pade.F:            pot0(ip) = pot0(ip)+epade*rho(ip)
./xc/xc_pade.F:!> \param rho ...
./xc/xc_pade.F:   SUBROUTINE pade_lda_2(n, rho, rs, pot)
./xc/xc_pade.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, rs
./xc/xc_pade.F:!$OMP SHARED(n,rho,eps_rho,rs)
./xc/xc_pade.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_pade.F:            rsr = rs(ip)/rho(ip)
./xc/xc_pade.F:!> \param rho ...
./xc/xc_pade.F:   SUBROUTINE pade_lda_3(n, rho, rs, pot)
./xc/xc_pade.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, rs
./xc/xc_pade.F:!$OMP SHARED(n,rho,eps_rho,rs,pot)
./xc/xc_pade.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_pade.F:            rsr1 = rs(ip)/(rho(ip)*rho(ip))
./xc/xc_pade.F:!> \param rhoa ...
./xc/xc_pade.F:!> \param rhob ...
./xc/xc_pade.F:   SUBROUTINE pade_lsd_0(rhoa, rhob, rs, fx, pot0)
./xc/xc_pade.F:      REAL(KIND=dp), INTENT(IN)                          :: rhoa, rhob, rs
./xc/xc_pade.F:                                                            p, q, rhoab
./xc/xc_pade.F:      rhoab = rhoa+rhob
./xc/xc_pade.F:      IF (rhoab > eps_rho) THEN
./xc/xc_pade.F:         pot0 = pot0-p/q*rhoab
./xc/xc_pade.F:!> \param rhoa ...
./xc/xc_pade.F:!> \param rhob ...
./xc/xc_pade.F:   SUBROUTINE pade_lsd_1(rhoa, rhob, rs, fx, pota, potb)
./xc/xc_pade.F:      REAL(KIND=dp), INTENT(IN)                          :: rhoa, rhob, rs
./xc/xc_pade.F:                                                            fb1, fb2, fb3, fb4, p, q, rhoab, xp, xq
./xc/xc_pade.F:      rhoab = rhoa+rhob
./xc/xc_pade.F:      IF (rhoab > eps_rho) THEN
./xc/xc_pade.F:         dx = 2.0_dp*(xp*q-p*xq)/(q*q)*fx(2)/rhoab
./xc/xc_pade.F:         pota = pota+dc-dx*rhob
./xc/xc_pade.F:         potb = potb+dc+dx*rhoa
./xc/xc_pade.F:!> \param rhoa ...
./xc/xc_pade.F:!> \param rhob ...
./xc/xc_pade.F:   SUBROUTINE pade_lsd_01(rhoa, rhob, rs, fx, pot0, pota, potb)
./xc/xc_pade.F:      REAL(KIND=dp), INTENT(IN)                          :: rhoa, rhob, rs
./xc/xc_pade.F:                                                            fb1, fb2, fb3, fb4, p, q, rhoab, xp, xq
./xc/xc_pade.F:      rhoab = rhoa+rhob
./xc/xc_pade.F:      IF (rhoab > eps_rho) THEN
./xc/xc_pade.F:         dx = 2.0_dp*(xp*q-p*xq)/(q*q)*fx(2)/rhoab
./xc/xc_pade.F:         pot0 = pot0-p/q*rhoab
./xc/xc_pade.F:         pota = pota+dc-dx*rhob
./xc/xc_pade.F:         potb = potb+dc+dx*rhoa
./xc/xc_pade.F:!> \param rhoa ...
./xc/xc_pade.F:!> \param rhob ...
./xc/xc_pade.F:   SUBROUTINE pade_lsd_2(rhoa, rhob, rs, fx, potaa, potab, potbb)
./xc/xc_pade.F:      REAL(KIND=dp), INTENT(IN)                          :: rhoa, rhob, rs
./xc/xc_pade.F:                                                            fb1, fb2, fb3, fb4, or, p, q, rhoab, &
./xc/xc_pade.F:      rhoab = rhoa+rhob
./xc/xc_pade.F:      IF (rhoab > eps_rho) THEN
./xc/xc_pade.F:         or = 1.0_dp/rhoab
./xc/xc_pade.F:         yt = rhob*or
./xc/xc_pade.F:         xt = rhoa*or
./xc/xc_pade.F:!> \param rhoa ...
./xc/xc_pade.F:!> \param rhob ...
./xc/xc_pade.F:   SUBROUTINE pade_lsd_3(rhoa, rhob, rs, fx, potaaa, potaab, potabb, potbbb)
./xc/xc_pade.F:      REAL(KIND=dp), INTENT(IN)                          :: rhoa, rhob, rs
./xc/xc_pade.F:         dxrr, dxx, dxxr, dxxx, fa0, fa1, fa2, fa3, fb1, fb2, fb3, fb4, or, p, q, rhoab, xp, xq, &
./xc/xc_pade.F:      rhoab = rhoa+rhob
./xc/xc_pade.F:      IF (rhoab > eps_rho) THEN
./xc/xc_pade.F:         or = 1.0_dp/rhoab
./xc/xc_pade.F:         yt = rhob*or
./xc/xc_pade.F:         xt = rhoa*or
./xc/xc_rho_cflags_types.F:MODULE xc_rho_cflags_types
./xc/xc_rho_cflags_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'xc_rho_cflags_types'
./xc/xc_rho_cflags_types.F:   PUBLIC :: xc_rho_cflags_type
./xc/xc_rho_cflags_types.F:   PUBLIC :: xc_rho_cflags_setall, &
./xc/xc_rho_cflags_types.F:             xc_rho_cflags_equal
./xc/xc_rho_cflags_types.F:!> \brief contains a flag for each component of xc_rho_set, so that you can
./xc/xc_rho_cflags_types.F:!> \param rho flags for rho (the total density)
./xc/xc_rho_cflags_types.F:!> \param rho_spin flag for rhoa and rhob (the spin density with LSD)
./xc/xc_rho_cflags_types.F:!> \param drho flag for drho (the gradient of rho)
./xc/xc_rho_cflags_types.F:!> \param drho_spin flag for drhoa and drhob (the gradient of the spin
./xc/xc_rho_cflags_types.F:!> \param norm_drho flag for norm_drho (the norm of the gradient of rho)
./xc/xc_rho_cflags_types.F:!> \param norm_drho_spin flag for norm_drhoa, norm_drhob (the norm of the
./xc/xc_rho_cflags_types.F:!> \param drhoa_drhob flag for drhoa_drhob (the scalar product of the
./xc/xc_rho_cflags_types.F:!> \param rho_ 1_3: flag for rho**(1.0_dp/3.0_dp)
./xc/xc_rho_cflags_types.F:!> \param rho_spin_ 1_3: flag for rhoa**(1.0_dp/3.0_dp) and rhob**(1.0_dp/3.0_dp)
./xc/xc_rho_cflags_types.F:!> \param tau flags for the kinetic (KS) part of rho
./xc/xc_rho_cflags_types.F:!> \param tau_spin flags for the kinetic (KS) part of rhoa and rhob
./xc/xc_rho_cflags_types.F:   TYPE xc_rho_cflags_type
./xc/xc_rho_cflags_types.F:      LOGICAL :: rho, rho_spin, drho, drho_spin, &
./xc/xc_rho_cflags_types.F:                 norm_drho, norm_drho_spin, drhoa_drhob, &
./xc/xc_rho_cflags_types.F:                 rho_1_3, rho_spin_1_3, tau, tau_spin, laplace_rho, laplace_rho_spin
./xc/xc_rho_cflags_types.F:   END TYPE xc_rho_cflags_type
./xc/xc_rho_cflags_types.F:   SUBROUTINE xc_rho_cflags_setall(cflags, value)
./xc/xc_rho_cflags_types.F:      TYPE(xc_rho_cflags_type), INTENT(out)              :: cflags
./xc/xc_rho_cflags_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_cflags_setall', &
./xc/xc_rho_cflags_types.F:      cflags%rho = value
./xc/xc_rho_cflags_types.F:      cflags%rho_spin = value
./xc/xc_rho_cflags_types.F:      cflags%drho = value
./xc/xc_rho_cflags_types.F:      cflags%drho_spin = value
./xc/xc_rho_cflags_types.F:      cflags%norm_drho = value
./xc/xc_rho_cflags_types.F:      cflags%norm_drho_spin = value
./xc/xc_rho_cflags_types.F:      cflags%drhoa_drhob = value
./xc/xc_rho_cflags_types.F:      cflags%rho_1_3 = value
./xc/xc_rho_cflags_types.F:      cflags%rho_spin_1_3 = value
./xc/xc_rho_cflags_types.F:      cflags%laplace_rho = value
./xc/xc_rho_cflags_types.F:      cflags%laplace_rho_spin = value
./xc/xc_rho_cflags_types.F:   END SUBROUTINE xc_rho_cflags_setall
./xc/xc_rho_cflags_types.F:   FUNCTION xc_rho_cflags_equal(cflags1, cflags2) RESULT(equal)
./xc/xc_rho_cflags_types.F:      TYPE(xc_rho_cflags_type), INTENT(in)               :: cflags1, cflags2
./xc/xc_rho_cflags_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_cflags_equal', &
./xc/xc_rho_cflags_types.F:      equal = ((cflags1%rho .EQV. cflags2%rho) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%rho_spin .EQV. cflags2%rho_spin) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%drho .EQV. cflags2%drho) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%drho_spin .EQV. cflags2%drho_spin) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%norm_drho .EQV. cflags2%norm_drho) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%norm_drho_spin .EQV. cflags2%norm_drho_spin) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%drhoa_drhob .EQV. cflags2%drhoa_drhob) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%rho_1_3 .EQV. cflags2%rho_1_3) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%rho_spin_1_3 .EQV. cflags2%rho_spin_1_3) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%laplace_rho .EQV. cflags2%laplace_rho) .AND. &
./xc/xc_rho_cflags_types.F:               (cflags1%laplace_rho_spin .EQV. cflags2%laplace_rho_spin))
./xc/xc_rho_cflags_types.F:   END FUNCTION xc_rho_cflags_equal
./xc/xc_rho_cflags_types.F:END MODULE xc_rho_cflags_types
./xc/xc_xalpha.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xalpha.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xalpha.F:                                              xc_rho_set_type
./xc/xc_xalpha.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_xalpha.F:      eps_rho = cutoff
./xc/xc_xalpha.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xalpha.F:            needs%rho_spin = .TRUE.
./xc/xc_xalpha.F:            needs%rho_spin_1_3 = .TRUE.
./xc/xc_xalpha.F:            needs%rho = .TRUE.
./xc/xc_xalpha.F:            needs%rho_1_3 = .TRUE.
./xc/xc_xalpha.F:!> \param rho_set ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lda_eval(rho_set, deriv_set, order, xa_params, xa_parameter)
./xc/xc_xalpha.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xalpha.F:      REAL(KIND=dp)                                      :: epsilon_rho, sx
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_xalpha.F:                                                            r13, rho
./xc/xc_xalpha.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xalpha.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xalpha.F:      CALL xc_rho_set_get(rho_set, rho_1_3=r13, rho=rho, &
./xc/xc_xalpha.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xalpha.F:      CALL xalpha_init(epsilon_rho, xa_parameter)
./xc/xc_xalpha.F:         CALL xalpha_lda_0(npoints, rho, r13, e_0, sx)
./xc/xc_xalpha.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xalpha.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xalpha.F:         CALL xalpha_lda_1(npoints, rho, r13, e_rho, sx)
./xc/xc_xalpha.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_xalpha.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_xalpha.F:         CALL xalpha_lda_2(npoints, rho, r13, e_rho_rho, sx)
./xc/xc_xalpha.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_xalpha.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_xalpha.F:         CALL xalpha_lda_3(npoints, rho, r13, e_rho_rho_rho, sx)
./xc/xc_xalpha.F:!> \param rho_set ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lsd_eval(rho_set, deriv_set, order, xa_params, xa_parameter)
./xc/xc_xalpha.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xalpha.F:      CHARACTER(len=6), DIMENSION(2), PARAMETER :: rho_spin_name = (/"(rhoa)", "(rhob)"/)
./xc/xc_xalpha.F:      REAL(KIND=dp)                                      :: epsilon_rho, sx
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho
./xc/xc_xalpha.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: rho, rho_1_3
./xc/xc_xalpha.F:         NULLIFY (rho(i)%array, rho_1_3(i)%array)
./xc/xc_xalpha.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xalpha.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xalpha.F:      CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_xalpha.F:                          rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_xalpha.F:                          rhob=rho(2)%array, rho_cutoff=epsilon_rho, &
./xc/xc_xalpha.F:      CALL xalpha_init(epsilon_rho, xa_parameter)
./xc/xc_xalpha.F:            CALL xalpha_lsd_0(npoints, rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_xalpha.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin), &
./xc/xc_xalpha.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xalpha.F:            CALL xalpha_lsd_1(npoints, rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_xalpha.F:                              e_rho, sx)
./xc/xc_xalpha.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_xalpha.F:                                            rho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_xalpha.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_xalpha.F:            CALL xalpha_lsd_2(npoints, rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_xalpha.F:                              e_rho_rho, sx)
./xc/xc_xalpha.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_xalpha.F:                                            rho_spin_name(ispin)//rho_spin_name(ispin), &
./xc/xc_xalpha.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_xalpha.F:            CALL xalpha_lsd_3(npoints, rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_xalpha.F:                              e_rho_rho_rho, sx)
./xc/xc_xalpha.F:!> \param rho ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lda_0(n, rho, r13, pot, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_xalpha.F:!$OMP SHARED(n,rho,eps_rho,pot,f,r13)
./xc/xc_xalpha.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_xalpha.F:            pot(ip) = pot(ip)+f*r13(ip)*rho(ip)
./xc/xc_xalpha.F:!> \param rho ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lda_1(n, rho, r13, pot, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_xalpha.F:!$OMP SHARED(n,rho,eps_rho,pot,f,r13)
./xc/xc_xalpha.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_xalpha.F:!> \param rho ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lda_2(n, rho, r13, pot, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_xalpha.F:!$OMP SHARED(n,rho,eps_rho,pot,f,r13)
./xc/xc_xalpha.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_xalpha.F:            pot(ip) = pot(ip)+f*r13(ip)/rho(ip)
./xc/xc_xalpha.F:!> \param rho ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lda_3(n, rho, r13, pot, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_xalpha.F:!$OMP SHARED(n,rho,eps_rho,pot,f,r13)
./xc/xc_xalpha.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_xalpha.F:            pot(ip) = pot(ip)+f*r13(ip)/(rho(ip)*rho(ip))
./xc/xc_xalpha.F:!> \param rhoa ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lsd_0(n, rhoa, r13a, pot, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_xalpha.F:!$OMP SHARED(n,rhoa,eps_rho,pot,f,r13a)
./xc/xc_xalpha.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_xalpha.F:            pot(ip) = pot(ip)+f*r13a(ip)*rhoa(ip)
./xc/xc_xalpha.F:!> \param rhoa ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lsd_1(n, rhoa, r13a, pota, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_xalpha.F:!$OMP SHARED(n,rhoa,eps_rho,pota,f,r13a)
./xc/xc_xalpha.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_xalpha.F:!> \param rhoa ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lsd_2(n, rhoa, r13a, potaa, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_xalpha.F:!$OMP SHARED(n,rhoa,eps_rho,potaa,f,r13a)
./xc/xc_xalpha.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_xalpha.F:            potaa(ip) = potaa(ip)+f*r13a(ip)/rhoa(ip)
./xc/xc_xalpha.F:!> \param rhoa ...
./xc/xc_xalpha.F:   SUBROUTINE xalpha_lsd_3(n, rhoa, r13a, potaaa, sx)
./xc/xc_xalpha.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_xalpha.F:!$OMP SHARED(n,rhoa,eps_rho,potaaa,f,r13a)
./xc/xc_xalpha.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_xalpha.F:            potaaa(ip) = potaaa(ip)+f*r13a(ip)/(rhoa(ip)*rhoa(ip))
./xc/xc_tpss.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_tpss.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_tpss.F:                                              xc_rho_set_type
./xc/xc_tpss.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_tpss.F:         needs%rho = .TRUE.
./xc/xc_tpss.F:         needs%norm_drho = .TRUE.
./xc/xc_tpss.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_tpss.F:         needs%rho_spin = .TRUE.
./xc/xc_tpss.F:         needs%norm_drho = .TRUE.
./xc/xc_tpss.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_tpss.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_tpss.F:   SUBROUTINE tpss_lda_eval(rho_set, deriv_set, grad_deriv, tpss_params)
./xc/xc_tpss.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_tpss.F:      REAL(kind=dp)                                      :: epsilon_rho, epsilon_tau, scale_ec, &
./xc/xc_tpss.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_ndrho, e_rho, e_tau, &
./xc/xc_tpss.F:                                                            norm_drho, rho, tau
./xc/xc_tpss.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_tpss.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_tpss.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_tpss.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_tpss.F:      dummy => rho
./xc/xc_tpss.F:      e_rho => dummy
./xc/xc_tpss.F:      e_ndrho => dummy
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_tpss.F:!$OMP              SHARED(rho, tau, norm_drho, e_0, e_rho, e_ndrho, e_tau) &
./xc/xc_tpss.F:!$OMP              SHARED(epsilon_rho, epsilon_tau, npoints, grad_deriv) &
./xc/xc_tpss.F:      CALL tpss_lda_calc(rho=rho, norm_drho=norm_drho, &
./xc/xc_tpss.F:                         tau=tau, e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_tau=e_tau, &
./xc/xc_tpss.F:                         grad_deriv=grad_deriv, npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_tpss.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_tpss.F:   SUBROUTINE tpss_lsd_eval(rho_set, deriv_set, grad_deriv, tpss_params)
./xc/xc_tpss.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_tpss.F:      REAL(kind=dp)                                      :: epsilon_rho, epsilon_tau, scale_ec, &
./xc/xc_tpss.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrhoa, e_ndrhob, &
./xc/xc_tpss.F:         e_rhoa, e_rhob, e_tau_a, e_tau_b, norm_drho, norm_drhoa, norm_drhob, rhoa, rhob, tau_a, &
./xc/xc_tpss.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_tpss.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_tpss.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_tpss.F:                          norm_drhob=norm_drhob, norm_drho=norm_drho, tau_a=tau_a, tau_b=tau_b, &
./xc/xc_tpss.F:                          local_bounds=bo, rho_cutoff=epsilon_rho, tau_cutoff=epsilon_tau)
./xc/xc_tpss.F:      dummy => rhoa
./xc/xc_tpss.F:      e_rhoa => dummy
./xc/xc_tpss.F:      e_rhob => dummy
./xc/xc_tpss.F:      e_ndrhoa => dummy
./xc/xc_tpss.F:      e_ndrhob => dummy
./xc/xc_tpss.F:      e_ndrho => dummy
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_tpss.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_tpss.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_tpss.F:!$OMP              SHARED(rhoa, rhob,norm_drhoa, norm_drhob, norm_drho) &
./xc/xc_tpss.F:!$OMP              SHARED(tau_a, tau_b, e_0, e_rhoa, e_rhob, e_ndrhoa) &
./xc/xc_tpss.F:!$OMP              SHARED(e_ndrhob, e_ndrho, e_tau_a, e_tau_b, npoints) &
./xc/xc_tpss.F:!$OMP              SHARED(grad_deriv, epsilon_rho) &
./xc/xc_tpss.F:      CALL tpss_lsd_calc(rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_tpss.F:                         norm_drhob=norm_drhob, norm_drho=norm_drho, &
./xc/xc_tpss.F:                         tau_a=tau_a, tau_b=tau_b, e_0=e_0, e_rhoa=e_rhoa, e_rhob=e_rhob, &
./xc/xc_tpss.F:                         e_ndrhoa=e_ndrhoa, e_ndrhob=e_ndrhob, e_ndrho=e_ndrho, &
./xc/xc_tpss.F:                         grad_deriv=grad_deriv, npoints=npoints, epsilon_rho=epsilon_rho, &
./xc/xc_tpss.F:!> \param rho ...
./xc/xc_tpss.F:!> \param norm_drho ...
./xc/xc_tpss.F:!> \param e_rho ...
./xc/xc_tpss.F:!> \param e_ndrho ...
./xc/xc_tpss.F:!> \param epsilon_rho ...
./xc/xc_tpss.F:   SUBROUTINE tpss_lda_calc(rho, norm_drho, tau, e_0, e_rho, e_ndrho, e_tau, &
./xc/xc_tpss.F:                            npoints, grad_deriv, epsilon_rho, epsilon_tau, &
./xc/xc_tpss.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rho, norm_drho, tau
./xc/xc_tpss.F:      REAL(kind=dp), DIMENSION(*), INTENT(inout)         :: e_0, e_rho, e_ndrho, e_tau
./xc/xc_tpss.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, epsilon_tau, scale_ec, &
./xc/xc_tpss.F:      REAL(kind=dp) :: A, A_1, A_2, A_s1, A_s1rho, A_s2, A_s2rho, alpha, alpha_1_1, alpha_1_2, &
./xc/xc_tpss.F:         alphanorm_drho, alpharho, alphatau, Arho, b, beta, beta_1_1, beta_1_2, beta_2_1, &
./xc/xc_tpss.F:         beta_2_2, beta_3_1, beta_3_2, beta_4_1, beta_4_2, c, d, e_c_u_0, e_c_u_0rho, e_c_u_1_s1, &
./xc/xc_tpss.F:         e_c_u_1_s1rho, e_c_u_1_s2, e_c_u_1_s2rho, e_var, epsilon_cGGA, epsilon_cGGA_0_1, &
./xc/xc_tpss.F:         epsilon_cGGA_1_0, epsilon_cGGArho, epsilon_cRevPKZB, epsilon_cRevPKZBnorm_drho, &
./xc/xc_tpss.F:         epsilon_cRevPKZBrho, epsilon_cRevPKZBtau, ex_unif, Fx, gamma_var, Hnorm_drho, k_f_s1, &
./xc/xc_tpss.F:         k_f_s1rho, k_s, k_s_s1, k_s_s2, kappa, m, ma, manorm_drho, marho, mb, mbnorm_drho, mbrho
./xc/xc_tpss.F:      REAL(kind=dp) :: mu, my_ndrho, my_rho, my_tau, p, p_1, p_2, p_3, phi_s1, phi_s2, pnorm_drho, &
./xc/xc_tpss.F:         prho, rs, rs_s1, rs_s1rho, rs_s2, rs_s2rho, rsrho, t, t1, t100, t101, t111, t12, t13, &
./xc/xc_tpss.F:         t85, t89, t9, t94, t95, t96, t_s1, t_s1norm_drho, t_s1rho, t_s2, t_s2norm_drho, t_s2rho, &
./xc/xc_tpss.F:         tau_w, tau_wnorm_drho, tau_wrho, tildeq_b, tildeq_bnorm_drho, tildeq_brho, tildeq_btau, &
./xc/xc_tpss.F:         tnorm_drho, trho, z, znorm_drho, zrho, ztau
./xc/xc_tpss.F:         ! useful for testing, we just hack in a well defined functional of tau, ndrho and rho
./xc/xc_tpss.F:            my_rho = rho(ii)
./xc/xc_tpss.F:            my_ndrho = norm_drho(ii)
./xc/xc_tpss.F:               e_0(ii) = e_0(ii)+my_tau*my_ndrho*my_rho
./xc/xc_tpss.F:               e_rho(ii) = e_rho(ii)+my_tau*my_ndrho
./xc/xc_tpss.F:               e_ndrho(ii) = e_ndrho(ii)+my_tau*my_rho
./xc/xc_tpss.F:               e_tau(ii) = e_tau(ii)+my_rho*my_ndrho
./xc/xc_tpss.F:         my_rho = rho(ii)
./xc/xc_tpss.F:         IF (my_rho > epsilon_rho .AND. my_tau > epsilon_tau) THEN
./xc/xc_tpss.F:            my_ndrho = norm_drho(ii)
./xc/xc_tpss.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_tpss.F:            t254 = my_ndrho**2
./xc/xc_tpss.F:               ! enforce z=norm_rho**2/(8._dp*rho*tau) <1
./xc/xc_tpss.F:               m = 0.5_dp*t254+4.0_dp*my_rho*my_tau
./xc/xc_tpss.F:               my_tau = m/8._dp/my_rho
./xc/xc_tpss.F:               my_ndrho = SQRT(m)
./xc/xc_tpss.F:            t16 = (t14*my_rho)**(0.1e1_dp/0.3e1_dp)
./xc/xc_tpss.F:            t21 = my_ndrho*t20
./xc/xc_tpss.F:            t28 = my_ndrho*t27
./xc/xc_tpss.F:            t235 = my_ndrho*t234
./xc/xc_tpss.F:            t267 = my_rho*epsilon_cRevPKZB
./xc/xc_tpss.F:            t279 = my_rho**2
./xc/xc_tpss.F:            t280 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_tpss.F:            t337 = my_rho*ex_unif
./xc/xc_tpss.F:               rsrho = -t4*t344/0.12e2_dp
./xc/xc_tpss.F:               e_c_u_0rho = -0.2e1_dp*A_1*alpha_1_1*rsrho*t152+t138/ &
./xc/xc_tpss.F:                            t351*(beta_1_1/t140*rsrho/0.2e1_dp+beta_2_1*rsrho+ &
./xc/xc_tpss.F:                                  0.3e1_dp/0.2e1_dp*beta_3_1*t140*rsrho+t146*t41*rsrho/ &
./xc/xc_tpss.F:               trho = -my_ndrho/t376*t7/t233*t1*t371*t14*t6 &
./xc/xc_tpss.F:               Arho = t385/t386*e_c_u_0rho*t238
./xc/xc_tpss.F:               t395 = Arho*t241
./xc/xc_tpss.F:               t398 = 0.2e1_dp*t396*trho
./xc/xc_tpss.F:               epsilon_cGGArho = e_c_u_0rho+gamma_var*(0.2e1_dp*t390*t391 &
./xc/xc_tpss.F:                                                       *trho+t187*t241*(t395+t398)*t249-t403*t406*(t395+ &
./xc/xc_tpss.F:                                                                                 t398+0.2e1_dp*A*t246*Arho+0.4e1_dp*t411*trho))*t419
./xc/xc_tpss.F:               tau_wrho = -t254*t343/0.8e1_dp
./xc/xc_tpss.F:               prho = -0.2e1_dp/0.9e1_dp*t275*t278/t281/t279/my_rho
./xc/xc_tpss.F:               zrho = tau_wrho*t286
./xc/xc_tpss.F:               alpharho = 0.5e1_dp/0.3e1_dp*prho*t288-0.5e1_dp/0.3e1_dp &
./xc/xc_tpss.F:                          *t430*zrho
./xc/xc_tpss.F:               tildeq_brho = 0.9e1_dp/0.20e2_dp*alpharho*t295-0.9e1_dp/ &
./xc/xc_tpss.F:                             0.40e2_dp*t437*(b*alpharho*t290+t291*alpharho)+ &
./xc/xc_tpss.F:                             0.2e1_dp/0.3e1_dp*prho
./xc/xc_tpss.F:               rs_s1rho = -t4*t5*t344/0.12e2_dp
./xc/xc_tpss.F:               k_f_s1rho = t13*t371*t14/0.6e1_dp
./xc/xc_tpss.F:               t_s1rho = -t21/t505*t7/t19*k_f_s1rho*t6/0.2e1_dp-t21 &
./xc/xc_tpss.F:               e_c_u_1_s1rho = -0.2e1_dp*t513*rs_s1rho*t101+t89/t517* &
./xc/xc_tpss.F:                               (beta_1_2/t55*rs_s1rho/0.2e1_dp+beta_2_2*rs_s1rho+ &
./xc/xc_tpss.F:                                0.3e1_dp/0.2e1_dp*beta_3_2*t55*rs_s1rho+t95*t77* &
./xc/xc_tpss.F:                                rs_s1rho/rs_s1)/t100
./xc/xc_tpss.F:               A_s1rho = t385/t536*e_c_u_1_s1rho*t191*t193
./xc/xc_tpss.F:               t546 = A_s1rho*t197
./xc/xc_tpss.F:               t549 = 0.2e1_dp*t547*t_s1rho
./xc/xc_tpss.F:                  marho = e_c_u_1_s1rho+t196*(0.2e1_dp*t541*t542 &
./xc/xc_tpss.F:                                              *t_s1rho+t187*t197*(t546+t549)*t205-t554*t557*(t546 &
./xc/xc_tpss.F:                                                                                   +t549+0.2e1_dp*A_s1*t202*A_s1rho+0.4e1_dp*t562* &
./xc/xc_tpss.F:                                                                                             t_s1rho))*t569
./xc/xc_tpss.F:                  marho = epsilon_cGGArho
./xc/xc_tpss.F:               rs_s2rho = rs_s1rho
./xc/xc_tpss.F:               t_s2rho = -t28/t574*t7/t26*k_f_s1rho*t6/0.2e1_dp-t28 &
./xc/xc_tpss.F:               e_c_u_1_s2rho = -0.2e1_dp*t513*rs_s2rho*t85+t71/t585*( &
./xc/xc_tpss.F:                               beta_1_2/t36*rs_s2rho/0.2e1_dp+beta_2_2*rs_s2rho+ &
./xc/xc_tpss.F:                               0.3e1_dp/0.2e1_dp*beta_3_2*t36*rs_s2rho+t79*t77* &
./xc/xc_tpss.F:                               rs_s2rho/rs_s2)/t84
./xc/xc_tpss.F:               A_s2rho = t385/t604*e_c_u_1_s2rho*t213*t215
./xc/xc_tpss.F:               t614 = A_s2rho*t219
./xc/xc_tpss.F:               t617 = 0.2e1_dp*t615*t_s2rho
./xc/xc_tpss.F:                  mbrho = e_c_u_1_s2rho+t218*(0.2e1_dp*t609*t610 &
./xc/xc_tpss.F:                                              *t_s2rho+t187*t219*(t614+t617)*t227-t622*t625*(t614 &
./xc/xc_tpss.F:                                                                                   +t617+0.2e1_dp*A_s2*t224*A_s2rho+0.4e1_dp*t630* &
./xc/xc_tpss.F:                                                                                             t_s2rho))*t637
./xc/xc_tpss.F:                  mbrho = epsilon_cGGArho
./xc/xc_tpss.F:               epsilon_cRevPKZBrho = epsilon_cGGArho+(0.53e0_dp* &
./xc/xc_tpss.F:                                                      epsilon_cGGArho*t256+0.106e1_dp*t642*tau_wrho-0.306e1_dp* &
./xc/xc_tpss.F:                                                      t645*tau_wrho-0.153e1_dp*t256*(marho/0.2e1_dp+mbrho/ &
./xc/xc_tpss.F:                  e_rho(ii) = e_rho(ii)+ &
./xc/xc_tpss.F:                              scale_ec*(epsilon_cRevPKZB*t274+my_rho* &
./xc/xc_tpss.F:                                        epsilon_cRevPKZBrho*t274+t267*(d*epsilon_cRevPKZBrho*t272 &
./xc/xc_tpss.F:                                                                       +0.3e1_dp*t268*t659*tau_wrho))+scale_ex*(ex_unif*Fx- &
./xc/xc_tpss.F:                                                                                               my_rho*pi*t1*t371*Fx/0.4e1_dp+t337* &
./xc/xc_tpss.F:                                                                               t490*(((0.2e1_dp*t445*t303*zrho-0.4e1_dp*t450*t452* &
./xc/xc_tpss.F:                                                                                zrho)*p+t305*prho+0.292e3_dp/0.2025e4_dp*tildeq_b* &
./xc/xc_tpss.F:                                                                               tildeq_brho-0.73e2_dp/0.4050e4_dp*tildeq_brho*t313- &
./xc/xc_tpss.F:                                                                           0.73e2_dp/0.8100e4_dp*t464*(0.36e2_dp*z*zrho+0.100e3_dp &
./xc/xc_tpss.F:                                                                               *p*prho)+0.200e3_dp/0.6561e4_dp*t472*prho+0.8e1_dp/ &
./xc/xc_tpss.F:                                                                                0.45e2_dp*t475*zrho+0.3e1_dp*t322*t310*prho)*t329- &
./xc/xc_tpss.F:                                                                                                           0.2e1_dp*t485*t319*prho))
./xc/xc_tpss.F:               tnorm_drho = t234*t7/0.2e1_dp
./xc/xc_tpss.F:               Hnorm_drho = gamma_var*(0.2e1_dp*t390*t391*tnorm_drho+ &
./xc/xc_tpss.F:                                       0.2e1_dp*t187*t410*A*tnorm_drho*t249-t403*t406*( &
./xc/xc_tpss.F:                                       0.2e1_dp*t396*tnorm_drho+0.4e1_dp*t411*tnorm_drho))*t419
./xc/xc_tpss.F:               tau_wnorm_drho = my_ndrho*t7/0.4e1_dp
./xc/xc_tpss.F:               pnorm_drho = my_ndrho*t1*t284/0.6e1_dp
./xc/xc_tpss.F:               znorm_drho = tau_wnorm_drho*t286
./xc/xc_tpss.F:               alphanorm_drho = 0.5e1_dp/0.3e1_dp*pnorm_drho*t288- &
./xc/xc_tpss.F:                                0.5e1_dp/0.3e1_dp*t430*znorm_drho
./xc/xc_tpss.F:               tildeq_bnorm_drho = 0.9e1_dp/0.20e2_dp*alphanorm_drho*t295- &
./xc/xc_tpss.F:                                   0.9e1_dp/0.40e2_dp*t437*(b*alphanorm_drho*t290+t291* &
./xc/xc_tpss.F:                                                            alphanorm_drho)+0.2e1_dp/0.3e1_dp*pnorm_drho
./xc/xc_tpss.F:               t_s1norm_drho = t20*t22*t7/0.2e1_dp
./xc/xc_tpss.F:                  manorm_drho = t196*(0.2e1_dp*t541*t542* &
./xc/xc_tpss.F:                                      t_s1norm_drho+0.2e1_dp*t187*t561*A_s1*t_s1norm_drho*t205 &
./xc/xc_tpss.F:                                      -t554*t557*(0.2e1_dp*t547*t_s1norm_drho+0.4e1_dp*t562 &
./xc/xc_tpss.F:                                                  *t_s1norm_drho))*t569
./xc/xc_tpss.F:                  manorm_drho = Hnorm_drho
./xc/xc_tpss.F:               t_s2norm_drho = t27*t29*t7/0.2e1_dp
./xc/xc_tpss.F:                  mbnorm_drho = t218*(0.2e1_dp*t609*t610* &
./xc/xc_tpss.F:                                      t_s2norm_drho+0.2e1_dp*t187*t629*A_s2*t_s2norm_drho*t227 &
./xc/xc_tpss.F:                                      -t622*t625*(0.2e1_dp*t615*t_s2norm_drho+0.4e1_dp*t630 &
./xc/xc_tpss.F:                                                  *t_s2norm_drho))*t637
./xc/xc_tpss.F:                  mbnorm_drho = Hnorm_drho
./xc/xc_tpss.F:               epsilon_cRevPKZBnorm_drho = Hnorm_drho+(0.53e0_dp*Hnorm_drho* &
./xc/xc_tpss.F:                                                       t256+0.106e1_dp*t642*tau_wnorm_drho-0.306e1_dp*t645* &
./xc/xc_tpss.F:                                                       tau_wnorm_drho-0.153e1_dp*t256*(manorm_drho/0.2e1_dp+ &
./xc/xc_tpss.F:                                                                                       mbnorm_drho/0.2e1_dp))*t265
./xc/xc_tpss.F:                  e_ndrho(ii) = e_ndrho(ii)+ &
./xc/xc_tpss.F:                                scale_ec*(my_rho*epsilon_cRevPKZBnorm_drho* &
./xc/xc_tpss.F:                                          t274+t267*(d*epsilon_cRevPKZBnorm_drho*t272+0.3e1_dp* &
./xc/xc_tpss.F:                                                     t268*t659*tau_wnorm_drho))+scale_ex*t337*t490*((( &
./xc/xc_tpss.F:                                                                                 0.2e1_dp*t445*t303*znorm_drho-0.4e1_dp*t450*t452* &
./xc/xc_tpss.F:                                                                             znorm_drho)*p+t305*pnorm_drho+0.292e3_dp/0.2025e4_dp* &
./xc/xc_tpss.F:                                                                                 tildeq_b*tildeq_bnorm_drho-0.73e2_dp/0.4050e4_dp* &
./xc/xc_tpss.F:                                                                               tildeq_bnorm_drho*t313-0.73e2_dp/0.8100e4_dp*t464*( &
./xc/xc_tpss.F:                                                                                  0.36e2_dp*z*znorm_drho+0.100e3_dp*p*pnorm_drho)+ &
./xc/xc_tpss.F:                                                                         0.200e3_dp/0.6561e4_dp*t472*pnorm_drho+0.8e1_dp/0.45e2_dp &
./xc/xc_tpss.F:                                                                             *t475*znorm_drho+0.3e1_dp*t322*t310*pnorm_drho)*t329- &
./xc/xc_tpss.F:                                                                                                    0.2e1_dp*t485*t319*pnorm_drho)
./xc/xc_tpss.F:                              scale_ec*(my_rho*epsilon_cRevPKZBtau*t274+t267* &
./xc/xc_tpss.F:!> \param rhoa ...
./xc/xc_tpss.F:!> \param rhob ...
./xc/xc_tpss.F:!> \param norm_drhoa ...
./xc/xc_tpss.F:!> \param norm_drhob ...
./xc/xc_tpss.F:!> \param norm_drho ...
./xc/xc_tpss.F:!> \param e_rhoa ...
./xc/xc_tpss.F:!> \param e_rhob ...
./xc/xc_tpss.F:!> \param e_ndrhoa ...
./xc/xc_tpss.F:!> \param e_ndrhob ...
./xc/xc_tpss.F:!> \param e_ndrho ...
./xc/xc_tpss.F:!> \param epsilon_rho ...
./xc/xc_tpss.F:   SUBROUTINE tpss_lsd_calc(rhoa, rhob, norm_drhoa, norm_drhob, norm_drho, &
./xc/xc_tpss.F:                            tau_a, tau_b, e_0, e_rhoa, e_rhob, e_ndrhoa, e_ndrhob, e_ndrho, e_tau_a, e_tau_b, &
./xc/xc_tpss.F:                            npoints, grad_deriv, epsilon_rho, epsilon_tau, &
./xc/xc_tpss.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rhoa, rhob, norm_drhoa, norm_drhob, &
./xc/xc_tpss.F:                                                            norm_drho, tau_a, tau_b
./xc/xc_tpss.F:      REAL(kind=dp), DIMENSION(*), INTENT(inout)         :: e_0, e_rhoa, e_rhob, e_ndrhoa, e_ndrhob, &
./xc/xc_tpss.F:                                                            e_ndrho, e_tau_a, e_tau_b
./xc/xc_tpss.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, epsilon_tau, scale_ec, &
./xc/xc_tpss.F:      REAL(kind=dp) :: A, A_1, A_2, A_3, A_s1, A_s1rhoa, A_s2, A_s2rhob, alpha_1_1, alpha_1_2, &
./xc/xc_tpss.F:         alpha_1_3, alpha_c, alpha_sp1, alpha_sp1norm_drhoa, alpha_sp1rhoa, alpha_sp1tau_a, &
./xc/xc_tpss.F:         alpha_sp2, alpha_sp2norm_drhob, alpha_sp2rhob, alpha_sp2tau_b, Arhoa, Arhob, b, beta, &
./xc/xc_tpss.F:         beta_4_1, beta_4_2, beta_4_3, c, C_chi, C_chi_eps, C_chi_epsnorm_drho, &
./xc/xc_tpss.F:         C_chi_epsnorm_drhoa, C_chi_epsnorm_drhob, C_chi_epsrhoa, C_chi_epsrhob, chi, chirhoa, &
./xc/xc_tpss.F:         chirhob, d, e_c_u_0, e_c_u_0rhoa, e_c_u_0rhob, e_c_u_1_s1, e_c_u_1_s1rhoa, e_c_u_1_s2
./xc/xc_tpss.F:      REAL(kind=dp) :: e_c_u_1_s2rhob, e_var, eps, epsilon_c_unif, epsilon_c_unifrhoa, &
./xc/xc_tpss.F:         epsilon_c_unifrhob, epsilon_cGGA, epsilon_cGGA_0_1, epsilon_cGGA_1_0, epsilon_cGGArhoa, &
./xc/xc_tpss.F:         epsilon_cGGArhob, epsilon_cRevPKZB, epsilon_cRevPKZBnorm_drho, &
./xc/xc_tpss.F:         epsilon_cRevPKZBnorm_drhoa, epsilon_cRevPKZBnorm_drhob, epsilon_cRevPKZBrhoa, &
./xc/xc_tpss.F:         epsilon_cRevPKZBrhob, epsilon_cRevPKZBtau_a, epsilon_cRevPKZBtau_b, err_ndrho, &
./xc/xc_tpss.F:         err_ndrhoa, err_ndrhob, err_rhoa, err_rhob, err_taua, err_taub, ex_unif_sp1, ex_unif_sp2, &
./xc/xc_tpss.F:         f, f_ii_0, frhoa, frhob, Fx_sp1, Fx_sp2, gamma_var, Hnorm_drho, k_frhoa, k_s, k_s_s1, &
./xc/xc_tpss.F:         k_s_s2, kappa, ma, manorm_drho
./xc/xc_tpss.F:      REAL(kind=dp) :: manorm_drhoa, marhoa, marhob, mb, mbnorm_drho, mbnorm_drhob, mbrhoa, &
./xc/xc_tpss.F:         mbrhob, mean_tmp, mu, my_norm_drho, my_norm_drhoa, my_norm_drhob, my_rhoa, my_rhob, &
./xc/xc_tpss.F:         my_tau_a, my_tau_b, p_1, p_2, p_3, p_sp1, p_sp1norm_drhoa, p_sp1rhoa, p_sp2, &
./xc/xc_tpss.F:         p_sp2norm_drhob, p_sp2rhob, phi, phi_s1, phi_s2, phirhoa, phirhob, rho, rs, rs_s1, &
./xc/xc_tpss.F:         rs_s1rhoa, rs_s2, rs_s2rhob, rsrhoa, rsrhob, t, t1, t101, t102, t103, t1043, t107, t1070, &
./xc/xc_tpss.F:         t976, t98, t99, t_s1, t_s1norm_drhoa, t_s1rhoa, t_s2, t_s2norm_drhob, t_s2rhob, tau, &
./xc/xc_tpss.F:         tau_w, tau_w_sp1, tau_w_sp2, tau_wnorm_drho, tau_wrhoa, tau_wrhob, tildeq_b_sp1, &
./xc/xc_tpss.F:         tildeq_b_sp1norm_drhoa, tildeq_b_sp1rhoa, tildeq_b_sp1tau_a, tildeq_b_sp2, &
./xc/xc_tpss.F:         tildeq_b_sp2norm_drhob, tildeq_b_sp2rhob, tildeq_b_sp2tau_b, tnorm_drho, trhoa, trhob
./xc/xc_tpss.F:      REAL(kind=dp) :: z_sp1, z_sp1norm_drhoa, z_sp1rhoa, z_sp1tau_a, z_sp2, z_sp2norm_drhob, &
./xc/xc_tpss.F:         z_sp2rhob, z_sp2tau_b
./xc/xc_tpss.F:      err_rhoa = 0._dp
./xc/xc_tpss.F:      err_rhob = 0._dp
./xc/xc_tpss.F:      err_ndrho = 0._dp
./xc/xc_tpss.F:      err_ndrhoa = 0._dp
./xc/xc_tpss.F:      err_ndrhob = 0._dp
./xc/xc_tpss.F:         my_rhoa = MAX(0.0_dp, rhoa(ii))
./xc/xc_tpss.F:         my_rhob = MAX(0.0_dp, rhob(ii))
./xc/xc_tpss.F:         rho = my_rhoa+my_rhob
./xc/xc_tpss.F:         IF (rho > epsilon_rho .AND. tau > epsilon_tau) THEN
./xc/xc_tpss.F:            my_norm_drhoa = MAX(EPSILON(0.0_dp), norm_drhoa(ii))
./xc/xc_tpss.F:            my_norm_drhob = MAX(EPSILON(0.0_dp), norm_drhob(ii))
./xc/xc_tpss.F:            my_norm_drho = MAX(EPSILON(0.0_dp), norm_drho(ii))
./xc/xc_tpss.F:            my_rhoa = MAX(EPSILON(0.0_dp)*1.e4_dp, my_rhoa)
./xc/xc_tpss.F:            my_rhob = MAX(EPSILON(0.0_dp)*1.e4_dp, my_rhob)
./xc/xc_tpss.F:            ! enforce 8*rho*tau >= norm_drho^2 (also each spin separately)
./xc/xc_tpss.F:            t1 = my_norm_drhoa**2
./xc/xc_tpss.F:            mean_tmp = 8._dp*my_rhoa*my_tau_a
./xc/xc_tpss.F:               my_norm_drhoa = SQRT(mean_tmp)
./xc/xc_tpss.F:               my_tau_a = mean_tmp/(8._dp*my_rhoa)
./xc/xc_tpss.F:            t5 = my_norm_drhob**2
./xc/xc_tpss.F:            mean_tmp = 8._dp*my_rhob*my_tau_b
./xc/xc_tpss.F:               my_norm_drhob = SQRT(mean_tmp)
./xc/xc_tpss.F:               my_tau_b = mean_tmp/(8._dp*my_rhob)
./xc/xc_tpss.F:            rho = my_rhoa+my_rhob
./xc/xc_tpss.F:            my_norm_drho = MIN(my_norm_drho, my_norm_drhoa+my_norm_drhob)
./xc/xc_tpss.F:            t2 = 1._dp/my_rhoa
./xc/xc_tpss.F:            t6 = 1._dp/my_rhob
./xc/xc_tpss.F:            t20 = my_rhoa**2
./xc/xc_tpss.F:            t21 = my_rhoa**(0.1e1_dp/0.3e1_dp)
./xc/xc_tpss.F:            t79 = (t14*my_rhoa)**(0.1e1_dp/0.3e1_dp)
./xc/xc_tpss.F:            t83 = my_rhoa*ex_unif_sp1
./xc/xc_tpss.F:            t86 = my_rhob**2
./xc/xc_tpss.F:            t87 = my_rhob**(0.1e1_dp/0.3e1_dp)
./xc/xc_tpss.F:            t140 = (t14*my_rhob)**(0.1e1_dp/0.3e1_dp)
./xc/xc_tpss.F:            t144 = my_rhob*ex_unif_sp2
./xc/xc_tpss.F:            t156 = my_norm_drhoa*t155
./xc/xc_tpss.F:            t166 = my_norm_drhob*t165
./xc/xc_tpss.F:            t274 = my_rhoa-my_rhob
./xc/xc_tpss.F:            t275 = 0.1e1_dp/rho
./xc/xc_tpss.F:            t397 = t14*rho
./xc/xc_tpss.F:            t402 = my_norm_drho*t401
./xc/xc_tpss.F:            t430 = my_rhoa*my_rhob
./xc/xc_tpss.F:            t431 = my_norm_drho**2
./xc/xc_tpss.F:            t437 = rho**2
./xc/xc_tpss.F:            t464 = my_rhoa*t275
./xc/xc_tpss.F:            t466 = my_rhob*t275
./xc/xc_tpss.F:            t474 = rho*epsilon_cRevPKZB
./xc/xc_tpss.F:               p_sp1rhoa = -t13*t19/t22/t20/my_rhoa/0.9e1_dp
./xc/xc_tpss.F:               z_sp1rhoa = -t1*t492*t27/0.8e1_dp
./xc/xc_tpss.F:               alpha_sp1rhoa = 0.5e1_dp/0.3e1_dp*p_sp1rhoa*t30-0.5e1_dp/ &
./xc/xc_tpss.F:                               0.3e1_dp*t498*z_sp1rhoa
./xc/xc_tpss.F:               tildeq_b_sp1rhoa = 0.9e1_dp/0.20e2_dp*alpha_sp1rhoa*t37- &
./xc/xc_tpss.F:                                  0.9e1_dp/0.40e2_dp*t505*(b*alpha_sp1rhoa*t32+t33* &
./xc/xc_tpss.F:                                                           alpha_sp1rhoa)+0.2e1_dp/0.3e1_dp*p_sp1rhoa
./xc/xc_tpss.F:               chirhoa = t275-t570
./xc/xc_tpss.F:               rsrhoa = -t148/t571*t76*t438/0.12e2_dp
./xc/xc_tpss.F:               e_c_u_0rhoa = -0.2e1_dp*t577*rsrhoa*t294+t583*(t585* &
./xc/xc_tpss.F:                                                              rsrhoa/0.2e1_dp+beta_2_1*rsrhoa+0.3e1_dp/0.2e1_dp*t589* &
./xc/xc_tpss.F:                                                              rsrhoa+t288*t179*rsrhoa*t593)*t597
./xc/xc_tpss.F:               frhoa = (0.4e1_dp/0.3e1_dp*t329*chirhoa-0.4e1_dp/ &
./xc/xc_tpss.F:                        0.3e1_dp*t332*chirhoa)*t337
./xc/xc_tpss.F:               t660 = t650*chirhoa
./xc/xc_tpss.F:               epsilon_c_unifrhoa = e_c_u_0rhoa+(0.2e1_dp*t621*rsrhoa* &
./xc/xc_tpss.F:                                                 t326-t627*(t628*rsrhoa/0.2e1_dp+beta_2_3*rsrhoa+ &
./xc/xc_tpss.F:                                                            0.3e1_dp/0.2e1_dp*t632*rsrhoa+t320*t249*rsrhoa*t593)* &
./xc/xc_tpss.F:                                                 t639)*f*t343+alpha_c*frhoa*t343-0.4e1_dp*t338*t651 &
./xc/xc_tpss.F:                                    *chirhoa+(-0.2e1_dp*t600*rsrhoa*t310+t606*(t607* &
./xc/xc_tpss.F:                                                                           rsrhoa/0.2e1_dp+beta_2_2*rsrhoa+0.3e1_dp/0.2e1_dp*t611* &
./xc/xc_tpss.F:                                                                               rsrhoa+t304*t215*rsrhoa*t593)*t618-e_c_u_0rhoa)*f* &
./xc/xc_tpss.F:                                    t341+t345*frhoa*t341+0.4e1_dp*t346*t660
./xc/xc_tpss.F:               phirhoa = t663*chirhoa/0.3e1_dp-t665*chirhoa/0.3e1_dp
./xc/xc_tpss.F:               k_frhoa = t12/t668*t14/0.3e1_dp
./xc/xc_tpss.F:               t675 = my_norm_drho/t407
./xc/xc_tpss.F:               trhoa = -t675*t404*phirhoa/0.2e1_dp-t402*t680*t672* &
./xc/xc_tpss.F:                       k_frhoa*t76/0.2e1_dp-t684/0.2e1_dp
./xc/xc_tpss.F:               Arhoa = -t349*t687*(-epsilon_c_unifrhoa*t348*t409+ &
./xc/xc_tpss.F:                                   0.3e1_dp*t406*t691*phirhoa)*t411
./xc/xc_tpss.F:               t708 = Arhoa*t415
./xc/xc_tpss.F:               t711 = 0.2e1_dp*t709*trhoa
./xc/xc_tpss.F:               epsilon_cGGArhoa = epsilon_c_unifrhoa+0.3e1_dp*t699*t427* &
./xc/xc_tpss.F:                                  phirhoa+t414*(0.2e1_dp*t703*t704*trhoa+t349*t415*( &
./xc/xc_tpss.F:                                                                           Arhoa+0.4e1_dp*t724*trhoa))*t731
./xc/xc_tpss.F:               t736 = t5*my_rhoa
./xc/xc_tpss.F:               t739 = my_rhob*t1
./xc/xc_tpss.F:               t746 = 0.4e1_dp*t436/t437/rho
./xc/xc_tpss.F:               tau_wrhoa = -t431*t438/0.8e1_dp
./xc/xc_tpss.F:               C_chi_epsrhoa = (0.174e1_dp*chi*chirhoa+0.20e1_dp*t660+ &
./xc/xc_tpss.F:                                0.1356e2_dp*t758*chirhoa)*t458-0.4e1_dp*t766*(t767*(( &
./xc/xc_tpss.F:                                                                                t735*(0.2e1_dp*t736-my_rhob*t431+t739+my_rhob*t5)- &
./xc/xc_tpss.F:                                                                            0.3e1_dp*t771*chirhoa+0.4e1_dp/0.3e1_dp*t775*chirhoa)/ &
./xc/xc_tpss.F:                  mbrhoa = 0._dp
./xc/xc_tpss.F:                  mbrhoa = epsilon_cGGArhoa
./xc/xc_tpss.F:               rs_s1rhoa = -t148/t785*t76*t492/0.12e2_dp
./xc/xc_tpss.F:               t_s1rhoa = -t156/t795*t2/t154*t12*t561*t14 &
./xc/xc_tpss.F:               e_c_u_1_s1rhoa = -0.2e1_dp*t600*rs_s1rhoa*t239+t227/t806 &
./xc/xc_tpss.F:                                *(beta_1_2/t193*rs_s1rhoa/0.2e1_dp+beta_2_2*rs_s1rhoa+ &
./xc/xc_tpss.F:                                  0.3e1_dp/0.2e1_dp*beta_3_2*t193*rs_s1rhoa+t233*t215* &
./xc/xc_tpss.F:                                  rs_s1rhoa/rs_s1)/t238
./xc/xc_tpss.F:               A_s1rhoa = t827/t828*e_c_u_1_s1rhoa*t353*t355
./xc/xc_tpss.F:               t838 = A_s1rhoa*t359
./xc/xc_tpss.F:               t841 = 0.2e1_dp*t839*t_s1rhoa
./xc/xc_tpss.F:                  marhoa = e_c_u_1_s1rhoa+t358*(0.2e1_dp*t833* &
./xc/xc_tpss.F:                                                t834*t_s1rhoa+t349*t359*(t838+t841)*t367-t846*t849* &
./xc/xc_tpss.F:                                                (t838+t841+0.2e1_dp*A_s1*t364*A_s1rhoa+0.4e1_dp*t854 &
./xc/xc_tpss.F:                                                 *t_s1rhoa))*t861
./xc/xc_tpss.F:                  marhoa = epsilon_cGGArhoa
./xc/xc_tpss.F:               t879 = my_rhoa*t438*ma
./xc/xc_tpss.F:               t882 = my_rhob*t438*mb
./xc/xc_tpss.F:               epsilon_cRevPKZBrhoa = epsilon_cGGArhoa+(epsilon_cGGArhoa* &
./xc/xc_tpss.F:                                                        C_chi_eps*t460+epsilon_cGGA*C_chi_epsrhoa*t460+0.2e1_dp* &
./xc/xc_tpss.F:                                                        t459*tau_w*tau_wrhoa-C_chi_epsrhoa*t460*t468-0.2e1_dp* &
./xc/xc_tpss.F:                                                        t873*t468*tau_wrhoa-t463*(t275*ma-t879+t464*marhoa- &
./xc/xc_tpss.F:                                                                                  t882+t466*mbrhoa))*t472
./xc/xc_tpss.F:                  e_rhoa(ii) = e_rhoa(ii)+ &
./xc/xc_tpss.F:                               scale_ex*(0.2e1_dp*ex_unif_sp1*Fx_sp1-my_rhoa* &
./xc/xc_tpss.F:                                         t558*(((0.2e1_dp*t513*t45*z_sp1rhoa-0.4e1_dp*t518* &
./xc/xc_tpss.F:                                                 t520*z_sp1rhoa)*p_sp1+t47*p_sp1rhoa+0.292e3_dp/ &
./xc/xc_tpss.F:                                                0.2025e4_dp*tildeq_b_sp1*tildeq_b_sp1rhoa-0.73e2_dp/ &
./xc/xc_tpss.F:                                                0.4050e4_dp*tildeq_b_sp1rhoa*t55-0.73e2_dp/0.8100e4_dp* &
./xc/xc_tpss.F:                                                t532*(0.36e2_dp*z_sp1*z_sp1rhoa+0.100e3_dp*p_sp1* &
./xc/xc_tpss.F:                                                      p_sp1rhoa)+0.200e3_dp/0.6561e4_dp*t540*p_sp1rhoa+0.8e1_dp &
./xc/xc_tpss.F:                                                /0.45e2_dp*t543*z_sp1rhoa+0.3e1_dp*t64*t52*p_sp1rhoa)* &
./xc/xc_tpss.F:                                               t71-0.2e1_dp*t553*t61*p_sp1rhoa))/0.2e1_dp+scale_ec*( &
./xc/xc_tpss.F:                               t888+rho*epsilon_cRevPKZBrhoa*t481+t474*(d* &
./xc/xc_tpss.F:                                                                        epsilon_cRevPKZBrhoa*t479+0.3e1_dp*t475*t893*tau_wrhoa))
./xc/xc_tpss.F:               p_sp2rhob = -t85*t19/t88/t86/my_rhob/0.9e1_dp
./xc/xc_tpss.F:               z_sp2rhob = -t5*t908*t93/0.8e1_dp
./xc/xc_tpss.F:               alpha_sp2rhob = 0.5e1_dp/0.3e1_dp*p_sp2rhob*t96-0.5e1_dp/ &
./xc/xc_tpss.F:                               0.3e1_dp*t914*z_sp2rhob
./xc/xc_tpss.F:               tildeq_b_sp2rhob = 0.9e1_dp/0.20e2_dp*alpha_sp2rhob*t103- &
./xc/xc_tpss.F:                                  0.9e1_dp/0.40e2_dp*t921*(b*alpha_sp2rhob*t98+t99* &
./xc/xc_tpss.F:                                                           alpha_sp2rhob)+0.2e1_dp/0.3e1_dp*p_sp2rhob
./xc/xc_tpss.F:               chirhob = -t275-t570
./xc/xc_tpss.F:               rsrhob = rsrhoa
./xc/xc_tpss.F:               e_c_u_0rhob = -0.2e1_dp*t577*rsrhob*t294+t583*(t585* &
./xc/xc_tpss.F:                                                              rsrhob/0.2e1_dp+beta_2_1*rsrhob+0.3e1_dp/0.2e1_dp*t589* &
./xc/xc_tpss.F:                                                              rsrhob+t288*t179*rsrhob*t593)*t597
./xc/xc_tpss.F:               frhob = (0.4e1_dp/0.3e1_dp*t329*chirhob-0.4e1_dp/ &
./xc/xc_tpss.F:                        0.3e1_dp*t332*chirhob)*t337
./xc/xc_tpss.F:               t1043 = t650*chirhob
./xc/xc_tpss.F:               epsilon_c_unifrhob = e_c_u_0rhob+(0.2e1_dp*t621*rsrhob* &
./xc/xc_tpss.F:                                                 t326-t627*(t628*rsrhob/0.2e1_dp+beta_2_3*rsrhob+ &
./xc/xc_tpss.F:                                                            0.3e1_dp/0.2e1_dp*t632*rsrhob+t320*t249*rsrhob*t593)* &
./xc/xc_tpss.F:                                                 t639)*f*t343+alpha_c*frhob*t343-0.4e1_dp*t338*t651 &
./xc/xc_tpss.F:                                    *chirhob+(-0.2e1_dp*t600*rsrhob*t310+t606*(t607* &
./xc/xc_tpss.F:                                                                           rsrhob/0.2e1_dp+beta_2_2*rsrhob+0.3e1_dp/0.2e1_dp*t611* &
./xc/xc_tpss.F:                                                                               rsrhob+t304*t215*rsrhob*t593)*t618-e_c_u_0rhob)*f* &
./xc/xc_tpss.F:                                    t341+t345*frhob*t341+0.4e1_dp*t346*t1043
./xc/xc_tpss.F:               phirhob = t663*chirhob/0.3e1_dp-t665*chirhob/0.3e1_dp
./xc/xc_tpss.F:               trhob = -t675*t404*phirhob/0.2e1_dp-t402*t680*t672* &
./xc/xc_tpss.F:                       k_frhoa*t76/0.2e1_dp-t684/0.2e1_dp
./xc/xc_tpss.F:               Arhob = -t349*t687*(-epsilon_c_unifrhob*t348*t409+ &
./xc/xc_tpss.F:                                   0.3e1_dp*t406*t691*phirhob)*t411
./xc/xc_tpss.F:               t1070 = Arhob*t415
./xc/xc_tpss.F:               t1072 = 0.2e1_dp*t709*trhob
./xc/xc_tpss.F:               epsilon_cGGArhob = epsilon_c_unifrhob+0.3e1_dp*t699*t427* &
./xc/xc_tpss.F:                                  phirhob+t414*(0.2e1_dp*t703*t704*trhob+t349*t415*( &
./xc/xc_tpss.F:                                                                             t720*Arhob+0.4e1_dp*t724*trhob))*t731
./xc/xc_tpss.F:               tau_wrhob = tau_wrhoa
./xc/xc_tpss.F:               C_chi_epsrhob = (0.174e1_dp*chi*chirhob+0.20e1_dp*t1043+ &
./xc/xc_tpss.F:                                0.1356e2_dp*t758*chirhob)*t458-0.4e1_dp*t766*(t767*(( &
./xc/xc_tpss.F:                                                                                t735*(0.2e1_dp*t739-my_rhoa*t431+my_rhoa*t1+t736)- &
./xc/xc_tpss.F:                                                                            0.3e1_dp*t771*chirhob+0.4e1_dp/0.3e1_dp*t775*chirhob)/ &
./xc/xc_tpss.F:                  marhob = 0._dp
./xc/xc_tpss.F:                  marhob = epsilon_cGGArhob
./xc/xc_tpss.F:               rs_s2rhob = -t148/t1111*t76*t908/0.12e2_dp
./xc/xc_tpss.F:               t_s2rhob = -t166/t1121*t6/t164*t12*t976* &
./xc/xc_tpss.F:               e_c_u_1_s2rhob = -0.2e1_dp*t600*rs_s2rhob*t223+t209/ &
./xc/xc_tpss.F:                                t1132*(beta_1_2/t174*rs_s2rhob/0.2e1_dp+beta_2_2* &
./xc/xc_tpss.F:                                       rs_s2rhob+0.3e1_dp/0.2e1_dp*beta_3_2*t174*rs_s2rhob+t217 &
./xc/xc_tpss.F:                                       *t215*rs_s2rhob/rs_s2)/t222
./xc/xc_tpss.F:               A_s2rhob = t827/t1151*e_c_u_1_s2rhob*t375*t377
./xc/xc_tpss.F:               t1161 = A_s2rhob*t381
./xc/xc_tpss.F:               t1164 = 0.2e1_dp*t1162*t_s2rhob
./xc/xc_tpss.F:                  mbrhob = e_c_u_1_s2rhob+t380*(0.2e1_dp*t1156* &
./xc/xc_tpss.F:                                                t1157*t_s2rhob+t349*t381*(t1161+t1164)*t389-t1169* &
./xc/xc_tpss.F:                                                t1172*(t1161+t1164+0.2e1_dp*A_s2*t386*A_s2rhob+ &
./xc/xc_tpss.F:                                                       0.4e1_dp*t1177*t_s2rhob))*t1184
./xc/xc_tpss.F:                  mbrhob = epsilon_cGGArhob
./xc/xc_tpss.F:               epsilon_cRevPKZBrhob = epsilon_cGGArhob+(epsilon_cGGArhob* &
./xc/xc_tpss.F:                                                        C_chi_eps*t460+epsilon_cGGA*C_chi_epsrhob*t460+0.2e1_dp* &
./xc/xc_tpss.F:                                                        t459*tau_w*tau_wrhob-C_chi_epsrhob*t460*t468-0.2e1_dp* &
./xc/xc_tpss.F:                                                        t873*t468*tau_wrhob-t463*(-t879+t464*marhob+t275*mb &
./xc/xc_tpss.F:                                                                                  -t882+t466*mbrhob))*t472
./xc/xc_tpss.F:                  e_rhob(ii) = e_rhob(ii)+ &
./xc/xc_tpss.F:                               scale_ex*(0.2e1_dp*ex_unif_sp2*Fx_sp2-my_rhob* &
./xc/xc_tpss.F:                                         *t974*(((0.2e1_dp*t929*t111*z_sp2rhob-0.4e1_dp*t934* &
./xc/xc_tpss.F:                                                  t936*z_sp2rhob)*p_sp2+t113*p_sp2rhob+0.292e3_dp/ &
./xc/xc_tpss.F:                                                 0.2025e4_dp*tildeq_b_sp2*tildeq_b_sp2rhob-0.73e2_dp/ &
./xc/xc_tpss.F:                                                 0.4050e4_dp*tildeq_b_sp2rhob*t121-0.73e2_dp/0.8100e4_dp* &
./xc/xc_tpss.F:                                                 t948*(0.36e2_dp*z_sp2*z_sp2rhob+0.100e3_dp*p_sp2* &
./xc/xc_tpss.F:                                                       p_sp2rhob)+0.200e3_dp/0.6561e4_dp*t956*p_sp2rhob+0.8e1_dp &
./xc/xc_tpss.F:                                                 /0.45e2_dp*t959*z_sp2rhob+0.3e1_dp*t64*t118*p_sp2rhob) &
./xc/xc_tpss.F:                                                *t134-0.2e1_dp*t969*t61*p_sp2rhob))/0.2e1_dp+scale_ec* &
./xc/xc_tpss.F:                               (t888+rho*epsilon_cRevPKZBrhob*t481+t474*(d* &
./xc/xc_tpss.F:                                                                         epsilon_cRevPKZBrhob*t479+0.3e1_dp*t475*t893*tau_wrhob))
./xc/xc_tpss.F:               p_sp1norm_drhoa = my_norm_drhoa*t12*t25/0.12e2_dp
./xc/xc_tpss.F:               z_sp1norm_drhoa = my_norm_drhoa*t2*t27/0.4e1_dp
./xc/xc_tpss.F:               alpha_sp1norm_drhoa = 0.5e1_dp/0.3e1_dp*p_sp1norm_drhoa*t30 &
./xc/xc_tpss.F:                                     -0.5e1_dp/0.3e1_dp*t498*z_sp1norm_drhoa
./xc/xc_tpss.F:               tildeq_b_sp1norm_drhoa = 0.9e1_dp/0.20e2_dp* &
./xc/xc_tpss.F:                                        alpha_sp1norm_drhoa*t37-0.9e1_dp/0.40e2_dp*t505*(b* &
./xc/xc_tpss.F:                                                                        alpha_sp1norm_drhoa*t32+t33*alpha_sp1norm_drhoa)+0.2e1_dp/ &
./xc/xc_tpss.F:                                        0.3e1_dp*p_sp1norm_drhoa
./xc/xc_tpss.F:               t_s1norm_drhoa = t155*t157*t2/0.2e1_dp
./xc/xc_tpss.F:               C_chi_epsnorm_drhoa = -0.2e1_dp/0.3e1_dp*t766*t767*t735* &
./xc/xc_tpss.F:                                     (0.2e1_dp*my_norm_drhoa*t86+0.2e1_dp*t430*my_norm_drhoa)* &
./xc/xc_tpss.F:                  manorm_drhoa = t358*(0.2e1_dp*t833*t834* &
./xc/xc_tpss.F:                                       t_s1norm_drhoa+0.2e1_dp*t349*t853*A_s1*t_s1norm_drhoa* &
./xc/xc_tpss.F:                                       t367-t846*t849*(0.2e1_dp*t839*t_s1norm_drhoa+0.4e1_dp* &
./xc/xc_tpss.F:                                                       t854*t_s1norm_drhoa))*t861
./xc/xc_tpss.F:                  manorm_drhoa = 0._dp
./xc/xc_tpss.F:               epsilon_cRevPKZBnorm_drhoa = (epsilon_cGGA*C_chi_epsnorm_drhoa* &
./xc/xc_tpss.F:                                             t460-C_chi_epsnorm_drhoa*t460*t468-t463*t464* &
./xc/xc_tpss.F:                                             manorm_drhoa)*t472
./xc/xc_tpss.F:                  e_ndrhoa(ii) = e_ndrhoa(ii)+ &
./xc/xc_tpss.F:                                                      t45*z_sp1norm_drhoa-0.4e1_dp*t518*t520*z_sp1norm_drhoa)* &
./xc/xc_tpss.F:                                                     p_sp1+t47*p_sp1norm_drhoa+0.292e3_dp/0.2025e4_dp* &
./xc/xc_tpss.F:                                                     tildeq_b_sp1*tildeq_b_sp1norm_drhoa-0.73e2_dp/0.4050e4_dp* &
./xc/xc_tpss.F:                                                     tildeq_b_sp1norm_drhoa*t55-0.73e2_dp/0.8100e4_dp*t532*( &
./xc/xc_tpss.F:                                                     0.36e2_dp*z_sp1*z_sp1norm_drhoa+0.100e3_dp*p_sp1* &
./xc/xc_tpss.F:                                                     p_sp1norm_drhoa)+0.200e3_dp/0.6561e4_dp*t540*p_sp1norm_drhoa &
./xc/xc_tpss.F:                                                     +0.8e1_dp/0.45e2_dp*t543*z_sp1norm_drhoa+0.3e1_dp*t64* &
./xc/xc_tpss.F:                                                     t52*p_sp1norm_drhoa)*t71-0.2e1_dp*t553*t61* &
./xc/xc_tpss.F:                                                    p_sp1norm_drhoa)+scale_ec*(rho*epsilon_cRevPKZBnorm_drhoa* &
./xc/xc_tpss.F:                                                                               t481+t1303*epsilon_cRevPKZBnorm_drhoa*t476*t478)
./xc/xc_tpss.F:               p_sp2norm_drhob = my_norm_drhob*t12*t91/0.12e2_dp
./xc/xc_tpss.F:               z_sp2norm_drhob = my_norm_drhob*t6*t93/0.4e1_dp
./xc/xc_tpss.F:               alpha_sp2norm_drhob = 0.5e1_dp/0.3e1_dp*p_sp2norm_drhob*t96 &
./xc/xc_tpss.F:                                     -0.5e1_dp/0.3e1_dp*t914*z_sp2norm_drhob
./xc/xc_tpss.F:               tildeq_b_sp2norm_drhob = 0.9e1_dp/0.20e2_dp* &
./xc/xc_tpss.F:                                        alpha_sp2norm_drhob*t103-0.9e1_dp/0.40e2_dp*t921*(b* &
./xc/xc_tpss.F:                                                                        alpha_sp2norm_drhob*t98+t99*alpha_sp2norm_drhob)+0.2e1_dp/ &
./xc/xc_tpss.F:                                        0.3e1_dp*p_sp2norm_drhob
./xc/xc_tpss.F:               t_s2norm_drhob = t165*t167*t6/0.2e1_dp
./xc/xc_tpss.F:               C_chi_epsnorm_drhob = -0.2e1_dp/0.3e1_dp*t766*t767*t735* &
./xc/xc_tpss.F:                                     (0.2e1_dp*my_norm_drhob*t20+0.2e1_dp*t430*my_norm_drhob)* &
./xc/xc_tpss.F:                  mbnorm_drhob = t380*(0.2e1_dp*t1156*t1157* &
./xc/xc_tpss.F:                                       t_s2norm_drhob+0.2e1_dp*t349*t1176*A_s2*t_s2norm_drhob* &
./xc/xc_tpss.F:                                       t389-t1169*t1172*(0.2e1_dp*t1162*t_s2norm_drhob+0.4e1_dp &
./xc/xc_tpss.F:                                                         *t1177*t_s2norm_drhob))*t1184
./xc/xc_tpss.F:                  mbnorm_drhob = 0._dp
./xc/xc_tpss.F:               epsilon_cRevPKZBnorm_drhob = (epsilon_cGGA*C_chi_epsnorm_drhob* &
./xc/xc_tpss.F:                                             t460-C_chi_epsnorm_drhob*t460*t468-t463*t466* &
./xc/xc_tpss.F:                                             mbnorm_drhob)*t472
./xc/xc_tpss.F:                  e_ndrhob(ii) = e_ndrhob(ii)+ &
./xc/xc_tpss.F:                                                       t111*z_sp2norm_drhob-0.4e1_dp*t934*t936*z_sp2norm_drhob)* &
./xc/xc_tpss.F:                                                      p_sp2+t113*p_sp2norm_drhob+0.292e3_dp/0.2025e4_dp* &
./xc/xc_tpss.F:                                                      tildeq_b_sp2*tildeq_b_sp2norm_drhob-0.73e2_dp/0.4050e4_dp* &
./xc/xc_tpss.F:                                                      tildeq_b_sp2norm_drhob*t121-0.73e2_dp/0.8100e4_dp*t948*( &
./xc/xc_tpss.F:                                                      0.36e2_dp*z_sp2*z_sp2norm_drhob+0.100e3_dp*p_sp2* &
./xc/xc_tpss.F:                                                      p_sp2norm_drhob)+0.200e3_dp/0.6561e4_dp*t956*p_sp2norm_drhob &
./xc/xc_tpss.F:                                                      +0.8e1_dp/0.45e2_dp*t959*z_sp2norm_drhob+0.3e1_dp*t64* &
./xc/xc_tpss.F:                                                      t118*p_sp2norm_drhob)*t134-0.2e1_dp*t969*t61* &
./xc/xc_tpss.F:                                                     p_sp2norm_drhob)+scale_ec*(rho*epsilon_cRevPKZBnorm_drhob* &
./xc/xc_tpss.F:                                                                                t481+t1303*epsilon_cRevPKZBnorm_drhob*t476*t478)
./xc/xc_tpss.F:               tnorm_drho = t401*t403*t275/0.2e1_dp
./xc/xc_tpss.F:               Hnorm_drho = t414*(0.2e1_dp*t703*t704*tnorm_drho+ &
./xc/xc_tpss.F:                                  0.2e1_dp*t349*t723*A*tnorm_drho*t423-t716*t719*( &
./xc/xc_tpss.F:                                  0.2e1_dp*t709*tnorm_drho+0.4e1_dp*t724*tnorm_drho))*t731
./xc/xc_tpss.F:               tau_wnorm_drho = my_norm_drho*t275/0.4e1_dp
./xc/xc_tpss.F:               C_chi_epsnorm_drho = 0.4e1_dp/0.3e1_dp*t766*t767*t735* &
./xc/xc_tpss.F:                                    t430*my_norm_drho*t440*t442
./xc/xc_tpss.F:                  manorm_drho = 0._dp
./xc/xc_tpss.F:                  manorm_drho = Hnorm_drho
./xc/xc_tpss.F:                  mbnorm_drho = 0._dp
./xc/xc_tpss.F:                  mbnorm_drho = Hnorm_drho
./xc/xc_tpss.F:               epsilon_cRevPKZBnorm_drho = Hnorm_drho+(Hnorm_drho*C_chi_eps* &
./xc/xc_tpss.F:                                                       t460+epsilon_cGGA*C_chi_epsnorm_drho*t460+0.2e1_dp*t459* &
./xc/xc_tpss.F:                                                       tau_w*tau_wnorm_drho-C_chi_epsnorm_drho*t460*t468- &
./xc/xc_tpss.F:                                                       0.2e1_dp*t873*t468*tau_wnorm_drho-t463*(t464*manorm_drho &
./xc/xc_tpss.F:                                                                                               +t466*mbnorm_drho))*t472
./xc/xc_tpss.F:                  e_ndrho(ii) = e_ndrho(ii)+ &
./xc/xc_tpss.F:                                scale_ec*(rho*epsilon_cRevPKZBnorm_drho* &
./xc/xc_tpss.F:                                          t481+t474*(d*epsilon_cRevPKZBnorm_drho*t479+0.3e1_dp* &
./xc/xc_tpss.F:                                                     t475*t893*tau_wnorm_drho))
./xc/xc_tpss.F:                                                   *z_sp1tau_a)*t71+scale_ec*(rho*epsilon_cRevPKZBtau_a* &
./xc/xc_tpss.F:                                                    *z_sp2tau_b)*t134+scale_ec*(rho*epsilon_cRevPKZBtau_b* &
./xc/xc_xwpbe.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xwpbe.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xwpbe.F:                                              xc_rho_set_type
./xc/xc_xwpbe.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xwpbe.F:         needs%rho = .TRUE.
./xc/xc_xwpbe.F:         needs%norm_drho = .TRUE.
./xc/xc_xwpbe.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_eval(rho_set, deriv_set, order, xwpbe_params)
./xc/xc_xwpbe.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xwpbe.F:      REAL(kind=dp)                                      :: epsilon_norm_drho, epsilon_rho, omega, &
./xc/xc_xwpbe.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_rho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            norm_drho, rho
./xc/xc_xwpbe.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xwpbe.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xwpbe.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_xwpbe.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_xwpbe.F:                          drho_cutoff=epsilon_norm_drho)
./xc/xc_xwpbe.F:      dummy => rho
./xc/xc_xwpbe.F:      e_rho => dummy
./xc/xc_xwpbe.F:      e_ndrho => dummy
./xc/xc_xwpbe.F:      e_rho_rho => dummy
./xc/xc_xwpbe.F:      e_ndrho_rho => dummy
./xc/xc_xwpbe.F:      e_ndrho_ndrho => dummy
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_xwpbe.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_xwpbe.F:!$OMP     SHARED(npoints, order, rho, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_xwpbe.F:!$OMP     SHARED(e_rho_rho, e_ndrho_rho, e_ndrho_ndrho, epsilon_rho) &
./xc/xc_xwpbe.F:      CALL xwpbe_lda_calc(npoints, order, rho=rho, norm_drho=norm_drho, &
./xc/xc_xwpbe.F:                          e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_rho_rho=e_rho_rho, &
./xc/xc_xwpbe.F:                          e_ndrho_rho=e_ndrho_rho, e_ndrho_ndrho=e_ndrho_ndrho, &
./xc/xc_xwpbe.F:                          epsilon_rho=epsilon_rho, sx=sx, sx0=sx0, omega=omega)
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param norm_drho ...
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param epsilon_rho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc(npoints, order, rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_xwpbe.F:                             e_rho_rho, e_ndrho_rho, e_ndrho_ndrho, &
./xc/xc_xwpbe.F:                             epsilon_rho, sx, sx0, omega)
./xc/xc_xwpbe.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_xwpbe.F:                                                            e_rho_rho, e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, sx0, omega
./xc/xc_xwpbe.F:      REAL(dp)                                           :: my_ndrho, my_rho
./xc/xc_xwpbe.F:         my_rho = MAX(rho(ip), 0.0_dp)
./xc/xc_xwpbe.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xwpbe.F:            my_ndrho = MAX(norm_drho(ip), 0.0_dp)
./xc/xc_xwpbe.F:            t2 = t1*my_rho
./xc/xc_xwpbe.F:            t6 = my_ndrho*t4
./xc/xc_xwpbe.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_0(e_0(ip), e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, sscale, sx0, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_01(e_0(ip), e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                         e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                         my_ndrho, sscale, sx0, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_1(e_0(ip), e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_2(e_0(ip), e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_3(e_0(ip), e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_4(e_0(ip), e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param ndrho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc_0(e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xwpbe.F:                               e_ndrho_ndrho, rho, ndrho, sscale, sx0, order)
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, sscale, sx0
./xc/xc_xwpbe.F:      REAL(KIND=dp) :: d2Qndrhondrho, d2Qrhondrho, d2Qrhorho, dQndrho, dQrho, Q, t1, t10, t100, &
./xc/xc_xwpbe.F:         t1 = ndrho**2
./xc/xc_xwpbe.F:         t8 = t7*rho
./xc/xc_xwpbe.F:         t12 = rho**2
./xc/xc_xwpbe.F:         t36 = t18*ndrho
./xc/xc_xwpbe.F:         t44 = 0.1e1_dp/t25/rho
./xc/xc_xwpbe.F:         t74 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xwpbe.F:         t76 = t74*rho*f89
./xc/xc_xwpbe.F:         t119 = f32*ndrho
./xc/xc_xwpbe.F:         t123 = 0.1e1_dp/rho
./xc/xc_xwpbe.F:         t163 = t12*rho
./xc/xc_xwpbe.F:         t215 = t58/t59/rho*t61
./xc/xc_xwpbe.F:         dQrho = t185*t73-t191*t220-0.2e1_dp/0.3e1_dp*t223*t228-(2._dp &
./xc/xc_xwpbe.F:         t236 = a1*ndrho
./xc/xc_xwpbe.F:         t240 = t1*ndrho
./xc/xc_xwpbe.F:         t265 = t66*ndrho
./xc/xc_xwpbe.F:         dQndrho = t247*t73-t191*t263+2._dp*t266*t73
./xc/xc_xwpbe.F:         t372 = (t321*t114-0.7e1_dp/0.2e1_dp*t109*t327-(t330*dQrho &
./xc/xc_xwpbe.F:         t387 = dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t269*t156-t76*t423)*sx0
./xc/xc_xwpbe.F:         t425 = ndrho*t4
./xc/xc_xwpbe.F:         t489 = (t463*t114-0.7e1_dp/0.2e1_dp*t109*t465-(t330*dQndrho &
./xc/xc_xwpbe.F:         t500 = dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:         e_ndrho = e_ndrho+(-t76*t520)*sx0
./xc/xc_xwpbe.F:         d2Qrhorho = f94*t553*t67*t73-(2._dp*t557*t220)-0.4e1_dp/0.3e1_dp &
./xc/xc_xwpbe.F:         t663 = t32*t188*ndrho*t4
./xc/xc_xwpbe.F:         d2Qrhondrho = (f94*t647*t67*t73)-t557*t263+(2._dp*t184* &
./xc/xc_xwpbe.F:         d2Qndrhondrho = f94*t707*t67*t73-2._dp*t655*t263+4._dp*t246*t265* &
./xc/xc_xwpbe.F:         t867 = dQrho**2
./xc/xc_xwpbe.F:         t872 = t97*t116*dQrho
./xc/xc_xwpbe.F:         t975 = d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:                                                                                   *(t791)-t330*d2Qrhorho*t117*t130-t330*t867*t117 &
./xc/xc_xwpbe.F:                                               *(t6)+(2._dp*t412*rho*t413*t417)-t1056*t1059 &
./xc/xc_xwpbe.F:         e_rho_rho = e_rho_rho+(-0.4e1_dp/0.9e1_dp/t744*f89*t156-0.8e1_dp/0.3e1_dp*t269*t423 &
./xc/xc_xwpbe.F:         t1202 = t97*t116*dQndrho
./xc/xc_xwpbe.F:         t1215 = t335*(-2._dp*t337*ndrho*t69*t340-t339*t70*t475 &
./xc/xc_xwpbe.F:                 -t330*d2Qrhondrho*t117*t130-t330*dQrho*dQndrho*t117*t130 &
./xc/xc_xwpbe.F:         t1286 = d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_rho = e_ndrho_rho+(-0.4e1_dp/0.3e1_dp*t269*t520-t76*t1369*Clda)*sx0
./xc/xc_xwpbe.F:         t1455 = dQndrho**2
./xc/xc_xwpbe.F:         t1510 = d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:                                                                                 *(t326)*(t1395)-t330*d2Qndrhondrho*t117*t130-t330 &
./xc/xc_xwpbe.F:         e_ndrho_ndrho = e_ndrho_ndrho+(-t76*t1561*Clda)*sx0
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param ndrho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc_01(e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xwpbe.F:                                e_ndrho_ndrho, rho, ndrho, sscale, sx0, order)
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, sscale, sx0
./xc/xc_xwpbe.F:      REAL(KIND=dp) :: d2Qndrhondrho, d2Qrhondrho, d2Qrhorho, dQndrho, dQrho, Q, t1, t10, t100, &
./xc/xc_xwpbe.F:         t1 = ndrho**2
./xc/xc_xwpbe.F:         t8 = t7*rho
./xc/xc_xwpbe.F:         t12 = rho**2
./xc/xc_xwpbe.F:         t36 = t18*ndrho
./xc/xc_xwpbe.F:         t44 = 0.1e1_dp/t25/rho
./xc/xc_xwpbe.F:         t74 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xwpbe.F:         t76 = t74*rho*f89
./xc/xc_xwpbe.F:         t129 = t12*rho
./xc/xc_xwpbe.F:         t181 = t58/t59/rho*t61
./xc/xc_xwpbe.F:         dQrho = t151*t73-t157*t186-0.2e1_dp/0.3e1_dp*t189*t194-(2._dp &
./xc/xc_xwpbe.F:         t202 = a1*ndrho
./xc/xc_xwpbe.F:         t206 = t1*ndrho
./xc/xc_xwpbe.F:         t231 = t66*ndrho
./xc/xc_xwpbe.F:         dQndrho = t213*t73-t157*t229+2._dp*t232*t73
./xc/xc_xwpbe.F:         t304 = dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t235*t122-t76*t340)*sx0
./xc/xc_xwpbe.F:         t342 = ndrho*t4
./xc/xc_xwpbe.F:         t371 = g2*ndrho
./xc/xc_xwpbe.F:         t388 = dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:         e_ndrho = e_ndrho+(-t76*t408)*sx0
./xc/xc_xwpbe.F:         d2Qrhorho = f94*t441*t67*t73-(2._dp*t445*t186)-0.4e1_dp/0.3e1_dp &
./xc/xc_xwpbe.F:         t552 = t32*t154*ndrho*t4
./xc/xc_xwpbe.F:         d2Qrhondrho = (f94*t535*t67*t73)-t445*t229+(2._dp*t150* &
./xc/xc_xwpbe.F:         d2Qndrhondrho = f94*t596*t67*t73-2._dp*t543*t229+4._dp*t212*t231* &
./xc/xc_xwpbe.F:         t766 = d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:                                                                                   *t332*t65*t83*r3*t6+0.2e1_dp*t329*rho*t330*t334 &
./xc/xc_xwpbe.F:         e_rho_rho = e_rho_rho+(-0.4e1_dp/0.9e1_dp/t633*f89*t122-0.8e1_dp/0.3e1_dp*t235*t340 &
./xc/xc_xwpbe.F:         t989 = d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_rho = e_ndrho_rho+(-0.4e1_dp/0.3e1_dp*t235*t408-t76*t1073*Clda)*sx0
./xc/xc_xwpbe.F:         t1154 = d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_ndrho = e_ndrho_ndrho+(-t76*t1205*Clda)*sx0
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param ndrho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc_1(e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xwpbe.F:                               e_ndrho_ndrho, rho, ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, omega, sscale, sx
./xc/xc_xwpbe.F:      REAL(KIND=dp) :: d2Qndrhondrho, d2Qrhondrho, d2Qrhorho, dQndrho, dQrho, Q, t1, t10, t1001, &
./xc/xc_xwpbe.F:         t1 = ndrho**2
./xc/xc_xwpbe.F:         t7 = t6*rho
./xc/xc_xwpbe.F:         t12 = rho**2
./xc/xc_xwpbe.F:         t38 = t21*ndrho
./xc/xc_xwpbe.F:         t46 = 0.1e1_dp/t28/rho
./xc/xc_xwpbe.F:         t78 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xwpbe.F:         t80 = t78*rho*f89
./xc/xc_xwpbe.F:         t125 = f32*ndrho
./xc/xc_xwpbe.F:         t129 = 0.1e1_dp/rho
./xc/xc_xwpbe.F:         t346 = t12*rho
./xc/xc_xwpbe.F:         t398 = t60/t61/rho*t63
./xc/xc_xwpbe.F:         dQrho = f94*t409*t77
./xc/xc_xwpbe.F:         t411 = ndrho*t3
./xc/xc_xwpbe.F:         t415 = a1*ndrho
./xc/xc_xwpbe.F:         t419 = t1*ndrho
./xc/xc_xwpbe.F:         dQndrho = f94*t444*t77
./xc/xc_xwpbe.F:         t608 = dexerrho(Q, dQrho)
./xc/xc_xwpbe.F:         t666 = dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t446*t336-t80*t836)*sx
./xc/xc_xwpbe.F:         t876 = t68*ndrho
./xc/xc_xwpbe.F:         t968 = dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:         t979 = dexerndrho(Q, dQndrho)
./xc/xc_xwpbe.F:         e_ndrho = e_ndrho+(-t80*t1069)*sx
./xc/xc_xwpbe.F:         d2Qrhorho = f94*t1176*t77
./xc/xc_xwpbe.F:         d2Qrhondrho = f94*t1240*t77
./xc/xc_xwpbe.F:         d2Qndrhondrho = f94*t1285*t77
./xc/xc_xwpbe.F:         t1649 = d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:         t1731 = d2exerrhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:         e_rho_rho = e_rho_rho-0.4e1_dp/0.9e1_dp/t1287*f89*t336-0.8e1_dp/0.3e1_dp*t446* &
./xc/xc_xwpbe.F:         t2150 = t116*t377*ndrho*t3
./xc/xc_xwpbe.F:         t2197 = t530*(-2._dp*t532*ndrho*t119*t535-t534*t15*t888 &
./xc/xc_xwpbe.F:         t2457 = d2exerrhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         t2484 = d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_rho = e_ndrho_rho-0.4e1_dp/0.3e1_dp*t446*t1069-t80*(t2405+t2499+t2573 &
./xc/xc_xwpbe.F:         t2846 = d2exerndrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         t2875 = d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_ndrho = e_ndrho_ndrho-t80*(t2963+t3167)*Clda
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param ndrho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc_2(e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xwpbe.F:                               e_ndrho_ndrho, rho, ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, omega, sscale, sx
./xc/xc_xwpbe.F:      REAL(KIND=dp) :: d2Qndrhondrho, d2Qrhondrho, d2Qrhorho, dQndrho, dQrho, Q, t1, t10, t100, &
./xc/xc_xwpbe.F:         t1 = ndrho**2
./xc/xc_xwpbe.F:         t7 = t6*rho
./xc/xc_xwpbe.F:         t12 = rho**2
./xc/xc_xwpbe.F:         t38 = t21*ndrho
./xc/xc_xwpbe.F:         t46 = 0.1e1_dp/t28/rho
./xc/xc_xwpbe.F:         t78 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xwpbe.F:         t80 = t78*rho*f89
./xc/xc_xwpbe.F:         t151 = t149/rho
./xc/xc_xwpbe.F:         t309 = t12*rho
./xc/xc_xwpbe.F:         t361 = t60/t61/rho*t63
./xc/xc_xwpbe.F:         dQrho = f94*t372*t77
./xc/xc_xwpbe.F:         t374 = ndrho*t3
./xc/xc_xwpbe.F:         t378 = a1*ndrho
./xc/xc_xwpbe.F:         t382 = t1*ndrho
./xc/xc_xwpbe.F:         dQndrho = f94*t407*t77
./xc/xc_xwpbe.F:         t500 = dexerrho(Q, dQrho)
./xc/xc_xwpbe.F:         t574 = dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t409*t299-t80*t727)*sx
./xc/xc_xwpbe.F:         t747 = g2*ndrho
./xc/xc_xwpbe.F:         t819 = dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:         t830 = dexerndrho(Q, dQndrho)
./xc/xc_xwpbe.F:         e_ndrho = e_ndrho+(-t80*t920)*sx
./xc/xc_xwpbe.F:         d2Qrhorho = f94*t1029*t77
./xc/xc_xwpbe.F:         d2Qrhondrho = f94*t1093*t77
./xc/xc_xwpbe.F:         d2Qndrhondrho = f94*t1139*t77
./xc/xc_xwpbe.F:         t1195 = d2exerrhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:         t1374 = d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:         e_rho_rho = e_rho_rho+(-0.4e1_dp/0.9e1_dp/t1141*f89*t299-0.8e1_dp/0.3e1_dp*t409* &
./xc/xc_xwpbe.F:         t1773 = d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         t1816 = d2exerrhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_rho = e_ndrho_rho+(-0.4e1_dp/0.3e1_dp*t409*t920-t80*(t1850+t1938+t2056+ &
./xc/xc_xwpbe.F:         t2306 = d2exerndrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         t2336 = d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_ndrho = e_ndrho_ndrho+(-t80*(t2391+t2668)*Clda)*sx
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param ndrho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc_3(e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xwpbe.F:                               e_ndrho_ndrho, rho, ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, omega, sscale, sx
./xc/xc_xwpbe.F:      REAL(KIND=dp) :: d2Qndrhondrho, d2Qrhondrho, d2Qrhorho, dQndrho, dQrho, Q, t1, t10, t1004, &
./xc/xc_xwpbe.F:         t1 = ndrho**2
./xc/xc_xwpbe.F:         t7 = t6*rho
./xc/xc_xwpbe.F:         t12 = rho**2
./xc/xc_xwpbe.F:         t38 = t21*ndrho
./xc/xc_xwpbe.F:         t46 = 0.1e1_dp/t28/rho
./xc/xc_xwpbe.F:         t78 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xwpbe.F:         t80 = t78*rho*f89
./xc/xc_xwpbe.F:         t125 = f32*ndrho
./xc/xc_xwpbe.F:         t129 = 0.1e1_dp/rho
./xc/xc_xwpbe.F:         t216 = t12*rho
./xc/xc_xwpbe.F:         t274 = t60/t61/rho*t63
./xc/xc_xwpbe.F:         dQrho = f94*t285*t77
./xc/xc_xwpbe.F:         t287 = ndrho*t3
./xc/xc_xwpbe.F:         t291 = a1*ndrho
./xc/xc_xwpbe.F:         t295 = t1*ndrho
./xc/xc_xwpbe.F:         dQndrho = f94*t320*t77
./xc/xc_xwpbe.F:         t542 = dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t322*t206-t80*t555)*sx
./xc/xc_xwpbe.F:         t595 = t68*ndrho
./xc/xc_xwpbe.F:         t687 = dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:         e_ndrho = e_ndrho+(-t80*t696)*sx
./xc/xc_xwpbe.F:         d2Qrhorho = f94*t811*t77
./xc/xc_xwpbe.F:         d2Qrhondrho = f94*t875*t77
./xc/xc_xwpbe.F:         d2Qndrhondrho = f94*t920*t77
./xc/xc_xwpbe.F:         t1386 = d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:         e_rho_rho = e_rho_rho+(-0.4e1_dp/0.9e1_dp/t922*f89*t206-0.8e1_dp/0.3e1_dp*t322*t555 &
./xc/xc_xwpbe.F:         t1488 = t116*t251*ndrho*t3
./xc/xc_xwpbe.F:         t1535 = t396*(-2._dp*t398*ndrho*t119*t401-t400*t15*t607 &
./xc/xc_xwpbe.F:         t1608 = d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_rho = e_ndrho_rho+(-0.4e1_dp/0.3e1_dp*t322*t696-t80*(t1652+t1860)*Clda)*sx
./xc/xc_xwpbe.F:         t2159 = d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_ndrho = e_ndrho_ndrho+(-t80*(t2013+t2174)*Clda)*sx
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param ndrho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lda_calc_4(e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_xwpbe.F:                               e_ndrho_ndrho, rho, ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(INOUT)                       :: e_0, e_rho, e_ndrho, e_rho_rho, &
./xc/xc_xwpbe.F:                                                            e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(KIND=dp), INTENT(IN)                          :: rho, ndrho, omega, sscale, sx
./xc/xc_xwpbe.F:      REAL(KIND=dp) :: d2Qndrhondrho, d2Qrhondrho, d2Qrhorho, dQndrho, dQrho, Q, t1, t10, t100, &
./xc/xc_xwpbe.F:         t1 = ndrho**2
./xc/xc_xwpbe.F:         t7 = t6*rho
./xc/xc_xwpbe.F:         t12 = rho**2
./xc/xc_xwpbe.F:         t38 = t21*ndrho
./xc/xc_xwpbe.F:         t46 = 0.1e1_dp/t28/rho
./xc/xc_xwpbe.F:         t78 = rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_xwpbe.F:         t80 = t78*rho*f89
./xc/xc_xwpbe.F:         t151 = t149/rho
./xc/xc_xwpbe.F:         t177 = t12*rho
./xc/xc_xwpbe.F:         t235 = t60/t61/rho*t63
./xc/xc_xwpbe.F:         dQrho = f94*t246*t77
./xc/xc_xwpbe.F:         t248 = ndrho*t3
./xc/xc_xwpbe.F:         t252 = a1*ndrho
./xc/xc_xwpbe.F:         t256 = t1*ndrho
./xc/xc_xwpbe.F:         dQndrho = f94*t281*t77
./xc/xc_xwpbe.F:         t431 = dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:         e_rho = e_rho+(-0.4e1_dp/0.3e1_dp*t283*t167-t80*t444)*sx
./xc/xc_xwpbe.F:         t464 = g2*ndrho
./xc/xc_xwpbe.F:         t536 = dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:         e_ndrho = e_ndrho+(-t80*t545)*sx
./xc/xc_xwpbe.F:         d2Qrhorho = f94*t662*t77
./xc/xc_xwpbe.F:         d2Qrhondrho = f94*t726*t77
./xc/xc_xwpbe.F:         d2Qndrhondrho = f94*t772*t77
./xc/xc_xwpbe.F:         t1033 = d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:         e_rho_rho = e_rho_rho+(-0.4e1_dp/0.9e1_dp/t774*f89*t167-0.8e1_dp/0.3e1_dp*t283*t444 &
./xc/xc_xwpbe.F:         t1324 = d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_rho = e_ndrho_rho+(-0.4e1_dp/0.3e1_dp*t283*t545-t80*(t1319+t1443)*Clda)*sx
./xc/xc_xwpbe.F:         t1452 = d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:         e_ndrho_ndrho = e_ndrho_ndrho+(-t80*(t1576+t1672)*Clda)*sx
./xc/xc_xwpbe.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xwpbe.F:         needs%rho_spin = .TRUE.
./xc/xc_xwpbe.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_xwpbe.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lsd_eval(rho_set, deriv_set, order, xwpbe_params)
./xc/xc_xwpbe.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xwpbe.F:      REAL(kind=dp)                                      :: epsilon_norm_drho, epsilon_rho, omega, &
./xc/xc_xwpbe.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrhoa, e_ndrhoa_ndrhoa, &
./xc/xc_xwpbe.F:         e_ndrhoa_rhoa, e_ndrhob, e_ndrhob_ndrhob, e_ndrhob_rhob, e_rhoa, e_rhoa_rhoa, e_rhob, &
./xc/xc_xwpbe.F:         e_rhob_rhob, norm_drhoa, norm_drhob, rhoa, rhob
./xc/xc_xwpbe.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xwpbe.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xwpbe.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_xwpbe.F:                          norm_drhob=norm_drhob, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_xwpbe.F:                          drho_cutoff=epsilon_norm_drho)
./xc/xc_xwpbe.F:      dummy => rhoa
./xc/xc_xwpbe.F:      e_rhoa => dummy
./xc/xc_xwpbe.F:      e_rhob => dummy
./xc/xc_xwpbe.F:      e_ndrhoa => dummy
./xc/xc_xwpbe.F:      e_ndrhob => dummy
./xc/xc_xwpbe.F:      e_rhoa_rhoa => dummy
./xc/xc_xwpbe.F:      e_rhob_rhob => dummy
./xc/xc_xwpbe.F:      e_ndrhoa_rhoa => dummy
./xc/xc_xwpbe.F:      e_ndrhob_rhob => dummy
./xc/xc_xwpbe.F:      e_ndrhoa_ndrhoa => dummy
./xc/xc_xwpbe.F:      e_ndrhob_ndrhob => dummy
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa_rhoa)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob_rhob)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa_rhoa)
./xc/xc_xwpbe.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob_rhob)
./xc/xc_xwpbe.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa_ndrhoa)
./xc/xc_xwpbe.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_xwpbe.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob_ndrhob)
./xc/xc_xwpbe.F:!$OMP     SHARED(npoints, order, rhoa, norm_drhoa, e_0, e_rhoa, e_ndrhoa) &
./xc/xc_xwpbe.F:!$OMP     SHARED(e_rhoa_rhoa, e_ndrhoa_rhoa, e_ndrhoa_ndrhoa, epsilon_rho) &
./xc/xc_xwpbe.F:!$OMP     SHARED(rhob, norm_drhob, e_rhob, e_ndrhob, e_rhob_rhob) &
./xc/xc_xwpbe.F:!$OMP     SHARED(e_ndrhob_rhob, e_ndrhob_ndrhob)
./xc/xc_xwpbe.F:      CALL xwpbe_lsd_calc(npoints, order, rho=rhoa, norm_drho=norm_drhoa, &
./xc/xc_xwpbe.F:                          e_0=e_0, e_rho=e_rhoa, e_ndrho=e_ndrhoa, e_rho_rho=e_rhoa_rhoa, &
./xc/xc_xwpbe.F:                          e_ndrho_rho=e_ndrhoa_rhoa, e_ndrho_ndrho=e_ndrhoa_ndrhoa, &
./xc/xc_xwpbe.F:                          epsilon_rho=epsilon_rho, &
./xc/xc_xwpbe.F:      CALL xwpbe_lsd_calc(npoints, order, rho=rhob, norm_drho=norm_drhob, &
./xc/xc_xwpbe.F:                          e_0=e_0, e_rho=e_rhob, e_ndrho=e_ndrhob, e_rho_rho=e_rhob_rhob, &
./xc/xc_xwpbe.F:                          e_ndrho_rho=e_ndrhob_rhob, e_ndrho_ndrho=e_ndrhob_ndrhob, &
./xc/xc_xwpbe.F:                          epsilon_rho=epsilon_rho, &
./xc/xc_xwpbe.F:!> \param rho , ndrho: density and norm of the density gradient
./xc/xc_xwpbe.F:!> \param norm_drho ...
./xc/xc_xwpbe.F:!> \param e_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho ...
./xc/xc_xwpbe.F:!> \param e_rho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_rho ...
./xc/xc_xwpbe.F:!> \param e_ndrho_ndrho ...
./xc/xc_xwpbe.F:!> \param epsilon_rho ...
./xc/xc_xwpbe.F:   SUBROUTINE xwpbe_lsd_calc(npoints, order, rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_xwpbe.F:                             e_rho_rho, e_ndrho_rho, e_ndrho_ndrho, &
./xc/xc_xwpbe.F:                             epsilon_rho, sx, sx0, omega)
./xc/xc_xwpbe.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: rho, norm_drho, e_0, e_rho, e_ndrho, &
./xc/xc_xwpbe.F:                                                            e_rho_rho, e_ndrho_rho, e_ndrho_ndrho
./xc/xc_xwpbe.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, sx0, omega
./xc/xc_xwpbe.F:      REAL(dp)                                           :: e_0_temp, my_ndrho, my_rho
./xc/xc_xwpbe.F:         my_rho = 2.0_dp*MAX(rho(ip), 0.0_dp)
./xc/xc_xwpbe.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xwpbe.F:            my_ndrho = 2.0_dp*MAX(norm_drho(ip), 0.0_dp)
./xc/xc_xwpbe.F:            t2 = t1*my_rho
./xc/xc_xwpbe.F:            t6 = my_ndrho*t4
./xc/xc_xwpbe.F:            t7 = 0.1e1_dp/my_rho
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_0(e_0_temp, e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, sscale, sx0, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_01(e_0_temp, e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                         e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                         my_ndrho, sscale, sx0, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_1(e_0_temp, e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_2(e_0_temp, e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_3(e_0_temp, e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:                  CALL xwpbe_lda_calc_4(e_0_temp, e_rho(ip), e_ndrho(ip), e_rho_rho(ip), &
./xc/xc_xwpbe.F:                                        e_ndrho_rho(ip), e_ndrho_ndrho(ip), my_rho, &
./xc/xc_xwpbe.F:                                        my_ndrho, omega, sscale, sx, order)
./xc/xc_xwpbe.F:!>      rho and norm_drho.
./xc/xc_xwpbe.F:!> \param Q , dQrho, dQndrho, d2Qrhondrho :
./xc/xc_xwpbe.F:!>        rho and norm_drho
./xc/xc_xwpbe.F:!> \param dQrho ...
./xc/xc_xwpbe.F:   FUNCTION dexeirho(Q, dQrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: dexeirho
./xc/xc_xwpbe.F:      dexeirho = dQrho*(exei(Q)-1.0_dp/Q)
./xc/xc_xwpbe.F:   END FUNCTION dexeirho
./xc/xc_xwpbe.F:!> \param dQndrho ...
./xc/xc_xwpbe.F:   FUNCTION dexeindrho(Q, dQndrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQndrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: dexeindrho
./xc/xc_xwpbe.F:      dexeindrho = dQndrho*(exei(Q)-1.0_dp/Q)
./xc/xc_xwpbe.F:   END FUNCTION dexeindrho
./xc/xc_xwpbe.F:!> \param dQrho ...
./xc/xc_xwpbe.F:   FUNCTION dexerrho(Q, dQrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: dexerrho
./xc/xc_xwpbe.F:      dexerrho = dQrho*exer(Q)-dQrho*rootpi/SQRT(Q)
./xc/xc_xwpbe.F:   END FUNCTION dexerrho
./xc/xc_xwpbe.F:!> \param dQndrho ...
./xc/xc_xwpbe.F:   FUNCTION dexerndrho(Q, dQndrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQndrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: dexerndrho
./xc/xc_xwpbe.F:      dexerndrho = dQndrho*exer(Q)-dQndrho*rootpi/SQRT(Q)
./xc/xc_xwpbe.F:   END FUNCTION dexerndrho
./xc/xc_xwpbe.F:!> \param dQrho ...
./xc/xc_xwpbe.F:!> \param d2Qrhorho ...
./xc/xc_xwpbe.F:   FUNCTION d2exeirhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQrho, d2Qrhorho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: d2exeirhorho
./xc/xc_xwpbe.F:      d2exeirhorho = exei(Q)*(d2Qrhorho+dQrho*dQrho)+ &
./xc/xc_xwpbe.F:                     1.0_dp/(Q*Q)*(-Q*dQrho*dQrho-Q*d2Qrhorho+dQrho*dQrho)
./xc/xc_xwpbe.F:   END FUNCTION d2exeirhorho
./xc/xc_xwpbe.F:!> \param dQrho ...
./xc/xc_xwpbe.F:!> \param d2Qrhorho ...
./xc/xc_xwpbe.F:   FUNCTION d2exerrhorho(Q, dQrho, d2Qrhorho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQrho, d2Qrhorho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: d2exerrhorho
./xc/xc_xwpbe.F:      d2exerrhorho = exer(Q)*(d2Qrhorho+dQrho*dQrho)-dQrho*dQrho/(pi12*Q12)+ &
./xc/xc_xwpbe.F:                     0.5_dp*dQrho*dQrho/(pi12*Q*Q12)-d2Qrhorho/(pi12*Q12)
./xc/xc_xwpbe.F:   END FUNCTION d2exerrhorho
./xc/xc_xwpbe.F:!> \param dQrho ...
./xc/xc_xwpbe.F:!> \param dQndrho ...
./xc/xc_xwpbe.F:!> \param d2Qrhondrho ...
./xc/xc_xwpbe.F:   FUNCTION d2exeirhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQrho, dQndrho, d2Qrhondrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: d2exeirhondrho
./xc/xc_xwpbe.F:      d2exeirhondrho = exei(Q)*(d2Qrhondrho+dQrho*dQndrho)- &
./xc/xc_xwpbe.F:                       1.0_dp/Q*(dQrho*dQndrho+d2Qrhondrho)+1.0_dp/(Q*Q)*dQrho*dQndrho
./xc/xc_xwpbe.F:   END FUNCTION d2exeirhondrho
./xc/xc_xwpbe.F:!> \param dQrho ...
./xc/xc_xwpbe.F:!> \param dQndrho ...
./xc/xc_xwpbe.F:!> \param d2Qrhondrho ...
./xc/xc_xwpbe.F:   FUNCTION d2exerrhondrho(Q, dQrho, dQndrho, d2Qrhondrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQrho, dQndrho, d2Qrhondrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: d2exerrhondrho
./xc/xc_xwpbe.F:      d2exerrhondrho = exer(Q)*(d2Qrhondrho+dQrho*dQndrho)-1.0_dp/(pi12*Q12)*dQrho*dQndrho &
./xc/xc_xwpbe.F:                       +0.5_dp/(pi12*Q12*Q)*dQrho*dQndrho-1.0_dp/(pi12*Q12)*d2Qrhondrho
./xc/xc_xwpbe.F:   END FUNCTION d2exerrhondrho
./xc/xc_xwpbe.F:!> \param dQndrho ...
./xc/xc_xwpbe.F:!> \param d2Qndrhondrho ...
./xc/xc_xwpbe.F:   FUNCTION d2exeindrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQndrho, d2Qndrhondrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: d2exeindrhondrho
./xc/xc_xwpbe.F:      d2exeindrhondrho = exei(Q)*(d2Qndrhondrho+dQndrho*dQndrho)+ &
./xc/xc_xwpbe.F:                         1.0_dp/(Q*Q)*(-Q*dQndrho*dQndrho-Q*d2Qndrhondrho+dQndrho*dQndrho)
./xc/xc_xwpbe.F:   END FUNCTION d2exeindrhondrho
./xc/xc_xwpbe.F:!> \param dQndrho ...
./xc/xc_xwpbe.F:!> \param d2Qndrhondrho ...
./xc/xc_xwpbe.F:   FUNCTION d2exerndrhondrho(Q, dQndrho, d2Qndrhondrho)
./xc/xc_xwpbe.F:      REAL(dp), INTENT(IN)                               :: Q, dQndrho, d2Qndrhondrho
./xc/xc_xwpbe.F:      REAL(dp)                                           :: d2exerndrhondrho
./xc/xc_xwpbe.F:      d2exerndrhondrho = exer(Q)*(d2Qndrhondrho+dQndrho*dQndrho)-dQndrho*dQndrho/(pi12*Q12) &
./xc/xc_xwpbe.F:                         +0.5_dp*dQndrho*dQndrho/(pi12*Q*Q12)-d2Qndrhondrho/(pi12*Q12)
./xc/xc_xwpbe.F:   END FUNCTION d2exerndrhondrho
./xc/xc_xlda_hole_t_c_lr.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_xlda_hole_t_c_lr.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_xlda_hole_t_c_lr.F:                                              xc_rho_set_type
./xc/xc_xlda_hole_t_c_lr.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xlda_hole_t_c_lr.F:         needs%rho = .TRUE.
./xc/xc_xlda_hole_t_c_lr.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_xlda_hole_t_c_lr.F:         needs%rho_spin = .TRUE.
./xc/xc_xlda_hole_t_c_lr.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xlda_hole_t_c_lr.F:   SUBROUTINE xlda_hole_t_c_lr_lda_eval(rho_set, deriv_set, order, params)
./xc/xc_xlda_hole_t_c_lr.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp)                                      :: epsilon_rho, R, sx
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_rho, rho
./xc/xc_xlda_hole_t_c_lr.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xlda_hole_t_c_lr.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xlda_hole_t_c_lr.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_xlda_hole_t_c_lr.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xlda_hole_t_c_lr.F:      dummy => rho
./xc/xc_xlda_hole_t_c_lr.F:      e_rho => dummy
./xc/xc_xlda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_xlda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_xlda_hole_t_c_lr.F:      CALL xlda_hole_t_c_lr_lda_calc(npoints, order, rho=rho, &
./xc/xc_xlda_hole_t_c_lr.F:                                     e_0=e_0, e_rho=e_rho, &
./xc/xc_xlda_hole_t_c_lr.F:                                     epsilon_rho=epsilon_rho, &
./xc/xc_xlda_hole_t_c_lr.F:!> \param rho ...
./xc/xc_xlda_hole_t_c_lr.F:!> \param e_rho ...
./xc/xc_xlda_hole_t_c_lr.F:!> \param epsilon_rho ...
./xc/xc_xlda_hole_t_c_lr.F:   SUBROUTINE xlda_hole_t_c_lr_lda_calc(npoints, order, rho, e_0, e_rho, &
./xc/xc_xlda_hole_t_c_lr.F:                                        epsilon_rho, sx, R)
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: rho, e_0, e_rho
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R
./xc/xc_xlda_hole_t_c_lr.F:      REAL(dp)                                           :: my_rho
./xc/xc_xlda_hole_t_c_lr.F:!$OMP                 SHARED(npoints, rho, epsilon_rho, order, e_0, e_rho) &
./xc/xc_xlda_hole_t_c_lr.F:!$OMP                 PRIVATE(ip, my_rho)
./xc/xc_xlda_hole_t_c_lr.F:         my_rho = MAX(rho(ip), 0.0_dp)
./xc/xc_xlda_hole_t_c_lr.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xlda_hole_t_c_lr.F:            CALL xlda_hole_t_c_lr_lda_calc_0(order, my_rho, e_0(ip), e_rho(ip), &
./xc/xc_xlda_hole_t_c_lr.F:!> \param rho ...
./xc/xc_xlda_hole_t_c_lr.F:!> \param e_rho ...
./xc/xc_xlda_hole_t_c_lr.F:   SUBROUTINE xlda_hole_t_c_lr_lda_calc_0(order, rho, e_0, e_rho, &
./xc/xc_xlda_hole_t_c_lr.F:      REAL(KIND=dp), INTENT(IN)                          :: rho
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), INTENT(INOUT)                       :: e_0, e_rho
./xc/xc_xlda_hole_t_c_lr.F:         t1 = rho**2
./xc/xc_xlda_hole_t_c_lr.F:         t5 = t4*rho
./xc/xc_xlda_hole_t_c_lr.F:         t82 = A/rho
./xc/xc_xlda_hole_t_c_lr.F:         e_rho = e_rho+(0.4e1_dp/0.3e1_dp*rho*pi*t68-0.4e1_dp/0.9e1_dp*t1*t4*pi &
./xc/xc_xlda_hole_t_c_lr.F:                                                               0.3e1_dp*E*t15*t14*t86*rho*t25-0.4e1_dp/0.3e1_dp*t91*t14 &
./xc/xc_xlda_hole_t_c_lr.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_xlda_hole_t_c_lr.F:   SUBROUTINE xlda_hole_t_c_lr_lsd_eval(rho_set, deriv_set, order, params)
./xc/xc_xlda_hole_t_c_lr.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp)                                      :: epsilon_rho, R, sx
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_rhoa, e_rhob, rhoa, rhob
./xc/xc_xlda_hole_t_c_lr.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_xlda_hole_t_c_lr.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_xlda_hole_t_c_lr.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, &
./xc/xc_xlda_hole_t_c_lr.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_xlda_hole_t_c_lr.F:      dummy => rhoa
./xc/xc_xlda_hole_t_c_lr.F:      e_rhoa => dummy
./xc/xc_xlda_hole_t_c_lr.F:      e_rhob => dummy
./xc/xc_xlda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_xlda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_xlda_hole_t_c_lr.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_xlda_hole_t_c_lr.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_xlda_hole_t_c_lr.F:!$OMP              SHARED(npoints, order, rhoa, e_0, e_rhoa, epsilon_rho) &
./xc/xc_xlda_hole_t_c_lr.F:!$OMP              SHARED(sx, r,rhob, e_rhob)
./xc/xc_xlda_hole_t_c_lr.F:      CALL xlda_hole_t_c_lr_lsd_calc(npoints, order, rho=rhoa, &
./xc/xc_xlda_hole_t_c_lr.F:                                     e_0=e_0, e_rho=e_rhoa, &
./xc/xc_xlda_hole_t_c_lr.F:                                     epsilon_rho=epsilon_rho, &
./xc/xc_xlda_hole_t_c_lr.F:      CALL xlda_hole_t_c_lr_lsd_calc(npoints, order, rho=rhob, &
./xc/xc_xlda_hole_t_c_lr.F:                                     e_0=e_0, e_rho=e_rhob, &
./xc/xc_xlda_hole_t_c_lr.F:                                     epsilon_rho=epsilon_rho, &
./xc/xc_xlda_hole_t_c_lr.F:!> \param rho ...
./xc/xc_xlda_hole_t_c_lr.F:!> \param e_rho ...
./xc/xc_xlda_hole_t_c_lr.F:!> \param epsilon_rho ...
./xc/xc_xlda_hole_t_c_lr.F:   SUBROUTINE xlda_hole_t_c_lr_lsd_calc(npoints, order, rho, e_0, e_rho, &
./xc/xc_xlda_hole_t_c_lr.F:                                        epsilon_rho, sx, R)
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: rho, e_0, e_rho
./xc/xc_xlda_hole_t_c_lr.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sx, R
./xc/xc_xlda_hole_t_c_lr.F:      REAL(dp)                                           :: e_tmp, my_rho
./xc/xc_xlda_hole_t_c_lr.F:         my_rho = 2.0_dp*MAX(rho(ip), 0.0_dp)
./xc/xc_xlda_hole_t_c_lr.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_xlda_hole_t_c_lr.F:            CALL xlda_hole_t_c_lr_lda_calc_0(order, my_rho, e_tmp, e_rho(ip), &
./xc/xc_lyp.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_lyp.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_lyp.F:                                              xc_rho_set_type
./xc/xc_lyp.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_lyp.F:         needs%rho = .TRUE.
./xc/xc_lyp.F:         needs%rho_1_3 = .TRUE.
./xc/xc_lyp.F:         needs%norm_drho = .TRUE.
./xc/xc_lyp.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_lyp.F:         needs%rho_spin = .TRUE.
./xc/xc_lyp.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_lyp.F:         needs%norm_drho = .TRUE.
./xc/xc_lyp.F:!> \param rho_set the density where you want to evaluate the functional
./xc/xc_lyp.F:   SUBROUTINE lyp_lda_eval(rho_set, deriv_set, grad_deriv, lyp_params)
./xc/xc_lyp.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_lyp.F:      REAL(kind=dp)                                      :: epsilon_norm_drho, epsilon_rho, sc
./xc/xc_lyp.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER :: dummy, e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_lyp.F:         e_ndrho_ndrho_rho, e_ndrho_rho, e_ndrho_rho_rho, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_lyp.F:         norm_drho, rho, rho_1_3
./xc/xc_lyp.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_lyp.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_lyp.F:      CALL xc_rho_set_get(rho_set, rho_1_3=rho_1_3, rho=rho, &
./xc/xc_lyp.F:                          norm_drho=norm_drho, local_bounds=bo, rho_cutoff=epsilon_rho, &
./xc/xc_lyp.F:                          drho_cutoff=epsilon_norm_drho)
./xc/xc_lyp.F:      dummy => rho
./xc/xc_lyp.F:      e_rho => dummy
./xc/xc_lyp.F:      e_ndrho => dummy
./xc/xc_lyp.F:      e_rho_rho => dummy
./xc/xc_lyp.F:      e_ndrho_rho => dummy
./xc/xc_lyp.F:      e_ndrho_ndrho => dummy
./xc/xc_lyp.F:      e_rho_rho_rho => dummy
./xc/xc_lyp.F:      e_ndrho_rho_rho => dummy
./xc/xc_lyp.F:      e_ndrho_ndrho_rho => dummy
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rho)", &
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho)
./xc/xc_lyp.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_lyp.F:                                         "(norm_drho)(rho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_rho_rho)
./xc/xc_lyp.F:                                         "(norm_drho)(norm_drho)(rho)", allocate_deriv=.TRUE.)
./xc/xc_lyp.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_rho)
./xc/xc_lyp.F:!FM             "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.,&
./xc/xc_lyp.F:!FM        call xc_derivative_get(deriv,deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_lyp.F:!$OMP            SHARED(rho, rho_1_3, norm_drho, e_0, e_rho, e_ndrho) &
./xc/xc_lyp.F:!$OMP            SHARED(e_rho_rho, e_ndrho_rho, e_ndrho_ndrho) &
./xc/xc_lyp.F:!$OMP            SHARED(e_rho_rho_rho, e_ndrho_rho_rho) &
./xc/xc_lyp.F:!$OMP            SHARED(e_ndrho_ndrho_rho, grad_deriv, npoints) &
./xc/xc_lyp.F:!$OMP            SHARED(epsilon_rho,  sc)
./xc/xc_lyp.F:      CALL lyp_lda_calc(rho=rho, rho_1_3=rho_1_3, norm_drho=norm_drho, &
./xc/xc_lyp.F:                        e_0=e_0, e_rho=e_rho, e_ndrho=e_ndrho, e_rho_rho=e_rho_rho, &
./xc/xc_lyp.F:                        e_ndrho_rho=e_ndrho_rho, e_ndrho_ndrho=e_ndrho_ndrho, &
./xc/xc_lyp.F:                        e_rho_rho_rho=e_rho_rho_rho, e_ndrho_rho_rho=e_ndrho_rho_rho, &
./xc/xc_lyp.F:                        e_ndrho_ndrho_rho=e_ndrho_ndrho_rho, &
./xc/xc_lyp.F:                        npoints=npoints, epsilon_rho=epsilon_rho, sc=sc)
./xc/xc_lyp.F:!> \param rho the density where you want to evaluate the functional
./xc/xc_lyp.F:!> \param rho_1_3 ...
./xc/xc_lyp.F:!> \param norm_drho ...
./xc/xc_lyp.F:!> \param e_rho ...
./xc/xc_lyp.F:!> \param e_ndrho ...
./xc/xc_lyp.F:!> \param e_rho_rho ...
./xc/xc_lyp.F:!> \param e_ndrho_rho ...
./xc/xc_lyp.F:!> \param e_ndrho_ndrho ...
./xc/xc_lyp.F:!> \param e_rho_rho_rho ...
./xc/xc_lyp.F:!> \param e_ndrho_rho_rho ...
./xc/xc_lyp.F:!> \param e_ndrho_ndrho_rho ...
./xc/xc_lyp.F:!> \param epsilon_rho ...
./xc/xc_lyp.F:   SUBROUTINE lyp_lda_calc(rho, rho_1_3, norm_drho, &
./xc/xc_lyp.F:                           e_0, e_rho, e_ndrho, e_rho_rho, e_ndrho_rho, &
./xc/xc_lyp.F:                           e_ndrho_ndrho, e_rho_rho_rho, e_ndrho_rho_rho, e_ndrho_ndrho_rho, &
./xc/xc_lyp.F:                           grad_deriv, npoints, epsilon_rho, sc)
./xc/xc_lyp.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(inout) :: e_ndrho_ndrho_rho, e_ndrho_rho_rho, &
./xc/xc_lyp.F:                                                            e_rho_rho_rho, e_ndrho_ndrho, &
./xc/xc_lyp.F:                                                            e_ndrho_rho, e_rho_rho, e_ndrho, &
./xc/xc_lyp.F:                                                            e_rho, e_0
./xc/xc_lyp.F:      REAL(kind=dp), DIMENSION(1:npoints), INTENT(in)    :: norm_drho, rho_1_3, rho
./xc/xc_lyp.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sc
./xc/xc_lyp.F:      REAL(kind=dp) :: cf, epsilon_rho13, my_ndrho, my_rho, my_rho_1_3, t1, t102, t103, t105, &
./xc/xc_lyp.F:      epsilon_rho13 = epsilon_rho**(1.0_dp/3.0_dp)
./xc/xc_lyp.F:            my_rho = rho(ii)
./xc/xc_lyp.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_lyp.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_lyp.F:               my_ndrho = norm_drho(ii)
./xc/xc_lyp.F:               t1 = my_rho_1_3**2
./xc/xc_lyp.F:               t2 = t1*my_rho
./xc/xc_lyp.F:               t5 = my_rho**2
./xc/xc_lyp.F:               t6 = t5*my_rho
./xc/xc_lyp.F:               t7 = my_rho_1_3*t6
./xc/xc_lyp.F:               t11 = 0.1e1_dp/my_rho_1_3
./xc/xc_lyp.F:               t22 = my_ndrho**2
./xc/xc_lyp.F:               t26 = my_rho_1_3*t22
./xc/xc_lyp.F:               t38 = my_rho_1_3+d
./xc/xc_lyp.F:               t48 = my_rho_1_3*t5
./xc/xc_lyp.F:               t77 = 0.1e1_dp/my_rho
./xc/xc_lyp.F:               t93 = my_rho_1_3*my_rho
./xc/xc_lyp.F:               e_rho(ii) = e_rho(ii) &
./xc/xc_lyp.F:               t112 = my_rho_1_3*my_ndrho
./xc/xc_lyp.F:               t123 = 0.6e1_dp*t14*t1*my_ndrho+0.20e2_dp*t14*t112 &
./xc/xc_lyp.F:                      my_ndrho*c*d
./xc/xc_lyp.F:               e_ndrho(ii) = e_ndrho(ii) &
./xc/xc_lyp.F:            my_rho = rho(ii)
./xc/xc_lyp.F:            IF (my_rho > epsilon_rho) THEN
./xc/xc_lyp.F:               my_rho_1_3 = rho_1_3(ii)
./xc/xc_lyp.F:               my_ndrho = norm_drho(ii)
./xc/xc_lyp.F:               t1 = my_rho_1_3**2
./xc/xc_lyp.F:               t2 = t1*my_rho
./xc/xc_lyp.F:               t5 = my_rho**2
./xc/xc_lyp.F:               t6 = t5*my_rho
./xc/xc_lyp.F:               t7 = my_rho_1_3*t6
./xc/xc_lyp.F:               t11 = 0.1e1_dp/my_rho_1_3
./xc/xc_lyp.F:               t22 = my_ndrho**2
./xc/xc_lyp.F:               t26 = my_rho_1_3*t22
./xc/xc_lyp.F:               t38 = my_rho_1_3+d
./xc/xc_lyp.F:               t48 = my_rho_1_3*t5
./xc/xc_lyp.F:               t77 = 0.1e1_dp/my_rho
./xc/xc_lyp.F:               t93 = my_rho_1_3*my_rho
./xc/xc_lyp.F:               t112 = my_rho_1_3*my_ndrho
./xc/xc_lyp.F:               t123 = 0.6e1_dp*t14*t1*my_ndrho+0.20e2_dp*t14*t112 &
./xc/xc_lyp.F:                      my_ndrho*c*d
./xc/xc_lyp.F:                  e_rho(ii) = e_rho(ii) &
./xc/xc_lyp.F:                  e_ndrho(ii) = e_ndrho(ii) &
./xc/xc_lyp.F:               t192 = -0.560e3_dp*t93-0.432e3_dp*my_rho*d-0.128e3_dp&
./xc/xc_lyp.F:                     & *t52*my_rho*t13*cf-0.8e1_dp*t88*t1*t13* &
./xc/xc_lyp.F:                     & *t62-0.8e1_dp*t88*my_rho_1_3*t62-0.432e3_dp* &
./xc/xc_lyp.F:                      t14*my_rho*cf*d-0.14e2_dp/0.9e1_dp*t52* &
./xc/xc_lyp.F:               t215 = t13*my_ndrho*d
./xc/xc_lyp.F:               t227 = 0.20e2_dp/0.3e1_dp*t52*t70*my_ndrho+0.4e1_dp* &
./xc/xc_lyp.F:                      t14*t11*my_ndrho+0.20e2_dp/0.3e1_dp*t78*t215&
./xc/xc_lyp.F:                    & +0.20e2_dp/0.3e1_dp*t14*t69*my_ndrho*d+ &
./xc/xc_lyp.F:                      0.14e2_dp/0.3e1_dp*t88*t89*my_ndrho+0.14e2_dp &
./xc/xc_lyp.F:               t245 = 0.6e1_dp*t14*t1+0.20e2_dp*t14*my_rho_1_3*d+ &
./xc/xc_lyp.F:                      0.14e2_dp*t14*my_rho_1_3*c+0.14e2_dp*t14*c* &
./xc/xc_lyp.F:                  e_rho_rho(ii) = e_rho_rho(ii) &
./xc/xc_lyp.F:                  e_ndrho_rho(ii) = e_ndrho_rho(ii) &
./xc/xc_lyp.F:                  e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii) &
./xc/xc_lyp.F:               t332 = -0.432e3_dp*d-0.2240e4_dp/0.3e1_dp*my_rho_1_3- &
./xc/xc_lyp.F:                      t70*cf-0.2240e4_dp/0.3e1_dp*t14*my_rho_1_3* &
./xc/xc_lyp.F:                  e_rho_rho_rho(ii) = e_rho_rho_rho(ii) &
./xc/xc_lyp.F:                         my_rho_1_3/t248*t106+0.5e1_dp/0.72e2_dp*t45* &
./xc/xc_lyp.F:                  e_ndrho_rho_rho(ii) = e_ndrho_rho_rho(ii) &
./xc/xc_lyp.F:                       & (-0.28e2_dp/0.9e1_dp*t52*t161*my_ndrho- &
./xc/xc_lyp.F:                         0.22e2_dp/0.9e1_dp*t88*t166*my_ndrho-0.4e1_dp &
./xc/xc_lyp.F:                       &/0.3e1_dp*t14*t94*my_ndrho-0.40e2_dp/0.9e1_dp &
./xc/xc_lyp.F:                         0.9e1_dp*t14*t3*my_ndrho*d+0.14e2_dp/ &
./xc/xc_lyp.F:                         0.9e1_dp*t184*t185*my_ndrho+0.14e2_dp/0.9e1_dp&
./xc/xc_lyp.F:                  e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii) &
./xc/xc_lyp.F:!FM      t1 = my_rho_1_3 ** 2
./xc/xc_lyp.F:!FM      t2 = t1 * my_rho
./xc/xc_lyp.F:!FM      t5 = my_rho ** 2
./xc/xc_lyp.F:!FM      t6 = t5 * my_rho
./xc/xc_lyp.F:!FM      t7 = my_rho_1_3 * t6
./xc/xc_lyp.F:!FM      t11 = 0.1e1_dp / my_rho_1_3
./xc/xc_lyp.F:!FM      t22 = my_ndrho ** 2
./xc/xc_lyp.F:!FM      t26 = my_rho_1_3 * t22
./xc/xc_lyp.F:!FM      t38 = my_rho_1_3 + d
./xc/xc_lyp.F:!FM     IF (grad_deriv>=0.AND.my_rho>epsilon_rho) THEN
./xc/xc_lyp.F:!FM      t48 = my_rho_1_3 * t5
./xc/xc_lyp.F:!FM      t77 = 0.1e1_dp / my_rho
./xc/xc_lyp.F:!FM      t93 = my_rho_1_3 * my_rho
./xc/xc_lyp.F:!FM      t112 = my_rho_1_3 * my_ndrho
./xc/xc_lyp.F:!FM      t123 = t14 *(0.6e1_dp  t1 * my_ndrho + t112 * 0.20e2_dp &
./xc/xc_lyp.F:!FM           & my_ndrho * d))
./xc/xc_lyp.F:!FM        e_rho(ii) = e_rho(ii) &
./xc/xc_lyp.F:!FM        e_ndrho(ii) = e_ndrho(ii)&
./xc/xc_lyp.F:!FM      t192 = -0.560e3_dp * t93 - 0.432e3_dp * my_rho * d +cf*(&
./xc/xc_lyp.F:!FM           & * t52 * my_rho + 0.8e1_dp * t88 * t1 )&
./xc/xc_lyp.F:!FM           & * t62 - 0.8e1_dp * t88 * my_rho_1_3 * t62 - 0.432e3_dp *&
./xc/xc_lyp.F:!FM           & t14 * my_rho * cf * d - 0.14e2_dp / 0.9e1_dp * t52 *&
./xc/xc_lyp.F:!FM      t215 = t13 * my_ndrho * d
./xc/xc_lyp.F:!FM      t227 = 0.20e2_dp / 0.3e1_dp * t52 * t70 * my_ndrho + 0.4e1_dp *&
./xc/xc_lyp.F:!FM           & t14 * t11 * my_ndrho + 0.20e2_dp / 0.3e1_dp * t78 * t215&
./xc/xc_lyp.F:!FM           & + 0.20e2_dp / 0.3e1_dp * t14 * t69 * my_ndrho * d +&
./xc/xc_lyp.F:!FM           & 0.14e2_dp / 0.3e1_dp * t88 * t89 * my_ndrho + 0.14e2_dp &
./xc/xc_lyp.F:!FM      t245 = 0.6e1_dp * t14 * t1 + 0.20e2_dp * t14 * my_rho_1_3 * d +&
./xc/xc_lyp.F:!FM           & 0.14e2_dp * t14 * my_rho_1_3 * c + 0.14e2_dp * t14 * c *&
./xc/xc_lyp.F:!FM        e_rho_rho(ii) = e_rho_rho(ii)&
./xc/xc_lyp.F:!FM        e_ndrho_rho(ii) = e_ndrho_rho(ii)&
./xc/xc_lyp.F:!FM        e_ndrho_ndrho(ii) = e_ndrho_ndrho(ii)&
./xc/xc_lyp.F:!FM      t332 = -0.432e3_dp * d - 0.2240e4_dp / 0.3e1_dp * my_rho_1_3 -&
./xc/xc_lyp.F:!FM           & t70 * cf - 0.2240e4_dp / 0.3e1_dp * t14 * my_rho_1_3 *&
./xc/xc_lyp.F:!FM        e_rho_rho_rho(ii) = e_rho_rho_rho(ii)&
./xc/xc_lyp.F:!FM           & my_rho_1_3 / t248 * t106 - 0.5e1_dp / 0.72e2_dp * t45 *&
./xc/xc_lyp.F:!FM        e_ndrho_rho_rho(ii) = e_ndrho_rho_rho(ii)&
./xc/xc_lyp.F:!FM           & (-0.28e2_dp / 0.9e1_dp * t52 * t161 * my_ndrho -&
./xc/xc_lyp.F:!FM           & 0.22e2_dp / 0.9e1_dp * t88 * t166 * my_ndrho - 0.4e1_dp &
./xc/xc_lyp.F:!FM           &/ 0.3e1_dp * t14 * t94 * my_ndrho - 0.40e2_dp / 0.9e1_dp &
./xc/xc_lyp.F:!FM           & 0.9e1_dp * t14 * t3 * my_ndrho * d + 0.14e2_dp /&
./xc/xc_lyp.F:!FM           & 0.9e1_dp * t184 * t185 * my_ndrho + 0.14e2_dp / 0.9e1_dp&
./xc/xc_lyp.F:!FM        e_ndrho_ndrho_rho(ii) = e_ndrho_ndrho_rho(ii)&
./xc/xc_lyp.F:!> \param rho_set ...
./xc/xc_lyp.F:   SUBROUTINE lyp_lsd_eval(rho_set, deriv_set, grad_deriv, lyp_params)
./xc/xc_lyp.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_lyp.F:      REAL(kind=dp)                                      :: epsilon_drho, epsilon_rho, sc
./xc/xc_lyp.F:         e_ndrb_rb, e_ra, e_ra_ra, e_ra_rb, e_rb, e_rb_rb, norm_drho, norm_drhoa, norm_drhob, &
./xc/xc_lyp.F:         rhoa, rhob
./xc/xc_lyp.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_lyp.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_lyp.F:      CALL xc_rho_set_get(rho_set, &
./xc/xc_lyp.F:                          rhoa=rhoa, rhob=rhob, norm_drhoa=norm_drhoa, &
./xc/xc_lyp.F:                          norm_drhob=norm_drhob, norm_drho=norm_drho, &
./xc/xc_lyp.F:                          rho_cutoff=epsilon_rho, &
./xc/xc_lyp.F:                          drho_cutoff=epsilon_drho, local_bounds=bo)
./xc/xc_lyp.F:      dummy => rhoa
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rhoa)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)(rhob)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhoa)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(rhob)", &
./xc/xc_lyp.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)(rhob)", &
./xc/xc_lyp.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_lyp.F:                                         "(norm_drhoa)(norm_drhoa)", allocate_deriv=.TRUE.)
./xc/xc_lyp.F:                                         "(norm_drhob)(norm_drhob)", allocate_deriv=.TRUE.)
./xc/xc_lyp.F:!$OMP            SHARED(rhoa, rhob, norm_drho, norm_drhoa, norm_drhob) &
./xc/xc_lyp.F:!$OMP            SHARED(npoints, epsilon_rho, sc)
./xc/xc_lyp.F:           rhoa=rhoa, rhob=rhob, norm_drho=norm_drho, norm_drhoa=norm_drhoa, &
./xc/xc_lyp.F:           norm_drhob=norm_drhob, e_0=e_0, e_ra=e_ra, e_rb=e_rb, &
./xc/xc_lyp.F:           epsilon_rho=epsilon_rho, sc=sc)
./xc/xc_lyp.F:!> \param rhoa alpha spin density
./xc/xc_lyp.F:!> \param rhob beta spin density
./xc/xc_lyp.F:!> \param norm_drho || grad rhoa + grad rhob ||
./xc/xc_lyp.F:!> \param norm_drhoa || grad rhoa ||
./xc/xc_lyp.F:!> \param norm_drhob || grad rhob ||
./xc/xc_lyp.F:!> \param epsilon_rho ...
./xc/xc_lyp.F:   SUBROUTINE lyp_lsd_calc(rhoa, rhob, norm_drho, norm_drhoa, norm_drhob, &
./xc/xc_lyp.F:                           grad_deriv, npoints, epsilon_rho, sc)
./xc/xc_lyp.F:      REAL(kind=dp), DIMENSION(*), INTENT(in)            :: rhoa, rhob, norm_drho, norm_drhoa, &
./xc/xc_lyp.F:                                                            norm_drhob
./xc/xc_lyp.F:      REAL(kind=dp), INTENT(in)                          :: epsilon_rho, sc
./xc/xc_lyp.F:      REAL(kind=dp) :: cf, my_ndrho, my_ndrhoa, my_ndrhob, my_rho, my_rhoa, my_rhob, t1, t100, &
./xc/xc_lyp.F:         my_rhoa = MAX(rhoa(ii), 0.0_dp)
./xc/xc_lyp.F:         my_rhob = MAX(rhob(ii), 0.0_dp)
./xc/xc_lyp.F:         my_rho = my_rhoa+my_rhob
./xc/xc_lyp.F:         IF (my_rho > epsilon_rho) THEN
./xc/xc_lyp.F:            my_ndrho = norm_drho(ii)
./xc/xc_lyp.F:            my_ndrhoa = norm_drhoa(ii)
./xc/xc_lyp.F:            my_ndrhob = norm_drhob(ii)
./xc/xc_lyp.F:            t1 = my_rho**(0.1e1_dp/0.3e1_dp)
./xc/xc_lyp.F:            t7 = my_rhoa*my_rhob
./xc/xc_lyp.F:            t8 = 0.1e1_dp/my_rho
./xc/xc_lyp.F:            t16 = my_rho**2
./xc/xc_lyp.F:            t17 = t16*my_rho
./xc/xc_lyp.F:            t25 = my_rhoa**2
./xc/xc_lyp.F:            t26 = my_rhoa**(0.1e1_dp/0.3e1_dp)
./xc/xc_lyp.F:            t29 = my_rhob**2
./xc/xc_lyp.F:            t30 = my_rhob**(0.1e1_dp/0.3e1_dp)
./xc/xc_lyp.F:            t40 = my_ndrho**2
./xc/xc_lyp.F:            t45 = my_ndrhoa**2
./xc/xc_lyp.F:            t46 = my_ndrhob**2
./xc/xc_lyp.F:            t50 = my_rhoa*t8
./xc/xc_lyp.F:            t52 = my_rhob*t8
./xc/xc_lyp.F:            IF (grad_deriv >= 0 .AND. my_rho > epsilon_rho) THEN
./xc/xc_lyp.F:            t72 = t27*my_rhoa
./xc/xc_lyp.F:            t82 = my_rhob*t57+t7*t78-0.2e1_dp*my_rhoa*t46
./xc/xc_lyp.F:            t88 = t87*my_rhoa
./xc/xc_lyp.F:            t92 = my_rhob*t90*d
./xc/xc_lyp.F:            t101 = t100*my_rho
./xc/xc_lyp.F:            t120 = 0.1e1_dp/t1/my_rho
./xc/xc_lyp.F:            t129 = c*t120+d*t120*t5-t124/t18/my_rho*t86
./xc/xc_lyp.F:            t138 = my_rhoa*t95
./xc/xc_lyp.F:            t140 = my_rhob*t95
./xc/xc_lyp.F:            t153 = t7*t145-0.4e1_dp/0.3e1_dp*my_rho*t40+ &
./xc/xc_lyp.F:                   0.4e1_dp/0.3e1_dp*my_rho*t46+0.4e1_dp/0.3e1_dp&
./xc/xc_lyp.F:                  & *my_rho*t45
./xc/xc_lyp.F:            t159 = t31*my_rhob
./xc/xc_lyp.F:            t168 = my_rhoa*t57+t7*t164-0.2e1_dp*my_rhob*t45
./xc/xc_lyp.F:            t171 = t39*my_ndrho
./xc/xc_lyp.F:            t176 = 0.2e1_dp*t7*t171-0.4e1_dp/0.3e1_dp*t16*my_ndrho
./xc/xc_lyp.F:            t181 = t49*my_rhoa
./xc/xc_lyp.F:            t182 = t8*my_ndrhoa
./xc/xc_lyp.F:            t185 = -0.2e1_dp*t44*my_ndrhoa-0.2e1_dp/0.9e1_dp*t181*t182
./xc/xc_lyp.F:            t189 = t7*t185+0.2e1_dp*t64*my_ndrhoa
./xc/xc_lyp.F:            t194 = t49*my_rhob
./xc/xc_lyp.F:            t195 = t8*my_ndrhob
./xc/xc_lyp.F:            t198 = -0.2e1_dp*t44*my_ndrhob-0.2e1_dp/0.9e1_dp*t194*t195
./xc/xc_lyp.F:            t202 = t7*t198+0.2e1_dp*t62*my_ndrhob
./xc/xc_lyp.F:                 & (0.2e1_dp*my_rhoa*t268*t45+0.2e1_dp*my_rhob* &
./xc/xc_lyp.F:            t310 = 0.40e2_dp/0.9e1_dp*t88*my_rhob/t1/t17*d
./xc/xc_lyp.F:            t313 = my_rhob*t20
./xc/xc_lyp.F:            t316 = 0.8e1_dp/0.9e1_dp*a*t238*my_rhoa*t313*t124
./xc/xc_lyp.F:            t341 = t15*t21*(my_rhob*t145+t7*(-t332*t45/ &
./xc/xc_lyp.F:                    & -0.2e1_dp*t341-t15*t21*(0.2e1_dp*my_rhob* &
./xc/xc_lyp.F:                      t78+0.320e3_dp/0.9e1_dp*t72*my_rhob*t24- &
./xc/xc_lyp.F:            t360 = t87*my_rhoa*t90*d
./xc/xc_lyp.F:            t373 = t15*t21*(my_rhoa*t145+t7*(-t332*t46/ &
./xc/xc_lyp.F:                                                               my_rhoa*t164+0.320e3_dp/0.9e1_dp*my_rhoa* &
./xc/xc_lyp.F:                   t21*(t35+t41-t48-t56+my_rhob*t164+my_rhoa &
./xc/xc_lyp.F:            t430 = t15*t21*(0.2e1_dp*t7*t130*my_ndrho-0.8e1_dp &
./xc/xc_lyp.F:                 &/0.3e1_dp*my_rho*my_ndrho)
./xc/xc_lyp.F:                              -(0.2e1_dp*t408*t20*my_rhoa*t171+t415+t419- &
./xc/xc_lyp.F:            t467 = t15*t21*(t7*(-0.2e1_dp*t132*my_ndrhoa- &
./xc/xc_lyp.F:                                0.2e1_dp/0.9e1_dp*t135*my_rhoa*t182+0.2e1_dp/ &
./xc/xc_lyp.F:                                0.9e1_dp*t181*t95*my_ndrhoa)+0.8e1_dp/0.3e1_dp&
./xc/xc_lyp.F:                           & *my_rho*my_ndrhoa)
./xc/xc_lyp.F:                               -(t15*t21*(my_rhob*t185-0.2e1_dp/0.9e1_dp*t7&
./xc/xc_lyp.F:                                         & *t75*my_ndrhoa)+t445+t449-t452+t467)*sc
./xc/xc_lyp.F:                               -(t15*t21*(my_rhoa*t185-0.4e1_dp*my_rhob* &
./xc/xc_lyp.F:                                          my_ndrhoa)+t445+t449-t452+t467)*sc
./xc/xc_lyp.F:            t505 = t15*t21*(t7*(-0.2e1_dp*t132*my_ndrhob- &
./xc/xc_lyp.F:                                0.2e1_dp/0.9e1_dp*t135*my_rhob*t195+0.2e1_dp/ &
./xc/xc_lyp.F:                                0.9e1_dp*t194*t95*my_ndrhob)+0.8e1_dp/0.3e1_dp&
./xc/xc_lyp.F:                           & *my_rho*my_ndrhob)
./xc/xc_lyp.F:                               -(t15*t21*(my_rhob*t198-0.4e1_dp*my_rhoa* &
./xc/xc_lyp.F:                                          my_ndrhob)+t483+t487-t490+t505)*sc
./xc/xc_lyp.F:                               -(t15*t21*(my_rhoa*t198-0.2e1_dp/0.9e1_dp*t7&
./xc/xc_lyp.F:                                         & *t75*my_ndrhob)+t483+t487-t490+t505)*sc
./xc/xc_thomas_fermi.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_thomas_fermi.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_thomas_fermi.F:                                              xc_rho_set_type
./xc/xc_thomas_fermi.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_thomas_fermi.F:      eps_rho = cutoff
./xc/xc_thomas_fermi.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_thomas_fermi.F:            needs%rho_spin = .TRUE.
./xc/xc_thomas_fermi.F:            needs%rho_spin_1_3 = .TRUE.
./xc/xc_thomas_fermi.F:            needs%rho = .TRUE.
./xc/xc_thomas_fermi.F:            needs%rho_1_3 = .TRUE.
./xc/xc_thomas_fermi.F:!> \param rho_set ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lda_eval(rho_set, deriv_set, order)
./xc/xc_thomas_fermi.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_thomas_fermi.F:      REAL(KIND=dp)                                      :: epsilon_rho
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho, &
./xc/xc_thomas_fermi.F:                                                            r13, rho
./xc/xc_thomas_fermi.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_thomas_fermi.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_thomas_fermi.F:      CALL xc_rho_set_get(rho_set, rho_1_3=r13, rho=rho, &
./xc/xc_thomas_fermi.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_thomas_fermi.F:      CALL thomas_fermi_init(epsilon_rho)
./xc/xc_thomas_fermi.F:         CALL thomas_fermi_lda_0(rho, r13, e_0, npoints)
./xc/xc_thomas_fermi.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_thomas_fermi.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_thomas_fermi.F:         CALL thomas_fermi_lda_1(rho, r13, e_rho, npoints)
./xc/xc_thomas_fermi.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_thomas_fermi.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_thomas_fermi.F:         CALL thomas_fermi_lda_2(rho, r13, e_rho_rho, npoints)
./xc/xc_thomas_fermi.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_thomas_fermi.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_thomas_fermi.F:         CALL thomas_fermi_lda_3(rho, r13, e_rho_rho_rho, npoints)
./xc/xc_thomas_fermi.F:!> \param rho_set ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lsd_eval(rho_set, deriv_set, order)
./xc/xc_thomas_fermi.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_thomas_fermi.F:      CHARACTER(len=6), DIMENSION(2), PARAMETER :: rho_spin_name = (/"(rhoa)", "(rhob)"/)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp)                                      :: epsilon_rho
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho
./xc/xc_thomas_fermi.F:      TYPE(cp_3d_r_p_type), DIMENSION(2)                 :: rho, rho_1_3
./xc/xc_thomas_fermi.F:         NULLIFY (rho(i)%array, rho_1_3(i)%array)
./xc/xc_thomas_fermi.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_thomas_fermi.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_thomas_fermi.F:      CALL xc_rho_set_get(rho_set, rhoa_1_3=rho_1_3(1)%array, &
./xc/xc_thomas_fermi.F:                          rhob_1_3=rho_1_3(2)%array, rhoa=rho(1)%array, &
./xc/xc_thomas_fermi.F:                          rhob=rho(2)%array, &
./xc/xc_thomas_fermi.F:                          rho_cutoff=epsilon_rho, &
./xc/xc_thomas_fermi.F:      CALL thomas_fermi_init(epsilon_rho)
./xc/xc_thomas_fermi.F:            CALL thomas_fermi_lsd_0(rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_thomas_fermi.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin), &
./xc/xc_thomas_fermi.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_thomas_fermi.F:            CALL thomas_fermi_lsd_1(rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_thomas_fermi.F:                                    e_rho, npoints)
./xc/xc_thomas_fermi.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_thomas_fermi.F:                                            rho_spin_name(ispin), allocate_deriv=.TRUE.)
./xc/xc_thomas_fermi.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_thomas_fermi.F:            CALL thomas_fermi_lsd_2(rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_thomas_fermi.F:                                    e_rho_rho, npoints)
./xc/xc_thomas_fermi.F:            deriv => xc_dset_get_derivative(deriv_set, rho_spin_name(ispin)// &
./xc/xc_thomas_fermi.F:                                            rho_spin_name(ispin)//rho_spin_name(ispin), &
./xc/xc_thomas_fermi.F:            CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_thomas_fermi.F:            CALL thomas_fermi_lsd_3(rho(ispin)%array, rho_1_3(ispin)%array, &
./xc/xc_thomas_fermi.F:                                    e_rho_rho_rho, npoints)
./xc/xc_thomas_fermi.F:!> \param rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lda_0(rho, r13, e_0, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rho,eps_rho,e_0,flda,r13)
./xc/xc_thomas_fermi.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_0(ip) = e_0(ip)+flda*r13(ip)*r13(ip)*rho(ip)
./xc/xc_thomas_fermi.F:!> \param rho ...
./xc/xc_thomas_fermi.F:!> \param e_rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lda_1(rho, r13, e_rho, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rho,eps_rho,e_rho,f,r13)
./xc/xc_thomas_fermi.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_rho(ip) = e_rho(ip)+f*r13(ip)*r13(ip)
./xc/xc_thomas_fermi.F:!> \param rho ...
./xc/xc_thomas_fermi.F:!> \param e_rho_rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lda_2(rho, r13, e_rho_rho, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rho,eps_rho,e_rho_rho,f,r13)
./xc/xc_thomas_fermi.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_rho_rho(ip) = e_rho_rho(ip)+f/r13(ip)
./xc/xc_thomas_fermi.F:!> \param rho ...
./xc/xc_thomas_fermi.F:!> \param e_rho_rho_rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lda_3(rho, r13, e_rho_rho_rho, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, r13
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rho,eps_rho,e_rho_rho_rho,f,r13)
./xc/xc_thomas_fermi.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip)+f/(r13(ip)*rho(ip))
./xc/xc_thomas_fermi.F:!> \param rhoa ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lsd_0(rhoa, r13a, e_0, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rhoa,eps_rho,e_0,flsd,r13a)
./xc/xc_thomas_fermi.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_0(ip) = e_0(ip)+flsd*r13a(ip)*r13a(ip)*rhoa(ip)
./xc/xc_thomas_fermi.F:!> \param rhoa ...
./xc/xc_thomas_fermi.F:!> \param e_rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lsd_1(rhoa, r13a, e_rho, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rhoa,eps_rho,e_rho,f,r13a)
./xc/xc_thomas_fermi.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_rho(ip) = e_rho(ip)+f*r13a(ip)*r13a(ip)
./xc/xc_thomas_fermi.F:!> \param rhoa ...
./xc/xc_thomas_fermi.F:!> \param e_rho_rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lsd_2(rhoa, r13a, e_rho_rho, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rhoa,eps_rho,e_rho_rho,f,r13a)
./xc/xc_thomas_fermi.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_rho_rho(ip) = e_rho_rho(ip)+f/r13a(ip)
./xc/xc_thomas_fermi.F:!> \param rhoa ...
./xc/xc_thomas_fermi.F:!> \param e_rho_rho_rho ...
./xc/xc_thomas_fermi.F:   SUBROUTINE thomas_fermi_lsd_3(rhoa, r13a, e_rho_rho_rho, npoints)
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, r13a
./xc/xc_thomas_fermi.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho
./xc/xc_thomas_fermi.F:!$OMP SHARED(npoints,rhoa,eps_rho,e_rho_rho_rho,f,r13a)
./xc/xc_thomas_fermi.F:         IF (rhoa(ip) > eps_rho) THEN
./xc/xc_thomas_fermi.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip)+f/(r13a(ip)*rhoa(ip))
./xc/xc_input_constants.F:   INTEGER, PARAMETER, PUBLIC               :: xc_rho_no_smooth = 0, &
./xc/xc_input_constants.F:                                               xc_rho_spline2_smooth = 1, &
./xc/xc_input_constants.F:                                               xc_rho_spline3_smooth = 2, &
./xc/xc_input_constants.F:                                               xc_rho_nn10 = 3, &
./xc/xc_input_constants.F:                                               xc_rho_nn50 = 4
./xc/xc_cs1.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_cs1.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_cs1.F:                                              xc_rho_set_type
./xc/xc_cs1.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_cs1.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_cs1.F:         needs%rho = .TRUE.
./xc/xc_cs1.F:         needs%rho_1_3 = .TRUE.
./xc/xc_cs1.F:         needs%norm_drho = .TRUE.
./xc/xc_cs1.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_cs1.F:         needs%rho_spin = .TRUE.
./xc/xc_cs1.F:         needs%rho_spin_1_3 = .TRUE.
./xc/xc_cs1.F:         needs%norm_drho_spin = .TRUE.
./xc/xc_cs1.F:      eps_rho = cutoff
./xc/xc_cs1.F:!> \param rho_set ...
./xc/xc_cs1.F:   SUBROUTINE cs1_lda_eval(rho_set, deriv_set, order)
./xc/xc_cs1.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_cs1.F:      REAL(KIND=dp)                                      :: epsilon_rho
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_cs1.F:         e_ndrho_ndrho_ndrho, e_rho, e_rho_ndrho, e_rho_ndrho_ndrho, e_rho_rho, e_rho_rho_ndrho, &
./xc/xc_cs1.F:         e_rho_rho_rho, grho, rho, rho13
./xc/xc_cs1.F:      NULLIFY (bo, rho, rho13, grho, e_0, e_rho, e_ndrho, &
./xc/xc_cs1.F:               e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_cs1.F:               e_rho_rho_rho, e_rho_rho_ndrho, e_rho_ndrho_ndrho, &
./xc/xc_cs1.F:               e_ndrho_ndrho_ndrho)
./xc/xc_cs1.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_cs1.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_cs1.F:      CALL xc_rho_set_get(rho_set, rho_1_3=rho13, rho=rho, &
./xc/xc_cs1.F:                          norm_drho=grho, local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_cs1.F:      CALL cs1_init(epsilon_rho)
./xc/xc_cs1.F:         CALL cs1_u_0(rho, grho, rho13, e_0, npoints)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_cs1.F:         CALL cs1_u_1(rho, grho, rho13, e_rho, e_ndrho, &
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(norm_drho)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_cs1.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_cs1.F:         CALL cs1_u_2(rho, grho, rho13, e_rho_rho, e_rho_ndrho, &
./xc/xc_cs1.F:                      e_ndrho_ndrho, npoints)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_cs1.F:                                         "(rho)(rho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_cs1.F:                                         "(rho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_cs1.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_cs1.F:         CALL cs1_u_3(rho, grho, rho13, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_cs1.F:                      e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, npoints)
./xc/xc_cs1.F:!> \param rho_set ...
./xc/xc_cs1.F:   SUBROUTINE cs1_lsd_eval(rho_set, deriv_set, order)
./xc/xc_cs1.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_cs1.F:      REAL(KIND=dp)                                      :: epsilon_rho
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: e_0, e_ndrhoa, e_ndrhob, e_rhoa, e_rhob, &
./xc/xc_cs1.F:                                                            norm_drhoa, norm_drhob, rhoa, &
./xc/xc_cs1.F:                                                            rhoa_1_3, rhob, rhob_1_3
./xc/xc_cs1.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_cs1.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_cs1.F:      CALL xc_rho_set_get(rho_set, rhoa=rhoa, rhob=rhob, &
./xc/xc_cs1.F:                          rhoa_1_3=rhoa_1_3, rhob_1_3=rhob_1_3, &
./xc/xc_cs1.F:                          norm_drhoa=norm_drhoa, norm_drhob=norm_drhob, &
./xc/xc_cs1.F:                          local_bounds=bo, rho_cutoff=epsilon_rho)
./xc/xc_cs1.F:      CALL cs1_init(epsilon_rho)
./xc/xc_cs1.F:         CALL cs1_ss_0(rhoa, rhob, norm_drhoa, norm_drhob, &
./xc/xc_cs1.F:                       rhoa_1_3, rhob_1_3, e_0, npoints)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhoa)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_rhob)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhoa)
./xc/xc_cs1.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", &
./xc/xc_cs1.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrhob)
./xc/xc_cs1.F:         CALL cs1_ss_1(rhoa, rhob, norm_drhoa, norm_drhob, &
./xc/xc_cs1.F:                       rhoa_1_3, rhob_1_3, e_rhoa, e_rhob, e_ndrhoa, e_ndrhob, &
./xc/xc_cs1.F:!> \param rho ...
./xc/xc_cs1.F:!> \param grho ...
./xc/xc_cs1.F:   SUBROUTINE cs1_u_0(rho, grho, r13, e_0, npoints)
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13
./xc/xc_cs1.F:!$OMP                 SHARED(npoints,rho,eps_rho,e_0,dpv,cp,c2p,c3p,c4p,r13,grho) &
./xc/xc_cs1.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_cs1.F:            r = rho(ip)
./xc/xc_cs1.F:            g = grho(ip)
./xc/xc_cs1.F:!> \param rho ...
./xc/xc_cs1.F:!> \param grho ...
./xc/xc_cs1.F:!> \param e_rho ...
./xc/xc_cs1.F:!> \param e_ndrho ...
./xc/xc_cs1.F:   SUBROUTINE cs1_u_1(rho, grho, r13, e_rho, e_ndrho, npoints)
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho, e_ndrho
./xc/xc_cs1.F:!$OMP                 SHARED(npoints, rho, eps_rho, r13, grho, e_rho) &
./xc/xc_cs1.F:!$OMP                 SHARED(e_ndrho, dpv, cp, c2p, c3p, c4p) &
./xc/xc_cs1.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_cs1.F:            r = rho(ip)
./xc/xc_cs1.F:            g = grho(ip)
./xc/xc_cs1.F:            e_rho(ip) = e_rho(ip)+dF1+drF2+dF3+drF4
./xc/xc_cs1.F:            e_ndrho(ip) = e_ndrho(ip)+dgF2+dgF4
./xc/xc_cs1.F:!> \param rho ...
./xc/xc_cs1.F:!> \param grho ...
./xc/xc_cs1.F:!> \param e_rho_rho ...
./xc/xc_cs1.F:!> \param e_rho_ndrho ...
./xc/xc_cs1.F:!> \param e_ndrho_ndrho ...
./xc/xc_cs1.F:   SUBROUTINE cs1_u_2(rho, grho, r13, e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho, e_rho_ndrho, e_ndrho_ndrho
./xc/xc_cs1.F:!$OMP                 SHARED(npoints, rho, eps_rho, r13, grho, e_rho_rho) &
./xc/xc_cs1.F:!$OMP                 SHARED(e_rho_ndrho, e_ndrho_ndrho, dpv, cp, c2p, c3p, c4p) &
./xc/xc_cs1.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_cs1.F:            r = rho(ip)
./xc/xc_cs1.F:            g = grho(ip)
./xc/xc_cs1.F:            e_rho_rho(ip) = e_rho_rho(ip)+d2F1+d2rF2+d2F3+d2rF4
./xc/xc_cs1.F:            e_rho_ndrho(ip) = e_rho_ndrho(ip)+drgF2+drgF4
./xc/xc_cs1.F:            e_ndrho_ndrho(ip) = e_ndrho_ndrho(ip)+d2gF2+d2gF4
./xc/xc_cs1.F:!> \param rho ...
./xc/xc_cs1.F:!> \param grho ...
./xc/xc_cs1.F:!> \param e_rho_rho_rho ...
./xc/xc_cs1.F:!> \param e_rho_rho_ndrho ...
./xc/xc_cs1.F:!> \param e_rho_ndrho_ndrho ...
./xc/xc_cs1.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_cs1.F:   SUBROUTINE cs1_u_3(rho, grho, r13, e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_cs1.F:                      e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, npoints)
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, r13
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_cs1.F:                                                            e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho
./xc/xc_cs1.F:!$OMP                 SHARED(npoints, rho, eps_rho, r13, grho, e_rho_rho_rho) &
./xc/xc_cs1.F:!$OMP                 SHARED(e_rho_rho_ndrho, e_rho_ndrho_ndrho) &
./xc/xc_cs1.F:!$OMP                 SHARED(e_ndrho_ndrho_ndrho, dpv, cp, c2p, c3p, c4p) &
./xc/xc_cs1.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_cs1.F:            r = rho(ip)
./xc/xc_cs1.F:            g = grho(ip)
./xc/xc_cs1.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip)+d3F1+d3rF2+d3F3+d3rF4
./xc/xc_cs1.F:            e_rho_rho_ndrho(ip) = e_rho_rho_ndrho(ip)+d2rgF2+d2rgF4
./xc/xc_cs1.F:            e_rho_ndrho_ndrho(ip) = e_rho_ndrho_ndrho(ip)+dr2gF2+dr2gF4
./xc/xc_cs1.F:            e_ndrho_ndrho_ndrho(ip) = e_ndrho_ndrho_ndrho(ip)+d3gF2+d3gF4
./xc/xc_cs1.F:!> \param rhoa ...
./xc/xc_cs1.F:!> \param rhob ...
./xc/xc_cs1.F:!> \param grhoa ...
./xc/xc_cs1.F:!> \param grhob ...
./xc/xc_cs1.F:   SUBROUTINE cs1_ss_0(rhoa, rhob, grhoa, grhob, r13a, r13b, e_0, &
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, rhob, grhoa, grhob, r13a, r13b
./xc/xc_cs1.F:!$OMP                 SHARED(npoints, rhoa, eps_rho, r13a, grhoa, rhob) &
./xc/xc_cs1.F:!$OMP                 SHARED(r13b, grhob, e_0) &
./xc/xc_cs1.F:         IF (rhoa(ip) < eps_rho) THEN
./xc/xc_cs1.F:            ra = rhoa(ip)
./xc/xc_cs1.F:            ga = grhoa(ip)
./xc/xc_cs1.F:         IF (rhob(ip) < eps_rho) THEN
./xc/xc_cs1.F:            rb = rhob(ip)
./xc/xc_cs1.F:            gb = grhob(ip)
./xc/xc_cs1.F:!> \param rhoa ...
./xc/xc_cs1.F:!> \param rhob ...
./xc/xc_cs1.F:!> \param grhoa ...
./xc/xc_cs1.F:!> \param grhob ...
./xc/xc_cs1.F:!> \param e_rhoa ...
./xc/xc_cs1.F:!> \param e_rhob ...
./xc/xc_cs1.F:!> \param e_ndrhoa ...
./xc/xc_cs1.F:!> \param e_ndrhob ...
./xc/xc_cs1.F:   SUBROUTINE cs1_ss_1(rhoa, rhob, grhoa, grhob, r13a, r13b, e_rhoa, &
./xc/xc_cs1.F:                       e_rhob, e_ndrhoa, e_ndrhob, npoints)
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rhoa, rhob, grhoa, grhob, r13a, r13b
./xc/xc_cs1.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rhoa, e_rhob, e_ndrhoa, e_ndrhob
./xc/xc_cs1.F:!$OMP                 SHARED(npoints, rhoa, eps_rho, r13a, grhoa, rhob) &
./xc/xc_cs1.F:!$OMP                 SHARED(grhob, e_rhoa, e_ndrhoa, e_rhob, e_ndrhob,r13b) &
./xc/xc_cs1.F:         IF (rhoa(ip) < eps_rho) THEN
./xc/xc_cs1.F:            ra = rhoa(ip)
./xc/xc_cs1.F:            ga = grhoa(ip)
./xc/xc_cs1.F:         IF (rhob(ip) < eps_rho) THEN
./xc/xc_cs1.F:            rb = rhob(ip)
./xc/xc_cs1.F:            gb = grhob(ip)
./xc/xc_cs1.F:         e_rhoa(ip) = e_rhoa(ip)+dF1a+drF2a
./xc/xc_cs1.F:         e_ndrhoa(ip) = e_ndrhoa(ip)+dgF2a
./xc/xc_cs1.F:         e_rhob(ip) = e_rhob(ip)+dF1b+drF2b
./xc/xc_cs1.F:         e_ndrhob(ip) = e_ndrhob(ip)+dgF2b
./xc/xc.F:        xc_new_f_routine, xc_rho_nn10, xc_rho_nn50, xc_rho_no_smooth, xc_rho_spline2_smooth, &
./xc/xc.F:        xc_rho_spline3_smooth, xc_test_lsd_f_routine
./xc/xc.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./xc/xc.F:                                              xc_rho_set_get,&
./xc/xc.F:                                              xc_rho_set_release,&
./xc/xc.F:                                              xc_rho_set_type,&
./xc/xc.F:                                              xc_rho_set_update
./xc/xc.F:             xc_calc_2nd_deriv, xc_prep_2nd_deriv, divide_by_norm_drho
./xc/xc.F:!> \param vxc_rho will contain the v_xc part that depend on rho
./xc/xc.F:!> \param rho_r the value of the density in the real space
./xc/xc.F:!> \param rho_g value of the density in the g space (needs to be associated
./xc/xc.F:   SUBROUTINE xc_vxc_pw_create1(vxc_rho, vxc_tau, rho_r, rho_g, tau, exc, xc_section, &
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau, rho_r, rho_g, tau
./xc/xc.F:      CPASSERT(ASSOCIATED(rho_r))
./xc/xc.F:      CPASSERT(.NOT. ASSOCIATED(vxc_rho))
./xc/xc.F:         CALL xc_vxc_pw_create(vxc_rho=vxc_rho, vxc_tau=vxc_tau, tau=tau, &
./xc/xc.F:                               rho_r=rho_r, rho_g=rho_g, exc=exc, xc_section=xc_section, &
./xc/xc.F:         CALL xc_vxc_pw_create_debug(vxc_rho=vxc_rho, vxc_tau=vxc_tau, tau=tau, &
./xc/xc.F:                                     rho_r=rho_r, rho_g=rho_g, exc=exc, xc_section=xc_section, &
./xc/xc.F:         CALL xc_vxc_pw_create_test_lsd(vxc_rho=vxc_rho, vxc_tau=vxc_tau, &
./xc/xc.F:                                        tau=tau, rho_r=rho_r, rho_g=rho_g, exc=exc, &
./xc/xc.F:!> \brief calculates vxc using lsd with rhoa=rhob=0.5*rho and compares
./xc/xc.F:!> \param vxc_rho will contain the v_xc part that depend on rho
./xc/xc.F:!> \param rho_r the value of the density in the real space
./xc/xc.F:!> \param rho_g value of the density in the g space (needs to be associated
./xc/xc.F:   SUBROUTINE xc_vxc_pw_create_test_lsd(vxc_rho, vxc_tau, rho_r, rho_g, tau, &
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau, rho_r, rho_g, tau
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho2_g, rho2_r, tau2, vxc_rho2, vxc_tau2
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set1, rho_set2
./xc/xc.F:      NULLIFY (vxc_rho2, vxc_tau2, tau2, dSet1, dSet2, rho_set1, rho_set2, split_desc, pot, pot3, pot3, &
./xc/xc.F:               deriv, deriv2, deriv3, rho2_g)
./xc/xc.F:      bo = rho_r(1)%pw%pw_grid%bounds_local
./xc/xc.F:      ALLOCATE (rho2_r(2))
./xc/xc.F:         NULLIFY (rho2_r(ispin)%pw)
./xc/xc.F:         CALL pw_pool_create_pw(pw_pool, rho2_r(ispin)%pw, in_space=REALSPACE, &
./xc/xc.F:               tmp = rho_r(1)%pw%cr3d(i, j, k)*0.5
./xc/xc.F:               rho2_r(1)%pw%cr3d(i, j, k) = tmp
./xc/xc.F:               rho2_r(2)%pw%cr3d(i, j, k) = tmp
./xc/xc.F:      CALL xc_rho_set_and_dset_create(rho_r=rho_r, rho_g=rho_g, &
./xc/xc.F:                                      pw_pool=pw_pool, rho_set=rho_set1, &
./xc/xc.F:      CALL xc_vxc_pw_create(rho_r=rho_r, rho_g=rho_g, tau=tau, &
./xc/xc.F:                            vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=exc, xc_section=xc_section, &
./xc/xc.F:      CALL xc_rho_set_and_dset_create(rho_set=rho_set2, deriv_set=dSet2, &
./xc/xc.F:                                      rho_r=rho2_r, rho_g=rho2_g, tau=tau2, xc_section=xc_section, &
./xc/xc.F:      CALL xc_vxc_pw_create(rho_r=rho2_r, rho_g=rho2_g, tau=tau2, &
./xc/xc.F:                            vxc_rho=vxc_rho2, vxc_tau=vxc_tau2, exc=exc2, xc_section=xc_section, &
./xc/xc.F:      PRINT *, "at (0,0,0) rho_r=", rho_r(1)%pw%cr3d(0, 0, 0), &
./xc/xc.F:         "rho2_r(1)=", rho2_r(1)%pw%cr3d(0, 0, 0), &
./xc/xc.F:         "rho2_r(2)=", rho2_r(2)%pw%cr3d(0, 0, 0), &
./xc/xc.F:         "rho_r_sm=", rho_set1%rho(0, 0, 0), "rhoa2_r_sm=", rho_set2%rhoa(0, 0, 0), &
./xc/xc.F:         "rhob2_r_sm=", rho_set2%rhob(0, 0, 0)
./xc/xc.F:      OPEN (unit=120, file="rho.bindata", status="unknown", access='sequential', &
./xc/xc.F:      pot => rho_set1%rho
./xc/xc.F:      OPEN (unit=120, file="rhoa.bindata", status="unknown", access='sequential', &
./xc/xc.F:      pot => rho_set2%rhoa
./xc/xc.F:      OPEN (unit=120, file="rhob.bindata", status="unknown", access='sequential', &
./xc/xc.F:      pot => rho_set2%rhob
./xc/xc.F:      OPEN (unit=120, file="ndrho.bindata", status="unknown", access='sequential', &
./xc/xc.F:      pot => rho_set1%norm_drho
./xc/xc.F:      OPEN (unit=120, file="ndrhoa.bindata", status="unknown", access='sequential', &
./xc/xc.F:      pot => rho_set2%norm_drhoa
./xc/xc.F:      OPEN (unit=120, file="ndrhob.bindata", status="unknown", access='sequential', &
./xc/xc.F:      pot => rho_set2%norm_drhob
./xc/xc.F:      IF (rho_set1%has%tau) THEN
./xc/xc.F:         pot => rho_set1%tau
./xc/xc.F:      IF (rho_set2%has%tau_spin) THEN
./xc/xc.F:         pot => rho_set2%tau_a
./xc/xc.F:         pot => rho_set2%tau_b
./xc/xc.F:      pot => vxc_rho(1)%pw%cr3d
./xc/xc.F:      pot => vxc_rho2(1)%pw%cr3d
./xc/xc.F:                  diff = ABS(vxc_rho(ispin)%pw%cr3d(i, j, k)- &
./xc/xc.F:                             vxc_rho2(ispin)%pw%cr3d(i, j, k))
./xc/xc.F:                     PRINT *, "vxc", ispin, "=", vxc_rho(ispin)%pw%cr3d(i, j, k), &
./xc/xc.F:                        "vs", vxc_rho2(ispin)%pw%cr3d(i, j, k), "diff=", diff
./xc/xc.F:                        " spin=", ispin, "rho=", rho_set1%rho(i, j, k), &
./xc/xc.F:                        " ndrho=", rho_set1%norm_drho(i, j, k)
./xc/xc.F:                           " spin=", ispin, "rho=", rho_set1%rho(i, j, k), &
./xc/xc.F:                           " ndrho=", rho_set1%norm_drho(i, j, k)
./xc/xc.F:            IF (split_desc(1) == "rho") THEN
./xc/xc.F:               deriv2 => xc_dset_get_derivative(dSet2, "(rhoa)")
./xc/xc.F:            ELSEIF (split_desc(1) == "norm_drho") THEN
./xc/xc.F:               deriv2 => xc_dset_get_derivative(dSet2, "(norm_drhoa)")
./xc/xc.F:               deriv3 => xc_dset_get_derivative(dSet2, "(norm_drho)")
./xc/xc.F:                        "rho=", rho_set1%rho(i, j, k), &
./xc/xc.F:                        "ndrho=", rho_set1%norm_drho(i, j, k)
./xc/xc.F:      CALL xc_rho_set_release(rho_set1)
./xc/xc.F:      CALL xc_rho_set_release(rho_set2)
./xc/xc.F:         CALL pw_pool_give_back_pw(pw_pool, rho2_r(ispin)%pw)
./xc/xc.F:         CALL pw_pool_give_back_pw(pw_pool, vxc_rho2(ispin)%pw)
./xc/xc.F:      DEALLOCATE (vxc_rho2, rho2_r, rho2_g)
./xc/xc.F:!> \brief calculates vxc outputting the yz plane of rho, and of the various components
./xc/xc.F:!> \param vxc_rho will contain the v_xc part that depend on rho
./xc/xc.F:!> \param rho_r the value of the density in the real space
./xc/xc.F:!> \param rho_g value of the density in the g space (needs to be associated
./xc/xc.F:   SUBROUTINE xc_vxc_pw_create_debug(vxc_rho, vxc_tau, rho_r, rho_g, tau, exc, &
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau, rho_r, rho_g, tau
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set1
./xc/xc.F:      NULLIFY (dSet1, rho_set1, split_desc, pot, &
./xc/xc.F:      bo = rho_r(1)%pw%pw_grid%bounds_local
./xc/xc.F:      CALL xc_rho_set_and_dset_create(rho_r=rho_r, rho_g=rho_g, &
./xc/xc.F:                                      pw_pool=pw_pool, rho_set=rho_set1, &
./xc/xc.F:         IF (rho_set1%has%rho_spin) THEN
./xc/xc.F:            OPEN (unit=120, file="rhoa.bindata", status="unknown", access='sequential', &
./xc/xc.F:            pot => rho_set1%rhoa
./xc/xc.F:            OPEN (unit=120, file="rhob.bindata", status="unknown", access='sequential', &
./xc/xc.F:            pot => rho_set1%rhob
./xc/xc.F:         IF (rho_set1%has%norm_drho) THEN
./xc/xc.F:            OPEN (unit=120, file="ndrho.bindata", status="unknown", access='sequential', &
./xc/xc.F:            pot => rho_set1%norm_drho
./xc/xc.F:         IF (rho_set1%has%norm_drho_spin) THEN
./xc/xc.F:            OPEN (unit=120, file="ndrhoa.bindata", status="unknown", access='sequential', &
./xc/xc.F:            pot => rho_set1%norm_drhoa
./xc/xc.F:            OPEN (unit=120, file="ndrhob.bindata", status="unknown", access='sequential', &
./xc/xc.F:            pot => rho_set1%norm_drhob
./xc/xc.F:         IF (rho_set1%has%rho) THEN
./xc/xc.F:            OPEN (unit=120, file="rho.bindata", status="unknown", access='sequential', &
./xc/xc.F:            pot => rho_set1%rho
./xc/xc.F:         IF (rho_set1%has%tau) THEN
./xc/xc.F:            pot => rho_set1%tau
./xc/xc.F:         IF (rho_set1%has%tau_spin) THEN
./xc/xc.F:            pot => rho_set1%tau_a
./xc/xc.F:            pot => rho_set1%tau_b
./xc/xc.F:      CALL xc_vxc_pw_create(vxc_rho=vxc_rho, vxc_tau=vxc_tau, &
./xc/xc.F:                            rho_r=rho_r, rho_g=rho_g, tau=tau, &
./xc/xc.F:         IF (ASSOCIATED(vxc_rho)) THEN
./xc/xc.F:            DO ispin = 1, SIZE(vxc_rho)
./xc/xc.F:               pot => vxc_rho(ispin)%pw%cr3d
./xc/xc.F:               pot => vxc_rho(ispin)%pw%cr3d
./xc/xc.F:                           IF (rho_set1%has%rho_spin) THEN
./xc/xc.F:                                     "(' rho=(',e11.4,',',e11.4,')')", advance="no") &
./xc/xc.F:                                 rho_set1%rhoa(i, j, k), rho_set1%rhob(i, j, k)
./xc/xc.F:                           ELSE IF (rho_set1%has%rho) THEN
./xc/xc.F:                                     "(' rho=',e11.4)", advance="no") rho_set1%rho(i, j, k)
./xc/xc.F:                           IF (rho_set1%has%norm_drho_spin) THEN
./xc/xc.F:                                     "(' ndrho=(',e11.4,',',e11.4,')')", advance="no") &
./xc/xc.F:                                 rho_set1%norm_drhoa(i, j, k), &
./xc/xc.F:                                 rho_set1%norm_drhob(i, j, k)
./xc/xc.F:                           ELSE IF (rho_set1%has%norm_drho) THEN
./xc/xc.F:                                     "(' ndrho=',e11.4)", advance="no") rho_set1%norm_drho(i, j, k)
./xc/xc.F:                           IF (rho_set1%has%tau_spin) THEN
./xc/xc.F:                                 rho_set1%tau_a(i, j, k), &
./xc/xc.F:                                 rho_set1%tau_b(i, j, k)
./xc/xc.F:                           ELSE IF (rho_set1%has%tau) THEN
./xc/xc.F:                                     "(' tau=',e11.4)", advance="no") rho_set1%tau(i, j, k)
./xc/xc.F:                           IF (rho_set1%has%rho_spin) THEN
./xc/xc.F:                                     "(' rho=(',e11.4,',',e11.4,')')", advance="no") &
./xc/xc.F:                                 rho_set1%rhoa(i, j, k), rho_set1%rhob(i, j, k)
./xc/xc.F:                           ELSE IF (rho_set1%has%rho) THEN
./xc/xc.F:                                     "(' rho=',e11.4)", advance="no") rho_set1%rho(i, j, k)
./xc/xc.F:                           IF (rho_set1%has%norm_drho_spin) THEN
./xc/xc.F:                                     "(' ndrho=(',e11.4,',',e11.4,')')", advance="no") &
./xc/xc.F:                                 rho_set1%norm_drhoa(i, j, k), &
./xc/xc.F:                                 rho_set1%norm_drhob(i, j, k)
./xc/xc.F:                           ELSE IF (rho_set1%has%norm_drho) THEN
./xc/xc.F:                                     "(' ndrho=',e11.4)", advance="no") rho_set1%norm_drho(i, j, k)
./xc/xc.F:                           IF (rho_set1%has%tau_spin) THEN
./xc/xc.F:                                 rho_set1%tau_a(i, j, k), &
./xc/xc.F:                                 rho_set1%tau_b(i, j, k)
./xc/xc.F:                           ELSE IF (rho_set1%has%tau) THEN
./xc/xc.F:                                     "(' tau=',e11.4)", advance="no") rho_set1%tau(i, j, k)
./xc/xc.F:      CALL xc_rho_set_release(rho_set1)
./xc/xc.F:!> \brief creates a xc_rho_set and a derivative set containing the derivatives
./xc/xc.F:!> \param rho_set will contain the rho set
./xc/xc.F:!> \param rho_r the value of the density in the real space
./xc/xc.F:!> \param rho_g value of the density in the g space (can be null, used only
./xc/xc.F:!>        without smoothing of rho or deriv)
./xc/xc.F:!>        should be kept in rho set (a basic component is for example drho
./xc/xc.F:!>        when with lda a functional needs norm_drho)
./xc/xc.F:!>      added to the rho set
./xc/xc.F:   SUBROUTINE xc_rho_set_and_dset_create(rho_set, deriv_set, deriv_order, &
./xc/xc.F:                                         rho_r, rho_g, tau, xc_section, pw_pool, &
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, rho_g, tau
./xc/xc.F:      CHARACTER(len=*), PARAMETER :: routineN = 'xc_rho_set_and_dset_create', &
./xc/xc.F:      CPASSERT(.NOT. ASSOCIATED(rho_set))
./xc/xc.F:      nspins = SIZE(rho_r)
./xc/xc.F:      CALL xc_rho_set_create(rho_set, &
./xc/xc.F:                             rho_r(1)%pw%pw_grid%bounds_local, &
./xc/xc.F:                             rho_cutoff=section_get_rval(xc_section, "density_cutoff"), &
./xc/xc.F:                             drho_cutoff=section_get_rval(xc_section, "gradient_cutoff"), &
./xc/xc.F:      CALL xc_rho_set_update(rho_set, rho_r, rho_g, tau, &
./xc/xc.F:                               rho_set=rho_set, &
./xc/xc.F:   END SUBROUTINE xc_rho_set_and_dset_create
./xc/xc.F:!> \brief smooths the cutoff on rho with a function smooth(rho) that is 0
./xc/xc.F:!>      for rho<rho_cutoff and 1 for rho>rho_cutoff*rho_smooth_cutoff_range:
./xc/xc.F:!>      E= integral e_0*smooth(rho) => dE/d...= de/d... * smooth,
./xc/xc.F:!>      dE/drho = de/drho * smooth + e_0 * dsmooth/drho
./xc/xc.F:!> \param rho , rhoa,rhob: the value of the density (used to apply the cutoff)
./xc/xc.F:!> \param rhoa ...
./xc/xc.F:!> \param rhob ...
./xc/xc.F:!> \param rho_cutoff the vaule at whch the cutoff function must go to 0
./xc/xc.F:!> \param rho_smooth_cutoff_range range of the smoothing
./xc/xc.F:!>        wrt. to rho, and needs the dsmooth*e_0 contribution
./xc/xc.F:   SUBROUTINE smooth_cutoff(pot, rho, rhoa, rhob, rho_cutoff, &
./xc/xc.F:                            rho_smooth_cutoff_range, e_0, e_0_scale_factor)
./xc/xc.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: pot, rho, rhoa, rhob
./xc/xc.F:      REAL(kind=dp), INTENT(in)                          :: rho_cutoff, rho_smooth_cutoff_range
./xc/xc.F:      REAL(kind=dp) :: my_e_0_scale_factor, my_rho, my_rho_n, my_rho_n2, rho_smooth_cutoff, &
./xc/xc.F:         rho_smooth_cutoff_2, rho_smooth_cutoff_range_2
./xc/xc.F:      rho_smooth_cutoff = rho_cutoff*rho_smooth_cutoff_range
./xc/xc.F:      rho_smooth_cutoff_2 = (rho_cutoff+rho_smooth_cutoff)/2
./xc/xc.F:      rho_smooth_cutoff_range_2 = rho_smooth_cutoff_2-rho_cutoff
./xc/xc.F:      IF (rho_smooth_cutoff_range > 0.0_dp) THEN
./xc/xc.F:            IF (ASSOCIATED(rho)) THEN
./xc/xc.F:!$OMP              PARALLEL DO DEFAULT(NONE) SHARED(bo,e_0,pot,rho,&
./xc/xc.F:!$OMP                          rho_cutoff,rho_smooth_cutoff,rho_smooth_cutoff_2,&
./xc/xc.F:!$OMP                          rho_smooth_cutoff_range_2,my_e_0_scale_factor)&
./xc/xc.F:!$OMP                    PRIVATE(k,j,i,my_rho,my_rho_n,my_rho_n2)
./xc/xc.F:                        my_rho = rho(i, j, k)
./xc/xc.F:                        IF (my_rho < rho_smooth_cutoff) THEN
./xc/xc.F:                           IF (my_rho < rho_cutoff) THEN
./xc/xc.F:                           ELSEIF (my_rho < rho_smooth_cutoff_2) THEN
./xc/xc.F:                              my_rho_n = (my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2)+ &
./xc/xc.F:                                             my_rho_n2*(3.0_dp-2.0_dp*my_rho_n) &
./xc/xc.F:                                             /rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n = 2.0_dp-(my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             (1.0_dp-my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2)) &
./xc/xc.F:                                             my_rho_n2*(3.0_dp-2.0_dp*my_rho_n) &
./xc/xc.F:                                             /rho_smooth_cutoff_range_2
./xc/xc.F:!$OMP              PARALLEL DO DEFAULT(NONE) SHARED(bo,pot,e_0,rhoa,rhob,&
./xc/xc.F:!$OMP                          rho_cutoff,rho_smooth_cutoff,rho_smooth_cutoff_2,&
./xc/xc.F:!$OMP                          rho_smooth_cutoff_range_2,my_e_0_scale_factor)&
./xc/xc.F:!$OMP                    PRIVATE(k,j,i,my_rho,my_rho_n,my_rho_n2)
./xc/xc.F:                        my_rho = rhoa(i, j, k)+rhob(i, j, k)
./xc/xc.F:                        IF (my_rho < rho_smooth_cutoff) THEN
./xc/xc.F:                           IF (my_rho < rho_cutoff) THEN
./xc/xc.F:                           ELSEIF (my_rho < rho_smooth_cutoff_2) THEN
./xc/xc.F:                              my_rho_n = (my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2)+ &
./xc/xc.F:                                             my_rho_n2*(3.0_dp-2.0_dp*my_rho_n) &
./xc/xc.F:                                             /rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n = 2.0_dp-(my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             (1.0_dp-my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2)) &
./xc/xc.F:                                             my_rho_n2*(3.0_dp-2.0_dp*my_rho_n) &
./xc/xc.F:                                             /rho_smooth_cutoff_range_2
./xc/xc.F:            IF (ASSOCIATED(rho)) THEN
./xc/xc.F:!$OMP                          rho_cutoff,rho_smooth_cutoff,rho_smooth_cutoff_2,&
./xc/xc.F:!$OMP                          rho_smooth_cutoff_range_2,rho)&
./xc/xc.F:!$OMP                    PRIVATE(k,j,i,my_rho,my_rho_n,my_rho_n2)
./xc/xc.F:                        my_rho = rho(i, j, k)
./xc/xc.F:                        IF (my_rho < rho_smooth_cutoff) THEN
./xc/xc.F:                           IF (my_rho < rho_cutoff) THEN
./xc/xc.F:                           ELSEIF (my_rho < rho_smooth_cutoff_2) THEN
./xc/xc.F:                              my_rho_n = (my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2)
./xc/xc.F:                              my_rho_n = 2.0_dp-(my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             (1.0_dp-my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2))
./xc/xc.F:               CPASSERT(ASSOCIATED(rhoa))
./xc/xc.F:               CPASSERT(ASSOCIATED(rhob))
./xc/xc.F:!$OMP                          rho_cutoff,rho_smooth_cutoff,rho_smooth_cutoff_2,&
./xc/xc.F:!$OMP                          rho_smooth_cutoff_range_2,rhoa,rhob)&
./xc/xc.F:!$OMP                    PRIVATE(k,j,i,my_rho,my_rho_n,my_rho_n2)
./xc/xc.F:                        my_rho = rhoa(i, j, k)+rhob(i, j, k)
./xc/xc.F:                        IF (my_rho < rho_smooth_cutoff) THEN
./xc/xc.F:                           IF (my_rho < rho_cutoff) THEN
./xc/xc.F:                           ELSEIF (my_rho < rho_smooth_cutoff_2) THEN
./xc/xc.F:                              my_rho_n = (my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2)
./xc/xc.F:                              my_rho_n = 2.0_dp-(my_rho-rho_cutoff)/rho_smooth_cutoff_range_2
./xc/xc.F:                              my_rho_n2 = my_rho_n*my_rho_n
./xc/xc.F:                                             (1.0_dp-my_rho_n2*(my_rho_n-0.5_dp*my_rho_n2))
./xc/xc.F:!> \param vxc_rho will contain the v_xc part that depend on rho
./xc/xc.F:!> \param rho_r the value of the density in the real space
./xc/xc.F:!> \param rho_g value of the density in the g space (needs to be associated
./xc/xc.F:!>      Fawzi (11.2002): drho_g(1:3)->drho_g
./xc/xc.F:   SUBROUTINE xc_vxc_pw_create(vxc_rho, vxc_tau, exc, rho_r, rho_g, tau, xc_section, &
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, rho_g, tau
./xc/xc.F:         norm_drho_spin_name = (/"(norm_drhoa)", "(norm_drhob)"/)
./xc/xc.F:                                                            xc_deriv_method_id, xc_rho_smooth_id
./xc/xc.F:      REAL(KIND=dp)                                      :: density_smooth_cut_range, drho_cutoff, &
./xc/xc.F:                                                            my_rho, ndr, rho_cutoff
./xc/xc.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: deriv_data, norm_drho, norm_drho_spin, &
./xc/xc.F:                                                            rho, rhoa, rhob, tmp_cr3d
./xc/xc.F:      TYPE(cp_3d_r_p_type), DIMENSION(:), POINTER        :: drho, drho_spin, drhoa, drhob
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(3)                      :: pw_to_deriv, pw_to_deriv_rho
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc.F:      NULLIFY (tmp_g, tmp_r, vxc_g, norm_drho_spin, norm_drho, drho_spin, drhoa, &
./xc/xc.F:               drhob, pos, deriv_set, rho_set, virial_pw)
./xc/xc.F:         NULLIFY (pw_to_deriv(idir)%pw, pw_to_deriv_rho(idir)%pw)
./xc/xc.F:      pw_grid => rho_r(1)%pw%pw_grid
./xc/xc.F:      CPASSERT(.NOT. ASSOCIATED(vxc_rho))
./xc/xc.F:      nspins = SIZE(rho_r)
./xc/xc.F:      CPASSERT(ASSOCIATED(rho_r(SIZE(rho_r))%pw))
./xc/xc.F:      bo = rho_r(1)%pw%pw_grid%bounds_local
./xc/xc.F:      CALL xc_rho_set_and_dset_create(rho_set=rho_set, deriv_set=deriv_set, &
./xc/xc.F:                                      deriv_order=1, rho_r=rho_r, rho_g=rho_g, tau=tau, &
./xc/xc.F:                                i_val=xc_rho_smooth_id)
./xc/xc.F:      CALL xc_rho_set_get(rho_set, rho_cutoff=rho_cutoff, &
./xc/xc.F:                          drho_cutoff=drho_cutoff)
./xc/xc.F:               CASE ("(rho)", "(rhoa)", "(rhob)", "(norm_drho)", "(norm_drhoa)", &
./xc/xc.F:                     "(norm_drhob)")
./xc/xc.F:               CASE ("(laplace_rhoa)", "(laplace_rhob)")
./xc/xc.F:                  !FM cross term (drhoa_drhob), I never got round to implement it,
./xc/xc.F:                  !FM in the functionals that I have implemented I use norm_drho
./xc/xc.F:               CASE ("(rho)", "(norm_drho)")
./xc/xc.F:               CASE ("(laplace_rho)")
./xc/xc.F:      ALLOCATE (vxc_rho(nspins))
./xc/xc.F:         NULLIFY (vxc_rho(ispin)%pw)
./xc/xc.F:      CALL xc_rho_set_get(rho_set, rho=rho, rhoa=rhoa, rhob=rhob, &
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)")
./xc/xc.F:            CALL pw_create(vxc_rho(1)%pw, pw_grid=pw_grid, &
./xc/xc.F:            CALL pw_pool_create_pw(pw_pool, vxc_rho(1)%pw, &
./xc/xc.F:            CALL pw_zero(vxc_rho(1)%pw)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)")
./xc/xc.F:            CALL pw_create(vxc_rho(2)%pw, pw_grid=pw_grid, &
./xc/xc.F:            CALL pw_pool_create_pw(pw_pool, vxc_rho(2)%pw, &
./xc/xc.F:            CALL pw_zero(vxc_rho(2)%pw)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rho)")
./xc/xc.F:            CALL pw_create(vxc_rho(1)%pw, pw_grid=pw_grid, &
./xc/xc.F:            CALL pw_pool_create_pw(pw_pool, vxc_rho(1)%pw, &
./xc/xc.F:            CALL pw_zero(vxc_rho(1)%pw)
./xc/xc.F:      deriv_att => xc_dset_get_derivative(deriv_set, "(rho)")
./xc/xc.F:!$OMP         PARALLEL DO DEFAULT(NONE) SHARED(bo,vxc_rho,deriv_data)&
./xc/xc.F:                     vxc_rho(1)%pw%cr3d(i, j, k) = vxc_rho(1)%pw%cr3d(i, j, k)+deriv_data(i, j, k)
./xc/xc.F:                     vxc_rho(2)%pw%cr3d(i, j, k) = vxc_rho(2)%pw%cr3d(i, j, k)+deriv_data(i, j, k)
./xc/xc.F:      ! rhoa,rhob already taken care of in vxc recovery
./xc/xc.F:      deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./xc/xc.F:         CALL xc_rho_set_get(rho_set, norm_drho=norm_drho, &
./xc/xc.F:                             drho=drho, drhoa=drhoa, drhob=drhob, rho_cutoff=rho_cutoff, &
./xc/xc.F:                             drho_cutoff=drho_cutoff, &
./xc/xc.F:         IF (ASSOCIATED(norm_drho)) THEN
./xc/xc.F:!$OMP         PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,norm_drho,drho_cutoff)&
./xc/xc.F:                     deriv_data(i, j, k) = -deriv_data(i, j, k)/MAX(norm_drho(i, j, k), drho_cutoff)
./xc/xc.F:         ELSE IF (ASSOCIATED(drho)) THEN
./xc/xc.F:!$OMP         PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,drho,drho_cutoff)&
./xc/xc.F:                     ndr = SQRT(drho(1)%array(i, j, k)**2+ &
./xc/xc.F:                                drho(2)%array(i, j, k)**2+ &
./xc/xc.F:                                drho(3)%array(i, j, k)**2)
./xc/xc.F:                     deriv_data(i, j, k) = -deriv_data(i, j, k)/MAX(ndr, drho_cutoff)
./xc/xc.F:            CPASSERT(ASSOCIATED(drhoa))
./xc/xc.F:            CPASSERT(ASSOCIATED(drhob))
./xc/xc.F:!$OMP         PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,drhoa,drhob,drho_cutoff)&
./xc/xc.F:                     ndr = SQRT((drhoa(1)%array(i, j, k)+drhob(1)%array(i, j, k))**2+ &
./xc/xc.F:                                (drhoa(2)%array(i, j, k)+drhob(2)%array(i, j, k))**2+ &
./xc/xc.F:                                (drhoa(3)%array(i, j, k)+drhob(3)%array(i, j, k))**2)
./xc/xc.F:                     deriv_data(i, j, k) = -deriv_data(i, j, k)/MAX(ndr, drho_cutoff)
./xc/xc.F:         IF (ASSOCIATED(drho) .AND. ASSOCIATED(drho(1)%array)) THEN
./xc/xc.F:                           virial_pw%cr3d(i, j, k) = drho(idir)%array(i, j, k)*deriv_data(i, j, k)
./xc/xc.F:                                                          drho(jdir)%array(:, :, :))
./xc/xc.F:               CALL pw_create(pw_to_deriv_rho(idir)%pw, pw_grid=pw_grid, &
./xc/xc.F:                              cr3d_ptr=drho(idir)%array, &
./xc/xc.F:               CPASSERT(ASSOCIATED(drho(idir)%array))
./xc/xc.F:!$OMP            PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,drho,idir)&
./xc/xc.F:                        drho(idir)%array(i, j, k) = drho(idir)%array(i, j, k)*deriv_data(i, j, k)
./xc/xc.F:               NULLIFY (drho(idir)%array)
./xc/xc.F:                           my_rho = drhoa(idir)%array(i, j, k)+drhob(idir)%array(i, j, k)
./xc/xc.F:                           virial_pw%cr3d(i, j, k) = my_rho*deriv_data(i, j, k)
./xc/xc.F:                                                                       (drhoa(jdir)%array(:, :, :)+drhob(jdir)%array(:, :, :)))
./xc/xc.F:               CALL pw_pool_create_pw(pw_pool, pw_to_deriv_rho(idir)%pw, &
./xc/xc.F:!$OMP                           pw_to_deriv_rho,drhoa,drhob,idir)&
./xc/xc.F:!$OMP                        PRIVATE(k,j,i,my_rho)
./xc/xc.F:                        my_rho = drhoa(idir)%array(i, j, k)+drhob(idir)%array(i, j, k)
./xc/xc.F:                        pw_to_deriv_rho(idir)%pw%cr3d(i, j, k) = my_rho*deriv_data(i, j, k)
./xc/xc.F:               CALL xc_rho_set_get(rho_set, drhoa=drho_spin, &
./xc/xc.F:               CALL xc_rho_set_get(rho_set, norm_drhoa=norm_drho_spin, &
./xc/xc.F:               CALL xc_rho_set_get(rho_set, drhob=drho_spin, &
./xc/xc.F:               CALL xc_rho_set_get(rho_set, norm_drhob=norm_drho_spin, &
./xc/xc.F:            deriv_att => xc_dset_get_derivative(deriv_set, norm_drho_spin_name(ispin))
./xc/xc.F:               IF (ASSOCIATED(norm_drho_spin)) THEN
./xc/xc.F:!$OMP               PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,norm_drho_spin,drho_cutoff)&
./xc/xc.F:                                                 MAX(norm_drho_spin(i, j, k), drho_cutoff)
./xc/xc.F:!$OMP               PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,drho_spin,drho_cutoff)&
./xc/xc.F:                           ndr = SQRT(drho_spin(1)%array(i, j, k)**2+ &
./xc/xc.F:                                      drho_spin(2)%array(i, j, k)**2+ &
./xc/xc.F:                                      drho_spin(3)%array(i, j, k)**2)
./xc/xc.F:                           deriv_data(i, j, k) = -deriv_data(i, j, k)/MAX(ndr, drho_cutoff)
./xc/xc.F:                              virial_pw%cr3d(i, j, k) = drho_spin(idir)%array(i, j, k)*deriv_data(i, j, k)
./xc/xc.F:                                                             drho_spin(jdir)%array(:, :, :))
./xc/xc.F:                  CPASSERT(ASSOCIATED(drho_spin(idir)%array))
./xc/xc.F:!$OMP               PARALLEL DO DEFAULT(NONE) SHARED(bo,deriv_data,drho_spin,&
./xc/xc.F:!$OMP                           ispin,idir,vxc_to_deriv,drho_cutoff)&
./xc/xc.F:                           drho_spin(idir)%array(i, j, k) = vxc_to_deriv(ispin)%pw%cr3d(i, j, k)* &
./xc/xc.F:                                                            drho_spin(idir)%array(i, j, k)
./xc/xc.F:                                 cr3d_ptr=drho_spin(idir)%array, &
./xc/xc.F:                  NULLIFY (drho_spin(idir)%array)
./xc/xc.F:         IF (ASSOCIATED(pw_to_deriv_rho(1)%pw)) THEN
./xc/xc.F:                  pw_to_deriv(idir)%pw => pw_to_deriv_rho(idir)%pw
./xc/xc.F:                     NULLIFY (pw_to_deriv_rho(idir)%pw)
./xc/xc.F:                  CALL pw_axpy(pw_to_deriv_rho(idir)%pw, pw_to_deriv(idir)%pw)
./xc/xc.F:                     CALL pw_pool_give_back_pw(pw_pool, pw_to_deriv_rho(idir)%pw)
./xc/xc.F:               CALL pw_axpy(tmp_r, vxc_rho(ispin)%pw)
./xc/xc.F:               tmp_r => vxc_rho(ispin)%pw
./xc/xc.F:         ! ** Add laplace part to vxc_rho
./xc/xc.F:                  deriv_att => xc_dset_get_derivative(deriv_set, "(laplace_rhoa)")
./xc/xc.F:                  deriv_att => xc_dset_get_derivative(deriv_set, "(laplace_rhob)")
./xc/xc.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(laplace_rho)")
./xc/xc.F:               CALL pw_axpy(tmp_r, vxc_rho(ispin)%pw)
./xc/xc.F:            CALL pw_transfer(vxc_rho(ispin)%pw, vxc_g)
./xc/xc.F:            CALL pw_transfer(vxc_g, vxc_rho(ispin)%pw)
./xc/xc.F:         CALL smooth_cutoff(pot=vxc_rho(ispin)%pw%cr3d, rho=rho, rhoa=rhoa, rhob=rhob, &
./xc/xc.F:                            rho_cutoff=rho_cutoff*density_smooth_cut_range, &
./xc/xc.F:                            rho_smooth_cutoff_range=density_smooth_cut_range)
./xc/xc.F:         ! final smoothing if rho was smoothed
./xc/xc.F:         IF (xc_rho_smooth_id /= xc_rho_no_smooth) THEN
./xc/xc.F:            SELECT CASE (xc_rho_smooth_id)
./xc/xc.F:            CASE (xc_rho_spline2_smooth)
./xc/xc.F:               CALL pw_nn_smear_r(pw_in=vxc_rho(ispin)%pw, pw_out=tmp_r, &
./xc/xc.F:            CASE (xc_rho_spline3_smooth)
./xc/xc.F:               CALL pw_nn_smear_r(pw_in=vxc_rho(ispin)%pw, pw_out=tmp_r, &
./xc/xc.F:            CASE (xc_rho_nn10)
./xc/xc.F:               CALL pw_nn_smear_r(pw_in=vxc_rho(ispin)%pw, pw_out=tmp_r, &
./xc/xc.F:            CASE (xc_rho_nn50)
./xc/xc.F:               CALL pw_nn_smear_r(pw_in=vxc_rho(ispin)%pw, pw_out=tmp_r, &
./xc/xc.F:            deriv_data => vxc_rho(ispin)%pw%cr3d
./xc/xc.F:            vxc_rho(ispin)%pw%cr3d => tmp_r%cr3d
./xc/xc.F:         CPASSERT(.NOT. ASSOCIATED(pw_to_deriv_rho(idir)%pw))
./xc/xc.F:         CALL smooth_cutoff(pot=deriv_data, rho=rho, rhoa=rhoa, rhob=rhob, &
./xc/xc.F:                            rho_cutoff=rho_cutoff, &
./xc/xc.F:                            rho_smooth_cutoff_range=density_smooth_cut_range)
./xc/xc.F:      CALL xc_rho_set_release(rho_set, pw_pool=pw_pool)
./xc/xc.F:!> \param rho_r ...
./xc/xc.F:!> \param rho_g ...
./xc/xc.F:   FUNCTION xc_exc_calc(rho_r, rho_g, tau, xc_section, pw_pool) &
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, rho_g, tau
./xc/xc.F:      REAL(dp)                                           :: density_smooth_cut_range, rho_cutoff
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc.F:      NULLIFY (rho_set, deriv_set, deriv, e_0)
./xc/xc.F:      CALL xc_rho_set_and_dset_create(rho_set=rho_set, &
./xc/xc.F:                                      rho_r=rho_r, rho_g=rho_g, tau=tau, xc_section=xc_section, &
./xc/xc.F:                                   r_val=rho_cutoff)
./xc/xc.F:         CALL smooth_cutoff(pot=e_0, rho=rho_set%rho, &
./xc/xc.F:                            rhoa=rho_set%rhoa, rhob=rho_set%rhob, &
./xc/xc.F:                            rho_cutoff=rho_cutoff, &
./xc/xc.F:                            rho_smooth_cutoff_range=density_smooth_cut_range)
./xc/xc.F:         exc = accurate_sum(e_0)*rho_r(1)%pw%pw_grid%dvol
./xc/xc.F:         IF (rho_r(1)%pw%pw_grid%para%mode == PW_MODE_DISTRIBUTED) THEN
./xc/xc.F:            CALL mp_sum(exc, rho_r(1)%pw%pw_grid%para%group)
./xc/xc.F:         CALL xc_rho_set_release(rho_set, pw_pool=pw_pool)
./xc/xc.F:!> \brief Calculates the second derivative of E_xc at rho in the direction
./xc/xc.F:!>      rho1  (if you see the second derivative as bilinear form)
./xc/xc.F:!>      partial_rho|_(rho=rho) partial_rho|_(rho=rho) E_xc drho(rho1)drho
./xc/xc.F:!>      function of rho, removing the dependence from its partial derivs)
./xc/xc.F:!> \param rho_set object containing the density at which the derivatives were calculated
./xc/xc.F:!> \param rho1_set object containing the density with which to fold
./xc/xc.F:!>      terms (tau,rho in LSD,...). The problem with the old code was that it
./xc/xc.F:!>      derivatives with respect to drho (that contibute also to the second
./xc/xc.F:!>      derivative wrt. rho).
./xc/xc.F:!>      rho_set.
./xc/xc.F:   SUBROUTINE xc_calc_2nd_deriv(v_xc, deriv_set, rho_set, rho1_set, &
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set, rho1_set
./xc/xc.F:      REAL(kind=dp), DIMENSION(:, :, :), POINTER         :: deriv_data, e_drhoa, e_drhob, &
./xc/xc.F:                                                            e_norm_drho, rho1, rho1a, rho1b
./xc/xc.F:      TYPE(cp_3d_r_p_type), DIMENSION(:), POINTER        :: drho, drho1, drho1a, drho1b, drhoa, drhob
./xc/xc.F:      TYPE(pw_p_type)                                    :: v_drho
./xc/xc.F:      NULLIFY (tmp_r, tmp_r2, tmp_a, tmp_b, e_drhoa, e_drhob, e_norm_drho, &
./xc/xc.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc.F:      CPASSERT(ASSOCIATED(rho1_set))
./xc/xc.F:      CALL xc_rho_set_get(rho_set, drho_cutoff=gradient_cut)
./xc/xc.F:      lsd = ASSOCIATED(rho_set%rhoa)
./xc/xc.F:      bo = rho_set%local_bounds
./xc/xc.F:               CASE ("rho", "rhoa", "rhob")
./xc/xc.F:               CASE ("norm_drho", "norm_drhoa", "norm_drhob")
./xc/xc.F:               CASE ("rho")
./xc/xc.F:               CASE ("norm_drho")
./xc/xc.F:               CASE ("rhoa", "rhob")
./xc/xc.F:                  CASE ("rhoa", "rhob")
./xc/xc.F:                  CASE ("norm_drhoa", "norm_drhob", "norm_drho")
./xc/xc.F:               CASE ("norm_drho", "norm_drhoa", "norm_drhob")
./xc/xc.F:                  CASE ("rhoa", "rhob", "norm_drhoa", "norm_drhob", "norm_drho")
./xc/xc.F:               CASE ("rho")
./xc/xc.F:                  CASE ("rho")
./xc/xc.F:                  CASE ("norm_drho")
./xc/xc.F:               CASE ("norm_drho")
./xc/xc.F:                  CASE ("rho", "norm_drho")
./xc/xc.F:         CALL xc_rho_set_get(rho1_set, rhoa=rho1a, rhob=rho1b)
./xc/xc.F:            CALL xc_rho_set_get(rho_set, drhoa=drhoa, drhob=drhob)
./xc/xc.F:            CALL xc_rho_set_get(rho1_set, drhoa=drho1a, drhob=drho1b)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)")
./xc/xc.F:!$OMP         PARALLEL DO PRIVATE(k,j,i) SHARED(v_xc,bo,rho1a,deriv_data) DEFAULT(NONE)
./xc/xc.F:                                                deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:            deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)")
./xc/xc.F:!$OMP            PARALLEL DO PRIVATE(k,j,i) DEFAULT(NONE) SHARED(bo,v_xc,deriv_data,rho1b)
./xc/xc.F:                                                   deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)")
./xc/xc.F:!$OMP         PARALLEL DO PRIVATE(k,j,i) DEFAULT(NONE) SHARED(bo,v_xc,deriv_data,rho1b,rho1a,nspins,fac)
./xc/xc.F:                                                   deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:                                                   deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:                                                   fac*deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)(norm_drhoa)")
./xc/xc.F:!$OMP         PARALLEL DO PRIVATE(k,j,i,dr1dr,idir) DEFAULT(NONE) SHARED(drhoa,drho1a,v_xc,tmp_a,bo,deriv_data,rho1a)
./xc/xc.F:                        dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                                                 deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:            deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)(norm_drhob)")
./xc/xc.F:!$OMP            PARALLEL DO PRIVATE(k,j,i,dr1dr,idir) DEFAULT(NONE) SHARED(v_xc,tmp_b,deriv_data,rho1b,bo,drhob,drho1b)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)(norm_drhob)")
./xc/xc.F:!$OMP         PARALLEL DO PRIVATE(k,j,i,dr1dr,idir) DEFAULT(NONE) SHARED(bo,drhob,drho1b,v_xc,tmp_b,deriv_data,nspins,rho1a,fac)
./xc/xc.F:                        dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)(norm_drhoa)")
./xc/xc.F:!$OMP         PARALLEL DO PRIVATE(k,j,i,dr1dr,idir) DEFAULT(NONE) SHARED(bo,nspins,drhoa,drho1a,v_xc,tmp_a,fac,deriv_data,rho1b)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:                                                    fac*deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)(norm_drho)")
./xc/xc.F:!$OMP           SHARED(bo,drhob,drho1a,deriv_data,v_xc,drhoa,drho1b,tmp_a,tmp_b,nspins,rho1a,fac)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)+ &
./xc/xc.F:                                   fac*drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1a(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(norm_drho)")
./xc/xc.F:!$OMP         SHARED(bo,nspins,drhob,drho1a,deriv_data,drhoa,drho1b,tmp_a,tmp_b,fac)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)+ &
./xc/xc.F:                                   fac*drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)(norm_drho)")
./xc/xc.F:!$OMP         SHARED(bo,nspins,drhob,drho1a,deriv_data,drhoa,drho1b,tmp_a,tmp_b,fac,v_xc,rho1b)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:                                                    deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:                                                    fac*deriv_data(i, j, k)*rho1b(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhob)(norm_drho)")
./xc/xc.F:!$OMP         SHARED(bo,nspins,drhob,drho1a,deriv_data,drhoa,drho1b,tmp_a,tmp_b,fac)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(norm_drhoa)")
./xc/xc.F:!$OMP         SHARED(bo,nspins,drhoa,drho1a,deriv_data,tmp_a)
./xc/xc.F:                        dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:            deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhob)(norm_drhob)")
./xc/xc.F:!$OMP            SHARED(drhob,drho1b,tmp_b,deriv_data,bo)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhoa)(norm_drhob)")
./xc/xc.F:!$OMP         SHARED(bo,nspins,drhob,drho1a,deriv_data,drhoa,drho1b,tmp_a,tmp_b,fac)
./xc/xc.F:                        dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhoa)")
./xc/xc.F:            CALL xc_derivative_get(deriv_att, deriv_data=e_drhoa)
./xc/xc.F:!$OMP         SHARED(bo,drhoa,drho1a,tmp_a,deriv_data)
./xc/xc.F:                        dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:            deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhob)")
./xc/xc.F:               CALL xc_derivative_get(deriv_att, deriv_data=e_drhob)
./xc/xc.F:!$OMP            SHARED(bo,drhob,drho1b,tmp_b,deriv_data)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)(norm_drho)")
./xc/xc.F:!$OMP         SHARED(bo,nspins,drhob,drho1a,drhoa,drho1b,tmp_a,tmp_b,fac,deriv_data)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                           dr1dr = dr1dr+drhob(idir)%array(i, j, k)*drho1a(idir)%array(i, j, k)+ &
./xc/xc.F:                                   fac*drhoa(idir)%array(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./xc/xc.F:            CALL xc_derivative_get(deriv_att, deriv_data=e_norm_drho)
./xc/xc.F:!$OMP            SHARED(bo,nspins,vxg,drhoa,drhob,tmp_a,tmp_b,e_drhoa,e_drhob,e_norm_drho,drho1a,drho1b,fac)
./xc/xc.F:                              tmp_a(ispin)%pw%cr3d(ia, ir, 1)*drhoa(idir)%array(ia, ir, 1)+ &
./xc/xc.F:                              tmp_b(ispin)%pw%cr3d(ia, ir, 1)*drhob(idir)%array(ia, ir, 1)
./xc/xc.F:                        IF (ASSOCIATED(e_drhoa)) THEN
./xc/xc.F:                                                  e_drhoa(ia, ir, 1)*drho1a(idir)%array(ia, ir, 1)
./xc/xc.F:                        IF (nspins /= 1 .AND. ASSOCIATED(e_drhob)) THEN
./xc/xc.F:                                                  e_drhob(ia, ir, 1)*drho1b(idir)%array(ia, ir, 1)
./xc/xc.F:                        IF (ASSOCIATED(e_norm_drho)) THEN
./xc/xc.F:                                                     e_norm_drho(ia, ir, 1)*drho1b(idir)%array(ia, ir, 1)
./xc/xc.F:                                                     e_norm_drho(ia, ir, 1)*drho1a(idir)%array(ia, ir, 1)
./xc/xc.F:                                                     fac*e_norm_drho(ia, ir, 1)*drho1b(idir)%array(ia, ir, 1)
./xc/xc.F:!$OMP                  SHARED(bo,tmp_r,tmp_a,tmp_b,drhoa,drhob,ispin,idir)
./xc/xc.F:                                 tmp_a(ispin)%pw%cr3d(i, j, k)*drhoa(idir)%array(i, j, k)+ &
./xc/xc.F:                                 tmp_b(ispin)%pw%cr3d(i, j, k)*drhob(idir)%array(i, j, k)
./xc/xc.F:                     IF (ASSOCIATED(e_drhoa)) THEN
./xc/xc.F:!$OMP                     SHARED(bo,tmp_r,e_drhoa,drho1a,idir)
./xc/xc.F:                                                             e_drhoa(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                     IF (nspins /= 1 .AND. ASSOCIATED(e_drhob)) THEN
./xc/xc.F:!$OMP                     SHARED(bo,tmp_r,e_drhob,drho1b,idir)
./xc/xc.F:                                                             e_drhob(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                     IF (ASSOCIATED(e_norm_drho)) THEN
./xc/xc.F:!$OMP                     SHARED(bo,tmp_r,e_norm_drho,drho1b,drho1a,fac,idir,nspins)
./xc/xc.F:                                                                e_norm_drho(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:                                                                e_norm_drho(i, j, k)*drho1a(idir)%array(i, j, k)
./xc/xc.F:                                                                fac*e_norm_drho(i, j, k)*drho1b(idir)%array(i, j, k)
./xc/xc.F:         CALL xc_rho_set_get(rho1_set, rho=rho1)
./xc/xc.F:            CALL xc_rho_set_get(rho_set, drho=drho)
./xc/xc.F:            CALL xc_rho_set_get(rho1_set, drho=drho1)
./xc/xc.F:               CALL pw_pool_create_pw(pw_pool, v_drho%pw, &
./xc/xc.F:               CALL pw_zero(v_drho%pw)
./xc/xc.F:               ALLOCATE (v_drho%pw)
./xc/xc.F:               ALLOCATE (v_drho%pw%cr3d(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc.F:               v_drho%pw%cr3d = 0.0_dp
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rho)(rho)")
./xc/xc.F:!$OMP         SHARED(bo,v_xc,deriv_data,rho1)
./xc/xc.F:                        deriv_data(i, j, k)*rho1(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(rho)(norm_drho)")
./xc/xc.F:!$OMP         SHARED(bo,drho,drho1,v_xc,deriv_data,v_drho,rho1)
./xc/xc.F:                        dr1dr = dr1dr+drho(idir)%array(i, j, k)*drho1(idir)%array(i, j, k)
./xc/xc.F:                     v_drho%pw%cr3d(i, j, k) = -1._dp*deriv_data(i, j, k)*rho1(i, j, k)
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)(norm_drho)")
./xc/xc.F:!$OMP         SHARED(bo,drho,drho1,v_drho,deriv_data)
./xc/xc.F:                        dr1dr = dr1dr+drho(idir)%array(i, j, k)*drho1(idir)%array(i, j, k)
./xc/xc.F:                     v_drho%pw%cr3d(i, j, k) = v_drho%pw%cr3d(i, j, k)-deriv_data(i, j, k)*dr1dr
./xc/xc.F:         deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./xc/xc.F:            CALL xc_derivative_get(deriv_att, deriv_data=e_norm_drho)
./xc/xc.F:!$OMP         SHARED(bo,drho,drho1,gradient_cut,rho_set,v_drho,deriv_data)
./xc/xc.F:                        dr1dr = dr1dr+drho(idir)%array(i, j, k)*drho1(idir)%array(i, j, k)
./xc/xc.F:                     IF (rho_set%norm_drho(i, j, k) > gradient_cut) THEN
./xc/xc.F:                        dr1dr = dr1dr/(rho_set%norm_drho(i, j, k))**2
./xc/xc.F:                        v_drho%pw%cr3d(i, j, k) = v_drho%pw%cr3d(i, j, k)+deriv_data(i, j, k)*dr1dr
./xc/xc.F:!$OMP               SHARED(bo,vxg,drho,v_drho,e_norm_drho,drho1,idir)
./xc/xc.F:                        vxg(idir, ia, ir, 1) = drho(idir)%array(ia, ir, 1)*v_drho%pw%cr3d(ia, ir, 1)
./xc/xc.F:                        IF (ASSOCIATED(e_norm_drho)) THEN
./xc/xc.F:                           vxg(idir, ia, ir, 1) = vxg(idir, ia, ir, 1)-drho1(idir)%array(ia, ir, 1)*e_norm_drho(ia, ir, 1)
./xc/xc.F:!$OMP               SHARED(bo,tmp_r,drho,v_drho,drho1,deriv_data,idir)
./xc/xc.F:                           tmp_r(1)%pw%cr3d(i, j, k) = drho(idir)%array(i, j, k)*v_drho%pw%cr3d(i, j, k)- &
./xc/xc.F:                                                       drho1(idir)%array(i, j, k)*deriv_data(i, j, k)
./xc/xc.F:               CALL pw_pool_give_back_pw(pw_pool, v_drho%pw)
./xc/xc.F:               DEALLOCATE (v_drho%pw%cr3d)
./xc/xc.F:               DEALLOCATE (v_drho%pw)
./xc/xc.F:!>      Calculates the second derivative of E_xc at rho in the direction
./xc/xc.F:!>      rho1  (if you see the second derivative as bilinear form)
./xc/xc.F:!>      partial_rho|_(rho=rho) partial_rho|_(rho=rho) E_xc drho(rho1)drho
./xc/xc.F:!>      function of rho, removing the dependence from its partial derivs)
./xc/xc.F:!> \param rho_set object that will contain the density at which the
./xc/xc.F:!> \param rho_r the place where you evaluate the derivative
./xc/xc.F:                                rho_set, rho_r, pw_pool, xc_section, tau_r)
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./xc/xc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r_pw, tau
./xc/xc.F:      CPASSERT(.NOT. ASSOCIATED(rho_set))
./xc/xc.F:      nspins = SIZE(rho_r)
./xc/xc.F:      ALLOCATE (rho_r_pw(nspins))
./xc/xc.F:         rho_r_pw(ispin)%pw => rho_r(ispin)%pw
./xc/xc.F:      NULLIFY (rho_g, tau)
./xc/xc.F:      CALL xc_rho_set_and_dset_create(rho_set, deriv_set, 2, &
./xc/xc.F:                                      rho_r_pw, rho_g, tau, xc_section, pw_pool, &
./xc/xc.F:      DEALLOCATE (rho_r_pw)
./xc/xc.F:      CALL divide_by_norm_drho(deriv_set, rho_set, lsd)
./xc/xc.F:!> \param rho_set ...
./xc/xc.F:   SUBROUTINE divide_by_norm_drho(deriv_set, rho_set, lsd)
./xc/xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc.F:      CHARACTER(len=*), PARAMETER :: routineN = 'divide_by_norm_drho', &
./xc/xc.F:      REAL(KIND=dp)                                      :: drho_cutoff
./xc/xc.F:! check for unknown derivatives and divide by norm_drho where necessary
./xc/xc.F:      bo = rho_set%local_bounds
./xc/xc.F:      CALL xc_rho_set_get(rho_set, drho_cutoff=drho_cutoff)
./xc/xc.F:               CASE ("norm_drho")
./xc/xc.F:!$OMP                 PARALLEL DO PRIVATE(i,j,k) DEFAULT(NONE) SHARED(bo,deriv_att,rho_set,drho_cutoff)
./xc/xc.F:                                                           MAX(rho_set%norm_drho(i, j, k), drho_cutoff)
./xc/xc.F:               CASE ("norm_drhoa")
./xc/xc.F:!$OMP                 PARALLEL DO PRIVATE(i,j,k) DEFAULT(NONE) SHARED(bo,deriv_att,rho_set,drho_cutoff)
./xc/xc.F:                                                           MAX(rho_set%norm_drhoa(i, j, k), drho_cutoff)
./xc/xc.F:               CASE ("norm_drhob")
./xc/xc.F:!$OMP                 PARALLEL DO PRIVATE(i,j,k) DEFAULT(NONE) SHARED(bo,deriv_att,rho_set,drho_cutoff)
./xc/xc.F:                                                           MAX(rho_set%norm_drhob(i, j, k), drho_cutoff)
./xc/xc.F:               CASE ("rho")
./xc/xc.F:                     CPABORT("rho not handled in lsd: '"//TRIM(desc)//"'")
./xc/xc.F:               CASE ("rhoa", "rhob")
./xc/xc.F:   END SUBROUTINE divide_by_norm_drho
./xc/xc_atom.F:   USE xc,                              ONLY: divide_by_norm_drho,&
./xc/xc_atom.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_atom.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_atom.F:                                              xc_rho_set_type
./xc/xc_atom.F:   PUBLIC :: vxc_of_r_new, xc_rho_set_atom_update, xc_2nd_deriv_of_r, fill_rho_set
./xc/xc_atom.F:!> \param rho_set ...
./xc/xc_atom.F:   SUBROUTINE vxc_of_r_new(xc_fun_section, rho_set, deriv_set, deriv_order, needs, w, &
./xc/xc_atom.F:! This routine updates rho_set by giving to it the rho and drho that are needed.
./xc/xc_atom.F:! Since for the local densities rho1_h and rho1_s local grids are used it is not possible
./xc/xc_atom.F:! to call xc_rho_set_update.
./xc/xc_atom.F:! As input of this routine one gets rho and drho on a one dimensional grid.
./xc/xc_atom.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_atom.F:      TYPE(xc_rho_cflags_type), INTENT(in)               :: needs
./xc/xc_atom.F:      REAL(KIND=dp)                                      :: drho_cutoff
./xc/xc_atom.F:      gradient_f = (needs%drho_spin .OR. needs%norm_drho_spin .OR. &
./xc/xc_atom.F:                    needs%drhoa_drhob .OR. needs%drho .OR. needs%norm_drho)
./xc/xc_atom.F:                               rho_set=rho_set, &
./xc/xc_atom.F:      CALL xc_rho_set_get(rho_set, drho_cutoff=drho_cutoff)
./xc/xc_atom.F:            deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)")
./xc/xc_atom.F:                        vxg(idir, ia, ir, 1) = rho_set%drhoa(idir)%array(ia, ir, 1)* &
./xc/xc_atom.F:            deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)")
./xc/xc_atom.F:                        vxg(idir, ia, ir, 2) = rho_set%drhob(idir)%array(ia, ir, 1)* &
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(rhoa)")
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(rhob)")
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(rho)")
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(rho)")
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhoa)")
./xc/xc_atom.F:                           IF (rho_set%norm_drhoa(ia, ir, 1) > drho_cutoff) THEN
./xc/xc_atom.F:                              vxg(idir, ia, ir, 1) = rho_set%drhoa(idir)%array(ia, ir, 1)* &
./xc/xc_atom.F:                                                     rho_set%norm_drhoa(ia, ir, 1)*my_adiabatic_rescale_factor
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drhob)")
./xc/xc_atom.F:                           IF (rho_set%norm_drhob(ia, ir, 1) > drho_cutoff) THEN
./xc/xc_atom.F:                              vxg(idir, ia, ir, 2) = rho_set%drhob(idir)%array(ia, ir, 1)* &
./xc/xc_atom.F:                                                     rho_set%norm_drhob(ia, ir, 1)*my_adiabatic_rescale_factor
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./xc/xc_atom.F:                           IF (rho_set%norm_drho(ia, ir, 1) > drho_cutoff) THEN
./xc/xc_atom.F:                                 rho_set%drhoa(idir)%array(ia, ir, 1)+ &
./xc/xc_atom.F:                                 rho_set%drhob(idir)%array(ia, ir, 1))* &
./xc/xc_atom.F:                                 deriv_data(ia, ir, 1)*w(ia, ir)/rho_set%norm_drho(ia, ir, 1)* &
./xc/xc_atom.F:               deriv_att => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./xc/xc_atom.F:                        IF (rho_set%norm_drho(ia, ir, 1) > drho_cutoff) THEN
./xc/xc_atom.F:                              vxg(idir, ia, ir, 1) = rho_set%drho(idir)%array(ia, ir, 1)* &
./xc/xc_atom.F:                                                     rho_set%norm_drho(ia, ir, 1)*my_adiabatic_rescale_factor
./xc/xc_atom.F:!> \param rho_set ...
./xc/xc_atom.F:!> \param rho1_set ...
./xc/xc_atom.F:   SUBROUTINE xc_2nd_deriv_of_r(rho_set, rho1_set, xc_section, &
./xc/xc_atom.F:! As input of this routine one gets rho and drho on a one dimensional grid.
./xc/xc_atom.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set, rho1_set
./xc/xc_atom.F:      REAL(dp)                                           :: drho_cutoff
./xc/xc_atom.F:      IF (ASSOCIATED(rho_set%rhoa)) THEN
./xc/xc_atom.F:      CALL xc_rho_set_get(rho_set, drho_cutoff=drho_cutoff)
./xc/xc_atom.F:                               rho_set=rho_set, &
./xc/xc_atom.F:      CALL divide_by_norm_drho(deriv_set, rho_set, lsd)
./xc/xc_atom.F:      CALL xc_calc_2nd_deriv(vxc_pw, deriv_set, rho_set, rho1_set, pw_pool, &
./xc/xc_atom.F:!> \param rho_set ...
./xc/xc_atom.F:   SUBROUTINE xc_rho_set_atom_update(rho_set, needs, nspins, bo)
./xc/xc_atom.F:!   This routine allocates the storage arrays for rho and drho
./xc/xc_atom.F:!   of the radial grid for each atom, rho_set is deallocated.
./xc/xc_atom.F:!   Within the same kind, at each new point on the radial grid, the rho_set
./xc/xc_atom.F:!   arrays rho and drho are overwritten.
./xc/xc_atom.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_atom.F:      TYPE(xc_rho_cflags_type)                           :: needs
./xc/xc_atom.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'xc_rho_set_atom_update', &
./xc/xc_atom.F:         IF (needs%rho_1_3) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%rho_1_3)
./xc/xc_atom.F:            ALLOCATE (rho_set%rho_1_3(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%rho_1_3 = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_1_3 = .FALSE.
./xc/xc_atom.F:         IF (needs%rho) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%rho)
./xc/xc_atom.F:            ALLOCATE (rho_set%rho(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%rho = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho = .FALSE.
./xc/xc_atom.F:         IF (needs%norm_drho) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%norm_drho)
./xc/xc_atom.F:            ALLOCATE (rho_set%norm_drho(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%norm_drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%norm_drho = .FALSE.
./xc/xc_atom.F:         IF (needs%drho) THEN
./xc/xc_atom.F:               NULLIFY (rho_set%drho(idir)%array)
./xc/xc_atom.F:               ALLOCATE (rho_set%drho(idir)%array(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%drho = .FALSE.
./xc/xc_atom.F:         IF (needs%rho) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%rho)
./xc/xc_atom.F:            ALLOCATE (rho_set%rho(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%rho = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho = .FALSE.
./xc/xc_atom.F:         IF (needs%rho_1_3) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%rho_1_3)
./xc/xc_atom.F:            ALLOCATE (rho_set%rho_1_3(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%rho_1_3 = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_1_3 = .FALSE.
./xc/xc_atom.F:         IF (needs%rho_spin_1_3) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%rhoa_1_3, rho_set%rhob_1_3)
./xc/xc_atom.F:            ALLOCATE (rho_set%rhoa_1_3(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            ALLOCATE (rho_set%rhob_1_3(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%rho_spin_1_3 = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_spin_1_3 = .FALSE.
./xc/xc_atom.F:!     Allocate the storage space for the spin densities rhoa and rhob
./xc/xc_atom.F:         IF (needs%rho_spin) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%rhoa, rho_set%rhob)
./xc/xc_atom.F:            ALLOCATE (rho_set%rhoa(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            ALLOCATE (rho_set%rhob(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%rho_spin = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_spin = .FALSE.
./xc/xc_atom.F:         IF (needs%norm_drho) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%norm_drho)
./xc/xc_atom.F:            ALLOCATE (rho_set%norm_drho(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%norm_drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%norm_drho = .FALSE.
./xc/xc_atom.F:!     Allocate the storage space for the norm of the gradient of rhoa and of rhob separatedly
./xc/xc_atom.F:         IF (needs%norm_drho_spin) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%norm_drhoa, rho_set%norm_drhob)
./xc/xc_atom.F:            ALLOCATE (rho_set%norm_drhoa(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            ALLOCATE (rho_set%norm_drhob(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%norm_drho_spin = .TRUE.
./xc/xc_atom.F:            rho_set%has%norm_drho_spin = .FALSE.
./xc/xc_atom.F:         IF (needs%drhoa_drhob) THEN
./xc/xc_atom.F:            NULLIFY (rho_set%drhoa_drhob)
./xc/xc_atom.F:            ALLOCATE (rho_set%drhoa_drhob(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%drhoa_drhob = .TRUE.
./xc/xc_atom.F:            rho_set%has%drhoa_drhob = .FALSE.
./xc/xc_atom.F:!     Allocate the storage space for the components of the gradient for the total rho
./xc/xc_atom.F:         IF (needs%drho) THEN
./xc/xc_atom.F:               NULLIFY (rho_set%drho(idir)%array)
./xc/xc_atom.F:               ALLOCATE (rho_set%drho(idir)%array(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%drho = .FALSE.
./xc/xc_atom.F:!     Allocate the storage space for the components of the gradient for rhoa and rhob
./xc/xc_atom.F:         IF (needs%drho_spin) THEN
./xc/xc_atom.F:               NULLIFY (rho_set%drhoa(idir)%array, rho_set%drhob(idir)%array)
./xc/xc_atom.F:               ALLOCATE (rho_set%drhoa(idir)%array(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:               ALLOCATE (rho_set%drhob(idir)%array(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:            rho_set%owns%drho_spin = .TRUE.
./xc/xc_atom.F:            rho_set%has%drho_spin = .FALSE.
./xc/xc_atom.F:         NULLIFY (rho_set%tau)
./xc/xc_atom.F:         ALLOCATE (rho_set%tau(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:         rho_set%owns%tau = .TRUE.
./xc/xc_atom.F:         NULLIFY (rho_set%tau_a, rho_set%tau_b)
./xc/xc_atom.F:         ALLOCATE (rho_set%tau_a(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:         ALLOCATE (rho_set%tau_b(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:         rho_set%owns%tau_spin = .TRUE.
./xc/xc_atom.F:         rho_set%has%tau_spin = .FALSE.
./xc/xc_atom.F:      IF (needs%laplace_rho) THEN
./xc/xc_atom.F:         NULLIFY (rho_set%laplace_rho)
./xc/xc_atom.F:         ALLOCATE (rho_set%laplace_rho(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:         rho_set%owns%laplace_rho = .TRUE.
./xc/xc_atom.F:      IF (needs%laplace_rho_spin) THEN
./xc/xc_atom.F:         NULLIFY (rho_set%laplace_rhoa)
./xc/xc_atom.F:         NULLIFY (rho_set%laplace_rhob)
./xc/xc_atom.F:         ALLOCATE (rho_set%laplace_rhoa(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:         ALLOCATE (rho_set%laplace_rhob(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./xc/xc_atom.F:         rho_set%owns%laplace_rho_spin = .TRUE.
./xc/xc_atom.F:         rho_set%has%laplace_rho_spin = .TRUE.
./xc/xc_atom.F:   END SUBROUTINE xc_rho_set_atom_update
./xc/xc_atom.F:!> \param rho_set ...
./xc/xc_atom.F:!> \param rho ...
./xc/xc_atom.F:!> \param drho ...
./xc/xc_atom.F:   SUBROUTINE fill_rho_set(rho_set, lsd, nspins, needs, rho, drho, tau, na, ir)
./xc/xc_atom.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_atom.F:      TYPE(xc_rho_cflags_type), INTENT(in)               :: needs
./xc/xc_atom.F:      REAL(dp), DIMENSION(:, :), POINTER                 :: rho
./xc/xc_atom.F:      REAL(dp), DIMENSION(:, :, :, :), POINTER           :: drho
./xc/xc_atom.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'fill_rho_set', routineP = moduleN//':'//routineN
./xc/xc_atom.F:         CPASSERT(SIZE(rho, 2) == 1)
./xc/xc_atom.F:         CPASSERT(.NOT. needs%rho_spin)
./xc/xc_atom.F:         CPASSERT(.NOT. needs%drho_spin)
./xc/xc_atom.F:         CPASSERT(.NOT. needs%norm_drho_spin)
./xc/xc_atom.F:         CPASSERT(.NOT. needs%drhoa_drhob)
./xc/xc_atom.F:         CPASSERT(.NOT. needs%rho_spin_1_3)
./xc/xc_atom.F:      gradient_f = (needs%drho_spin .OR. needs%norm_drho_spin .OR. &
./xc/xc_atom.F:                    needs%drhoa_drhob .OR. needs%drho .OR. needs%norm_drho)
./xc/xc_atom.F:         ! Give rho to 1/3
./xc/xc_atom.F:         IF (needs%rho_1_3) THEN
./xc/xc_atom.F:               rho_set%rho_1_3(ia, ir, 1) = MAX(rho(ia, 1), 0.0_dp)**f13
./xc/xc_atom.F:            rho_set%owns%rho_1_3 = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_1_3 = .TRUE.
./xc/xc_atom.F:         IF (needs%rho) THEN
./xc/xc_atom.F:               rho_set%rho(ia, ir, 1) = rho(ia, 1)
./xc/xc_atom.F:            rho_set%owns%rho = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho = .TRUE.
./xc/xc_atom.F:         IF (needs%norm_drho) THEN
./xc/xc_atom.F:               rho_set%norm_drho(ia, ir, 1) = drho(4, ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%norm_drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%norm_drho = .TRUE.
./xc/xc_atom.F:         IF (needs%drho) THEN
./xc/xc_atom.F:                  rho_set%drho(idir)%array(ia, ir, 1) = drho(idir, ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%drho = .TRUE.
./xc/xc_atom.F:         IF (needs%rho) THEN
./xc/xc_atom.F:                  rho_set%rho(ia, ir, 1) = rho(ia, 1)+rho(ia, 2)
./xc/xc_atom.F:                  rho_set%rho(ia, ir, 1) = rho(ia, 1)
./xc/xc_atom.F:            rho_set%owns%rho = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho = .TRUE.
./xc/xc_atom.F:         IF (needs%rho_1_3) THEN
./xc/xc_atom.F:                  rho_set%rho_1_3(ia, ir, 1) = MAX(rho(ia, 1)+rho(ia, 2), 0.0_dp)**f13
./xc/xc_atom.F:                  rho_set%rho_1_3(ia, ir, 1) = MAX(rho(ia, 1), 0.0_dp)**f13
./xc/xc_atom.F:            rho_set%owns%rho_1_3 = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_1_3 = .TRUE.
./xc/xc_atom.F:         IF (needs%rho_spin_1_3) THEN
./xc/xc_atom.F:                  rho_set%rhoa_1_3(ia, ir, 1) = MAX(rho(ia, 1), 0.0_dp)**f13
./xc/xc_atom.F:                  rho_set%rhob_1_3(ia, ir, 1) = MAX(rho(ia, 2), 0.0_dp)**f13
./xc/xc_atom.F:                  rho_set%rhoa_1_3(ia, ir, 1) = MAX(0.5_dp*rho(ia, 1), 0.0_dp)**f13
./xc/xc_atom.F:                  rho_set%rhob_1_3(ia, ir, 1) = rho_set%rhoa_1_3(ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%rho_spin_1_3 = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_spin_1_3 = .TRUE.
./xc/xc_atom.F:         ! Give the spin densities rhoa and rhob
./xc/xc_atom.F:         IF (needs%rho_spin) THEN
./xc/xc_atom.F:                  rho_set%rhoa(ia, ir, 1) = rho(ia, 1)
./xc/xc_atom.F:                  rho_set%rhob(ia, ir, 1) = rho(ia, 2)
./xc/xc_atom.F:                  rho_set%rhoa(ia, ir, 1) = 0.5_dp*rho(ia, 1)
./xc/xc_atom.F:                  rho_set%rhob(ia, ir, 1) = rho_set%rhoa(ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%rho_spin = .TRUE.
./xc/xc_atom.F:            rho_set%has%rho_spin = .TRUE.
./xc/xc_atom.F:         IF (needs%norm_drho) THEN
./xc/xc_atom.F:                  rho_set%norm_drho(ia, ir, 1) = SQRT( &
./xc/xc_atom.F:                                                 (drho(1, ia, ir, 1)+drho(1, ia, ir, 2))**2+ &
./xc/xc_atom.F:                                                 (drho(2, ia, ir, 1)+drho(2, ia, ir, 2))**2+ &
./xc/xc_atom.F:                                                 (drho(3, ia, ir, 1)+drho(3, ia, ir, 2))**2)
./xc/xc_atom.F:                  rho_set%norm_drho(ia, ir, 1) = drho(4, ia, ir, 1)
./xc/xc_atom.F:!!                rho_set%norm_drho(ia,ir,1) = SQRT(&
./xc/xc_atom.F:!!                     (drho(1,ia,ir,1))**2+&
./xc/xc_atom.F:!!                     (drho(2,ia,ir,1))**2+&
./xc/xc_atom.F:!!                     (drho(3,ia,ir,1))**2)
./xc/xc_atom.F:            rho_set%owns%norm_drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%norm_drho = .TRUE.
./xc/xc_atom.F:         ! Give the norm of the gradient of rhoa and of rhob separatedly
./xc/xc_atom.F:         IF (needs%norm_drho_spin) THEN
./xc/xc_atom.F:                  rho_set%norm_drhoa(ia, ir, 1) = drho(4, ia, ir, 1)
./xc/xc_atom.F:                  rho_set%norm_drhob(ia, ir, 1) = drho(4, ia, ir, 2)
./xc/xc_atom.F:                  rho_set%norm_drhoa(ia, ir, 1) = 0.5_dp*drho(4, ia, ir, 1)
./xc/xc_atom.F:                  rho_set%norm_drhob(ia, ir, 1) = rho_set%norm_drhoa(ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%norm_drho_spin = .TRUE.
./xc/xc_atom.F:            rho_set%has%norm_drho_spin = .TRUE.
./xc/xc_atom.F:         IF (needs%drhoa_drhob) THEN
./xc/xc_atom.F:                  rho_set%drhoa_drhob(ia, ir, 1) = &
./xc/xc_atom.F:                     (drho(1, ia, ir, 1)*drho(1, ia, ir, 2))+ &
./xc/xc_atom.F:                     (drho(2, ia, ir, 1)*drho(2, ia, ir, 2))+ &
./xc/xc_atom.F:                     (drho(3, ia, ir, 1)*drho(3, ia, ir, 2))
./xc/xc_atom.F:                  rho_set%drhoa_drhob(ia, ir, 1) = 0.25_dp*drho(4, ia, ir, 1)**2
./xc/xc_atom.F:!!                rho_set%drhoa_drhob(ia,ir,1) =&
./xc/xc_atom.F:!!                     (0.25_dp*drho(1,ia,ir,1)**2)+&
./xc/xc_atom.F:!!                     (0.25_dp*drho(2,ia,ir,1)**2)+&
./xc/xc_atom.F:!!                     (0.25_dp*drho(3,ia,ir,1)**2)
./xc/xc_atom.F:            rho_set%owns%drhoa_drhob = .TRUE.
./xc/xc_atom.F:            rho_set%has%drhoa_drhob = .TRUE.
./xc/xc_atom.F:         ! Give the components of the gradient for the total rho
./xc/xc_atom.F:         IF (needs%drho) THEN
./xc/xc_atom.F:                     rho_set%drho(idir)%array(ia, ir, 1) = drho(idir, ia, ir, 1)+drho(idir, ia, ir, 2)
./xc/xc_atom.F:                     rho_set%drho(idir)%array(ia, ir, 1) = drho(idir, ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%drho = .TRUE.
./xc/xc_atom.F:            rho_set%has%drho = .TRUE.
./xc/xc_atom.F:         ! Give the components of the gradient for rhoa and rhob
./xc/xc_atom.F:         IF (needs%drho_spin) THEN
./xc/xc_atom.F:                     rho_set%drhoa(idir)%array(ia, ir, 1) = drho(idir, ia, ir, 1)
./xc/xc_atom.F:                     rho_set%drhob(idir)%array(ia, ir, 1) = drho(idir, ia, ir, 2)
./xc/xc_atom.F:                     rho_set%drhoa(idir)%array(ia, ir, 1) = 0.5_dp*drho(idir, ia, ir, 1)
./xc/xc_atom.F:                     rho_set%drhob(idir)%array(ia, ir, 1) = rho_set%drhoa(idir)%array(ia, ir, 1)
./xc/xc_atom.F:            rho_set%owns%drho_spin = .TRUE.
./xc/xc_atom.F:            rho_set%has%drho_spin = .TRUE.
./xc/xc_atom.F:               rho_set%tau(ia, ir, 1) = tau(ia, 1)+tau(ia, 2)
./xc/xc_atom.F:            rho_set%owns%tau = .TRUE.
./xc/xc_atom.F:            rho_set%has%tau = .TRUE.
./xc/xc_atom.F:               rho_set%tau(ia, ir, 1) = tau(ia, 1)
./xc/xc_atom.F:            rho_set%owns%tau = .TRUE.
./xc/xc_atom.F:            rho_set%has%tau = .TRUE.
./xc/xc_atom.F:            rho_set%tau_a(ia, ir, 1) = tau(ia, 1)
./xc/xc_atom.F:            rho_set%tau_b(ia, ir, 1) = tau(ia, 2)
./xc/xc_atom.F:         rho_set%owns%tau_spin = .TRUE.
./xc/xc_atom.F:         rho_set%has%tau_spin = .TRUE.
./xc/xc_atom.F:   END SUBROUTINE fill_rho_set
./xc/xc_perdew86.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_perdew86.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_perdew86.F:                                              xc_rho_set_type
./xc/xc_perdew86.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_perdew86.F:      eps_rho = cutoff
./xc/xc_perdew86.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_perdew86.F:         needs%rho = .TRUE.
./xc/xc_perdew86.F:         needs%norm_drho = .TRUE.
./xc/xc_perdew86.F:!> \param rho_set ...
./xc/xc_perdew86.F:   SUBROUTINE p86_lda_eval(rho_set, deriv_set, order, p86_params)
./xc/xc_perdew86.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_perdew86.F:      REAL(KIND=dp)                                      :: drho_cutoff, rho_cutoff
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER :: e_0, e_ndrho, e_ndrho_ndrho, &
./xc/xc_perdew86.F:         e_ndrho_ndrho_ndrho, e_rho, e_rho_ndrho, e_rho_ndrho_ndrho, e_rho_rho, e_rho_rho_ndrho, &
./xc/xc_perdew86.F:         e_rho_rho_rho, grho, rho
./xc/xc_perdew86.F:      NULLIFY (bo, rho, e_0, e_rho, e_ndrho, &
./xc/xc_perdew86.F:               e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_perdew86.F:               e_rho_rho_rho, e_rho_rho_ndrho, e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho)
./xc/xc_perdew86.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_perdew86.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_perdew86.F:      CALL pz_lda_eval(pz_orig, rho_set, deriv_set, order, p86_params)
./xc/xc_perdew86.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_perdew86.F:                          norm_drho=grho, local_bounds=bo, rho_cutoff=rho_cutoff, &
./xc/xc_perdew86.F:                          drho_cutoff=drho_cutoff)
./xc/xc_perdew86.F:      CALL p86_init(rho_cutoff)
./xc/xc_perdew86.F:      CALL calc_rs_pw(rho, rs, npoints)
./xc/xc_perdew86.F:         CALL p86_u_0(rho, rs, grho, e_0, npoints)
./xc/xc_perdew86.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_perdew86.F:         deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", &
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho)
./xc/xc_perdew86.F:         CALL p86_u_1(rho, grho, rs, e_rho, &
./xc/xc_perdew86.F:                      e_ndrho, npoints)
./xc/xc_perdew86.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_perdew86.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(norm_drho)", &
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho)
./xc/xc_perdew86.F:                                         "(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho)
./xc/xc_perdew86.F:         CALL p86_u_2(rho, grho, rs, e_rho_rho, &
./xc/xc_perdew86.F:                      e_rho_ndrho, e_ndrho_ndrho, npoints)
./xc/xc_perdew86.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_perdew86.F:                                         "(rho)(rho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_ndrho)
./xc/xc_perdew86.F:                                         "(rho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_ndrho_ndrho)
./xc/xc_perdew86.F:                                         "(norm_drho)(norm_drho)(norm_drho)", allocate_deriv=.TRUE.)
./xc/xc_perdew86.F:         CALL xc_derivative_get(deriv, deriv_data=e_ndrho_ndrho_ndrho)
./xc/xc_perdew86.F:         CALL p86_u_3(rho, grho, rs, e_rho_rho_rho, &
./xc/xc_perdew86.F:                      e_rho_rho_ndrho, e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, &
./xc/xc_perdew86.F:!> \param rho ...
./xc/xc_perdew86.F:!> \param grho ...
./xc/xc_perdew86.F:   SUBROUTINE p86_u_0(rho, rs, grho, e_0, npoints)
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, rs, grho
./xc/xc_perdew86.F:!$OMP SHARED(npoints,rho,eps_rho,grho,rs,e_0)
./xc/xc_perdew86.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_perdew86.F:            g = grho(ip)
./xc/xc_perdew86.F:            or = 1.0_dp/rho(ip)
./xc/xc_perdew86.F:!> \param rho ...
./xc/xc_perdew86.F:!> \param grho ...
./xc/xc_perdew86.F:!> \param e_rho ...
./xc/xc_perdew86.F:!> \param e_ndrho ...
./xc/xc_perdew86.F:   SUBROUTINE p86_u_1(rho, grho, rs, e_rho, e_ndrho, npoints)
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, rs
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho, e_ndrho
./xc/xc_perdew86.F:!$OMP SHARED(npoints,rho,eps_rho,grho,rs,e_rho,e_ndrho)
./xc/xc_perdew86.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_perdew86.F:            g = grho(ip)
./xc/xc_perdew86.F:            or = 1.0_dp/rho(ip)
./xc/xc_perdew86.F:            e_rho(ip) = e_rho(ip)+ff*g*dcr-ff*g*cr*dphir-ff*g*cr*f43*or
./xc/xc_perdew86.F:            e_ndrho(ip) = e_ndrho(ip)+ff*cr*(2.0_dp-g*dphig)
./xc/xc_perdew86.F:!> \param rho ...
./xc/xc_perdew86.F:!> \param grho ...
./xc/xc_perdew86.F:!> \param e_rho_rho ...
./xc/xc_perdew86.F:!> \param e_rho_ndrho ...
./xc/xc_perdew86.F:!> \param e_ndrho_ndrho ...
./xc/xc_perdew86.F:   SUBROUTINE p86_u_2(rho, grho, rs, e_rho_rho, e_rho_ndrho, e_ndrho_ndrho, &
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, rs
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho, e_rho_ndrho, e_ndrho_ndrho
./xc/xc_perdew86.F:!$OMP SHARED(npoints,rho,eps_rho,grho,rs,e_rho_rho,e_rho_ndrho,e_ndrho_ndrho)
./xc/xc_perdew86.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_perdew86.F:            g = grho(ip)
./xc/xc_perdew86.F:            or = 1.0_dp/rho(ip)
./xc/xc_perdew86.F:            e_rho_rho(ip) = e_rho_rho(ip)+x*or*ep*g*g* &
./xc/xc_perdew86.F:            e_rho_ndrho(ip) = e_rho_ndrho(ip)+x*or*ep*g* &
./xc/xc_perdew86.F:            e_ndrho_ndrho(ip) = e_ndrho_ndrho(ip)+x*or*ep*cr* &
./xc/xc_perdew86.F:!> \param rho ...
./xc/xc_perdew86.F:!> \param grho ...
./xc/xc_perdew86.F:!> \param e_rho_rho_rho ...
./xc/xc_perdew86.F:!> \param e_rho_rho_ndrho ...
./xc/xc_perdew86.F:!> \param e_rho_ndrho_ndrho ...
./xc/xc_perdew86.F:!> \param e_ndrho_ndrho_ndrho ...
./xc/xc_perdew86.F:   SUBROUTINE p86_u_3(rho, grho, rs, e_rho_rho_rho, &
./xc/xc_perdew86.F:                      e_rho_rho_ndrho, e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho, &
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(IN)            :: rho, grho, rs
./xc/xc_perdew86.F:      REAL(KIND=dp), DIMENSION(*), INTENT(INOUT)         :: e_rho_rho_rho, e_rho_rho_ndrho, &
./xc/xc_perdew86.F:                                                            e_rho_ndrho_ndrho, e_ndrho_ndrho_ndrho
./xc/xc_perdew86.F:!$OMP             SHARED(npoints,rho,eps_rho,grho,e_rho_rho_rho,e_rho_rho_ndrho,e_rho_ndrho_ndrho,e_ndrho_ndrho_ndrho)
./xc/xc_perdew86.F:         IF (rho(ip) > eps_rho) THEN
./xc/xc_perdew86.F:            g = grho(ip)
./xc/xc_perdew86.F:            or = 1.0_dp/rho(ip)
./xc/xc_perdew86.F:            e_rho_rho_rho(ip) = e_rho_rho_rho(ip) &
./xc/xc_perdew86.F:            e_rho_rho_ndrho(ip) = e_rho_rho_ndrho(ip) &
./xc/xc_perdew86.F:            e_rho_ndrho_ndrho(ip) = e_rho_ndrho_ndrho(ip) &
./xc/xc_perdew86.F:            e_ndrho_ndrho_ndrho(ip) = e_ndrho_ndrho_ndrho(ip) &
./xc/xc_perdew_zunger.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./xc/xc_perdew_zunger.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_get,&
./xc/xc_perdew_zunger.F:                                              xc_rho_set_type
./xc/xc_perdew_zunger.F:   REAL(KIND=dp) :: eps_rho
./xc/xc_perdew_zunger.F:      TYPE(xc_rho_cflags_type), INTENT(inout), OPTIONAL  :: needs
./xc/xc_perdew_zunger.F:            needs%rho_spin = .TRUE.
./xc/xc_perdew_zunger.F:            needs%rho = .TRUE.
./xc/xc_perdew_zunger.F:!>      wrt to rho (the electron density) up to 3rd order. This
./xc/xc_perdew_zunger.F:!> \param rho_set ...
./xc/xc_perdew_zunger.F:   SUBROUTINE pz_lda_eval(method, rho_set, deriv_set, order, pz_params)
./xc/xc_perdew_zunger.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_perdew_zunger.F:      REAL(KIND=dp)                                      :: rho_cutoff, sc
./xc/xc_perdew_zunger.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: dummy, e_0, e_rho, e_rho_rho, &
./xc/xc_perdew_zunger.F:                                                            e_rho_rho_rho, rho
./xc/xc_perdew_zunger.F:      NULLIFY (bo, rho, e_0, e_rho, e_rho_rho, e_rho_rho_rho, dummy)
./xc/xc_perdew_zunger.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_perdew_zunger.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_perdew_zunger.F:      CALL xc_rho_set_get(rho_set, rho=rho, &
./xc/xc_perdew_zunger.F:                          local_bounds=bo, rho_cutoff=rho_cutoff)
./xc/xc_perdew_zunger.F:      CALL pz_init(method, rho_cutoff)
./xc/xc_perdew_zunger.F:      dummy => rho
./xc/xc_perdew_zunger.F:      e_rho => dummy
./xc/xc_perdew_zunger.F:      e_rho_rho => dummy
./xc/xc_perdew_zunger.F:      e_rho_rho_rho => dummy
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)", &
./xc/xc_perdew_zunger.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho)
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)", &
./xc/xc_perdew_zunger.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho)
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rho)(rho)(rho)", &
./xc/xc_perdew_zunger.F:         CALL xc_derivative_get(deriv, deriv_data=e_rho_rho_rho)
./xc/xc_perdew_zunger.F:      CALL pz_lda_calc(rho, e_0, e_rho, e_rho_rho, e_rho_rho_rho, npoints, order, sc)
./xc/xc_perdew_zunger.F:!> \param rho ...
./xc/xc_perdew_zunger.F:!> \param e_rho ...
./xc/xc_perdew_zunger.F:!> \param e_rho_rho ...
./xc/xc_perdew_zunger.F:!> \param e_rho_rho_rho ...
./xc/xc_perdew_zunger.F:   SUBROUTINE pz_lda_calc(rho, e_0, e_rho, e_rho_rho, e_rho_rho_rho, npoints, order, sc)
./xc/xc_perdew_zunger.F:      REAL(KIND=dp), DIMENSION(*), INTENT(in)            :: rho
./xc/xc_perdew_zunger.F:      REAL(KIND=dp), DIMENSION(*), INTENT(inout)         :: e_0, e_rho, e_rho_rho, e_rho_rho_rho
./xc/xc_perdew_zunger.F:!$OMP SHARED(npoints,rho,eps_rho,order,e_0,e_rho,e_rho_rho,e_rho_rho_rho,sc)
./xc/xc_perdew_zunger.F:         IF (rho(k) > eps_rho) THEN
./xc/xc_perdew_zunger.F:            CALL pz_lda_ed_loc(rho(k), ed, ABS(order), sc)
./xc/xc_perdew_zunger.F:               e_0(k) = e_0(k)+rho(k)*ed(0)
./xc/xc_perdew_zunger.F:               e_rho(k) = e_rho(k)+ed(0)+rho(k)*ed(1)
./xc/xc_perdew_zunger.F:               e_rho_rho(k) = e_rho_rho(k)+2.0_dp*ed(1)+rho(k)*ed(2)
./xc/xc_perdew_zunger.F:               e_rho_rho_rho(k) = e_rho_rho_rho(k)+3.0_dp*ed(2)+rho(k)*ed(3)
./xc/xc_perdew_zunger.F:!>      wrt to rho (the electron density) up to 3rd order. This
./xc/xc_perdew_zunger.F:!> \param rho_set ...
./xc/xc_perdew_zunger.F:   SUBROUTINE pz_lsd_eval(method, rho_set, deriv_set, order, pz_params)
./xc/xc_perdew_zunger.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc/xc_perdew_zunger.F:      REAL(KIND=dp)                                      :: rho_cutoff, sc
./xc/xc_perdew_zunger.F:      CPASSERT(ASSOCIATED(rho_set))
./xc/xc_perdew_zunger.F:      CPASSERT(rho_set%ref_count > 0)
./xc/xc_perdew_zunger.F:      CALL xc_rho_set_get(rho_set, rhoa=a, rhob=b, &
./xc/xc_perdew_zunger.F:                          local_bounds=bo, rho_cutoff=rho_cutoff)
./xc/xc_perdew_zunger.F:      CALL pz_init(method, rho_cutoff)
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhoa)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhoa)(rhob)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhoa)(rhob)(rhob)", &
./xc/xc_perdew_zunger.F:         deriv => xc_dset_get_derivative(deriv_set, "(rhob)(rhob)(rhob)", &
./xc/xc_perdew_zunger.F:      REAL(KIND=dp)                                      :: rho
./xc/xc_perdew_zunger.F:!$OMP PARALLEL DO PRIVATE ( k, rho, ed ) DEFAULT(NONE)&
./xc/xc_perdew_zunger.F:!$OMP SHARED(order_,order,npoints,eps_rho,A,b,sc,e_0,ea,eaa,eab,ebb,eaaa,eaab,eabb,ebbb)
./xc/xc_perdew_zunger.F:         rho = a(k)+b(k)
./xc/xc_perdew_zunger.F:         IF (rho > eps_rho) THEN
./xc/xc_perdew_zunger.F:               e_0(k) = e_0(k)+rho*ed(0)
./xc/xc_perdew_zunger.F:               ea(k) = ea(k)+ed(0)+rho*ed(1)
./xc/xc_perdew_zunger.F:               ea(k) = ea(k)+ed(0)+rho*ed(2)
./xc/xc_perdew_zunger.F:               eaa(k) = eaa(k)+2.0_dp*ed(1)+rho*ed(3)
./xc/xc_perdew_zunger.F:               eab(k) = eab(k)+ed(1)+ed(2)+rho*ed(4)
./xc/xc_perdew_zunger.F:               ebb(k) = ebb(k)+2.0_dp*ed(2)+rho*ed(5)
./xc/xc_perdew_zunger.F:               eaaa(k) = eaaa(k)+3.0_dp*ed(3)+rho*ed(6)
./xc/xc_perdew_zunger.F:               eaab(k) = eaab(k)+2.0_dp*ed(4)+ed(3)+rho*ed(7)
./xc/xc_perdew_zunger.F:               eabb(k) = eabb(k)+2.0_dp*ed(4)+ed(5)+rho*ed(8)
./xc/xc_perdew_zunger.F:               ebbb(k) = ebbb(k)+3.0_dp*ed(5)+rho*ed(9)
./xc/xc_perdew_zunger.F:      eps_rho = cutoff
./xc/xc_perdew_zunger.F:!> \param rho ...
./xc/xc_perdew_zunger.F:   SUBROUTINE pz_lda_ed_loc(rho, ed, order, sc)
./xc/xc_perdew_zunger.F:      REAL(KIND=dp), INTENT(IN)                          :: rho
./xc/xc_perdew_zunger.F:      CALL calc_rs(rho, r(0))
./xc/xc_perdew_zunger.F:      IF (order_ >= 1) r(1) = (-1.0_dp/3.0_dp)*r(0)/rho
./xc/xc_perdew_zunger.F:      IF (order_ >= 2) r(2) = (-4.0_dp/3.0_dp)*r(1)/rho
./xc/xc_perdew_zunger.F:      IF (order_ >= 3) r(3) = (-7.0_dp/3.0_dp)*r(2)/rho
./xc/xc_perdew_zunger.F:      REAL(KIND=dp)                                      :: rho, tr, trr, trrr, trrz, trz, trzz, tz, &
./xc/xc_perdew_zunger.F:      rho = a+b
./xc/xc_perdew_zunger.F:      CALL calc_rs(rho, r(0))
./xc/xc_perdew_zunger.F:         r(1) = (-1.0_dp/3.0_dp)*r(0)/rho
./xc/xc_perdew_zunger.F:         r(2) = (-4.0_dp/3.0_dp)*r(1)/rho
./xc/xc_perdew_zunger.F:         r(3) = (-7.0_dp/3.0_dp)*r(2)/rho
./qs_ks_apply_restraints.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_ks_apply_restraints.F:                                              qs_rho_type
./qs_ks_apply_restraints.F:!> \param rho ...
./qs_ks_apply_restraints.F:                                       ks_matrix, matrix_s, rho, mulliken_order_p)
./qs_ks_apply_restraints.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_apply_restraints.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: ksmat, rho_ao
./qs_ks_apply_restraints.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_ks_apply_restraints.F:                                    para_env, matrix_s(1, 1)%matrix, rho_ao, energy=energy%mulliken, &
./qs_ks_apply_restraints.F:                                    para_env, matrix_s(1, 1)%matrix, rho_ao, energy=energy%mulliken, &
./mixed_environment_types.F:   USE qs_rho_types,                    ONLY: qs_rho_p_type
./mixed_environment_types.F:      TYPE(qs_rho_p_type), DIMENSION(:), ALLOCATABLE   :: subsys_dens
./transport.F:   USE qs_linres_current,               ONLY: calculate_jrho_resp
./transport.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./transport.F:                                              qs_rho_type
./transport.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./transport.F:      TYPE(qs_rho_type), POINTER                         :: rho
./transport.F:                      rho=rho)
./transport.F:      CALL qs_rho_get(rho, rho_r=rho_r, rho_g=rho_g)
./transport.F:            ! calculate_jrho_resp uses sab_all which is not associated in DFTB environment
./transport.F:                  CALL calculate_jrho_resp(zero, transport_env%dm_imag, &
./qs_tddfpt2_methods.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./qs_tddfpt2_methods.F:   USE qs_rho_methods,                  ONLY: qs_rho_rebuild,&
./qs_tddfpt2_methods.F:                                              qs_rho_update_rho
./qs_tddfpt2_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_create,&
./qs_tddfpt2_methods.F:                                              qs_rho_get,&
./qs_tddfpt2_methods.F:                                              qs_rho_release,&
./qs_tddfpt2_methods.F:                                              qs_rho_set,&
./qs_tddfpt2_methods.F:                                              qs_rho_type
./qs_tddfpt2_methods.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./qs_tddfpt2_methods.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./qs_tddfpt2_methods.F:                                              xc_rho_set_release,&
./qs_tddfpt2_methods.F:                                              xc_rho_set_type,&
./qs_tddfpt2_methods.F:                                              xc_rho_set_update
./qs_tddfpt2_methods.F:      !> S * \rho_0(spin)
./qs_tddfpt2_methods.F:      TYPE(cp_fm_type), POINTER                        :: rho_ao_orb_fm_sub
./qs_tddfpt2_methods.F:      TYPE(cp_fm_type), POINTER                        :: rho_ao_aux_fit_fm_sub
./qs_tddfpt2_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_orb_struct_sub
./qs_tddfpt2_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_aux_fit_struct_sub
./qs_tddfpt2_methods.F:      !> globally distributed version of the matrix 'rho_ao_orb_fm_sub' to store the electron density
./qs_tddfpt2_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: hfx_rho_ao
./qs_tddfpt2_methods.F:      TYPE(xc_rho_set_type), POINTER                     :: xc_rho_set
./qs_tddfpt2_methods.F:      TYPE(xc_rho_set_type), POINTER                     :: xc_rho1_set
./qs_tddfpt2_methods.F:      TYPE(xc_rho_cflags_type)                           :: xc_rho1_cflags
./qs_tddfpt2_methods.F:      INTEGER                                            :: rho_smooth_id
./qs_tddfpt2_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, matrix_s_aux_fit, rho_ia_ao
./qs_tddfpt2_methods.F:      NULLIFY (work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:      CALL cp_fm_create(work_matrices%rho_ao_orb_fm_sub, fm_struct)
./qs_tddfpt2_methods.F:      NULLIFY (work_matrices%rho_ao_aux_fit_fm_sub, work_matrices%wfm_aux_orb_sub)
./qs_tddfpt2_methods.F:         CALL cp_fm_create(work_matrices%rho_ao_aux_fit_fm_sub, fm_struct)
./qs_tddfpt2_methods.F:      NULLIFY (rho_ia_ao)
./qs_tddfpt2_methods.F:      CALL dbcsr_allocate_matrix_set(rho_ia_ao, nspins)
./qs_tddfpt2_methods.F:         CALL dbcsr_init_p(rho_ia_ao(ispin)%matrix)
./qs_tddfpt2_methods.F:         CALL tddfpt_dbcsr_create_by_dist(rho_ia_ao(ispin)%matrix, template=matrix_s(1)%matrix, &
./qs_tddfpt2_methods.F:      NULLIFY (work_matrices%rho_orb_struct_sub)
./qs_tddfpt2_methods.F:      CALL qs_rho_create(work_matrices%rho_orb_struct_sub)
./qs_tddfpt2_methods.F:      CALL qs_rho_set(work_matrices%rho_orb_struct_sub, rho_ao=rho_ia_ao)
./qs_tddfpt2_methods.F:      CALL qs_rho_rebuild(work_matrices%rho_orb_struct_sub, qs_env, rebuild_ao=.FALSE., &
./qs_tddfpt2_methods.F:      NULLIFY (work_matrices%wdbcsr_ao_ao_aux_fit_sub%matrix, work_matrices%rho_aux_fit_struct_sub)
./qs_tddfpt2_methods.F:         NULLIFY (rho_ia_ao)
./qs_tddfpt2_methods.F:         CALL dbcsr_allocate_matrix_set(rho_ia_ao, nspins)
./qs_tddfpt2_methods.F:            CALL dbcsr_init_p(rho_ia_ao(ispin)%matrix)
./qs_tddfpt2_methods.F:            CALL tddfpt_dbcsr_create_by_dist(rho_ia_ao(ispin)%matrix, template=matrix_s_aux_fit(1)%matrix, &
./qs_tddfpt2_methods.F:         CALL qs_rho_create(work_matrices%rho_aux_fit_struct_sub)
./qs_tddfpt2_methods.F:         CALL qs_rho_set(work_matrices%rho_aux_fit_struct_sub, rho_ao=rho_ia_ao)
./qs_tddfpt2_methods.F:         CALL qs_rho_rebuild(work_matrices%rho_aux_fit_struct_sub, qs_env, rebuild_ao=.FALSE., &
./qs_tddfpt2_methods.F:      NULLIFY (work_matrices%hfx_fm_ao_ao, work_matrices%hfx_rho_ao, work_matrices%hfx_hmat)
./qs_tddfpt2_methods.F:         CALL dbcsr_allocate_matrix_set(work_matrices%hfx_rho_ao, nspins)
./qs_tddfpt2_methods.F:            CALL dbcsr_init_p(work_matrices%hfx_rho_ao(ispin)%matrix)
./qs_tddfpt2_methods.F:            CALL tddfpt_dbcsr_create_by_dist(work_matrices%hfx_rho_ao(ispin)%matrix, &
./qs_tddfpt2_methods.F:      IF (ASSOCIATED(work_matrices%hfx_rho_ao)) THEN
./qs_tddfpt2_methods.F:         DO ispin = SIZE(work_matrices%hfx_rho_ao), 1, -1
./qs_tddfpt2_methods.F:            CALL dbcsr_deallocate_matrix(work_matrices%hfx_rho_ao(ispin)%matrix)
./qs_tddfpt2_methods.F:         DEALLOCATE (work_matrices%hfx_rho_ao)
./qs_tddfpt2_methods.F:      IF (ASSOCIATED(work_matrices%rho_aux_fit_struct_sub)) &
./qs_tddfpt2_methods.F:         CALL qs_rho_release(work_matrices%rho_aux_fit_struct_sub)
./qs_tddfpt2_methods.F:      CALL qs_rho_release(work_matrices%rho_orb_struct_sub)
./qs_tddfpt2_methods.F:      IF (ASSOCIATED(work_matrices%rho_ao_aux_fit_fm_sub)) &
./qs_tddfpt2_methods.F:         CALL cp_fm_release(work_matrices%rho_ao_aux_fit_fm_sub)
./qs_tddfpt2_methods.F:      CALL cp_fm_release(work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:!> \param work_matrices    work matrices (modified components: rho_orb_struct_sub, rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ij_ao
./qs_tddfpt2_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_ij_r, rho_ij_r2, tau_ij_r, tau_ij_r2
./qs_tddfpt2_methods.F:      CALL qs_rho_get(work_matrices%rho_orb_struct_sub, rho_ao=rho_ij_ao, rho_r=rho_ij_r, tau_r=tau_ij_r)
./qs_tddfpt2_methods.F:                      0.0_dp, work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:         CALL copy_fm_to_dbcsr(work_matrices%rho_ao_orb_fm_sub, &
./qs_tddfpt2_methods.F:                               rho_ij_ao(ispin)%matrix, keep_sparsity=.TRUE.)
./qs_tddfpt2_methods.F:         CALL dbcsr_scale(rho_ij_ao(1)%matrix, 2.0_dp)
./qs_tddfpt2_methods.F:      CALL qs_rho_update_rho(work_matrices%rho_orb_struct_sub, qs_env, pw_env_external=sub_env%pw_env, &
./qs_tddfpt2_methods.F:      NULLIFY (kernel_env%xc_rho_set, kernel_env%xc_rho1_set, kernel_env%xc_deriv_set)
./qs_tddfpt2_methods.F:         ALLOCATE (rho_ij_r2(2))
./qs_tddfpt2_methods.F:         rho_ij_r2(1)%pw => rho_ij_r(1)%pw
./qs_tddfpt2_methods.F:         rho_ij_r2(2)%pw => rho_ij_r(1)%pw
./qs_tddfpt2_methods.F:         CALL xc_prep_2nd_deriv(kernel_env%xc_deriv_set, kernel_env%xc_rho_set, rho_ij_r2, &
./qs_tddfpt2_methods.F:         DEALLOCATE (rho_ij_r2)
./qs_tddfpt2_methods.F:         CALL xc_prep_2nd_deriv(kernel_env%xc_deriv_set, kernel_env%xc_rho_set, rho_ij_r, &
./qs_tddfpt2_methods.F:      kernel_env%rho_smooth_id = section_get_ival(xc_section, "XC_GRID%XC_SMOOTH_RHO")
./qs_tddfpt2_methods.F:      kernel_env%xc_rho1_cflags = xc_functionals_get_needs(functionals=xc_fun_section, lsd=lsd, add_basic_components=.TRUE.)
./qs_tddfpt2_methods.F:      CALL xc_rho_set_create(kernel_env%xc_rho1_set, auxbas_pw_pool%pw_grid%bounds_local, &
./qs_tddfpt2_methods.F:                             rho_cutoff=section_get_rval(xc_section, "DENSITY_CUTOFF"), &
./qs_tddfpt2_methods.F:                             drho_cutoff=section_get_rval(xc_section, "GRADIENT_CUTOFF"), &
./qs_tddfpt2_methods.F:      CALL xc_rho_set_release(kernel_env%xc_rho1_set)
./qs_tddfpt2_methods.F:      CALL xc_rho_set_release(kernel_env%xc_rho_set)
./qs_tddfpt2_methods.F:!> \param rho_ia_g   response density in reciprocal space
./qs_tddfpt2_methods.F:   SUBROUTINE tddfpt_apply_coulomb(A_ia_munu, rho_ia_g, qs_env, pw_env, task_list, v_gspace, v_rspace, J_ia_munu)
./qs_tddfpt2_methods.F:      TYPE(pw_type), POINTER                             :: rho_ia_g
./qs_tddfpt2_methods.F:      CALL pw_poisson_solve(poisson_env, rho_ia_g, pair_energy, v_gspace%pw)
./qs_tddfpt2_methods.F:!> \param rho_ia_g         response density in reciprocal space
./qs_tddfpt2_methods.F:!> \param rho_ia_r         response density in real space
./qs_tddfpt2_methods.F:   SUBROUTINE tddfpt_apply_xc(A_ia_munu, kernel_env, rho_ia_g, rho_ia_r, tau_ia_r, is_rks_triplets, &
./qs_tddfpt2_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_ia_g, rho_ia_r, tau_ia_r
./qs_tddfpt2_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_ia_g2, rho_ia_r2, tau_ia_r2
./qs_tddfpt2_methods.F:         CPASSERT(SIZE(rho_ia_g) == nspins)
./qs_tddfpt2_methods.F:         CPASSERT(SIZE(rho_ia_r) == nspins)
./qs_tddfpt2_methods.F:         ALLOCATE (rho_ia_r2(2))
./qs_tddfpt2_methods.F:         ALLOCATE (rho_ia_g2(2))
./qs_tddfpt2_methods.F:         rho_ia_r2(1)%pw => rho_ia_r(1)%pw
./qs_tddfpt2_methods.F:         rho_ia_r2(2)%pw => rho_ia_r(1)%pw
./qs_tddfpt2_methods.F:         rho_ia_g2(1)%pw => rho_ia_g(1)%pw
./qs_tddfpt2_methods.F:         rho_ia_g2(2)%pw => rho_ia_g(1)%pw
./qs_tddfpt2_methods.F:         ALLOCATE (rho_ia_r2(nspins))
./qs_tddfpt2_methods.F:         ALLOCATE (rho_ia_g2(nspins))
./qs_tddfpt2_methods.F:            rho_ia_r2(ispin)%pw => rho_ia_r(ispin)%pw
./qs_tddfpt2_methods.F:            rho_ia_g2(ispin)%pw => rho_ia_g(ispin)%pw
./qs_tddfpt2_methods.F:      CALL xc_rho_set_update(rho_set=kernel_env%xc_rho1_set, rho_r=rho_ia_r2, rho_g=rho_ia_g2, tau=tau_ia_r2, &
./qs_tddfpt2_methods.F:                             needs=kernel_env%xc_rho1_cflags, xc_deriv_method_id=kernel_env%deriv_method_id, &
./qs_tddfpt2_methods.F:                             xc_rho_smooth_id=kernel_env%rho_smooth_id, pw_pool=auxbas_pw_pool)
./qs_tddfpt2_methods.F:      CALL xc_calc_2nd_deriv(v_xc=work_v_xc, deriv_set=kernel_env%xc_deriv_set, rho_set=kernel_env%xc_rho_set, &
./qs_tddfpt2_methods.F:                             rho1_set=kernel_env%xc_rho1_set, pw_pool=auxbas_pw_pool, &
./qs_tddfpt2_methods.F:      DEALLOCATE (rho_ia_g2, rho_ia_r2)
./qs_tddfpt2_methods.F:!> \param rho_orb_struct      response density in primary basis set
./qs_tddfpt2_methods.F:!> \param rho_aux_fit_struct  response density in auxiliary basis set
./qs_tddfpt2_methods.F:!> \param wfm_rho_orb         work dense matrix with shape [nao x nao] distributed among
./qs_tddfpt2_methods.F:!> \param wfm_rho_aux_fit     work dense matrix with shape [nao_aux x nao_aux] distributed among
./qs_tddfpt2_methods.F:   SUBROUTINE tddfpt_apply_admm_correction(A_ia_munu, rho_orb_struct, rho_aux_fit_struct, qs_env, sub_env, &
./qs_tddfpt2_methods.F:                                           work_hmat_orb, work_hmat_aux_fit, wfm_rho_orb, wfm_rho_aux_fit, wfm_aux_orb)
./qs_tddfpt2_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_orb_struct, rho_aux_fit_struct
./qs_tddfpt2_methods.F:      TYPE(cp_fm_type), POINTER                          :: wfm_rho_orb, wfm_rho_aux_fit, wfm_aux_orb
./qs_tddfpt2_methods.F:      REAL(kind=dp), DIMENSION(:), POINTER               :: tot_rho_aux_fit_r
./qs_tddfpt2_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao_aux_fit, rho_ao_orb
./qs_tddfpt2_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_aux_fit_g, rho_aux_fit_r, vxc_rho, &
./qs_tddfpt2_methods.F:      CALL qs_rho_get(rho_orb_struct, rho_ao=rho_ao_orb)
./qs_tddfpt2_methods.F:      ! E_{x}^{DFT}[\rho]
./qs_tddfpt2_methods.F:      NULLIFY (vxc_rho, vxc_tau)
./qs_tddfpt2_methods.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_orb_struct, xc_section=admm_env%xc_section_aux, &
./qs_tddfpt2_methods.F:                         vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=exc, just_energy=.FALSE., pw_env_external=sub_env%pw_env)
./qs_tddfpt2_methods.F:         IF (ASSOCIATED(vxc_rho)) THEN
./qs_tddfpt2_methods.F:            CALL pw_scale(vxc_rho(ispin)%pw, vxc_rho(ispin)%pw%pw_grid%dvol)
./qs_tddfpt2_methods.F:            CALL integrate_v_rspace(v_rspace=vxc_rho(ispin), pmat=rho_ao_orb(ispin), hmat=work_hmat_orb, &
./qs_tddfpt2_methods.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./qs_tddfpt2_methods.F:            CALL integrate_v_rspace(v_rspace=vxc_tau(ispin), pmat=rho_ao_orb(ispin), hmat=work_hmat_orb, &
./qs_tddfpt2_methods.F:      IF (ASSOCIATED(vxc_rho)) &
./qs_tddfpt2_methods.F:         DEALLOCATE (vxc_rho)
./qs_tddfpt2_methods.F:      ! E_{x}^{DFT}[\hat{\rho}]
./qs_tddfpt2_methods.F:      CALL qs_rho_get(rho_aux_fit_struct, rho_ao=rho_ao_aux_fit, rho_g=rho_aux_fit_g, &
./qs_tddfpt2_methods.F:                      rho_r=rho_aux_fit_r, tot_rho_r=tot_rho_aux_fit_r)
./qs_tddfpt2_methods.F:         CALL copy_dbcsr_to_fm(rho_ao_orb(ispin)%matrix, wfm_rho_orb)
./qs_tddfpt2_methods.F:                      wfm_rho_orb, 0.0_dp, wfm_aux_orb)
./qs_tddfpt2_methods.F:                      0.0_dp, wfm_rho_aux_fit)
./qs_tddfpt2_methods.F:         CALL copy_fm_to_dbcsr(wfm_rho_aux_fit, rho_ao_aux_fit(ispin)%matrix, keep_sparsity=.TRUE.)
./qs_tddfpt2_methods.F:         CALL calculate_rho_elec(matrix_p=rho_ao_aux_fit(ispin)%matrix, &
./qs_tddfpt2_methods.F:                                 rho=rho_aux_fit_r(ispin), rho_gspace=rho_aux_fit_g(ispin), &
./qs_tddfpt2_methods.F:                                 total_rho=tot_rho_aux_fit_r(ispin), ks_env=ks_env, &
./qs_tddfpt2_methods.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_aux_fit_struct, xc_section=admm_env%xc_section_aux, &
./qs_tddfpt2_methods.F:                         vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=exc, just_energy=.FALSE., pw_env_external=sub_env%pw_env)
./qs_tddfpt2_methods.F:         IF (ASSOCIATED(vxc_rho)) THEN
./qs_tddfpt2_methods.F:            CALL pw_scale(vxc_rho(ispin)%pw, vxc_rho(ispin)%pw%pw_grid%dvol)
./qs_tddfpt2_methods.F:            CALL integrate_v_rspace(v_rspace=vxc_rho(ispin), pmat=rho_ao_aux_fit(ispin), hmat=work_hmat_aux_fit, &
./qs_tddfpt2_methods.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./qs_tddfpt2_methods.F:            CALL integrate_v_rspace(v_rspace=vxc_tau(ispin), pmat=rho_ao_aux_fit(ispin), hmat=work_hmat_aux_fit, &
./qs_tddfpt2_methods.F:                      0.0_dp, wfm_rho_orb)
./qs_tddfpt2_methods.F:         CALL copy_fm_to_dbcsr(wfm_rho_orb, work_hmat_orb%matrix, keep_sparsity=.FALSE.)
./qs_tddfpt2_methods.F:      IF (ASSOCIATED(vxc_rho)) &
./qs_tddfpt2_methods.F:         DEALLOCATE (vxc_rho)
./qs_tddfpt2_methods.F:!> \param work_rho_ia_ao  work sparse matrix with shape [nao x nao] distributed globally
./qs_tddfpt2_methods.F:!> \param wfm_rho_orb     work dense matrix with shape [nao x nao] distributed globally
./qs_tddfpt2_methods.F:                               work_rho_ia_ao, work_hmat, wfm_rho_orb)
./qs_tddfpt2_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: work_rho_ia_ao, work_hmat
./qs_tddfpt2_methods.F:      TYPE(cp_fm_type), POINTER                          :: wfm_rho_orb
./qs_tddfpt2_methods.F:                         evects(ispin, ivect)%matrix, 0.0_dp, wfm_rho_orb)
./qs_tddfpt2_methods.F:                         gs_mos(ispin)%mos_occ, 1.0_dp, wfm_rho_orb)
./qs_tddfpt2_methods.F:                            wfm_rho_orb, 0.0_dp, admm_env%work_aux_orb)
./qs_tddfpt2_methods.F:               CALL copy_fm_to_dbcsr(admm_env%work_aux_aux, work_rho_ia_ao(ispin)%matrix, keep_sparsity=.TRUE.)
./qs_tddfpt2_methods.F:               CALL copy_fm_to_dbcsr(wfm_rho_orb, work_rho_ia_ao(ispin)%matrix, keep_sparsity=.TRUE.)
./qs_tddfpt2_methods.F:         CALL tddft_hfx_matrix(work_hmat, work_rho_ia_ao, qs_env)
./qs_tddfpt2_methods.F:                            admm_env%work_aux_orb, 0.0_dp, wfm_rho_orb)
./qs_tddfpt2_methods.F:               CALL cp_gemm('N', 'N', nao, nmo_occ(ispin), nao, alpha, wfm_rho_orb, &
./qs_tddfpt2_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ia_ao
./qs_tddfpt2_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_ia_g, rho_ia_r, tau_ia_r
./qs_tddfpt2_methods.F:         CALL qs_rho_get(work_matrices%rho_orb_struct_sub, rho_ao=rho_ia_ao, rho_g=rho_ia_g, rho_r=rho_ia_r, tau_r=tau_ia_r)
./qs_tddfpt2_methods.F:                                  0.0_dp, work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:                                  1.0_dp, work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:                     CALL copy_fm_to_dbcsr(work_matrices%rho_ao_orb_fm_sub, &
./qs_tddfpt2_methods.F:                                           rho_ia_ao(ispin)%matrix, keep_sparsity=.TRUE.)
./qs_tddfpt2_methods.F:                               evects(ispin, ivect)%matrix, 0.0_dp, work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:                               sub_env%mos_occ(ispin)%matrix, 1.0_dp, work_matrices%rho_ao_orb_fm_sub)
./qs_tddfpt2_methods.F:                  CALL copy_fm_to_dbcsr(work_matrices%rho_ao_orb_fm_sub, &
./qs_tddfpt2_methods.F:                                        rho_ia_ao(ispin)%matrix, keep_sparsity=.TRUE.)
./qs_tddfpt2_methods.F:            CALL qs_rho_update_rho(work_matrices%rho_orb_struct_sub, qs_env, &
./qs_tddfpt2_methods.F:            CALL tddfpt_apply_xc(A_ia_munu=work_matrices%A_ia_munu_sub, kernel_env=kernel_env, rho_ia_g=rho_ia_g, &
./qs_tddfpt2_methods.F:                                 rho_ia_r=rho_ia_r, tau_ia_r=tau_ia_r, &
./qs_tddfpt2_methods.F:                                                 rho_orb_struct=work_matrices%rho_orb_struct_sub, &
./qs_tddfpt2_methods.F:                                                 rho_aux_fit_struct=work_matrices%rho_aux_fit_struct_sub, &
./qs_tddfpt2_methods.F:                                                 wfm_rho_orb=work_matrices%rho_ao_orb_fm_sub, &
./qs_tddfpt2_methods.F:                                                 wfm_rho_aux_fit=work_matrices%rho_ao_aux_fit_fm_sub, &
./qs_tddfpt2_methods.F:               ! the Poisson equation for combined density (rho_{ia,alpha} + rho_{ia,beta}) .
./qs_tddfpt2_methods.F:                  CALL pw_axpy(rho_ia_g(ispin)%pw, rho_ia_g(1)%pw)
./qs_tddfpt2_methods.F:               CALL tddfpt_apply_coulomb(A_ia_munu=work_matrices%A_ia_munu_sub, rho_ia_g=rho_ia_g(1)%pw, qs_env=qs_env, &
./qs_tddfpt2_methods.F:                                  qs_env=qs_env, work_rho_ia_ao=work_matrices%hfx_rho_ao, &
./qs_tddfpt2_methods.F:                                  work_hmat=work_matrices%hfx_hmat, wfm_rho_orb=work_matrices%hfx_fm_ao_ao)
./qs_tddfpt2_methods.F:               ! \rho^{-} = 1/2 * [C_{0} * evect^T + evect * C_{0}^{-}], where C_{0} is the expansion
./qs_resp.F:   USE qs_collocate_density,            ONLY: calculate_rho_resp_all,&
./qs_resp.F:                                              calculate_rho_resp_single
./qs_resp.F:      IF (.NOT. cell%orthorhombic) THEN
./qs_resp.F:                       " implemented for orthorhombic cells!")
./qs_resp.F:      TYPE(pw_p_type)                                    :: rho_ga, va_gspace, va_rspace
./qs_resp.F:                             rho_ga%pw, &
./qs_resp.F:         CALL pw_zero(rho_ga%pw)
./qs_resp.F:         CALL calculate_rho_resp_single(rho_ga, qs_env, resp_env%eta, i)
./qs_resp.F:         CALL pw_poisson_solve(poisson_env, rho_ga%pw, vhartree=va_gspace%pw)
./qs_resp.F:      CALL pw_release(rho_ga%pw)
./qs_resp.F:      TYPE(pw_p_type)                                    :: aux_r, rho_resp, v_resp_gspace, &
./qs_resp.F:                             rho_resp%pw, &
./qs_resp.F:      CALL pw_zero(rho_resp%pw)
./qs_resp.F:      CALL calculate_rho_resp_all(rho_resp, resp_env%rhs, natom, &
./qs_resp.F:      CALL pw_poisson_solve(poisson_env, rho_resp%pw, &
./qs_resp.F:      CALL pw_release(rho_resp%pw)
./qs_integrate_potential_low.F:!> \param collocate_rho0 ...
./qs_integrate_potential_low.F:                                           collocate_rho0, rpgf0_s, use_virial, my_virial_a, &
./qs_integrate_potential_low.F:                                                  collocate_rho0
./qs_integrate_potential_low.F:      LOGICAL                                  :: my_collocate_rho0, &
./qs_integrate_potential_low.F:      IF (PRESENT(collocate_rho0) .AND. PRESENT(rpgf0_s)) THEN
./qs_integrate_potential_low.F:         my_collocate_rho0 = collocate_rho0
./qs_integrate_potential_low.F:         my_collocate_rho0 = .FALSE.
./qs_integrate_potential_low.F:      IF (my_map_consistent) THEN ! still assumes that eps_gvg_rspace=eps_rho_rspace
./qs_integrate_potential_low.F:      ELSE IF (my_collocate_rho0) THEN
./qs_integrate_potential_low.F:         IF (rsgrid%desc%orthorhombic) THEN
./input_cp2k_transport.F:        matrixinv_rgf, neutlead_bs, neutlead_dos, rho_negf, rho_qtbm, rlaxisint_GaussChebyshev, &
./input_cp2k_transport.F:         default_i_val=rho_qtbm, &
./input_cp2k_transport.F:         enum_i_vals=(/rho_negf, rho_qtbm/))
./qs_integrate_potential_single.F:             integrate_rho_nlcc
./qs_integrate_potential_single.F:!> \param rho_rspace ...
./qs_integrate_potential_single.F:   SUBROUTINE integrate_ppl_rspace(rho_rspace, qs_env)
./qs_integrate_potential_single.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_rspace
./qs_integrate_potential_single.F:      REAL(KIND=dp)                                      :: alpha, eps_rho_rspace
./qs_integrate_potential_single.F:      CALL rs_pw_transfer(rs_v, rho_rspace%pw, pw2rs)
./qs_integrate_potential_single.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:                                              eps_gvg_rspace=eps_rho_rspace, &
./qs_integrate_potential_single.F:               force(ikind)%gth_ppl(:, iatom)+force_a(:)*rho_rspace%pw%pw_grid%dvol
./qs_integrate_potential_single.F:               virial%pv_virial = virial%pv_virial+my_virial_a*rho_rspace%pw%pw_grid%dvol
./qs_integrate_potential_single.F:!> \param rho_rspace ...
./qs_integrate_potential_single.F:   SUBROUTINE integrate_rho_nlcc(rho_rspace, qs_env)
./qs_integrate_potential_single.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_rspace
./qs_integrate_potential_single.F:      CHARACTER(len=*), PARAMETER :: routineN = 'integrate_rho_nlcc', &
./qs_integrate_potential_single.F:      REAL(KIND=dp)                                      :: alpha, eps_rho_rspace
./qs_integrate_potential_single.F:      CALL rs_pw_transfer(rs_v, rho_rspace%pw, pw2rs)
./qs_integrate_potential_single.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:                                                 eps_gvg_rspace=eps_rho_rspace, &
./qs_integrate_potential_single.F:                  force(ikind)%gth_nlcc(:, iatom)+force_a(:)*rho_rspace%pw%pw_grid%dvol
./qs_integrate_potential_single.F:                  virial%pv_virial = virial%pv_virial+my_virial_a*rho_rspace%pw%pw_grid%dvol
./qs_integrate_potential_single.F:   END SUBROUTINE integrate_rho_nlcc
./qs_integrate_potential_single.F:                                                            eps_rho_rspace
./qs_integrate_potential_single.F:         eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:               force(ikind)%rho_core(:, :) = 0.0_dp
./qs_integrate_potential_single.F:               force(ikind)%rho_core = 0.0_dp
./qs_integrate_potential_single.F:                                                 eps_gvg_rspace=eps_rho_rspace, &
./qs_integrate_potential_single.F:                  force(ikind)%rho_core(:, iatom) = &
./qs_integrate_potential_single.F:                     force(ikind)%rho_core(:, iatom)+force_a(:)
./qs_integrate_potential_single.F:      REAL(KIND=dp)                                      :: eps_gvg_rspace, eps_rho_rspace
./qs_integrate_potential_single.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:         eps_gvg_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:                                                             hab=hab, o1=na1, o2=0, eps_gvg_rspace=eps_rho_rspace, &
./qs_integrate_potential_single.F:                                                             hab=hab, pab=pab, o1=na1, o2=0, eps_gvg_rspace=eps_rho_rspace, &
./qs_integrate_potential_single.F:      REAL(KIND=dp)                                      :: eps_gvg_rspace, eps_rho_rspace, rab2, &
./qs_integrate_potential_single.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:         eps_gvg_rspace = dft_control%qs_control%eps_rho_rspace
./qs_integrate_potential_single.F:               force(ikind)%rho_elec(:, iatom) = force(ikind)%rho_elec(:, iatom)+2.0_dp*force_a(:)
./qs_epr_hyp.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_epr_hyp.F:                                              rho_atom_coeff,&
./qs_epr_hyp.F:                                              rho_atom_type
./qs_epr_hyp.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_epr_hyp.F:                                              qs_rho_type
./qs_epr_hyp.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_epr_hyp.F:      TYPE(pw_p_type), POINTER                           :: hypaniso_gspace, rhototspin_elec_gspace
./qs_epr_hyp.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_epr_hyp.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: rho_rad_h, rho_rad_s
./qs_epr_hyp.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_epr_hyp.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_epr_hyp.F:               logger, dft_section, para_env, particle_set, rho, rho_atom, &
./qs_epr_hyp.F:               rho_atom_set, rhototspin_elec_gspace, hypaniso_gspace, rho_g)
./qs_epr_hyp.F:                      rho=rho, atomic_kind_set=atomic_kind_set, qs_kind_set=qs_kind_set, &
./qs_epr_hyp.F:                      rho_atom_set=rho_atom_set, pw_env=pw_env, &
./qs_epr_hyp.F:            rho_atom => rho_atom_set(iatom)
./qs_epr_hyp.F:            NULLIFY (rho_rad_h, rho_rad_s)
./qs_epr_hyp.F:            CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=rho_rad_h, &
./qs_epr_hyp.F:                              rho_rad_s=rho_rad_s)
./qs_epr_hyp.F:                                      (rho_rad_h(1)%r_coef(grid_atom%nr, iso)- &
./qs_epr_hyp.F:                                       rho_rad_h(2)%r_coef(grid_atom%nr, iso))* &
./qs_epr_hyp.F:                                        (rho_rad_h(1)%r_coef(ir, iso)-rho_rad_h(2)%r_coef(ir, iso))* &
./qs_epr_hyp.F:                                       (rho_rad_h(1)%r_coef(ir, iso)-rho_rad_h(2)%r_coef(ir, iso) &
./qs_epr_hyp.F:                                        -(rho_rad_s(1)%r_coef(ir, iso)-rho_rad_s(2)%r_coef(ir, iso)))* &
./qs_epr_hyp.F:                                             (rho_rad_h(1)%r_coef(ir, iso)-rho_rad_h(2)%r_coef(ir, iso) &
./qs_epr_hyp.F:                                              -(rho_rad_s(1)%r_coef(ir, iso)-rho_rad_s(2)%r_coef(ir, iso)))* &
./qs_epr_hyp.F:      ALLOCATE (rhototspin_elec_gspace)
./qs_epr_hyp.F:                             rhototspin_elec_gspace%pw, &
./qs_epr_hyp.F:      CALL pw_zero(rhototspin_elec_gspace%pw)
./qs_epr_hyp.F:      pw_grid => rhototspin_elec_gspace%pw%pw_grid
./qs_epr_hyp.F:      CALL qs_rho_get(rho, rho_g=rho_g)
./qs_epr_hyp.F:      CPASSERT(SIZE(rho_g) > 1)
./qs_epr_hyp.F:      CALL pw_axpy(rho_g(1)%pw, rhototspin_elec_gspace%pw)
./qs_epr_hyp.F:      CALL pw_axpy(rho_g(2)%pw, rhototspin_elec_gspace%pw, alpha=-1._dp)
./qs_epr_hyp.F:            CALL pw_dr2_gg(rhototspin_elec_gspace%pw, hypaniso_gspace%pw, &
./qs_epr_hyp.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhototspin_elec_gspace%pw)
./qs_epr_hyp.F:      DEALLOCATE (rhototspin_elec_gspace)
./atom_energy.F:      WRITE (iw, '(T8,A)') 'rho_cutoff="0.0E+00"'
./atom_energy.F:      WRITE (iw, '(T8,A)') 'l_max_rho="0"'
./aobasis/ai_coulomb.F:                                                            fcy, fcz, rho, t, zetp, zetq, zetw
./aobasis/ai_coulomb.F:            rho = zeta(ipgf)*zetc(jpgf)*zetw
./aobasis/ai_coulomb.F:            t = rho*rac2
./aobasis/ai_coulomb.F:               f2 = -rho*zetq
./aobasis/ai_coulomb.F:               f4 = -rho*zetp
./aobasis/ai_coulomb.F:                                                            fcy, fcz, rho, t, zetp, zetq, zetw
./aobasis/ai_coulomb.F:            rho = zeta(ipgf)*zetc(jpgf)*zetw
./aobasis/ai_coulomb.F:            t = rho*rac2
./aobasis/ai_coulomb.F:               f2 = -rho*zetq
./aobasis/ai_coulomb.F:               f4 = -rho*zetp
./aobasis/ai_oneelectron.F:                                                            ftz, orho, rho, s1, s2
./aobasis/ai_oneelectron.F:            rho = zeta(ipgf)+zetb(jpgf)
./aobasis/ai_oneelectron.F:            pai(:) = zetb(jpgf)/rho*rab(:)
./aobasis/ai_oneelectron.F:            pbi(:) = -zeta(ipgf)/rho*rab(:)
./aobasis/ai_oneelectron.F:            pci(:) = -(zeta(ipgf)*rac(:)+zetb(jpgf)*rbc(:))/rho
./aobasis/ai_oneelectron.F:            orho = 0.5_dp/rho
./aobasis/ai_oneelectron.F:                        s(5, 1, m+1) = pai(1)*s(2, 1, m+1)-pci(1)*s(2, 1, m+2)+orho*s1 ! [dx2|o|s]
./aobasis/ai_oneelectron.F:                        s(8, 1, m+1) = pai(2)*s(3, 1, m+1)-pci(2)*s(3, 1, m+2)+orho*s1 ! [dy2|o|s]
./aobasis/ai_oneelectron.F:                        s(10, 1, m+1) = pai(3)*s(4, 1, m+1)-pci(3)*s(4, 1, m+2)+orho*s1 ! [dz2|o|s]
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(2, 1, m+1)-s(2, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(3, 1, m+1)-s(3, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(4, 1, m+1)-s(4, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(2, 1, m+1)-s(2, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(2, 1, m+1)-s(2, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(3, 1, m+1)-s(3, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(4, 1, m+1)-s(4, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(3, 1, m+1)-s(3, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(4, 1, m+1)-s(4, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +3._dp*orho*(s(5, 1, m+1)-s(5, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(6, 1, m+1)-s(6, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(7, 1, m+1)-s(7, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(8, 1, m+1)-s(8, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(9, 1, m+1)-s(9, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(10, 1, m+1)-s(10, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +3._dp*orho*(s(8, 1, m+1)-s(8, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(9, 1, m+1)-s(9, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(10, 1, m+1)-s(10, 1, m+2))
./aobasis/ai_oneelectron.F:                                        +3._dp*orho*(s(10, 1, m+1)-s(10, 1, m+2))
./aobasis/ai_oneelectron.F:                           aai = REAL(MAX(irm(ix), 0), dp)*orho
./aobasis/ai_oneelectron.F:                        s(1, 5, m+1) = pbi(1)*s(1, 2, m+1)-pci(1)*s(1, 2, m+2)+orho*s1 ! [dx2|o|s]
./aobasis/ai_oneelectron.F:                        s(1, 8, m+1) = pbi(2)*s(1, 3, m+1)-pci(2)*s(1, 3, m+2)+orho*s1 ! [dy2|o|s]
./aobasis/ai_oneelectron.F:                        s(1, 10, m+1) = pbi(3)*s(1, 4, m+1)-pci(3)*s(1, 4, m+2)+orho*s1 ! [dz2|o|s]
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(1, 2, m+1)-s(1, 2, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(1, 3, m+1)-s(1, 3, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(1, 4, m+1)-s(1, 4, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(1, 2, m+1)-s(1, 2, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(1, 2, m+1)-s(1, 2, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(1, 3, m+1)-s(1, 3, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(1, 4, m+1)-s(1, 4, m+2))
./aobasis/ai_oneelectron.F:                                        +orho*(s(1, 3, m+1)-s(1, 3, m+2))
./aobasis/ai_oneelectron.F:                                        +2._dp*orho*(s(1, 4, m+1)-s(1, 4, m+2))
./aobasis/ai_oneelectron.F:                                              +aai*orho*(s(1, ir2, m+1)-s(1, ir2, m+2))
./aobasis/ai_oneelectron.F:      REAL(KIND=dp)                                      :: aai, fax, fay, faz, ftz, orho, s1
./aobasis/ai_oneelectron.F:            orho = 0.5_dp/zeta(ipgf)
./aobasis/ai_oneelectron.F:                     s(5, m+1) = -rac(1)*s(2, m+2)+orho*s1 ! [dx2|o]
./aobasis/ai_oneelectron.F:                     s(8, m+1) = -rac(2)*s(3, m+2)+orho*s1 ! [dy2|o]
./aobasis/ai_oneelectron.F:                     s(10, m+1) = -rac(3)*s(4, m+2)+orho*s1 ! [dz2|o]
./aobasis/ai_oneelectron.F:                     s(11, m+1) = -rac(1)*s(5, m+2)+2._dp*orho*(s(2, m+1)-s(2, m+2)) ! [fx3 |o]
./aobasis/ai_oneelectron.F:                     s(12, m+1) = -rac(1)*s(6, m+2)+orho*(s(3, m+1)-s(3, m+2)) ! [fx2y|o]
./aobasis/ai_oneelectron.F:                     s(13, m+1) = -rac(1)*s(7, m+2)+orho*(s(4, m+1)-s(4, m+2)) ! [fx2z|o]
./aobasis/ai_oneelectron.F:                     s(14, m+1) = -rac(2)*s(6, m+2)+orho*(s(2, m+1)-s(2, m+2)) ! [fxy2|o]
./aobasis/ai_oneelectron.F:                     s(16, m+1) = -rac(3)*s(7, m+2)+orho*(s(2, m+1)-s(2, m+2)) ! [fxz2|o]
./aobasis/ai_oneelectron.F:                     s(17, m+1) = -rac(2)*s(8, m+2)+2._dp*orho*(s(3, m+1)-s(3, m+2)) ! [fy3 |o]
./aobasis/ai_oneelectron.F:                     s(18, m+1) = -rac(2)*s(9, m+2)+orho*(s(4, m+1)-s(4, m+2)) ! [fy2z|o]
./aobasis/ai_oneelectron.F:                     s(19, m+1) = -rac(3)*s(9, m+2)+orho*(s(3, m+1)-s(3, m+2)) ! [fyz2|o]
./aobasis/ai_oneelectron.F:                     s(20, m+1) = -rac(3)*s(10, m+2)+2._dp*orho*(s(4, m+1)-s(4, m+2)) ! [fz3 |o]
./aobasis/ai_oneelectron.F:                     s(21, m+1) = -rac(1)*s(11, m+2)+3._dp*orho*(s(5, m+1)-s(5, m+2)) ! [gx4  |s]
./aobasis/ai_oneelectron.F:                     s(22, m+1) = -rac(1)*s(12, m+2)+2._dp*orho*(s(6, m+1)-s(6, m+2)) ! [gx3y |s]
./aobasis/ai_oneelectron.F:                     s(23, m+1) = -rac(1)*s(13, m+2)+2._dp*orho*(s(7, m+1)-s(7, m+2)) ! [gx3z |s]
./aobasis/ai_oneelectron.F:                     s(24, m+1) = -rac(1)*s(14, m+2)+orho*(s(8, m+1)-s(8, m+2)) ! [gx2y2|s]
./aobasis/ai_oneelectron.F:                     s(25, m+1) = -rac(1)*s(15, m+2)+orho*(s(9, m+1)-s(9, m+2)) ! [gx2yz|s]
./aobasis/ai_oneelectron.F:                     s(26, m+1) = -rac(1)*s(16, m+2)+orho*(s(10, m+1)-s(10, m+2)) ! [gx2z2|s]
./aobasis/ai_oneelectron.F:                     s(31, m+1) = -rac(2)*s(17, m+2)+3._dp*orho*(s(8, m+1)-s(8, m+2)) ! [gy4  |s]
./aobasis/ai_oneelectron.F:                     s(32, m+1) = -rac(2)*s(18, m+2)+2._dp*orho*(s(9, m+1)-s(9, m+2)) ! [gy3z |s]
./aobasis/ai_oneelectron.F:                     s(33, m+1) = -rac(2)*s(19, m+2)+orho*(s(10, m+1)-s(10, m+2)) ! [gy2z2|s]
./aobasis/ai_oneelectron.F:                     s(35, m+1) = -rac(3)*s(20, m+2)+3._dp*orho*(s(10, m+1)-s(10, m+2)) ! [gz4  |s]
./aobasis/ai_oneelectron.F:                        aai = REAL(MAX(irm(ix), 0), dp)*orho
./aobasis/ai_overlap_ppl.F:      REAL(KIND=dp)                                      :: rho, sab, t, zetc
./aobasis/ai_overlap_ppl.F:            rho = zeta(ipgf)+zetb(jpgf)
./aobasis/ai_overlap_ppl.F:            pci(:) = -(zeta(ipgf)*rac(:)+zetb(jpgf)*rbc(:))/rho
./aobasis/ai_overlap_ppl.F:            sab = EXP(-(zeta(ipgf)*zetb(jpgf)/rho*dab*dab))
./aobasis/ai_overlap_ppl.F:            t = rho*SUM(pci(:)*pci(:))
./aobasis/ai_overlap_ppl.F:               CALL ppl_aux(auxint(0:mmax, ij), mmax, t, rho, nexp, cexp_ppl(:, iexp), zetc)
./aobasis/ai_overlap_ppl.F:      REAL(KIND=dp)                                      :: oint, oref, rho, t, zetc
./aobasis/ai_overlap_ppl.F:         rho = zeta(ipgf)
./aobasis/ai_overlap_ppl.F:         t = rho*dac*dac
./aobasis/ai_overlap_ppl.F:            CALL ppl_aux(auxint(0:mmax, ipgf), mmax, t, rho, nexp, cexp_ppl(:, iexp), zetc)
./aobasis/ai_overlap_ppl.F:            rho = zeta(ipgf)
./aobasis/ai_overlap_ppl.F:               oint = ppl_ri_test(rho, ani, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl)
./aobasis/ai_overlap_ppl.F:                  doint(1) = 2._dp*rho*ppl_ri_test(rho, anp, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl) &
./aobasis/ai_overlap_ppl.F:                             -ani(1)*ppl_ri_test(rho, anm, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl)
./aobasis/ai_overlap_ppl.F:                  doint(2) = 2._dp*rho*ppl_ri_test(rho, anp, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl) &
./aobasis/ai_overlap_ppl.F:                             -ani(2)*ppl_ri_test(rho, anm, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl)
./aobasis/ai_overlap_ppl.F:                  doint(3) = 2._dp*rho*ppl_ri_test(rho, anp, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl) &
./aobasis/ai_overlap_ppl.F:                             -ani(3)*ppl_ri_test(rho, anm, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl)
./aobasis/ai_overlap_ppl.F:!> \param rho ...
./aobasis/ai_overlap_ppl.F:   FUNCTION ppl_ri_test(rho, ani, rac, nexp_ppl, nct_ppl, alpha_ppl, cexp_ppl) RESULT(oint)
./aobasis/ai_overlap_ppl.F:      REAL(KIND=dp), INTENT(IN)                          :: rho
./aobasis/ai_overlap_ppl.F:         CALL init_os_overlap2(rho, zetc, ra, -rac)
./aobasis/ai_overlap_ppl.F:!> \param rho ...
./aobasis/ai_overlap_ppl.F:   SUBROUTINE ppl_aux(auxint, mmax, t, rho, nexp_ppl, cexp_ppl, zetc)
./aobasis/ai_overlap_ppl.F:      REAL(KIND=dp), INTENT(IN)                          :: t, rho
./aobasis/ai_overlap_ppl.F:      REAL(KIND=dp)                                      :: a2, a3, a4, cc, f, q, q2, q4, q6, rho2, &
./aobasis/ai_overlap_ppl.F:                                                            rho3, t2, t3
./aobasis/ai_overlap_ppl.F:      q = rho+zetc
./aobasis/ai_overlap_ppl.F:         polder(0) = polder(0)+a2*(2._dp*rho*t+3._dp*q)
./aobasis/ai_overlap_ppl.F:         polder(1) = polder(1)-a2*2._dp*rho
./aobasis/ai_overlap_ppl.F:         rho2 = rho*rho
./aobasis/ai_overlap_ppl.F:         polder(0) = polder(0)+a3*(4._dp*rho2*t2+20._dp*rho*t*q+15._dp*q2)
./aobasis/ai_overlap_ppl.F:         polder(1) = polder(1)-a3*(8._dp*rho2*t+20._dp*rho*q)
./aobasis/ai_overlap_ppl.F:         polder(2) = polder(2)+a3*8._dp*rho2
./aobasis/ai_overlap_ppl.F:         rho3 = rho2*rho
./aobasis/ai_overlap_ppl.F:         polder(0) = polder(0)+a4*(8._dp*rho3*t3+84._dp*rho2*t2*q+210._dp*rho*t*q2+105._dp*q*q2)
./aobasis/ai_overlap_ppl.F:         polder(1) = polder(1)-a4*(24._dp*rho3*t2+168._dp*rho2*t*q+210._dp*rho*q2)
./aobasis/ai_overlap_ppl.F:         polder(2) = polder(2)+a4*(48._dp*rho3*t+168._dp*rho2*q)
./aobasis/ai_overlap_ppl.F:         polder(3) = polder(3)-a4*48_dp*rho3
./aobasis/ai_eri_debug.F:   REAL(dp)                      :: xsi, eta, rho, T
./aobasis/ai_eri_debug.F:      rho = xsi*eta/(xsi+eta)
./aobasis/ai_eri_debug.F:      T = rho*SUM((P-Q)**2)
./aobasis/ai_eri_debug.F:                          0.5_dp*(an(1)-1)/xsi*rho/xsi*os(an-i1-i1, bn, cn, dn, m+1)
./aobasis/ai_eri_debug.F:                          0.5_dp*(an(2)-1)/xsi*rho/xsi*os(an-i2-i2, bn, cn, dn, m+1)
./aobasis/ai_eri_debug.F:                          0.5_dp*(an(3)-1)/xsi*rho/xsi*os(an-i3-i3, bn, cn, dn, m+1)
./aobasis/ai_operators_r12.F:!> \param rho ...
./aobasis/ai_operators_r12.F:      SUBROUTINE ab_sint_os(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:      REAL(KIND=dp), INTENT(IN)                          :: zetp, zetq, zetw, rho, rac2, omega
./aobasis/ai_operators_r12.F:                                                            fcy, fcz, rho, zetp, zetq, zetw
./aobasis/ai_operators_r12.F:            rho = zeta(ipgf)*zetc(jpgf)*zetw
./aobasis/ai_operators_r12.F:            CALL cps_operator2(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:               f2 = -rho*zetq
./aobasis/ai_operators_r12.F:               f4 = -rho*zetp
./aobasis/ai_operators_r12.F:!> \param rho = zeta*zetc*zetw
./aobasis/ai_operators_r12.F:   SUBROUTINE cps_coulomb2(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:      REAL(KIND=dp), INTENT(IN)                          :: zetp, zetq, zetw, rho, rac2, omega
./aobasis/ai_operators_r12.F:      t = rho*rac2
./aobasis/ai_operators_r12.F:!> \param rho = zeta*zetc*zetw
./aobasis/ai_operators_r12.F:   SUBROUTINE cps_verf2(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:      REAL(KIND=dp), INTENT(IN)                          :: zetp, zetq, zetw, rho, rac2, omega
./aobasis/ai_operators_r12.F:      comega = omega**2/(omega**2+rho)
./aobasis/ai_operators_r12.F:      t = rho*rac2
./aobasis/ai_operators_r12.F:!> \param rho = zeta*zetc*zetw
./aobasis/ai_operators_r12.F:   SUBROUTINE cps_verfc2(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:      REAL(KIND=dp), INTENT(IN)                          :: zetp, zetq, zetw, rho, rac2, omega
./aobasis/ai_operators_r12.F:      comega = omega**2/(omega**2+rho)
./aobasis/ai_operators_r12.F:      t = rho*rac2
./aobasis/ai_operators_r12.F:!> \param rho = zeta*zetc*zetw
./aobasis/ai_operators_r12.F:   SUBROUTINE cps_vgauss2(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:      REAL(KIND=dp), INTENT(IN)                          :: zetp, zetq, zetw, rho, rac2, omega
./aobasis/ai_operators_r12.F:      eta = rho/(rho+omega)
./aobasis/ai_operators_r12.F:      tau = omega/(rho+omega)
./aobasis/ai_operators_r12.F:      t = rho*rac2
./aobasis/ai_operators_r12.F:      expT = EXP(-omega/(omega+rho)*t)
./aobasis/ai_operators_r12.F:      f0 = 2.0_dp*SQRT(pi**5*zetw**3)/(rho+omega)*expT
./aobasis/ai_operators_r12.F:!> \param rho = zeta*zetc*zetw
./aobasis/ai_operators_r12.F:   SUBROUTINE cps_gauss2(v, nmax, zetp, zetq, zetw, rho, rac2, omega)
./aobasis/ai_operators_r12.F:      REAL(KIND=dp), INTENT(IN)                          :: zetp, zetq, zetw, rho, rac2, omega
./aobasis/ai_operators_r12.F:      tau = omega/(rho+omega)
./aobasis/ai_operators_r12.F:      t = rho*rac2
./aobasis/ai_operators_r12.F:      f0 = pi**3*SQRT(zetw**3/(rho+omega)**3)*expT
./qs_ks_methods.F:!>      - 10.2002 introduced pools, uses updated rho as input,
./qs_ks_methods.F:   USE admm_dm_methods,                 ONLY: admm_dm_calc_rho_aux,&
./qs_ks_methods.F:   USE admm_methods,                    ONLY: admm_mo_calc_rho_aux,&
./qs_ks_methods.F:                                              integrate_rho_nlcc,&
./qs_ks_methods.F:   USE qs_rho0_ggrid,                   ONLY: integrate_vhg0_rspace
./qs_ks_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_ks_methods.F:                                              qs_rho_type
./qs_ks_methods.F:   USE rtp_admm_methods,                ONLY: rtp_admm_calc_rho_aux,&
./qs_ks_methods.F:   PUBLIC :: calc_rho_tot_gspace, qs_ks_update_qs_env, qs_ks_build_kohn_sham_matrix, &
./qs_ks_methods.F:!>      10.2002 introduced pools, uses updated rho as input, LSD [fawzi]
./qs_ks_methods.F:!>      make rho, energy and qs_charges optional, defaulting
./qs_ks_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: ks_matrix, matrix_h, matrix_s, my_rho, &
./qs_ks_methods.F:                                                            rho_ao
./qs_ks_methods.F:      TYPE(pw_p_type) :: rho_tot_gspace, v_efield_rspace, v_hartree_gspace, v_hartree_rspace, &
./qs_ks_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, v_rspace_embed, v_rspace_new, &
./qs_ks_methods.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_rs, rho_core, rho_nlcc, vee, &
./qs_ks_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_struct, rho_xc
./qs_ks_methods.F:               mo_derivs, my_rho, rho_struct, para_env, pw_env, virial, &
./qs_ks_methods.F:               matrix_vxc, vee, rho_nlcc, ks_env, &
./qs_ks_methods.F:               ks_matrix, rho, energy, rho_xc, rho_r, rho_ao, rho_core)
./qs_ks_methods.F:                      rho_nlcc=rho_nlcc, &
./qs_ks_methods.F:                      rho=rho, &
./qs_ks_methods.F:                      rho_core=rho_core, &
./qs_ks_methods.F:                      rho_xc=rho_xc, &
./qs_ks_methods.F:      WRITE(115,*) "2. Calling qs_rho_get()"
./qs_ks_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r, rho_ao_kp=rho_ao)
./qs_ks_methods.F:      CPASSERT(ASSOCIATED(rho))
./qs_ks_methods.F:         CPASSERT(ASSOCIATED(rho_xc))
./qs_ks_methods.F:         CALL prepare_gapw_den(qs_env, do_rho0=(.NOT. gapw_xc))
./qs_ks_methods.F:                             rho_tot_gspace%pw, &
./qs_ks_methods.F:         CALL pw_zero(rho_tot_gspace%pw)
./qs_ks_methods.F:         CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho, skip_nuclear_density=.TRUE.)
./qs_ks_methods.F:         CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%e_hartree, &
./qs_ks_methods.F:         CALL pw_zero(rho_tot_gspace%pw)
./qs_ks_methods.F:      CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho)
./qs_ks_methods.F:         CALL print_densities(qs_env, rho)
./qs_ks_methods.F:            CALL sccs(qs_env, rho_tot_gspace%pw, v_hartree_gspace%pw, v_sccs_rspace%pw, &
./qs_ks_methods.F:            CALL sccs(qs_env, rho_tot_gspace%pw, v_hartree_gspace%pw, v_sccs_rspace%pw)
./qs_ks_methods.F:            CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%hartree, &
./qs_ks_methods.F:                                  rho_core=rho_core)
./qs_ks_methods.F:            CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%hartree, &
./qs_ks_methods.F:                                  v_hartree_gspace%pw, rho_core=rho_core)
./qs_ks_methods.F:         CALL qs_ks_ddapc(qs_env, auxbas_pw_pool, rho_tot_gspace, v_hartree_gspace, &
./qs_ks_methods.F:      CALL calc_v_sic_rspace(v_sic_rspace, energy, qs_env, dft_control, rho, poisson_env, &
./qs_ks_methods.F:            ee_ener = ee_ener+pw_integral_ab(rho_r(ispin)%pw, vee%pw)
./qs_ks_methods.F:                               rho0_s_rs=rho0_s_rs)
./qs_ks_methods.F:               CPASSERT(ASSOCIATED(rho0_s_rs))
./qs_ks_methods.F:               ee_ener = ee_ener+pw_integral_ab(rho0_s_rs%pw, vee%pw)
./qs_ks_methods.F:                                    rho=rho_r, &
./qs_ks_methods.F:                                     rho_hartree_gspace=rho_tot_gspace, &
./qs_ks_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tot_gspace%pw)
./qs_ks_methods.F:               CALL rtp_admm_calc_rho_aux(qs_env)
./qs_ks_methods.F:               CALL admm_mo_calc_rho_aux(qs_env)
./qs_ks_methods.F:            CALL admm_dm_calc_rho_aux(ks_env)
./qs_ks_methods.F:            CALL get_qs_env(qs_env=qs_env, rho_xc=rho_struct)
./qs_ks_methods.F:            CALL get_qs_env(qs_env=qs_env, rho_aux_fit=rho_struct)
./qs_ks_methods.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=xc_section, &
./qs_ks_methods.F:                            vxc_rho=v_rspace_new_aux_fit, vxc_tau=v_tau_rspace_aux_fit, exc=energy%exc_aux_fit, &
./qs_ks_methods.F:         NULLIFY (rho_struct)
./qs_ks_methods.F:         CALL get_qs_env(qs_env=qs_env, rho_xc=rho_struct)
./qs_ks_methods.F:         CALL get_qs_env(qs_env=qs_env, rho=rho_struct)
./qs_ks_methods.F:         CALL calculate_zmp_potential(qs_env, v_rspace_new, rho, exc=energy%exc)
./qs_ks_methods.F:            CALL get_embed_potential_energy(qs_env, rho, v_rspace_embed, dft_control, &
./qs_ks_methods.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=xc_section, &
./qs_ks_methods.F:                            vxc_rho=v_rspace_new, vxc_tau=v_tau_rspace, exc=energy%exc, &
./qs_ks_methods.F:      NULLIFY (rho_struct)
./qs_ks_methods.F:         CALL hfx_ks_matrix(qs_env, ks_matrix, rho, energy, calculate_forces, &
./qs_ks_methods.F:            CALL integrate_ppl_rspace(rho_r(ispin), qs_env)
./qs_ks_methods.F:      IF (ASSOCIATED(rho_nlcc) .AND. calculate_forces) THEN
./qs_ks_methods.F:            CALL integrate_rho_nlcc(v_rspace_new(ispin), qs_env)
./qs_ks_methods.F:            IF (dft_control%do_admm) CALL integrate_rho_nlcc(v_rspace_new_aux_fit(ispin), qs_env)
./qs_ks_methods.F:         ! Pointing my_rho to the density matrix rho_ao
./qs_ks_methods.F:         my_rho => rho_ao
./qs_ks_methods.F:         CALL sum_up_and_integrate(qs_env, ks_matrix, rho, my_rho, vppl_rspace, &
./qs_ks_methods.F:         CALL update_ks_atom(qs_env, ks_matrix, rho_ao, calculate_forces)
./qs_ks_methods.F:                                    ks_matrix, matrix_s, rho, mulliken_order_p)
./qs_ks_methods.F:                        SUM(vppl_rspace%pw%cr3d*rho_r(ispin)%pw%cr3d)*vppl_rspace%pw%pw_grid%dvol
./qs_ks_methods.F:!> \param rho_tot_gspace ...
./qs_ks_methods.F:!> \param rho ...
./qs_ks_methods.F:   SUBROUTINE calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho, skip_nuclear_density)
./qs_ks_methods.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_tot_gspace
./qs_ks_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_methods.F:      CHARACTER(*), PARAMETER :: routineN = 'calc_rho_tot_gspace', &
./qs_ks_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_ks_methods.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core
./qs_ks_methods.F:      CALL qs_rho_get(rho, rho_g=rho_g)
./qs_ks_methods.F:         NULLIFY (rho_core)
./qs_ks_methods.F:         CALL get_qs_env(qs_env=qs_env, rho_core=rho_core)
./qs_ks_methods.F:            NULLIFY (rho0_s_gs)
./qs_ks_methods.F:            CALL get_qs_env(qs_env=qs_env, rho0_s_gs=rho0_s_gs)
./qs_ks_methods.F:            CPASSERT(ASSOCIATED(rho0_s_gs))
./qs_ks_methods.F:            CALL pw_copy(rho0_s_gs%pw, rho_tot_gspace%pw)
./qs_ks_methods.F:               CALL pw_axpy(rho_core%pw, rho_tot_gspace%pw)
./qs_ks_methods.F:            CALL pw_copy(rho_core%pw, rho_tot_gspace%pw)
./qs_ks_methods.F:            CALL pw_axpy(rho_g(ispin)%pw, rho_tot_gspace%pw)
./qs_ks_methods.F:         qs_charges%total_rho_gspace = pw_integrate_function(rho_tot_gspace%pw, isign=-1)
./qs_ks_methods.F:            CALL pw_axpy(rho_g(ispin)%pw, rho_tot_gspace%pw)
./qs_ks_methods.F:   END SUBROUTINE calc_rho_tot_gspace
./qs_ks_methods.F:                                                            rho_changed, s_mstruct_changed
./qs_ks_methods.F:                      rho_changed=rho_changed, &
./qs_ks_methods.F:      do_rebuild = do_rebuild .OR. rho_changed
./qs_ks_methods.F:                            rho_changed=.FALSE., &
./qs_ks_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrixkp_h, matrixkp_t, rho_ao_kp
./qs_ks_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_methods.F:      NULLIFY (energy, rho, dft_control, rho_ao_kp, matrixkp_t, matrixkp_h)
./qs_ks_methods.F:                      rho=rho, &
./qs_ks_methods.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_ks_methods.F:      CALL calculate_ptrace(matrixkp_h, rho_ao_kp, energy%core, dft_control%nspins)
./qs_ks_methods.F:         CALL calculate_ptrace(matrixkp_t, rho_ao_kp, energy%kinetic, dft_control%nspins)
./population_analyses.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./population_analyses.F:                                              qs_rho_type
./population_analyses.F:      TYPE(qs_rho_type), POINTER                         :: rho
./population_analyses.F:      NULLIFY (rho)
./population_analyses.F:                      rho=rho, &
./population_analyses.F:      CPASSERT(ASSOCIATED(rho))
./population_analyses.F:         CALL qs_rho_get(rho, rho_ao_kp=matrixkp_p) ! Density matrices in sparse format
./population_analyses.F:      TYPE(qs_rho_type), POINTER                         :: rho
./population_analyses.F:      NULLIFY (rho)
./population_analyses.F:                      rho=rho, &
./population_analyses.F:      CPASSERT(ASSOCIATED(rho))
./population_analyses.F:      CALL qs_rho_get(rho, rho_ao_kp=matrix_p) ! Density matrices in sparse format
./qs_scf_methods.F:!> \param rho_ao       Density environment
./qs_scf_methods.F:   SUBROUTINE scf_env_density_mixing(p_mix_new, mixing_store, rho_ao, para_env, &
./qs_scf_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao
./qs_scf_methods.F:                                 matrix_b=rho_ao(ispin, ic)%matrix, &
./qs_scf_methods.F:                              m2=rho_ao(ispin, ic)%matrix, &
./dm_ls_scf_create.F:      CALL section_vals_get(mixing_section, explicit=ls_scf_env%do_rho_mixing)
./dm_ls_scf_create.F:      IF (ls_scf_env%ls_diis .AND. ls_scf_env%do_rho_mixing) &
./dm_ls_scf_create.F:         IF (ls_scf_env%do_rho_mixing) THEN
./qs_kind_types.F:      REAL(dp)                               :: hard0_radius = 0.8_dp*bohr ! for hard exp of rho0
./qs_kind_types.F:      LOGICAL                                :: paw_atom = .FALSE. ! needs atomic rho1
./qs_kind_types.F:      INTEGER                                :: lmax_rho0 = 0
./qs_kind_types.F:!> \param lmax_rho0 ...
./qs_kind_types.F:                          ngrid_ang, ngrid_rad, lmax_rho0, &
./qs_kind_types.F:      INTEGER, INTENT(OUT), OPTIONAL                     :: ngrid_ang, ngrid_rad, lmax_rho0
./qs_kind_types.F:      IF (PRESENT(lmax_rho0)) lmax_rho0 = qs_kind%lmax_rho0
./qs_kind_types.F:!> \param lmax_rho0 ...
./qs_kind_types.F:                              nelectron, maxder, max_ngrid_rad, max_sph_harm, maxg_iso_not0, lmax_rho0, &
./qs_kind_types.F:                                                            maxg_iso_not0, lmax_rho0
./qs_kind_types.F:      INTEGER                                            :: ikind, imax, lmax_rho0_kind, &
./qs_kind_types.F:         IF (PRESENT(lmax_rho0)) lmax_rho0 = 0
./qs_kind_types.F:                             lmax_rho0=lmax_rho0_kind)
./qs_kind_types.F:            IF (PRESENT(lmax_rho0)) THEN
./qs_kind_types.F:               lmax_rho0 = MAX(lmax_rho0, lmax_rho0_kind)
./qs_kind_types.F:!> \param lmax_rho0 ...
./qs_kind_types.F:                          soft_basis_set, hard_basis_set, lmax_rho0, zeff, &
./qs_kind_types.F:      INTEGER, INTENT(IN), OPTIONAL                      :: lmax_rho0
./qs_kind_types.F:      IF (PRESENT(lmax_rho0)) qs_kind%lmax_rho0 = lmax_rho0
./hartree_local_methods.F:   USE qs_local_rho_types,              ONLY: rhoz_type
./hartree_local_methods.F:   USE qs_rho0_types,                   ONLY: get_rho0_mpole,&
./hartree_local_methods.F:                                              rho0_atom_type,&
./hartree_local_methods.F:                                              rho0_mpole_type
./hartree_local_methods.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./hartree_local_methods.F:                                              rho_atom_coeff,&
./hartree_local_methods.F:                                              rho_atom_type
./hartree_local_methods.F:      TYPE(rho_atom_coeff), DIMENSION(:), INTENT(IN)     :: rrad_h, rrad_s
./hartree_local_methods.F:      REAL(dp), ALLOCATABLE, DIMENSION(:, :)             :: rho_1, rho_2
./hartree_local_methods.F:      ALLOCATE (rho_1(nr, max_s_harm), rho_2(nr, max_s_harm))
./hartree_local_methods.F:      rho_1 = 0.0_dp
./hartree_local_methods.F:      rho_2 = 0.0_dp
./hartree_local_methods.F:      rho_1(:, 1) = rrad_z(:)
./hartree_local_methods.F:      rho_2(:, 1) = rrad_0(:, 1)
./hartree_local_methods.F:         rho_2(:, iso) = rrad_0(:, iso)
./hartree_local_methods.F:            rho_1(:, iso) = rho_1(:, iso)+rrad_h(ispin)%r_coef(:, iso)
./hartree_local_methods.F:            rho_2(:, iso) = rho_2(:, iso)+rrad_s(ispin)%r_coef(:, iso)
./hartree_local_methods.F:         rho_1(:, iso) = rho_1(:, iso)*wr(:)
./hartree_local_methods.F:         rho_2(:, iso) = rho_2(:, iso)*wr(:)
./hartree_local_methods.F:         I1_up = r2l(nr, l_ang)*rho_1(nr, iso)
./hartree_local_methods.F:         I2_up = r2l(nr, l_ang)*rho_2(nr, iso)
./hartree_local_methods.F:            I1_down = I1_down+oor2l(ir, l_ang+1)*rho_1(ir, iso)
./hartree_local_methods.F:            I2_down = I2_down+oor2l(ir, l_ang+1)*rho_2(ir, iso)
./hartree_local_methods.F:            I1_up = I1_up+r2l(ir, l_ang)*rho_1(ir, iso)
./hartree_local_methods.F:            I1_down = I1_down-oor2l(ir, l_ang+1)*rho_1(ir, iso)
./hartree_local_methods.F:            I2_up = I2_up+r2l(ir, l_ang)*rho_2(ir, iso)
./hartree_local_methods.F:            I2_down = I2_down-oor2l(ir, l_ang+1)*rho_2(ir, iso)
./hartree_local_methods.F:      DEALLOCATE (rho_1, rho_2)
./hartree_local_methods.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_atom_set
./hartree_local_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./hartree_local_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./hartree_local_methods.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./hartree_local_methods.F:      TYPE(rhoz_type), DIMENSION(:), POINTER             :: rhoz_set
./hartree_local_methods.F:      NULLIFY (atomic_kind_set, qs_kind_set, rho_atom_set, rho0_atom_set)
./hartree_local_methods.F:      NULLIFY (rho0_mpole, rhoz_set, ecoul_1c)
./hartree_local_methods.F:         rho_atom_set => p_env%local_rho_set%rho_atom_set
./hartree_local_methods.F:         rho0_atom_set => p_env%local_rho_set%rho0_atom_set
./hartree_local_methods.F:         rho0_mpole => p_env%local_rho_set%rho0_mpole
./hartree_local_methods.F:                         rho_atom_set=rho_atom_set, &
./hartree_local_methods.F:                         rho0_atom_set=rho0_atom_set, &
./hartree_local_methods.F:                         rho0_mpole=rho0_mpole, &
./hartree_local_methods.F:                         rhoz_set=rhoz_set, &
./hartree_local_methods.F:      CALL get_rho0_mpole(rho0_mpole=rho0_mpole, lmax_0=lmax_0)
./hartree_local_methods.F:            CALL get_rho0_mpole(rho0_mpole=rho0_mpole, ikind=ikind, &
./hartree_local_methods.F:            IF (nchan_0 > max_iso_not0) CPABORT("channels for rho0 > # max of spherical harmonics")
./hartree_local_methods.F:               rho_atom => rho_atom_set(iatom)
./hartree_local_methods.F:                  rrad_z => rhoz_set(ikind)%r_coef
./hartree_local_methods.F:                  vrrad_z => rhoz_set(ikind)%vr_coef
./hartree_local_methods.F:               rrad_0 => rho0_atom_set(iatom)%rho0_rad_h%r_coef
./hartree_local_methods.F:               vrrad_0 => rho0_atom_set(iatom)%vrho0_rad_h%r_coef
./hartree_local_methods.F:               CALL Vh_1c_atom_potential(rho_atom, vrrad_0, &
./hartree_local_methods.F:               CALL Vh_1c_atom_energy(energy_hartree_1c, ecoul_1c, rho_atom, rrad_0, &
./hartree_local_methods.F:               CALL Vh_1c_atom_integrals(rho_atom, &
./hartree_local_methods.F:!> \param rho_atom ...
./hartree_local_methods.F:   SUBROUTINE Vh_1c_atom_potential(rho_atom, vrrad_0, &
./hartree_local_methods.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./hartree_local_methods.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: vr_h, vr_s
./hartree_local_methods.F:      CALL get_rho_atom(rho_atom=rho_atom, vrho_rad_h=vr_h, vrho_rad_s=vr_s)
./hartree_local_methods.F:!> \param rho_atom ...
./hartree_local_methods.F:   SUBROUTINE Vh_1c_atom_energy(energy_hartree_1c, ecoul_1c, rho_atom, rrad_0, &
./hartree_local_methods.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./hartree_local_methods.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: r_h, r_s
./hartree_local_methods.F:      CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=r_h, rho_rad_s=r_s)
./hartree_local_methods.F:      !       Calculate the contributions to Ecoul coming from Vh1_h*rhoz
./hartree_local_methods.F:      !       Calculate the contributions to Ecoul coming from  Vh1_s*rho0
./hartree_local_methods.F:      !       Calculate the contributions to Ecoul coming from Vh1_h*rho1_h and Vh1_s*rho1_s
./hartree_local_methods.F:!> \param rho_atom ...
./hartree_local_methods.F:   SUBROUTINE Vh_1c_atom_integrals(rho_atom, &
./hartree_local_methods.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./hartree_local_methods.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_local_h, int_local_s
./hartree_local_methods.F:      CALL get_rho_atom(rho_atom=rho_atom, &
./hartree_local_methods.F:                  !               with contributions to  V1_s*rho0
./hartree_local_methods.F:                  !               without contributions to  V1_s*rho0
./atom_upf.F:      REAL(dp)                                       :: rho_cutoff
./atom_upf.F:      INTEGER                                        :: l_max_rho
./atom_upf.F:      REAL(dp), DIMENSION(:), ALLOCATABLE            :: rho_nlcc
./atom_upf.F:            READ (line(2:il-1), *) pot%rho_cutoff
./atom_upf.F:            READ (line(2:il-1), *) pot%l_max_rho
./atom_upf.F:      ALLOCATE (pot%rho_nlcc(m))
./atom_upf.F:      pot%rho_nlcc = 0.0_dp
./atom_upf.F:            CALL parser_get_object(parser, pot%rho_nlcc(icount))
./qs_wf_history_types.F:   USE qs_rho_types,                    ONLY: qs_rho_release,&
./qs_wf_history_types.F:                                              qs_rho_type
./qs_wf_history_types.F:!> \param rho_r the density in r space
./qs_wf_history_types.F:!> \param rho_g the density in g space
./qs_wf_history_types.F:!> \param rho_ao the density in ao space
./qs_wf_history_types.F:!> \param rho_frozen the frozen density structure
./qs_wf_history_types.F:      TYPE(pw_p_type), DIMENSION(:), POINTER :: rho_r
./qs_wf_history_types.F:      TYPE(pw_p_type), DIMENSION(:), POINTER :: rho_g
./qs_wf_history_types.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER :: rho_ao
./qs_wf_history_types.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER :: rho_ao_kp
./qs_wf_history_types.F:      TYPE(qs_rho_type), POINTER :: rho_frozen
./qs_wf_history_types.F:      LOGICAL :: store_wf, store_rho_r, store_rho_g, store_rho_ao, store_rho_ao_kp, &
./qs_wf_history_types.F:            ! snapshot%rho_r & snapshot%rho_g is deallocated in wfs_update
./qs_wf_history_types.F:            IF (ASSOCIATED(snapshot%rho_ao)) THEN
./qs_wf_history_types.F:               CALL dbcsr_deallocate_matrix_set(snapshot%rho_ao)
./qs_wf_history_types.F:            IF (ASSOCIATED(snapshot%rho_ao_kp)) THEN
./qs_wf_history_types.F:               CALL dbcsr_deallocate_matrix_set(snapshot%rho_ao_kp)
./qs_wf_history_types.F:            IF (ASSOCIATED(snapshot%rho_frozen)) THEN
./qs_wf_history_types.F:               CALL qs_rho_release(snapshot%rho_frozen)
./qs_basis_gradient.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_basis_gradient.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_basis_gradient.F:                                              qs_rho_set,&
./qs_basis_gradient.F:                                              qs_rho_type
./qs_basis_gradient.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_s_kp, rho_ao_kp
./qs_basis_gradient.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_basis_gradient.F:      CALL get_qs_env(qs_env, mos=mos, rho=rho, matrix_s_kp=matrix_s_kp)
./qs_basis_gradient.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_basis_gradient.F:         CALL calculate_density_matrix(mos(ispin)%mo_set, rho_ao_kp(ispin, 1)%matrix)
./qs_basis_gradient.F:      CALL qs_rho_set(rho, rho_r_valid=.FALSE., drho_r_valid=.FALSE., rho_g_valid=.FALSE., &
./qs_basis_gradient.F:                      drho_g_valid=.FALSE., tau_r_valid=.FALSE., tau_g_valid=.FALSE.)
./qs_basis_gradient.F:      CALL qs_rho_update_rho(rho, qs_env)
./qs_p_env_types.F:   USE qs_local_rho_types,              ONLY: local_rho_set_release,&
./qs_p_env_types.F:                                              local_rho_type
./qs_p_env_types.F:   USE qs_rho_types,                    ONLY: qs_rho_release,&
./qs_p_env_types.F:                                              qs_rho_type
./qs_p_env_types.F:!> \param m_epsilon minus epsilon: -<psi0d|H_rho|psi0d>
./qs_p_env_types.F:!> \param rho 1: the density rho1
./qs_p_env_types.F:!> \param rho 1: the soft density rho1 for gapw_xc
./qs_p_env_types.F:      TYPE(qs_rho_type), POINTER :: rho1
./qs_p_env_types.F:      TYPE(qs_rho_type), POINTER :: rho1_xc
./qs_p_env_types.F:      TYPE(local_rho_type), POINTER                      :: local_rho_set
./qs_p_env_types.F:            IF (ASSOCIATED(p_env%rho1_xc)) THEN
./qs_p_env_types.F:               CALL qs_rho_release(p_env%rho1_xc)
./qs_p_env_types.F:            CALL qs_rho_release(p_env%rho1)
./qs_p_env_types.F:            IF (ASSOCIATED(p_env%local_rho_set)) THEN
./qs_p_env_types.F:               CALL local_rho_set_release(p_env%local_rho_set)
./qs_scf_post_dftb.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf_post_dftb.F:                                              qs_rho_type
./qs_scf_post_dftb.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_dftb.F:      NULLIFY (dft_control, rho, para_env, matrix_s, matrix_p)
./qs_scf_post_dftb.F:                      dft_control=dft_control, rho=rho, natom=natom, para_env=para_env, &
./qs_scf_post_dftb.F:      CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./xas_tp_scf.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./xas_tp_scf.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./xas_tp_scf.F:                                              qs_rho_type
./xas_tp_scf.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./xas_tp_scf.F:      TYPE(qs_rho_type), POINTER                         :: rho
./xas_tp_scf.F:      NULLIFY (xas_control, matrix_s, matrix_ks, para_env, rho_ao_kp)
./xas_tp_scf.F:      NULLIFY (rho, energy, scf_control, logger, ks_env, mos, atomic_kind_set)
./xas_tp_scf.F:      CALL get_qs_env(qs_env, matrix_ks=matrix_ks, rho=rho, mos=mos)
./xas_tp_scf.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./xas_tp_scf.F:         ! ** here qs_env%rho%rho_r and qs_env%rho%rho_g should be up to date
./xas_tp_scf.F:                                        scf_env%mixing_store, rho_ao_kp, para_env, scf_env%iter_delta, scf_env%iter_count, &
./xas_tp_scf.F:            CALL self_consistency_check(rho_ao_kp, scf_env%p_delta, para_env, scf_env%p_mix_new, &
./xas_tp_scf.F:               CALL dbcsr_copy(rho_ao_kp(ispin, 1)%matrix, scf_env%p_mix_new(ispin, 1)%matrix)
./xas_tp_scf.F:         ! ** update qs_env%rho
./xas_tp_scf.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./xas_tp_scf.F:            CALL gspace_mixing(qs_env, scf_env%mixing_method, scf_env%mixing_store, rho, para_env, &
./xas_tp_scf.F:         CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./xas_tp_scf.F:      CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./qs_efield_local.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_efield_local.F:                                              qs_rho_type
./qs_efield_local.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_efield_local.F:      NULLIFY (rho, matrix_p)
./qs_efield_local.F:      CALL get_qs_env(qs_env=qs_env, rho=rho)
./qs_efield_local.F:      CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_p_env_methods.F:   USE qs_local_rho_types,              ONLY: local_rho_set_create
./qs_p_env_methods.F:   USE qs_rho0_methods,                 ONLY: init_rho0
./qs_p_env_methods.F:   USE qs_rho_atom_methods,             ONLY: allocate_rho_atom_internals
./qs_p_env_methods.F:   USE qs_rho_methods,                  ONLY: qs_rho_rebuild,&
./qs_p_env_methods.F:                                              qs_rho_update_rho
./qs_p_env_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_create,&
./qs_p_env_methods.F:                                              qs_rho_get,&
./qs_p_env_methods.F:                                              qs_rho_type
./qs_p_env_methods.F:               p_env%rho1, &
./qs_p_env_methods.F:               p_env%rho1_xc, &
./qs_p_env_methods.F:               p_env%local_rho_set, &
./qs_p_env_methods.F:      CALL qs_rho_create(p_env%rho1)
./qs_p_env_methods.F:      CALL qs_rho_create(p_env%rho1_xc)
./qs_p_env_methods.F:         CALL local_rho_set_create(p_env%local_rho_set)
./qs_p_env_methods.F:         CALL allocate_rho_atom_internals(qs_env, p_env%local_rho_set%rho_atom_set)
./qs_p_env_methods.F:         CALL init_rho0(qs_env, dft_control%qs_control%gapw_control, &
./qs_p_env_methods.F:                        .TRUE., p_env%local_rho_set)
./qs_p_env_methods.F:         CALL qs_rho_rebuild(p_env%rho1, qs_env=qs_env)
./qs_p_env_methods.F:            CALL qs_rho_rebuild(p_env%rho1_xc, qs_env=qs_env)
./qs_p_env_methods.F:!> \param Hrho_psi0d is given, then the partial result Hrho_psi0d is stored in
./qs_p_env_methods.F:   SUBROUTINE p_env_psi0_changed(p_env, qs_env, psi0, Hrho_psi0d)
./qs_p_env_methods.F:         OPTIONAL                                        :: Hrho_psi0d
./qs_p_env_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho_ao
./qs_p_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_p_env_methods.F:      NULLIFY (ao_mo_fm_pools, mos, my_psi0, matrix_s, mos, para_env, ks_env, rho, &
./qs_p_env_methods.F:               logger, input, lr_section, energy, matrix_ks, dft_control, rho_ao)
./qs_p_env_methods.F:                      rho=rho, &
./qs_p_env_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_p_env_methods.F:               CALL dbcsr_set(rho_ao(spin)%matrix, 0.0_dp)
./qs_p_env_methods.F:               CALL cp_dbcsr_plus_fm_fm_t(rho_ao(spin)%matrix, &
./qs_p_env_methods.F:               CALL dbcsr_scale(rho_ao(spin)%matrix, alpha_scalar=maxocc)
./qs_p_env_methods.F:         ! updates rho
./qs_p_env_methods.F:         CALL qs_rho_update_rho(rho_struct=rho, qs_env=qs_env)
./qs_p_env_methods.F:         CALL qs_ks_did_change(ks_env=ks_env, rho_changed=.TRUE.)
./qs_p_env_methods.F:         IF (PRESENT(Hrho_psi0d)) THEN
./qs_p_env_methods.F:            CALL cp_fm_scale_and_add(alpha=0.0_dp, matrix_a=Hrho_psi0d(spin)%matrix, &
./qs_p_env_methods.F:!>      with kpp1 evaluated with p=qs_env%rho%rho_ao, p1=p1
./qs_p_env_methods.F:!>      qs_env%rho must be up to date
./qs_p_env_methods.F:!>      it would be better to pass rho1, not p1
./qs_p_env_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho1_ao
./qs_p_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_p_env_methods.F:      NULLIFY (dft_control, rho, rho1_ao)
./qs_p_env_methods.F:      CALL get_qs_env(qs_env, dft_control=dft_control, rho=rho)
./qs_p_env_methods.F:      CALL qs_rho_get(p_env%rho1, rho_ao=rho1_ao)
./qs_p_env_methods.F:         IF (.NOT. ASSOCIATED(rho1_ao(ispin)%matrix, p1(ispin)%matrix)) THEN
./qs_p_env_methods.F:            CALL dbcsr_copy(rho1_ao(ispin)%matrix, p1(ispin)%matrix)
./qs_p_env_methods.F:      CALL qs_rho_update_rho(rho_struct=p_env%rho1, qs_env=qs_env)
./qs_p_env_methods.F:                                     k_p_p1=p_env%kpp1, rho=rho, rho1=p_env%rho1)
./qs_p_env_methods.F:                               k_p_p1=p_env%kpp1, rho=rho, rho1=p_env%rho1, rho1_xc=p_env%rho1)
./qs_rho0_ggrid.F:MODULE qs_rho0_ggrid
./qs_rho0_ggrid.F:   USE qs_rho0_types,                   ONLY: get_rho0_mpole,&
./qs_rho0_ggrid.F:                                              rho0_mpole_type
./qs_rho0_ggrid.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_rho0_ggrid.F:                                              rho_atom_coeff,&
./qs_rho0_ggrid.F:                                              rho_atom_type
./qs_rho0_ggrid.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho0_ggrid'
./qs_rho0_ggrid.F:   PUBLIC :: put_rho0_on_grid, rho0_s_grid_create, integrate_vhg0_rspace
./qs_rho0_ggrid.F:!> \param rho0 ...
./qs_rho0_ggrid.F:   SUBROUTINE put_rho0_on_grid(qs_env, rho0, tot_rs_int)
./qs_rho0_ggrid.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0
./qs_rho0_ggrid.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'put_rho0_on_grid', &
./qs_rho0_ggrid.F:      REAL(KIND=dp)                                      :: eps_rho_rspace, rpgf0, zet0
./qs_rho0_ggrid.F:      TYPE(pw_p_type)                                    :: rho0_r_tmp
./qs_rho0_ggrid.F:      TYPE(pw_p_type), POINTER                           :: coeff_gspace, coeff_rspace, rho0_s_gs, &
./qs_rho0_ggrid.F:                                                            rho0_s_rs
./qs_rho0_ggrid.F:      NULLIFY (dft_control, pw_env, particle_set, para_env, cell, rho0_s_gs, rho0_s_rs)
./qs_rho0_ggrid.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_rho0_ggrid.F:      NULLIFY (rho0_s_gs, rho0_s_rs)
./qs_rho0_ggrid.F:      CALL get_rho0_mpole(rho0_mpole=rho0, lmax_0=lmax0, &
./qs_rho0_ggrid.F:                          rho0_s_gs=rho0_s_gs, &
./qs_rho0_ggrid.F:                          rho0_s_rs=rho0_s_rs)
./qs_rho0_ggrid.F:         CALL get_rho0_mpole(rho0_mpole=rho0, ikind=ikind, l0_ikind=l0_ikind)
./qs_rho0_ggrid.F:         CALL get_rho0_mpole(rho0_mpole=rho0, ikind=ikind, l0_ikind=l0_ikind, &
./qs_rho0_ggrid.F:            CALL get_rho0_mpole(rho0_mpole=rho0, iat=iatom, Qlm_car=Qlm_c)
./qs_rho0_ggrid.F:               rs_grid, cell, cube_info(igrid), eps_rho_rspace, ga_gb_function=401, &
./qs_rho0_ggrid.F:               ithread=ithread, collocate_rho0=.TRUE., rpgf0_s=rpgf0, &
./qs_rho0_ggrid.F:         CALL pw_zero(rho0_s_gs%pw)
./qs_rho0_ggrid.F:         CALL pw_axpy(coeff_gspace%pw, rho0_s_gs%pw)
./qs_rho0_ggrid.F:         CALL pw_pool_create_pw(pw_pool, rho0_r_tmp%pw, &
./qs_rho0_ggrid.F:         CALL rs_pw_transfer(rs_grid, rho0_r_tmp%pw, rs2pw)
./qs_rho0_ggrid.F:         tot_rs_int = pw_integrate_function(rho0_r_tmp%pw, isign=-1)
./qs_rho0_ggrid.F:         CALL pw_transfer(rho0_r_tmp%pw, rho0_s_rs%pw)
./qs_rho0_ggrid.F:         CALL pw_pool_give_back_pw(pw_pool, rho0_r_tmp%pw)
./qs_rho0_ggrid.F:         CALL pw_zero(rho0_s_gs%pw)
./qs_rho0_ggrid.F:         CALL pw_transfer(rho0_s_rs%pw, rho0_s_gs%pw)
./qs_rho0_ggrid.F:   END SUBROUTINE put_rho0_on_grid
./qs_rho0_ggrid.F:!> \param rho0_mpole ...
./qs_rho0_ggrid.F:   SUBROUTINE rho0_s_grid_create(qs_env, rho0_mpole, tddft)
./qs_rho0_ggrid.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_ggrid.F:      CHARACTER(len=*), PARAMETER :: routineN = 'rho0_s_grid_create', &
./qs_rho0_ggrid.F:      TYPE(pw_p_type), POINTER                           :: rho_gs, rho_rs
./qs_rho0_ggrid.F:      ! reallocate rho0 on the global grid in real and reciprocal space
./qs_rho0_ggrid.F:      NULLIFY (rho_rs, rho_gs)
./qs_rho0_ggrid.F:      CPASSERT(ASSOCIATED(rho0_mpole))
./qs_rho0_ggrid.F:      rho_rs => rho0_mpole%rho0_s_rs
./qs_rho0_ggrid.F:      rho_gs => rho0_mpole%rho0_s_gs
./qs_rho0_ggrid.F:      ! rho0 density in real space
./qs_rho0_ggrid.F:      IF (ASSOCIATED(rho_rs)) THEN
./qs_rho0_ggrid.F:         CALL pw_release(rho_rs%pw)
./qs_rho0_ggrid.F:         DEALLOCATE (rho_rs)
./qs_rho0_ggrid.F:      ALLOCATE (rho_rs)
./qs_rho0_ggrid.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_rs%pw, &
./qs_rho0_ggrid.F:      rho0_mpole%rho0_s_rs => rho_rs
./qs_rho0_ggrid.F:      ! rho0 density in reciprocal space
./qs_rho0_ggrid.F:      IF (ASSOCIATED(rho_gs)) THEN
./qs_rho0_ggrid.F:         CALL pw_release(rho_gs%pw)
./qs_rho0_ggrid.F:         DEALLOCATE (rho_gs)
./qs_rho0_ggrid.F:      ALLOCATE (rho_gs)
./qs_rho0_ggrid.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_gs%pw, &
./qs_rho0_ggrid.F:      rho_gs%pw%in_space = RECIPROCALSPACE
./qs_rho0_ggrid.F:      rho0_mpole%rho0_s_gs => rho_gs
./qs_rho0_ggrid.F:         rho0_mpole%igrid_zet0_s = qs_env%local_rho_set%rho0_mpole%igrid_zet0_s
./qs_rho0_ggrid.F:   END SUBROUTINE rho0_s_grid_create
./qs_rho0_ggrid.F:      REAL(dp)                                           :: c4pi, eps_rho_rspace, force_tmp(3), &
./qs_rho0_ggrid.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_ggrid.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_local_h, int_local_s
./qs_rho0_ggrid.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho0_ggrid.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_rho0_ggrid.F:      NULLIFY (cell, force, pw_env, rho0_mpole, rho_atom_set)
./qs_rho0_ggrid.F:                      rho0_mpole=rho0_mpole, &
./qs_rho0_ggrid.F:                      rho_atom_set=rho_atom_set, &
./qs_rho0_ggrid.F:         rho0_mpole => p_env%local_rho_set%rho0_mpole
./qs_rho0_ggrid.F:         rho_atom_set => p_env%local_rho_set%rho_atom_set
./qs_rho0_ggrid.F:      CALL get_rho0_mpole(rho0_mpole=rho0_mpole, lmax_0=lmax0, &
./qs_rho0_ggrid.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_rho0_ggrid.F:         CALL get_rho0_mpole(rho0_mpole=rho0_mpole, ikind=ikind, &
./qs_rho0_ggrid.F:               CALL get_rho0_mpole(rho0_mpole=rho0_mpole, iat=iatom, Qlm_tot=Qlm)
./qs_rho0_ggrid.F:                  eps_gvg_rspace=eps_rho_rspace, &
./qs_rho0_ggrid.F:                  collocate_rho0=.TRUE., rpgf0_s=rpgf0, &
./qs_rho0_ggrid.F:                  rho_atom => rho_atom_set(iatom)
./qs_rho0_ggrid.F:                  CALL get_rho_atom(rho_atom=rho_atom, ga_Vlocal_gb_h=int_local_h, ga_Vlocal_gb_s=int_local_s)
./qs_rho0_ggrid.F:END MODULE qs_rho0_ggrid
./xc_pot_saop.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./xc_pot_saop.F:   USE qs_local_rho_types,              ONLY: local_rho_set_create,&
./xc_pot_saop.F:                                              local_rho_set_release,&
./xc_pot_saop.F:                                              local_rho_type
./xc_pot_saop.F:   USE qs_rho_atom_methods,             ONLY: allocate_rho_atom_internals,&
./xc_pot_saop.F:                                              calculate_rho_atom_coeff
./xc_pot_saop.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./xc_pot_saop.F:                                              rho_atom_coeff,&
./xc_pot_saop.F:                                              rho_atom_type
./xc_pot_saop.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./xc_pot_saop.F:                                              qs_rho_type
./xc_pot_saop.F:   USE qs_vxc_atom,                     ONLY: calc_rho_angular,&
./xc_pot_saop.F:   USE xc_atom,                         ONLY: fill_rho_set,&
./xc_pot_saop.F:                                              xc_rho_set_atom_update
./xc_pot_saop.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_setall,&
./xc_pot_saop.F:                                              xc_rho_cflags_type
./xc_pot_saop.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./xc_pot_saop.F:                                              xc_rho_set_release,&
./xc_pot_saop.F:                                              xc_rho_set_type,&
./xc_pot_saop.F:                                              xc_rho_set_update
./xc_pot_saop.F:   REAL(KIND=dp), PARAMETER :: alpha = 1.19_dp, beta = 0.01_dp, K_rho = 0.42_dp
./xc_pot_saop.F:                                                            xc_rho_smooth_id
./xc_pot_saop.F:                                                            tau_cut, tot_rho_psi, we_GLLB, we_LB, &
./xc_pot_saop.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: orbital_density_matrix, rho_struct_ao
./xc_pot_saop.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r, rho_struct_r, tau, &
./xc_pot_saop.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./xc_pot_saop.F:      TYPE(xc_rho_cflags_type)                           :: needs
./xc_pot_saop.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc_pot_saop.F:      NULLIFY (rho_g, rho_r, tau, rho_struct, rho_set, e_uniform)
./xc_pot_saop.F:      NULLIFY (mo_eigenvalues, deriv_set, deriv, rho_struct_r, rho_struct_ao)
./xc_pot_saop.F:                      rho=rho_struct, &
./xc_pot_saop.F:      ALLOCATE (rho_r(nspins), single_mo_coeff(nspins))
./xc_pot_saop.F:      CALL qs_rho_get(rho_struct, rho_r=rho_struct_r, rho_ao=rho_struct_ao)
./xc_pot_saop.F:         rho_r(ispin)%pw => rho_struct_r(ispin)%pw
./xc_pot_saop.F:                         rho_struct_ao(ispin)%matrix, "orbital density")
./xc_pot_saop.F:      bo = rho_r(1)%pw%pw_grid%bounds_local
./xc_pot_saop.F:      CALL xc_rho_set_create(rho_set, bo, &
./xc_pot_saop.F:      CALL xc_rho_cflags_setall(needs, .FALSE.)
./xc_pot_saop.F:         needs%norm_drho = .TRUE.
./xc_pot_saop.F:                                i_val=xc_rho_smooth_id)
./xc_pot_saop.F:      CALL xc_rho_set_update(rho_set, rho_r, rho_g, tau, needs, &
./xc_pot_saop.F:                             xc_rho_smooth_id, &
./xc_pot_saop.F:      CALL xc_vxc_pw_create(vxc_tmp, vxc_tau, xc_energy, rho_r, rho_g, tau, &
./xc_pot_saop.F:      CALL xc_vxc_pw_create(vxc_LB, vxc_tau, xc_energy, rho_r, rho_g, tau, &
./xc_pot_saop.F:         CALL add_lb_pot(dummy, rho_set, lsd, ispin)
./xc_pot_saop.F:                               rho_set=rho_set, &
./xc_pot_saop.F:         CALL calc_2excpbe(dummy, rho_set, e_uniform, lsd)
./xc_pot_saop.F:            efac = K_rho*SQRT(mo_eigenvalues(homo)-mo_eigenvalues(orb))
./xc_pot_saop.F:            CALL calculate_rho_elec(matrix_p=orbital_density_matrix(ispin)%matrix, &
./xc_pot_saop.F:                                    rho=orbital, rho_gspace=orbital_g, &
./xc_pot_saop.F:                                    total_rho=tot_rho_psi, ks_env=ks_env)
./xc_pot_saop.F:                  IF (rho_r(ispin)%pw%cr3d(i, j, k) > density_cut) THEN
./xc_pot_saop.F:                                                       rho_r(ispin)%pw%cr3d(i, j, k)
./xc_pot_saop.F:            CALL calculate_rho_elec(matrix_p=orbital_density_matrix(ispin)%matrix, &
./xc_pot_saop.F:                                    rho=orbital, rho_gspace=orbital_g, &
./xc_pot_saop.F:                                    total_rho=tot_rho_psi, ks_env=ks_env)
./xc_pot_saop.F:                  IF (rho_r(ispin)%pw%cr3d(i, j, k) > density_cut) THEN
./xc_pot_saop.F:                                                        rho_r(ispin)%pw%cr3d(i, j, k)
./xc_pot_saop.F:      CALL xc_rho_set_release(rho_set, auxbas_pw_pool)
./xc_pot_saop.F:         CALL integrate_v_rspace(v_rspace=vxc_SAOP(ispin), pmat=rho_struct_ao(ispin), &
./xc_pot_saop.F:      DEALLOCATE (rho_r, vxc_SAOP)
./xc_pot_saop.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho_h, rho_s, weight
./xc_pot_saop.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER      :: drho_h, drho_s, vxg
./xc_pot_saop.F:                                                            rho_struct_ao
./xc_pot_saop.F:      TYPE(local_rho_type), POINTER                      :: local_rho_set
./xc_pot_saop.F:      TYPE(qs_rho_type), POINTER                         :: rho_structure
./xc_pot_saop.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: dr_h, dr_s, r_h, r_s
./xc_pot_saop.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER     :: r_h_d, r_s_d
./xc_pot_saop.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./xc_pot_saop.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./xc_pot_saop.F:      TYPE(xc_rho_cflags_type)                           :: needs, needs_orbs
./xc_pot_saop.F:      TYPE(xc_rho_set_type), POINTER                     :: orb_rho_set_h, orb_rho_set_s, rho_set_h, &
./xc_pot_saop.F:                                                            rho_set_s
./xc_pot_saop.F:      NULLIFY (weight, rho_h, rho_s, vxc_LB_h, vxc_LB_s, vxc_GLLB_h, vxc_GLLB_s, &
./xc_pot_saop.F:               vxc_tmp_h, vxc_tmp_s, vtau, dummy, e_uniform, drho_h, drho_s, vxg, atom_list, &
./xc_pot_saop.F:               atomic_kind_set, qs_kind_set, deriv_set, deriv, atomic_grid, rho_struct_ao, &
./xc_pot_saop.F:               harmonics, molecular_orbitals, rho_structure, r_h, r_s, dr_h, dr_s, &
./xc_pot_saop.F:               r_h_d, r_s_d, rho_atom_set, rho_atom, rho_set_h, rho_set_s, para_env, &
./xc_pot_saop.F:               mo_coeff, single_mo_coeff, mo_eigenvalues, local_rho_set, matrix_ks, &
./xc_pot_saop.F:               orbital_density_matrix, orb_rho_set_h, orb_rho_set_s, vxc_SAOP_h, vxc_SAOP_s)
./xc_pot_saop.F:      ! tau is needed for fill_rho_set, but should never be used
./xc_pot_saop.F:                      rho=rho_structure, &
./xc_pot_saop.F:                      rho_atom_set=rho_atom_set, &
./xc_pot_saop.F:      CALL qs_rho_get(rho_structure, rho_ao=rho_struct_ao)
./xc_pot_saop.F:      ns = SIZE(rho_struct_ao)
./xc_pot_saop.F:      psmat(1:ns, 1:1) => rho_struct_ao(1:ns)
./xc_pot_saop.F:      CALL calculate_rho_atom_coeff(qs_env, psmat)
./xc_pot_saop.F:                         rho_struct_ao(ispin)%matrix, &
./xc_pot_saop.F:      CALL local_rho_set_create(local_rho_set)
./xc_pot_saop.F:      CALL allocate_rho_atom_internals(qs_env, local_rho_set%rho_atom_set)
./xc_pot_saop.F:         CALL xc_rho_set_create(rho_set_h, bounds, density_cut, &
./xc_pot_saop.F:         CALL xc_rho_set_create(rho_set_s, bounds, density_cut, &
./xc_pot_saop.F:         CALL xc_rho_set_create(orb_rho_set_h, bounds, density_cut, &
./xc_pot_saop.F:         CALL xc_rho_set_create(orb_rho_set_s, bounds, density_cut, &
./xc_pot_saop.F:         CALL xc_rho_cflags_setall(needs, .FALSE.)
./xc_pot_saop.F:            needs%norm_drho = .TRUE.
./xc_pot_saop.F:         CALL xc_rho_set_atom_update(rho_set_h, needs, nspins, bounds)
./xc_pot_saop.F:         CALL xc_rho_set_atom_update(rho_set_s, needs, nspins, bounds)
./xc_pot_saop.F:         CALL xc_rho_cflags_setall(needs_orbs, .FALSE.)
./xc_pot_saop.F:         needs_orbs%rho = .TRUE.
./xc_pot_saop.F:         IF (lsd) needs_orbs%rho_spin = .TRUE.
./xc_pot_saop.F:         CALL xc_rho_set_atom_update(orb_rho_set_h, needs, nspins, bounds)
./xc_pot_saop.F:         CALL xc_rho_set_atom_update(orb_rho_set_s, needs, nspins, bounds)
./xc_pot_saop.F:         ALLOCATE (rho_h(1:na, 1:nspins), rho_s(1:na, 1:nspins))
./xc_pot_saop.F:         ALLOCATE (drho_h(1:4, 1:na, 1:nr, 1:nspins), drho_s(1:4, 1:na, 1:nr, 1:nspins))
./xc_pot_saop.F:            rho_atom => rho_atom_set(iatom)
./xc_pot_saop.F:            CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=r_h, &
./xc_pot_saop.F:                              rho_rad_s=r_s, drho_rad_h=dr_h, &
./xc_pot_saop.F:                              drho_rad_s=dr_s, rho_rad_h_d=r_h_d, &
./xc_pot_saop.F:                              rho_rad_s_d=r_s_d)
./xc_pot_saop.F:            drho_h = 0.0_dp
./xc_pot_saop.F:            drho_s = 0.0_dp
./xc_pot_saop.F:               CALL calc_rho_angular(atomic_grid, harmonics, nspins, .TRUE., &
./xc_pot_saop.F:                                     ir, r_h, r_s, rho_h, rho_s, &
./xc_pot_saop.F:                                     dr_h, dr_s, r_h_d, r_s_d, drho_h, drho_s)
./xc_pot_saop.F:               CALL fill_rho_set(rho_set_h, lsd, nspins, needs, rho_h, drho_h, tau, na, ir)
./xc_pot_saop.F:               CALL fill_rho_set(rho_set_s, lsd, nspins, needs, rho_s, drho_s, tau, na, ir)
./xc_pot_saop.F:            CALL vxc_of_r_new(xc_fun_section_tmp, rho_set_h, deriv_set, 1, needs, &
./xc_pot_saop.F:            CALL vxc_of_r_new(xc_fun_section_tmp, rho_set_s, deriv_set, 1, needs, &
./xc_pot_saop.F:            CALL vxc_of_r_new(xc_fun_section_tmp, rho_set_h, deriv_set, 1, needs, &
./xc_pot_saop.F:               CALL add_lb_pot(dummy, rho_set_h, lsd, ispin)
./xc_pot_saop.F:               CALL calc_2excpbe(dummy, rho_set_h, e_uniform, lsd)
./xc_pot_saop.F:            CALL vxc_of_r_new(xc_fun_section_tmp, rho_set_s, deriv_set, 1, needs, &
./xc_pot_saop.F:               CALL add_lb_pot(dummy, rho_set_s, lsd, ispin)
./xc_pot_saop.F:               CALL calc_2excpbe(dummy, rho_set_s, e_uniform, lsd)
./xc_pot_saop.F:                  efac = K_rho*SQRT(mo_eigenvalues(ispin)%array(homo(ispin))- &
./xc_pot_saop.F:                  CALL calculate_rho_atom_coeff(qs_env, psmat, &
./xc_pot_saop.F:                                                local_rho_set%rho_atom_set)
./xc_pot_saop.F:                  CALL prepare_gapw_den(qs_env, local_rho_set, .FALSE.)
./xc_pot_saop.F:                  rho_atom => local_rho_set%rho_atom_set(iatom)
./xc_pot_saop.F:                  CALL get_rho_atom(rho_atom=rho_atom, &
./xc_pot_saop.F:                                    rho_rad_h=r_h, rho_rad_s=r_s)
./xc_pot_saop.F:                     CALL calc_rho_angular(atomic_grid, harmonics, nspins, .FALSE., &
./xc_pot_saop.F:                                           ir, r_h, r_s, rho_h, rho_s, &
./xc_pot_saop.F:                                           dr_h, dr_s, r_h_d, r_s_d, drho_h, drho_s)
./xc_pot_saop.F:                     CALL fill_rho_set(orb_rho_set_h, lsd, nspins, needs_orbs, rho_h, drho_h, tau, na, ir)
./xc_pot_saop.F:                     CALL fill_rho_set(orb_rho_set_s, lsd, nspins, needs_orbs, rho_s, drho_s, tau, na, ir)
./xc_pot_saop.F:                        vxc_tmp_h(:, :, 1) = vxc_tmp_h(:, :, 1)+efac*orb_rho_set_h%rhoa(:, :, 1)
./xc_pot_saop.F:                        vxc_tmp_s(:, :, 1) = vxc_tmp_s(:, :, 1)+efac*orb_rho_set_s%rhoa(:, :, 1)
./xc_pot_saop.F:                        vxc_tmp_h(:, :, 2) = vxc_tmp_h(:, :, 2)+efac*orb_rho_set_h%rhob(:, :, 1)
./xc_pot_saop.F:                        vxc_tmp_s(:, :, 2) = vxc_tmp_s(:, :, 2)+efac*orb_rho_set_s%rhob(:, :, 1)
./xc_pot_saop.F:                     vxc_tmp_h(:, :, 1) = vxc_tmp_h(:, :, 1)+efac*orb_rho_set_h%rho(:, :, 1)
./xc_pot_saop.F:                     vxc_tmp_s(:, :, 1) = vxc_tmp_s(:, :, 1)+efac*orb_rho_set_s%rho(:, :, 1)
./xc_pot_saop.F:                     IF (rho_set_h%rhoa(ia, ir, 1) > rho_set_h%rho_cutoff) &
./xc_pot_saop.F:                                                weight(ia, ir)*vxc_tmp_h(ia, ir, 1)/rho_set_h%rhoa(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_h%rhob(ia, ir, 1) > rho_set_h%rho_cutoff) &
./xc_pot_saop.F:                                                weight(ia, ir)*vxc_tmp_h(ia, ir, 2)/rho_set_h%rhob(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_s%rhoa(ia, ir, 1) > rho_set_s%rho_cutoff) &
./xc_pot_saop.F:                                                weight(ia, ir)*vxc_tmp_s(ia, ir, 1)/rho_set_s%rhoa(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_s%rhob(ia, ir, 1) > rho_set_s%rho_cutoff) &
./xc_pot_saop.F:                                                weight(ia, ir)*vxc_tmp_s(ia, ir, 2)/rho_set_s%rhob(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_h%rho(ia, ir, 1) > rho_set_h%rho_cutoff) &
./xc_pot_saop.F:                                                weight(ia, ir)*vxc_tmp_h(ia, ir, 1)/rho_set_h%rho(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_s%rho(ia, ir, 1) > rho_set_s%rho_cutoff) &
./xc_pot_saop.F:                                                weight(ia, ir)*vxc_tmp_s(ia, ir, 1)/rho_set_s%rho(ia, ir, 1)
./xc_pot_saop.F:                  CALL calculate_rho_atom_coeff(qs_env, psmat, &
./xc_pot_saop.F:                                                local_rho_set%rho_atom_set)
./xc_pot_saop.F:                  CALL prepare_gapw_den(qs_env, local_rho_set, .FALSE.)
./xc_pot_saop.F:                  rho_atom => local_rho_set%rho_atom_set(iatom)
./xc_pot_saop.F:                  CALL get_rho_atom(rho_atom=rho_atom, &
./xc_pot_saop.F:                                    rho_rad_h=r_h, rho_rad_s=r_s)
./xc_pot_saop.F:                     CALL calc_rho_angular(atomic_grid, harmonics, nspins, .FALSE., &
./xc_pot_saop.F:                                           ir, r_h, r_s, rho_h, rho_s, &
./xc_pot_saop.F:                                           dr_h, dr_s, r_h_d, r_s_d, drho_h, drho_s)
./xc_pot_saop.F:                     CALL fill_rho_set(orb_rho_set_h, lsd, nspins, needs_orbs, rho_h, drho_h, tau, na, ir)
./xc_pot_saop.F:                     CALL fill_rho_set(orb_rho_set_s, lsd, nspins, needs_orbs, rho_s, drho_s, tau, na, ir)
./xc_pot_saop.F:                        vxc_SAOP_h(:, :, 1) = vxc_SAOP_h(:, :, 1)+vxc_tmp_h(:, :, 1)*orb_rho_set_h%rhoa(:, :, 1)
./xc_pot_saop.F:                        vxc_SAOP_s(:, :, 1) = vxc_SAOP_s(:, :, 1)+vxc_tmp_s(:, :, 1)*orb_rho_set_s%rhoa(:, :, 1)
./xc_pot_saop.F:                        vxc_SAOP_h(:, :, 2) = vxc_SAOP_h(:, :, 2)+vxc_tmp_h(:, :, 2)*orb_rho_set_h%rhob(:, :, 1)
./xc_pot_saop.F:                        vxc_SAOP_s(:, :, 2) = vxc_SAOP_s(:, :, 2)+vxc_tmp_s(:, :, 2)*orb_rho_set_s%rhob(:, :, 1)
./xc_pot_saop.F:                     vxc_SAOP_h(:, :, 1) = vxc_SAOP_h(:, :, 1)+vxc_tmp_h(:, :, 1)*orb_rho_set_h%rho(:, :, 1)
./xc_pot_saop.F:                     vxc_SAOP_s(:, :, 1) = vxc_SAOP_s(:, :, 1)+vxc_tmp_s(:, :, 1)*orb_rho_set_s%rho(:, :, 1)
./xc_pot_saop.F:                     IF (rho_set_h%rhoa(ia, ir, 1) > rho_set_h%rho_cutoff) THEN
./xc_pot_saop.F:                        vxc_SAOP_h(ia, ir, 1) = vxc_SAOP_h(ia, ir, 1)/rho_set_h%rhoa(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_h%rhob(ia, ir, 1) > rho_set_h%rho_cutoff) THEN
./xc_pot_saop.F:                        vxc_SAOP_h(ia, ir, 2) = vxc_SAOP_h(ia, ir, 2)/rho_set_h%rhob(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_s%rhoa(ia, ir, 1) > rho_set_s%rho_cutoff) THEN
./xc_pot_saop.F:                        vxc_SAOP_s(ia, ir, 1) = vxc_SAOP_s(ia, ir, 1)/rho_set_s%rhoa(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_s%rhob(ia, ir, 1) > rho_set_s%rho_cutoff) THEN
./xc_pot_saop.F:                        vxc_SAOP_s(ia, ir, 2) = vxc_SAOP_s(ia, ir, 2)/rho_set_s%rhob(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_h%rho(ia, ir, 1) > rho_set_h%rho_cutoff) THEN
./xc_pot_saop.F:                        vxc_SAOP_h(ia, ir, 1) = vxc_SAOP_h(ia, ir, 1)/rho_set_h%rho(ia, ir, 1)
./xc_pot_saop.F:                     IF (rho_set_s%rho(ia, ir, 1) > rho_set_s%rho_cutoff) THEN
./xc_pot_saop.F:                        vxc_SAOP_s(ia, ir, 1) = vxc_SAOP_s(ia, ir, 1)/rho_set_s%rho(ia, ir, 1)
./xc_pot_saop.F:            rho_atom => rho_atom_set(iatom)
./xc_pot_saop.F:               CALL gaVxcgb_noGC(vxc_LB_h, vxc_LB_s, qs_kind_set(ikind), rho_atom, nspins)
./xc_pot_saop.F:               CALL gaVxcgb_noGC(vxc_GLLB_h, vxc_GLLB_s, qs_kind_set(ikind), rho_atom, nspins)
./xc_pot_saop.F:               CALL gaVxcgb_noGC(vxc_SAOP_h, vxc_SAOP_s, qs_kind_set(ikind), rho_atom, nspins)
./xc_pot_saop.F:         DEALLOCATE (rho_h, rho_s, weight)
./xc_pot_saop.F:         DEALLOCATE (drho_h, drho_s)
./xc_pot_saop.F:         CALL xc_rho_set_release(rho_set_h)
./xc_pot_saop.F:         CALL xc_rho_set_release(rho_set_s)
./xc_pot_saop.F:         CALL xc_rho_set_release(orb_rho_set_h)
./xc_pot_saop.F:         CALL xc_rho_set_release(orb_rho_set_s)
./xc_pot_saop.F:      ns = SIZE(rho_struct_ao)
./xc_pot_saop.F:      psmat(1:ns, 1:1) => rho_struct_ao(1:ns)
./xc_pot_saop.F:      CALL local_rho_set_release(local_rho_set)
./xc_pot_saop.F:!> \param rho_set ...
./xc_pot_saop.F:   SUBROUTINE add_lb_pot(pot, rho_set, lsd, spin)
./xc_pot_saop.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc_pot_saop.F:      bo = rho_set%local_bounds
./xc_pot_saop.F:                  IF (rho_set%rho(i, j, k) > rho_set%rho_cutoff) THEN
./xc_pot_saop.F:                     n = rho_set%rho(i, j, k)/2.0_dp
./xc_pot_saop.F:                     x = (rho_set%norm_drho(i, j, k)/2.0_dp)/(n*n_13)
./xc_pot_saop.F:                     IF (rho_set%rhoa(i, j, k) > rho_set%rho_cutoff) THEN
./xc_pot_saop.F:                        n_13 = rho_set%rhoa_1_3(i, j, k)
./xc_pot_saop.F:                        x = rho_set%norm_drhoa(i, j, k)/(rho_set%rhoa(i, j, k)*n_13)
./xc_pot_saop.F:                     IF (rho_set%rhob(i, j, k) > rho_set%rho_cutoff) THEN
./xc_pot_saop.F:                        n_13 = rho_set%rhob_1_3(i, j, k)
./xc_pot_saop.F:                        x = rho_set%norm_drhob(i, j, k)/(rho_set%rhob(i, j, k)*n_13)
./xc_pot_saop.F:!> \param rho_set ...
./xc_pot_saop.F:   SUBROUTINE calc_2excpbe(pot, rho_set, e_uniform, lsd)
./xc_pot_saop.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./xc_pot_saop.F:      REAL(KIND=dp)                                      :: e_unif, rho
./xc_pot_saop.F:      bo = rho_set%local_bounds
./xc_pot_saop.F:                  IF (rho_set%rho(i, j, k) > rho_set%rho_cutoff) THEN
./xc_pot_saop.F:                     e_unif = e_uniform(i, j, k)/rho_set%rho(i, j, k)
./xc_pot_saop.F:                     calc_ecpbe_r(rho_set%rho(i, j, k), rho_set%norm_drho(i, j, k), &
./xc_pot_saop.F:                                  e_unif, rho_set%rho_cutoff, rho_set%drho_cutoff)+ &
./xc_pot_saop.F:                     calc_expbe_r(rho_set%rho(i, j, k), rho_set%norm_drho(i, j, k), &
./xc_pot_saop.F:                                  rho_set%rho_cutoff, rho_set%drho_cutoff)
./xc_pot_saop.F:                  rho = rho_set%rhoa(i, j, k)+rho_set%rhob(i, j, k)
./xc_pot_saop.F:                  IF (rho > rho_set%rho_cutoff) THEN
./xc_pot_saop.F:                     e_unif = e_uniform(i, j, k)/rho
./xc_pot_saop.F:                     calc_ecpbe_u(rho_set%rhoa(i, j, k), rho_set%rhob(i, j, k), rho_set%norm_drho(i, j, k), &
./xc_pot_saop.F:                                  rho_set%rho_cutoff, rho_set%drho_cutoff)+ &
./xc_pot_saop.F:                     calc_expbe_u(rho_set%rhoa(i, j, k), rho_set%rhob(i, j, k), rho_set%norm_drho(i, j, k), &
./xc_pot_saop.F:                                  rho_set%rho_cutoff, rho_set%drho_cutoff)
./dm_ls_scf_qs.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./dm_ls_scf_qs.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./dm_ls_scf_qs.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./dm_ls_scf_qs.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./dm_ls_scf_qs.F:                                              qs_rho_type
./dm_ls_scf_qs.F:             ls_scf_dm_to_ks, ls_scf_qs_atomic_guess, write_matrix_to_cube, rho_mixing_ls_init, &
./dm_ls_scf_qs.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho_ao
./dm_ls_scf_qs.F:      TYPE(qs_rho_type), POINTER                         :: rho
./dm_ls_scf_qs.F:      NULLIFY (rho, rho_ao)
./dm_ls_scf_qs.F:                      rho=rho)
./dm_ls_scf_qs.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./dm_ls_scf_qs.F:         CALL calculate_mopac_dm(rho_ao, matrix_s(1)%matrix, has_unit_metric, &
./dm_ls_scf_qs.F:         CALL calculate_atomic_block_dm(rho_ao, matrix_s(1)%matrix, &
./dm_ls_scf_qs.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./dm_ls_scf_qs.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./dm_ls_scf_qs.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./dm_ls_scf_qs.F:      TYPE(qs_rho_type), POINTER                         :: rho
./dm_ls_scf_qs.F:      NULLIFY (energy, rho, rho_ao)
./dm_ls_scf_qs.F:      CALL get_qs_env(qs_env, para_env=para_env, energy=energy, rho=rho)
./dm_ls_scf_qs.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./dm_ls_scf_qs.F:         CALL matrix_ls_to_qs(rho_ao(ispin)%matrix, ls_scf_env%matrix_p(ispin), &
./dm_ls_scf_qs.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./dm_ls_scf_qs.F:      IF (ls_scf_env%do_rho_mixing) THEN
./dm_ls_scf_qs.F:                                  ls_scf_env%mixing_store, rho, para_env, &
./dm_ls_scf_qs.F:                     " to mix rho: method=", ls_scf_env%mixing_store%iter_method, ", iscf=", iscf
./dm_ls_scf_qs.F:                     " rho_nw=", ls_scf_env%mixing_store%alpha, "*rho + ", &
./dm_ls_scf_qs.F:                     1.0_dp-ls_scf_env%mixing_store%alpha, "*rho_old"
./dm_ls_scf_qs.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./dm_ls_scf_qs.F:      REAL(KIND=dp)                                      :: tot_rho
./dm_ls_scf_qs.F:      CALL calculate_rho_elec(matrix_p=matrix_p_qs, &
./dm_ls_scf_qs.F:                              rho=wf_r, &
./dm_ls_scf_qs.F:                              rho_gspace=wf_g, &
./dm_ls_scf_qs.F:                              total_rho=tot_rho, &
./dm_ls_scf_qs.F:   SUBROUTINE rho_mixing_ls_init(qs_env, ls_scf_env)
./dm_ls_scf_qs.F:      CHARACTER(len=*), PARAMETER :: routineN = 'rho_mixing_ls_init', &
./dm_ls_scf_qs.F:      TYPE(qs_rho_type), POINTER                         :: rho
./dm_ls_scf_qs.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./dm_ls_scf_qs.F:                      rho=rho)
./dm_ls_scf_qs.F:            CALL get_qs_env(qs_env, rho_atom_set=rho_atom)
./dm_ls_scf_qs.F:            CALL mixing_init(ls_scf_env%density_mixing_method, rho, ls_scf_env%mixing_store, &
./dm_ls_scf_qs.F:                             ls_scf_env%para_env, rho_atom=rho_atom)
./dm_ls_scf_qs.F:            CALL mixing_init(ls_scf_env%density_mixing_method, rho, ls_scf_env%mixing_store, &
./dm_ls_scf_qs.F:   END SUBROUTINE rho_mixing_ls_init
./pw_poisson_read_input.F:      CALL section_vals_val_get(dielectric_section, "rho_min", r_val=params%dielectric_params%rho_min)
./pw_poisson_read_input.F:      CALL section_vals_val_get(dielectric_section, "rho_max", r_val=params%dielectric_params%rho_max)
./rs_pw_interface.F:!> \param rs_rho ...
./rs_pw_interface.F:!> \param rho ...
./rs_pw_interface.F:!> \param rho_gspace ...
./rs_pw_interface.F:   SUBROUTINE density_rs2pw(pw_env, rs_rho, rho, rho_gspace)
./rs_pw_interface.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_rho
./rs_pw_interface.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho, rho_gspace
./rs_pw_interface.F:         CALL rs_pw_transfer(rs_rho(1)%rs_grid, rho%pw, rs2pw)
./rs_pw_interface.F:         CALL rs_grid_release(rs_rho(1)%rs_grid)
./rs_pw_interface.F:         CALL pw_transfer(rho%pw, rho_gspace%pw)
./rs_pw_interface.F:         IF (rho%pw%pw_grid%spherical) THEN ! rho_gspace = rho
./rs_pw_interface.F:            CALL pw_transfer(rho_gspace%pw, rho%pw)
./rs_pw_interface.F:            CALL rs_pw_transfer(rs_rho(igrid_level)%rs_grid, &
./rs_pw_interface.F:            CALL rs_grid_release(rs_rho(igrid_level)%rs_grid)
./rs_pw_interface.F:         ! we want both rho and rho_gspace, the latter for Hartree and co-workers.
./rs_pw_interface.F:            CALL pw_zero(rho_gspace%pw)
./rs_pw_interface.F:               CALL pw_axpy(mgrid_gspace(igrid_level)%pw, rho_gspace%pw)
./rs_pw_interface.F:            CALL pw_transfer(rho_gspace%pw, rho%pw)
./rs_pw_interface.F:            CALL pw_copy(mgrid_rspace(1)%pw, rho%pw)
./rs_pw_interface.F:            CALL pw_transfer(rho%pw, rho_gspace%pw)
./rs_pw_interface.F:!> \param rs_rho ...
./rs_pw_interface.F:!> \param rho ...
./rs_pw_interface.F:!> \param rho_gspace ...
./rs_pw_interface.F:   SUBROUTINE density_rs2pw_basic(pw_env, rs_rho, rho, rho_gspace)
./rs_pw_interface.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_rho
./rs_pw_interface.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho, rho_gspace
./rs_pw_interface.F:         CALL rs_pw_transfer(rs_rho(1)%rs_grid, rho%pw, rs2pw)
./rs_pw_interface.F:         CALL pw_transfer(rho%pw, rho_gspace%pw)
./rs_pw_interface.F:            CALL rs_pw_transfer(rs_rho(igrid_level)%rs_grid, &
./rs_pw_interface.F:         ! we want both rho and rho_gspace, the latter for Hartree and co-workers.
./rs_pw_interface.F:            CALL pw_transfer(mgrid_gspace(1)%pw, rho%pw)
./rs_pw_interface.F:            CALL pw_transfer(mgrid_rspace(1)%pw, rho_gspace%pw)
./rs_pw_interface.F:            CALL pw_copy(mgrid_rspace(1)%pw, rho%pw)
./rs_pw_interface.F:            CALL pw_transfer(rho%pw, rho_gspace%pw)
./qmmm_pw_grid.F:      pw_grid_out%orthorhombic = pw_grid_in%orthorhombic
./qs_linres_epr_ownutils.F:                                              jrho_atom_type,&
./qs_linres_epr_ownutils.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_linres_epr_ownutils.F:                                              rho_atom_coeff,&
./qs_linres_epr_ownutils.F:                                              rho_atom_type
./qs_linres_epr_ownutils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_linres_epr_ownutils.F:                                              qs_rho_p_type,&
./qs_linres_epr_ownutils.F:                                              qs_rho_type
./qs_linres_epr_ownutils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: kinetic, rho_ao
./qs_linres_epr_ownutils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_linres_epr_ownutils.F:      NULLIFY (dft_control, logger, lr_section, rho, kinetic, para_env, rho_ao)
./qs_linres_epr_ownutils.F:                      kinetic=kinetic, rho=rho, para_env=para_env)
./qs_linres_epr_ownutils.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_linres_epr_ownutils.F:         CALL calculate_ptrace(kinetic(1)%matrix, rho_ao(ispin)%matrix, &
./qs_linres_epr_ownutils.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_epr_ownutils.F:      TYPE(jrho_atom_type), POINTER                      :: jrho1_atom
./qs_linres_epr_ownutils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: jrho2_r, jrho3_r, nrho1_r, nrho2_r, &
./qs_linres_epr_ownutils.F:                                                            nrho3_r
./qs_linres_epr_ownutils.F:      TYPE(qs_rho_p_type), DIMENSION(:), POINTER         :: jrho1_set
./qs_linres_epr_ownutils.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), POINTER      :: nablavks_set
./qs_linres_epr_ownutils.F:               grid_atom, g_so, g_total, harmonics, interp_section, jrho1_atom_set, &
./qs_linres_epr_ownutils.F:               jrho1_set, logger, lr_section, nablavks_atom, nablavks_atom_set, &
./qs_linres_epr_ownutils.F:               nablavks_set, para_env, particle_set, jrho2_r, jrho3_r, nrho1_r, nrho2_r, nrho3_r)
./qs_linres_epr_ownutils.F:                           jrho1_set=jrho1_set, jrho1_atom_set=jrho1_atom_set)
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(jrho1_set(idir2)%rho, rho_r=jrho2_r)
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(jrho1_set(idir3)%rho, rho_r=jrho3_r)
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(nablavks_set(idir2, ispin)%rho, rho_r=nrho2_r)
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(nablavks_set(idir3, ispin)%rho, rho_r=nrho3_r)
./qs_linres_epr_ownutils.F:                           pw_integral_ab(jrho2_r(ispin)%pw, nrho3_r(1)%pw)- &
./qs_linres_epr_ownutils.F:                           pw_integral_ab(jrho3_r(ispin)%pw, nrho2_r(1)%pw))
./qs_linres_epr_ownutils.F:               CALL qs_rho_get(nablavks_set(idir1, ispin)%rho, rho_r=nrho1_r)
./qs_linres_epr_ownutils.F:               CALL pw_spline_do_precond(precond, nrho1_r(1)%pw, &
./qs_linres_epr_ownutils.F:               success = find_coeffs(values=nrho1_r(1)%pw, &
./qs_linres_epr_ownutils.F:               NULLIFY (jrho1_atom, nablavks_atom)
./qs_linres_epr_ownutils.F:               jrho1_atom => jrho1_atom_set(iatom)
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_h(idir2, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_h(idir3, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_s(idir2, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_s(idir3, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_h(idir2, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_h(idir3, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_h(idir2, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:                                                     jrho1_atom%jrho_vec_rad_h(idir3, ispin)%r_coef(ir, ia)* &
./qs_linres_epr_ownutils.F:!                               jrho1_atom%jrho_vec_rad_h(idir2,iB,ispin)%r_coef(ir,ia) * &
./qs_linres_epr_ownutils.F:!                               jrho1_atom%jrho_vec_rad_h(idir3,iB,ispin)%r_coef(ir,ia) * &
./qs_linres_epr_ownutils.F:!                               jrho1_atom%jrho_vec_rad_s(idir2,iB,ispin)%r_coef(ir,ia) * &
./qs_linres_epr_ownutils.F:!                               jrho1_atom%jrho_vec_rad_s(idir3,iB,ispin)%r_coef(ir,ia) * &
./qs_linres_epr_ownutils.F:      LOGICAL                                            :: gapw, paw_atom, soo_rho_hard, success
./qs_linres_epr_ownutils.F:                                                            eps_r, eps_x, hard_radius, rho_spin, &
./qs_linres_epr_ownutils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: brho1_r, rho_r
./qs_linres_epr_ownutils.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), POINTER      :: bind_set
./qs_linres_epr_ownutils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_linres_epr_ownutils.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: rho_rad_h, rho_rad_s
./qs_linres_epr_ownutils.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_linres_epr_ownutils.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_linres_epr_ownutils.F:               logger, lr_section, para_env, particle_set, rho, rho_atom, &
./qs_linres_epr_ownutils.F:               rho_atom_set, rho_r, brho1_r)
./qs_linres_epr_ownutils.F:      CALL section_vals_val_get(g_section, "soo_rho_hard", l_val=soo_rho_hard)
./qs_linres_epr_ownutils.F:                      pw_env=pw_env, rho=rho, rho_atom_set=rho_atom_set)
./qs_linres_epr_ownutils.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(bind_set(idir1, iB)%rho, rho_r=brho1_r)
./qs_linres_epr_ownutils.F:                            pw_integral_ab(brho1_r(1)%pw, rho_r(ispin)%pw)
./qs_linres_epr_ownutils.F:      IF (gapw .AND. soo_rho_hard) THEN
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(bind_set(idir1, iB)%rho, rho_r=brho1_r)
./qs_linres_epr_ownutils.F:            CALL pw_spline_do_precond(precond, brho1_r(1)%pw, &
./qs_linres_epr_ownutils.F:            success = find_coeffs(values=brho1_r(1)%pw, &
./qs_linres_epr_ownutils.F:               rho_atom => rho_atom_set(iatom)
./qs_linres_epr_ownutils.F:               NULLIFY (rho_rad_h, rho_rad_s)
./qs_linres_epr_ownutils.F:               CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=rho_rad_h, &
./qs_linres_epr_ownutils.F:                                 rho_rad_s=rho_rad_s)
./qs_linres_epr_ownutils.F:                           rho_spin = 0.0_dp
./qs_linres_epr_ownutils.F:                              rho_spin = rho_spin+ &
./qs_linres_epr_ownutils.F:                                         (rho_rad_h(ispin)%r_coef(ir, iso)- &
./qs_linres_epr_ownutils.F:                                          rho_rad_s(ispin)%r_coef(ir, iso))* &
./qs_linres_epr_ownutils.F:                                                      bind_ra_idir1*rho_spin &
./qs_linres_epr_ownutils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: epr_rho_r, jrho1_g
./qs_linres_epr_ownutils.F:      TYPE(pw_p_type), POINTER                           :: rho_gspace
./qs_linres_epr_ownutils.F:               rho_gspace, pw_pools, particle_set, jrho1_g, epr_rho_r)
./qs_linres_epr_ownutils.F:      ! Allocate grids for the calculation of jrho and the shift
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(current_env%jrho1_set(idir)%rho, rho_g=jrho1_g)
./qs_linres_epr_ownutils.F:            rho_gspace => jrho1_g(ispin)
./qs_linres_epr_ownutils.F:                  CALL mult_G_ov_G2_grid(cell, auxbas_pw_pool, rho_gspace, &
./qs_linres_epr_ownutils.F:            CALL qs_rho_get(epr_env%bind_set(idir, iB)%rho, rho_r=epr_rho_r)
./qs_linres_epr_ownutils.F:            CALL pw_transfer(shift_pw_gspace(idir, 2)%pw, epr_rho_r(1)%pw)
./qs_linres_epr_ownutils.F:      ! Dellocate grids for the calculation of jrho and the shift
./kg_correction.F:                                              lri_kg_rho_update
./kg_correction.F:   USE qs_rho_methods,                  ONLY: qs_rho_rebuild,&
./kg_correction.F:                                              qs_rho_update_rho
./kg_correction.F:   USE qs_rho_types,                    ONLY: qs_rho_create,&
./kg_correction.F:                                              qs_rho_get,&
./kg_correction.F:                                              qs_rho_release,&
./kg_correction.F:                                              qs_rho_set,&
./kg_correction.F:                                              qs_rho_type
./kg_correction.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau
./kg_correction.F:      TYPE(qs_rho_type), POINTER                         :: old_rho, rho_struct
./kg_correction.F:      NULLIFY (vxc_rho, vxc_tau, old_rho, rho_struct, ks_env)
./kg_correction.F:                      rho=old_rho, &
./kg_correction.F:      CALL qs_rho_get(old_rho, rho_ao=density_matrix)
./kg_correction.F:      CALL qs_rho_create(rho_struct)
./kg_correction.F:      CALL qs_rho_set(rho_struct, rho_ao=density_matrix) ! blocked_matrix
./kg_correction.F:      CALL qs_rho_rebuild(rho_struct, qs_env, rebuild_ao=.FALSE., rebuild_grids=.TRUE.)
./kg_correction.F:      CALL qs_rho_update_rho(rho_struct, qs_env)
./kg_correction.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=kg_env%xc_section_kg, &
./kg_correction.F:                         vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=ekin_imol)
./kg_correction.F:         vxc_rho(ispin)%pw%cr3d = vxc_rho(ispin)%pw%cr3d*vxc_rho(ispin)%pw%pw_grid%dvol
./kg_correction.F:         CALL integrate_v_rspace(v_rspace=vxc_rho(ispin), &
./kg_correction.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./kg_correction.F:      DEALLOCATE (vxc_rho)
./kg_correction.F:         CALL qs_rho_update_rho(rho_struct, qs_env, &
./kg_correction.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=kg_env%xc_section_kg, &
./kg_correction.F:                            vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=ekin_imol)
./kg_correction.F:            vxc_rho(ispin)%pw%cr3d = -vxc_rho(ispin)%pw%cr3d*vxc_rho(ispin)%pw%pw_grid%dvol
./kg_correction.F:            CALL integrate_v_rspace(v_rspace=vxc_rho(ispin), &
./kg_correction.F:            ! clean up vxc_rho
./kg_correction.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./kg_correction.F:         DEALLOCATE (vxc_rho)
./kg_correction.F:      ! clean up rho_struct
./kg_correction.F:      CALL qs_rho_set(rho_struct, rho_ao=Null())
./kg_correction.F:      CALL qs_rho_release(rho_struct)
./kg_correction.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau
./kg_correction.F:      TYPE(qs_rho_type), POINTER                         :: old_rho, rho_struct
./kg_correction.F:      NULLIFY (vxc_rho, vxc_tau, old_rho, rho_struct, ks_env)
./kg_correction.F:                      rho=old_rho, &
./kg_correction.F:      CALL qs_rho_get(old_rho, rho_ao=density_matrix)
./kg_correction.F:      CALL qs_rho_create(rho_struct)
./kg_correction.F:      CALL qs_rho_set(rho_struct, rho_ao=density_matrix) ! blocked_matrix
./kg_correction.F:      CALL qs_rho_rebuild(rho_struct, qs_env, rebuild_ao=.FALSE., rebuild_grids=.TRUE.)
./kg_correction.F:      CALL lri_kg_rho_update(rho_struct, qs_env, lri_env, lri_density, atomlist)
./kg_correction.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=kg_env%xc_section_kg, &
./kg_correction.F:                         vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=ekin_imol)
./kg_correction.F:         vxc_rho(ispin)%pw%cr3d = vxc_rho(ispin)%pw%cr3d*vxc_rho(ispin)%pw%pw_grid%dvol
./kg_correction.F:         CALL integrate_v_rspace_one_center(vxc_rho(ispin), qs_env, lri_v_int, calc_force, "LRI_AUX")
./kg_correction.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./kg_correction.F:      DEALLOCATE (vxc_rho)
./kg_correction.F:         CALL lri_kg_rho_update(rho_struct, qs_env, lri_env, lri_density, atomlist)
./kg_correction.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=kg_env%xc_section_kg, &
./kg_correction.F:                            vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=ekin_imol)
./kg_correction.F:            vxc_rho(ispin)%pw%cr3d = -vxc_rho(ispin)%pw%cr3d*vxc_rho(ispin)%pw%pw_grid%dvol
./kg_correction.F:            CALL integrate_v_rspace_one_center(vxc_rho(ispin), qs_env, &
./kg_correction.F:            ! clean up vxc_rho
./kg_correction.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./kg_correction.F:         DEALLOCATE (vxc_rho)
./kg_correction.F:      ! clean up rho_struct
./kg_correction.F:      CALL qs_rho_set(rho_struct, rho_ao=Null())
./kg_correction.F:      CALL qs_rho_release(rho_struct)
./kg_correction.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau
./kg_correction.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_struct
./kg_correction.F:                      rho=rho, &
./kg_correction.F:      CALL qs_rho_get(rho, rho_ao_kp=density_matrix)
./kg_correction.F:      NULLIFY (rho_struct)
./kg_correction.F:      CALL qs_rho_create(rho_struct)
./kg_correction.F:      CALL qs_rho_set(rho_struct, rho_ao_kp=density_matrix)
./kg_correction.F:      CALL qs_rho_rebuild(rho_struct, qs_env, rebuild_ao=.FALSE., rebuild_grids=.TRUE.)
./kg_correction.F:                                   rho_struct, atomic_kind_set, para_env)
./kg_correction.F:      NULLIFY (vxc_rho, vxc_tau)
./kg_correction.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=kg_env%xc_section_kg, &
./kg_correction.F:                         vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=ekin_imol)
./kg_correction.F:         vxc_rho(ispin)%pw%cr3d = vxc_rho(ispin)%pw%cr3d*vxc_rho(ispin)%pw%pw_grid%dvol
./kg_correction.F:         CALL integrate_v_rspace_one_center(vxc_rho(ispin), qs_env, lri_v_int, calc_force, "LRI_AUX")
./kg_correction.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./kg_correction.F:      DEALLOCATE (vxc_rho)
./kg_correction.F:         CALL lri_kg_rho_update(rho_struct, qs_env, lri_env, lri_density, atomlist)
./kg_correction.F:         NULLIFY (vxc_rho, vxc_tau)
./kg_correction.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=kg_env%xc_section_kg, &
./kg_correction.F:                            vxc_rho=vxc_rho, vxc_tau=vxc_tau, exc=ekin_imol)
./kg_correction.F:            vxc_rho(ispin)%pw%cr3d = -vxc_rho(ispin)%pw%cr3d*vxc_rho(ispin)%pw%pw_grid%dvol
./kg_correction.F:            CALL integrate_v_rspace_one_center(vxc_rho(ispin), qs_env, &
./kg_correction.F:            ! clean up vxc_rho
./kg_correction.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, vxc_rho(ispin)%pw)
./kg_correction.F:         DEALLOCATE (vxc_rho)
./kg_correction.F:      ! clean up rho_struct
./kg_correction.F:      CALL qs_rho_set(rho_struct, rho_ao=Null())
./kg_correction.F:      CALL qs_rho_release(rho_struct)
./kg_correction.F:      TYPE(qs_rho_type), POINTER                         :: rho
./kg_correction.F:      NULLIFY (rho, kg_env, density_matrix, tnadd_matrix)
./kg_correction.F:      CALL get_qs_env(qs_env, kg_env=kg_env, rho=rho)
./kg_correction.F:      CALL qs_rho_get(rho, rho_ao=density_matrix)
./mp2_optimize_ri_basis.F:   USE qs_rho_types,                    ONLY: qs_rho_type
./mp2_optimize_ri_basis.F:!> \param rho ...
./mp2_optimize_ri_basis.F:                                     qs_env, rho, para_env, &
./mp2_optimize_ri_basis.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2_optimize_ri_basis.F:         CALL mp2_canonical_direct_single_batch(Emp2_AA, Emp2_AA_Cou, Emp2_AA_ex, mp2_env, qs_env, rho, para_env, &
./mp2_optimize_ri_basis.F:         CALL mp2_canonical_direct_single_batch(Emp2_BB, Emp2_BB_Cou, Emp2_BB_ex, mp2_env, qs_env, rho, para_env, &
./mp2_optimize_ri_basis.F:         CALL mp2_canonical_direct_single_batch(Emp2_AB, Emp2_AB_Cou, Emp2_AB_ex, mp2_env, qs_env, rho, para_env, &
./mp2_optimize_ri_basis.F:         CALL mp2_canonical_direct_single_batch(Emp2, Emp2_Cou, Emp2_ex, mp2_env, qs_env, rho, para_env, &
./hfx_energy_potential.F:!> \param rho_ao density matrix in ao basis
./hfx_energy_potential.F:   SUBROUTINE integrate_four_center(qs_env, ks_matrix, ehfx, rho_ao, hfx_section, para_env, &
./hfx_energy_potential.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao
./hfx_energy_potential.F:      is_anti_symmetric = dbcsr_get_matrix_type(rho_ao(1, 1)%matrix) .EQ. dbcsr_type_antisymmetric
./hfx_energy_potential.F:!$OMP                                  rho_ao,&
./hfx_energy_potential.F:            CALL get_full_density(para_env, full_density_alpha(:, img), rho_ao(ispin, img)%matrix, shm_number_of_p_entries, &
./hfx_energy_potential.F:               CALL get_full_density(para_env, full_density_beta(:, img), rho_ao(2, img)%matrix, shm_number_of_p_entries, &
./hfx_energy_potential.F:               CALL get_full_density(para_env, full_density_alpha(:, img), rho_ao(1, img)%matrix, shm_number_of_p_entries, &
./hfx_energy_potential.F:                                     rho_beta=rho_ao(2, img)%matrix, antisymmetric=is_anti_symmetric)
./hfx_energy_potential.F:            CALL get_full_density(para_env, full_density_alpha(:, img), rho_ao(ispin, img)%matrix, shm_number_of_p_entries, &
./hfx_energy_potential.F:            CALL dbcsr_trace(ks_matrix(ispin, img)%matrix, rho_ao(ispin, img)%matrix, &
./hfx_energy_potential.F:               CALL dbcsr_trace(ks_matrix(2, img)%matrix, rho_ao(2, img)%matrix, &
./optimize_basis_utils.F:      CALL section_vals_val_get(powell_section, "ACCURACY", r_val=p_param%rhoend)
./optimize_basis_utils.F:      CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=p_param%rhobeg)
./qs_scf_diagonalization.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_scf_diagonalization.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_scf_diagonalization.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf_diagonalization.F:                                              qs_rho_type
./qs_scf_diagonalization.F:!> \param rho ...
./qs_scf_diagonalization.F:   SUBROUTINE do_scf_diag_subspace(qs_env, scf_env, subspace_env, mos, rho, &
./qs_scf_diagonalization.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_diagonalization.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho_ao
./qs_scf_diagonalization.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_scf_diagonalization.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_scf_diagonalization.F:               mo_occupations, work, dft_control, rho_ao, rho_ao_kp)
./qs_scf_diagonalization.F:      CALL qs_rho_get(rho, rho_ao=rho_ao, rho_ao_kp=rho_ao_kp)
./qs_scf_diagonalization.F:         CALL dbcsr_copy(subspace_env%p_matrix_store(ispin)%matrix, rho_ao(ispin)%matrix)
./qs_scf_diagonalization.F:         CALL dbcsr_copy(rho_ao(ispin)%matrix, scf_env%p_mix_new(ispin, 1)%matrix)
./qs_scf_diagonalization.F:                            rho_atom_set=rho_atom)
./qs_scf_diagonalization.F:            CALL mixing_init(subspace_env%mixing_method, rho, subspace_env%mixing_store, &
./qs_scf_diagonalization.F:                             para_env, rho_atom=rho_atom)
./qs_scf_diagonalization.F:            CALL mixing_init(subspace_env%mixing_method, rho, subspace_env%mixing_store, &
./qs_scf_diagonalization.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf_diagonalization.F:         CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./qs_scf_diagonalization.F:                                        scf_env%mixing_store, rho_ao_kp, para_env, iter_delta, iloop)
./qs_scf_diagonalization.F:            CALL self_consistency_check(rho_ao_kp, scf_env%p_delta, para_env, &
./qs_scf_diagonalization.F:            CALL dbcsr_copy(rho_ao(ispin)%matrix, subspace_env%p_matrix_mix(ispin, 1)%matrix)
./qs_scf_diagonalization.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf_diagonalization.F:                               rho, para_env, scf_env%iter_count)
./qs_scf_diagonalization.F:         CALL dbcsr_copy(scf_env%p_mix_new(ispin, 1)%matrix, rho_ao(ispin)%matrix)
./qs_scf_diagonalization.F:         CALL dbcsr_copy(rho_ao(ispin)%matrix, subspace_env%p_matrix_store(ispin)%matrix)
./dm_ls_scf_types.F:      LOGICAL :: do_rho_mixing
./qs_local_rho_types.F:MODULE qs_local_rho_types
./qs_local_rho_types.F:   USE qs_rho0_types,                   ONLY: deallocate_rho0_atom,&
./qs_local_rho_types.F:                                              deallocate_rho0_mpole,&
./qs_local_rho_types.F:                                              rho0_atom_type,&
./qs_local_rho_types.F:                                              rho0_mpole_type
./qs_local_rho_types.F:   USE qs_rho_atom_types,               ONLY: deallocate_rho_atom_set,&
./qs_local_rho_types.F:                                              rho_atom_type
./qs_local_rho_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_local_rho_types'
./qs_local_rho_types.F:! *** Define rhoz and local_rho types ***
./qs_local_rho_types.F:   TYPE rhoz_type
./qs_local_rho_types.F:   END TYPE rhoz_type
./qs_local_rho_types.F:   TYPE local_rho_type
./qs_local_rho_types.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER            :: rho_atom_set
./qs_local_rho_types.F:      TYPE(rho0_mpole_type), POINTER                        :: rho0_mpole
./qs_local_rho_types.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER           :: rho0_atom_set
./qs_local_rho_types.F:      TYPE(rhoz_type), DIMENSION(:), POINTER               :: rhoz_set
./qs_local_rho_types.F:      REAL(dp)                                              :: rhoz_tot
./qs_local_rho_types.F:   END TYPE local_rho_type
./qs_local_rho_types.F:   PUBLIC :: local_rho_type, rhoz_type
./qs_local_rho_types.F:   PUBLIC :: allocate_rhoz, calculate_rhoz, &
./qs_local_rho_types.F:             get_local_rho, local_rho_set_create, &
./qs_local_rho_types.F:             local_rho_set_release, set_local_rho
./qs_local_rho_types.F:!> \param rhoz_set ...
./qs_local_rho_types.F:   SUBROUTINE allocate_rhoz(rhoz_set, nkind)
./qs_local_rho_types.F:      TYPE(rhoz_type), DIMENSION(:), POINTER             :: rhoz_set
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rhoz', routineP = moduleN//':'//routineN
./qs_local_rho_types.F:      IF (ASSOCIATED(rhoz_set)) THEN
./qs_local_rho_types.F:         CALL deallocate_rhoz(rhoz_set)
./qs_local_rho_types.F:      ALLOCATE (rhoz_set(nkind))
./qs_local_rho_types.F:         NULLIFY (rhoz_set(ikind)%r_coef)
./qs_local_rho_types.F:         NULLIFY (rhoz_set(ikind)%dr_coef)
./qs_local_rho_types.F:         NULLIFY (rhoz_set(ikind)%vr_coef)
./qs_local_rho_types.F:   END SUBROUTINE allocate_rhoz
./qs_local_rho_types.F:!> \param rhoz ...
./qs_local_rho_types.F:!> \param rhoz_tot ...
./qs_local_rho_types.F:   SUBROUTINE calculate_rhoz(rhoz, grid_atom, alpha, zeff, natom, rhoz_tot, harmonics)
./qs_local_rho_types.F:      TYPE(rhoz_type)                                    :: rhoz
./qs_local_rho_types.F:      REAL(dp), INTENT(INOUT)                            :: rhoz_tot
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rhoz', routineP = moduleN//':'//routineN
./qs_local_rho_types.F:      CALL reallocate(rhoz%r_coef, 1, nr)
./qs_local_rho_types.F:      CALL reallocate(rhoz%dr_coef, 1, nr)
./qs_local_rho_types.F:      CALL reallocate(rhoz%vr_coef, 1, nr)
./qs_local_rho_types.F:         rhoz%r_coef(ir) = -EXP(c1)*prefactor1
./qs_local_rho_types.F:         IF (ABS(rhoz%r_coef(ir)) < 1.0E-30_dp) THEN
./qs_local_rho_types.F:            rhoz%r_coef(ir) = 0.0_dp
./qs_local_rho_types.F:            rhoz%dr_coef(ir) = 0.0_dp
./qs_local_rho_types.F:            rhoz%dr_coef(ir) = prefactor2*rhoz%r_coef(ir)
./qs_local_rho_types.F:         rhoz%vr_coef(ir) = prefactor3*erf(grid_atom%rad(ir)*c3)/grid_atom%rad(ir)
./qs_local_rho_types.F:         sum = sum+rhoz%r_coef(ir)*grid_atom%wr(ir)
./qs_local_rho_types.F:      rhoz%one_atom = sum*harmonics%slm_int(1)
./qs_local_rho_types.F:      rhoz_tot = rhoz_tot+natom*rhoz%one_atom
./qs_local_rho_types.F:   END SUBROUTINE calculate_rhoz
./qs_local_rho_types.F:!> \param rhoz_set ...
./qs_local_rho_types.F:   SUBROUTINE deallocate_rhoz(rhoz_set)
./qs_local_rho_types.F:      TYPE(rhoz_type), DIMENSION(:), POINTER             :: rhoz_set
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_rhoz', &
./qs_local_rho_types.F:      nkind = SIZE(rhoz_set)
./qs_local_rho_types.F:         DEALLOCATE (rhoz_set(ikind)%r_coef)
./qs_local_rho_types.F:         DEALLOCATE (rhoz_set(ikind)%dr_coef)
./qs_local_rho_types.F:         DEALLOCATE (rhoz_set(ikind)%vr_coef)
./qs_local_rho_types.F:      DEALLOCATE (rhoz_set)
./qs_local_rho_types.F:   END SUBROUTINE deallocate_rhoz
./qs_local_rho_types.F:!> \param local_rho_set ...
./qs_local_rho_types.F:!> \param rho_atom_set ...
./qs_local_rho_types.F:!> \param rho0_atom_set ...
./qs_local_rho_types.F:!> \param rho0_mpole ...
./qs_local_rho_types.F:!> \param rhoz_set ...
./qs_local_rho_types.F:   SUBROUTINE get_local_rho(local_rho_set, rho_atom_set, rho0_atom_set, rho0_mpole, rhoz_set)
./qs_local_rho_types.F:      TYPE(local_rho_type), POINTER                      :: local_rho_set
./qs_local_rho_types.F:      TYPE(rho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_local_rho_types.F:         POINTER                                         :: rho_atom_set
./qs_local_rho_types.F:      TYPE(rho0_atom_type), DIMENSION(:), OPTIONAL, &
./qs_local_rho_types.F:         POINTER                                         :: rho0_atom_set
./qs_local_rho_types.F:      TYPE(rho0_mpole_type), OPTIONAL, POINTER           :: rho0_mpole
./qs_local_rho_types.F:      TYPE(rhoz_type), DIMENSION(:), OPTIONAL, POINTER   :: rhoz_set
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'get_local_rho', routineP = moduleN//':'//routineN
./qs_local_rho_types.F:      IF (PRESENT(rho_atom_set)) rho_atom_set => local_rho_set%rho_atom_set
./qs_local_rho_types.F:      IF (PRESENT(rho0_atom_set)) rho0_atom_set => local_rho_set%rho0_atom_set
./qs_local_rho_types.F:      IF (PRESENT(rho0_mpole)) rho0_mpole => local_rho_set%rho0_mpole
./qs_local_rho_types.F:      IF (PRESENT(rhoz_set)) rhoz_set => local_rho_set%rhoz_set
./qs_local_rho_types.F:   END SUBROUTINE get_local_rho
./qs_local_rho_types.F:!> \param local_rho_set ...
./qs_local_rho_types.F:   SUBROUTINE local_rho_set_create(local_rho_set)
./qs_local_rho_types.F:      TYPE(local_rho_type), POINTER                      :: local_rho_set
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'local_rho_set_create', &
./qs_local_rho_types.F:      ALLOCATE (local_rho_set)
./qs_local_rho_types.F:      NULLIFY (local_rho_set%rho_atom_set)
./qs_local_rho_types.F:      NULLIFY (local_rho_set%rho0_atom_set)
./qs_local_rho_types.F:      NULLIFY (local_rho_set%rho0_mpole)
./qs_local_rho_types.F:      NULLIFY (local_rho_set%rhoz_set)
./qs_local_rho_types.F:   END SUBROUTINE local_rho_set_create
./qs_local_rho_types.F:!> \param local_rho_set ...
./qs_local_rho_types.F:   SUBROUTINE local_rho_set_release(local_rho_set)
./qs_local_rho_types.F:      TYPE(local_rho_type), POINTER                      :: local_rho_set
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'local_rho_set_release', &
./qs_local_rho_types.F:      IF (ASSOCIATED(local_rho_set)) THEN
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rho_atom_set)) THEN
./qs_local_rho_types.F:            CALL deallocate_rho_atom_set(local_rho_set%rho_atom_set)
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rho0_atom_set)) THEN
./qs_local_rho_types.F:            CALL deallocate_rho0_atom(local_rho_set%rho0_atom_set)
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rho0_mpole)) THEN
./qs_local_rho_types.F:            CALL deallocate_rho0_mpole(local_rho_set%rho0_mpole)
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rhoz_set)) THEN
./qs_local_rho_types.F:            CALL deallocate_rhoz(local_rho_set%rhoz_set)
./qs_local_rho_types.F:         DEALLOCATE (local_rho_set)
./qs_local_rho_types.F:   END SUBROUTINE local_rho_set_release
./qs_local_rho_types.F:!> \param local_rho_set ...
./qs_local_rho_types.F:!> \param rho_atom_set ...
./qs_local_rho_types.F:!> \param rho0_atom_set ...
./qs_local_rho_types.F:!> \param rho0_mpole ...
./qs_local_rho_types.F:!> \param rhoz_set ...
./qs_local_rho_types.F:   SUBROUTINE set_local_rho(local_rho_set, rho_atom_set, rho0_atom_set, rho0_mpole, &
./qs_local_rho_types.F:                            rhoz_set)
./qs_local_rho_types.F:      TYPE(local_rho_type), POINTER                      :: local_rho_set
./qs_local_rho_types.F:      TYPE(rho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_local_rho_types.F:         POINTER                                         :: rho_atom_set
./qs_local_rho_types.F:      TYPE(rho0_atom_type), DIMENSION(:), OPTIONAL, &
./qs_local_rho_types.F:         POINTER                                         :: rho0_atom_set
./qs_local_rho_types.F:      TYPE(rho0_mpole_type), OPTIONAL, POINTER           :: rho0_mpole
./qs_local_rho_types.F:      TYPE(rhoz_type), DIMENSION(:), OPTIONAL, POINTER   :: rhoz_set
./qs_local_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'set_local_rho', routineP = moduleN//':'//routineN
./qs_local_rho_types.F:      IF (PRESENT(rho_atom_set)) THEN
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rho_atom_set)) THEN
./qs_local_rho_types.F:            CALL deallocate_rho_atom_set(local_rho_set%rho_atom_set)
./qs_local_rho_types.F:         local_rho_set%rho_atom_set => rho_atom_set
./qs_local_rho_types.F:      IF (PRESENT(rho0_atom_set)) THEN
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rho0_atom_set)) THEN
./qs_local_rho_types.F:            CALL deallocate_rho0_atom(local_rho_set%rho0_atom_set)
./qs_local_rho_types.F:         local_rho_set%rho0_atom_set => rho0_atom_set
./qs_local_rho_types.F:      IF (PRESENT(rho0_mpole)) THEN
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rho0_mpole)) THEN
./qs_local_rho_types.F:            CALL deallocate_rho0_mpole(local_rho_set%rho0_mpole)
./qs_local_rho_types.F:         local_rho_set%rho0_mpole => rho0_mpole
./qs_local_rho_types.F:      IF (PRESENT(rhoz_set)) THEN
./qs_local_rho_types.F:         IF (ASSOCIATED(local_rho_set%rhoz_set)) THEN
./qs_local_rho_types.F:            CALL deallocate_rhoz(local_rho_set%rhoz_set)
./qs_local_rho_types.F:         local_rho_set%rhoz_set => rhoz_set
./qs_local_rho_types.F:   END SUBROUTINE set_local_rho
./qs_local_rho_types.F:END MODULE qs_local_rho_types
./hartree_local_types.F:   USE qs_rho_atom_types,               ONLY: rho_atom_coeff
./hartree_local_types.F:      TYPE(rho_atom_coeff), POINTER   :: Vh1_h, Vh1_s
./qs_dispersion_nonloc.F:!> \param vxc_rho ...
./qs_dispersion_nonloc.F:!> \param rho_r ...
./qs_dispersion_nonloc.F:!> \param rho_g ...
./qs_dispersion_nonloc.F:   SUBROUTINE calculate_dispersion_nonloc(vxc_rho, rho_r, rho_g, edispersion, &
./qs_dispersion_nonloc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, rho_r, rho_g
./qs_dispersion_nonloc.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:)           :: dq0_dgradrho, dq0_drho, hpot, potential, &
./qs_dispersion_nonloc.F:                                                            q0, rho
./qs_dispersion_nonloc.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :)        :: drho, thetas
./qs_dispersion_nonloc.F:      TYPE(pw_p_type), ALLOCATABLE, DIMENSION(:, :)      :: drho_r
./qs_dispersion_nonloc.F:      CPASSERT(ASSOCIATED(rho_r))
./qs_dispersion_nonloc.F:      CPASSERT(ASSOCIATED(rho_g))
./qs_dispersion_nonloc.F:         CPASSERT(ASSOCIATED(vxc_rho))
./qs_dispersion_nonloc.F:      nspin = SIZE(rho_r)
./qs_dispersion_nonloc.F:      ALLOCATE (drho_r(3, nspin))
./qs_dispersion_nonloc.F:            NULLIFY (drho_r(idir, ispin)%pw)
./qs_dispersion_nonloc.F:            CALL pw_pool_create_pw(pw_pool, drho_r(idir, ispin)%pw, &
./qs_dispersion_nonloc.F:            CALL pw_transfer(rho_g(ispin)%pw, tmp_g)
./qs_dispersion_nonloc.F:            CALL pw_transfer(tmp_g, drho_r(idir, ispin)%pw)
./qs_dispersion_nonloc.F:      ALLOCATE (rho(np), drho(np, 3)) !in the following loops, rho and drho _will_ have the same bounds
./qs_dispersion_nonloc.F:!$OMP             SHARED(n,rho)              &
./qs_dispersion_nonloc.F:               rho(r*n(2)*n(1)+q*n(1)+p+1) = 0.0_dp
./qs_dispersion_nonloc.F:!$OMP             SHARED(n,i,drho)           &
./qs_dispersion_nonloc.F:                  drho(r*n(2)*n(1)+q*n(1)+p+1, i) = 0.0_dp
./qs_dispersion_nonloc.F:         CPASSERT(rho_r(ispin)%pw%in_use == REALDATA3D)
./qs_dispersion_nonloc.F:         CALL pw_transfer(rho_g(ispin)%pw, tmp_g)
./qs_dispersion_nonloc.F:!$OMP             SHARED(n,lo,rho,tmp_r)   &
./qs_dispersion_nonloc.F:                  rho(s) = rho(s)+tmp_r%cr3d(p+lo(1), q+lo(2), r+lo(3))
./qs_dispersion_nonloc.F:!$OMP             SHARED(ispin,i,n,lo,drho,drho_r)   &
./qs_dispersion_nonloc.F:                     drho(s, i) = drho(s, i)+drho_r(i, ispin)%pw%cr3d(p+lo(1), q+lo(2), r+lo(3))
./qs_dispersion_nonloc.F:            CALL get_q0_on_grid_eo_vdw(rho, drho, q0, dispersion_env)
./qs_dispersion_nonloc.F:            CALL get_q0_on_grid_eo_rvv10(rho, drho, q0, dispersion_env)
./qs_dispersion_nonloc.F:         ALLOCATE (q0(np), dq0_drho(np), dq0_dgradrho(np))
./qs_dispersion_nonloc.F:            CALL get_q0_on_grid_vdw(rho, drho, q0, dq0_drho, dq0_dgradrho, dispersion_env)
./qs_dispersion_nonloc.F:            CALL get_q0_on_grid_rvv10(rho, drho, q0, dq0_drho, dq0_dgradrho, dispersion_env)
./qs_dispersion_nonloc.F:      !! They are defined as rho*P_i(q0(rho, gradient_rho)) for vdW and vdW2 or
./qs_dispersion_nonloc.F:      !! constant*rho^(3/4)*P_i(q0(rho, gradient_rho)) for rVV10 where P_i is a polynomial that
./qs_dispersion_nonloc.F:      !! Form the thetas where theta is defined as rho*p_i(q0) for vdW and vdW2 or
./qs_dispersion_nonloc.F:      !! constant*rho^(3/4)*p_i(q0) for rVV10
./qs_dispersion_nonloc.F:!$OMP             SHARED( dispersion_env, thetas, rho)
./qs_dispersion_nonloc.F:            thetas(:, i) = thetas(:, i)*rho(:)
./qs_dispersion_nonloc.F:!$OMP             SHARED( np, rho, dispersion_env, thetas, const ) &
./qs_dispersion_nonloc.F:!$OMP             SCHEDULE(DYNAMIC)    ! use dynamic to allow for possibility of cases having   (rho(i_grid) .LE. epsr)
./qs_dispersion_nonloc.F:            IF (rho(i_grid) > epsr) THEN
./qs_dispersion_nonloc.F:                  thetas(i_grid, i) = thetas(i_grid, i)*const*rho(i_grid)**(0.75_dp)
./qs_dispersion_nonloc.F:            Ec_nl = 0.5_dp*Ec_nl+beta*SUM(rho(:))*grid%vol/sumnp
./qs_dispersion_nonloc.F:            Ec_nl = 0.5_dp*Ec_nl+beta*SUM(rho(:))*grid%vol/sumnp
./qs_dispersion_nonloc.F:            CALL get_potential(q0, dq0_drho, dq0_dgradrho, rho, thetas, potential, hpot, &
./qs_dispersion_nonloc.F:                               dispersion_env, drho, grid%dvol, virial)
./qs_dispersion_nonloc.F:            CALL get_potential(q0, dq0_drho, dq0_dgradrho, rho, thetas, potential, hpot, &
./qs_dispersion_nonloc.F:!$OMP             SHARED(n,lo,tmp_r,hpot,drho_r,idir,ispin)  &
./qs_dispersion_nonloc.F:                                                                *drho_r(idir, ispin)%pw%cr3d(p+lo(1), q+lo(2), r+lo(3))
./qs_dispersion_nonloc.F:            CALL pw_axpy(vxc_r, vxc_rho(ispin)%pw, 1._dp)
./qs_dispersion_nonloc.F:         DEALLOCATE (q0, dq0_drho, dq0_dgradrho)
./qs_dispersion_nonloc.F:            CALL pw_pool_give_back_pw(pw_pool, drho_r(idir, ispin)%pw)
./qs_dispersion_nonloc.F:      DEALLOCATE (rho, drho, drho_r, thetas_g)
./qs_dispersion_nonloc.F:!> \param dq0_drho ...
./qs_dispersion_nonloc.F:!> \param dq0_dgradrho ...
./qs_dispersion_nonloc.F:!> \param total_rho ...
./qs_dispersion_nonloc.F:!> \param drho ...
./qs_dispersion_nonloc.F:   SUBROUTINE get_potential(q0, dq0_drho, dq0_dgradrho, total_rho, u_vdW, potential, h_prefactor, &
./qs_dispersion_nonloc.F:                            dispersion_env, drho, dvol, virial)
./qs_dispersion_nonloc.F:      REAL(dp), DIMENSION(:), INTENT(in)                 :: q0, dq0_drho, dq0_dgradrho, total_rho
./qs_dispersion_nonloc.F:      REAL(dp), DIMENSION(:, :), INTENT(in), OPTIONAL    :: drho
./qs_dispersion_nonloc.F:         CPASSERT(PRESENT(drho))
./qs_dispersion_nonloc.F:!$OMP                 , dq0_drho, dq0_dgradrho, total_rho, const       &
./qs_dispersion_nonloc.F:!$OMP                 , use_virial, drho, dvol, virial                 &
./qs_dispersion_nonloc.F:               potential(i_grid) = potential(i_grid)+u_vdW(i_grid, P_i)*(P+dP_dq0*dq0_drho(i_grid))
./qs_dispersion_nonloc.F:               prefactor = u_vdW(i_grid, P_i)*dP_dq0*dq0_dgradrho(i_grid)
./qs_dispersion_nonloc.F:               IF (total_rho(i_grid) > epsr) THEN
./qs_dispersion_nonloc.F:                  tmp_1_2 = SQRT(total_rho(i_grid))
./qs_dispersion_nonloc.F:                  tmp_1_4 = SQRT(tmp_1_2) ! == total_rho(i_grid)**(1.0_dp/4.0_dp)
./qs_dispersion_nonloc.F:                  tmp_3_4 = tmp_1_4*tmp_1_4*tmp_1_4 ! == total_rho(i_grid)**(3.0_dp/4.0_dp)
./qs_dispersion_nonloc.F:                                                           +const*tmp_3_4*dP_dq0*dq0_drho(i_grid))
./qs_dispersion_nonloc.F:                  prefactor = u_vdW(i_grid, P_i)*const*tmp_3_4*dP_dq0*dq0_dgradrho(i_grid)
./qs_dispersion_nonloc.F:                     virial_thread(l, m) = virial_thread(l, m)-prefactor*drho(i_grid, l)*drho(i_grid, m)
./qs_dispersion_nonloc.F:!> \param total_rho ...
./qs_dispersion_nonloc.F:!> \param gradient_rho ...
./qs_dispersion_nonloc.F:!> \param dq0_drho ...
./qs_dispersion_nonloc.F:!> \param dq0_dgradrho ...
./qs_dispersion_nonloc.F:   SUBROUTINE get_q0_on_grid_vdw(total_rho, gradient_rho, q0, dq0_drho, dq0_dgradrho, dispersion_env)
./qs_dispersion_nonloc.F:      !!     dq0_drho(ir) = total_rho * d q0 /d rho
./qs_dispersion_nonloc.F:      !!     dq0_dgradrho = total_rho / |gradient_rho| * d q0 / d |gradient_rho|
./qs_dispersion_nonloc.F:      REAL(dp), INTENT(IN)                               :: total_rho(:), gradient_rho(:, :)
./qs_dispersion_nonloc.F:      REAL(dp), INTENT(OUT)                              :: q0(:), dq0_drho(:), dq0_dgradrho(:)
./qs_dispersion_nonloc.F:      dq0_drho(:) = 0.0_dp
./qs_dispersion_nonloc.F:      dq0_dgradrho(:) = 0.0_dp
./qs_dispersion_nonloc.F:      DO i_grid = 1, SIZE(total_rho)
./qs_dispersion_nonloc.F:         !! dq0_dq will be 0 so we set q0 = q_cut and dq0_drho = dq0_dgradrho = 0 and go on
./qs_dispersion_nonloc.F:         IF (total_rho(i_grid) < epsr) CYCLE
./qs_dispersion_nonloc.F:         kF = (3.0_dp*pi*pi*total_rho(i_grid))**(1.0_dp/3.0_dp)
./qs_dispersion_nonloc.F:         r_s = (3.0_dp/(4.0_dp*pi*total_rho(i_grid)))**(1.0_dp/3.0_dp)
./qs_dispersion_nonloc.F:         gradient_correction = -Z_ab/(36.0_dp*kF*total_rho(i_grid)**2) &
./qs_dispersion_nonloc.F:                               *(gradient_rho(i_grid, 1)**2+gradient_rho(i_grid, 2)**2+gradient_rho(i_grid, 3)**2)
./qs_dispersion_nonloc.F:         !! the derivative dq0_dq needed for the derivatives dq0_drho and dq0_dgradrh0 discussed below.
./qs_dispersion_nonloc.F:         !! to rho and gradient_rho.  The density factor comes in since we are really differentiating
./qs_dispersion_nonloc.F:         !! theta = (rho)*P(q0) with respect to density (or its gradient) which will be
./qs_dispersion_nonloc.F:         !! dtheta_drho = P(q0) + dP_dq0 * [rho * dq0_dq * dq_drho]   and
./qs_dispersion_nonloc.F:         !! dtheta_dgradient_rho =  dP_dq0  * [rho * dq0_dq * dq_dgradient_rho]
./qs_dispersion_nonloc.F:         !! later.  There should actually be a factor of the magnitude of the gradient in the gradient_rho derivative
./qs_dispersion_nonloc.F:         dq0_drho(i_grid) = dq0_dq*(kF/3.0_dp-7.0_dp/3.0_dp*gradient_correction &
./qs_dispersion_nonloc.F:         dq0_dgradrho(i_grid) = total_rho(i_grid)*dq0_dq*2.0_dp*(-Z_ab)/(36.0_dp*kF*total_rho(i_grid)**2)
./qs_dispersion_nonloc.F:!> \param total_rho ...
./qs_dispersion_nonloc.F:!> \param gradient_rho ...
./qs_dispersion_nonloc.F:!> \param dq0_drho ...
./qs_dispersion_nonloc.F:!> \param dq0_dgradrho ...
./qs_dispersion_nonloc.F:   SUBROUTINE get_q0_on_grid_rvv10(total_rho, gradient_rho, q0, dq0_drho, dq0_dgradrho, dispersion_env)
./qs_dispersion_nonloc.F:      !!     dq0_drho(ir) = total_rho * d q0 /d rho
./qs_dispersion_nonloc.F:      !!     dq0_dgradrho = total_rho / |gradient_rho| * d q0 / d |gradient_rho|
./qs_dispersion_nonloc.F:      REAL(dp), INTENT(IN)                               :: total_rho(:), gradient_rho(:, :)
./qs_dispersion_nonloc.F:      REAL(dp), INTENT(OUT)                              :: q0(:), dq0_drho(:), dq0_dgradrho(:)
./qs_dispersion_nonloc.F:      dq0_drho(:) = 0.0_dp
./qs_dispersion_nonloc.F:      dq0_dgradrho(:) = 0.0_dp
./qs_dispersion_nonloc.F:      DO i_grid = 1, SIZE(total_rho)
./qs_dispersion_nonloc.F:         gmod2 = gradient_rho(i_grid, 1)**2+gradient_rho(i_grid, 2)**2+gradient_rho(i_grid, 3)**2
./qs_dispersion_nonloc.F:         !if (total_rho(i_grid) > epsr .and. gmod2 > epsr) cycle
./qs_dispersion_nonloc.F:         IF (total_rho(i_grid) > epsr) THEN
./qs_dispersion_nonloc.F:            wp2 = 16.0_dp*pi*total_rho(i_grid)
./qs_dispersion_nonloc.F:            wg2 = 4_dp*C_value*(mod_grad/total_rho(i_grid))**4
./qs_dispersion_nonloc.F:            k = b_value*3.0_dp*pi*((total_rho(i_grid)/(9.0_dp*pi))**(1.0_dp/6.0_dp))
./qs_dispersion_nonloc.F:            dw0_dn = 1.0_dp/(2.0_dp*w0)*(16.0_dp/3.0_dp*pi-4.0_dp*wg2/total_rho(i_grid))
./qs_dispersion_nonloc.F:            dk_dn = k/(6.0_dp*total_rho(i_grid))
./qs_dispersion_nonloc.F:            dq0_drho(i_grid) = dq0_dq*1.0_dp/(k**2.0)*(dw0_dn*k-dk_dn*w0)
./qs_dispersion_nonloc.F:            dq0_dgradrho(i_grid) = dq0_dq*1.0_dp/(2.0_dp*k*w0)*4.0_dp*wg2/gmod2
./qs_dispersion_nonloc.F:!> \param total_rho ...
./qs_dispersion_nonloc.F:!> \param gradient_rho ...
./qs_dispersion_nonloc.F:   SUBROUTINE get_q0_on_grid_eo_vdw(total_rho, gradient_rho, q0, dispersion_env)
./qs_dispersion_nonloc.F:      REAL(dp), INTENT(IN)                               :: total_rho(:), gradient_rho(:, :)
./qs_dispersion_nonloc.F:      DO i_grid = 1, SIZE(total_rho)
./qs_dispersion_nonloc.F:         !! dq0_dq will be 0 so we set q0 = q_cut and dq0_drho = dq0_dgradrho = 0 and go on
./qs_dispersion_nonloc.F:         IF (total_rho(i_grid) < epsr) CYCLE
./qs_dispersion_nonloc.F:         kF = (3.0_dp*pi*pi*total_rho(i_grid))**(1.0_dp/3.0_dp)
./qs_dispersion_nonloc.F:         r_s = (3.0_dp/(4.0_dp*pi*total_rho(i_grid)))**(1.0_dp/3.0_dp)
./qs_dispersion_nonloc.F:         gradient_correction = -Z_ab/(36.0_dp*kF*total_rho(i_grid)**2) &
./qs_dispersion_nonloc.F:                               *(gradient_rho(i_grid, 1)**2+gradient_rho(i_grid, 2)**2+gradient_rho(i_grid, 3)**2)
./qs_dispersion_nonloc.F:         !! the derivative dq0_dq needed for the derivatives dq0_drho and dq0_dgradrh0 discussed below.
./qs_dispersion_nonloc.F:!> \param total_rho ...
./qs_dispersion_nonloc.F:!> \param gradient_rho ...
./qs_dispersion_nonloc.F:   SUBROUTINE get_q0_on_grid_eo_rvv10(total_rho, gradient_rho, q0, dispersion_env)
./qs_dispersion_nonloc.F:      REAL(dp), INTENT(IN)                               :: total_rho(:), gradient_rho(:, :)
./qs_dispersion_nonloc.F:      DO i_grid = 1, SIZE(total_rho)
./qs_dispersion_nonloc.F:         gmod2 = gradient_rho(i_grid, 1)**2+gradient_rho(i_grid, 2)**2+gradient_rho(i_grid, 3)**2
./qs_dispersion_nonloc.F:         !if (total_rho(i_grid) > epsr .and. gmod2 > epsr) cycle
./qs_dispersion_nonloc.F:         IF (total_rho(i_grid) > epsr) THEN
./qs_dispersion_nonloc.F:            wp2 = 16.0_dp*pi*total_rho(i_grid)
./qs_dispersion_nonloc.F:            wg2 = 4_dp*C_value*(gmod2*gmod2)/(total_rho(i_grid)**4)
./qs_dispersion_nonloc.F:            k = b_value*3.0_dp*pi*((total_rho(i_grid)/(9.0_dp*pi))**(1.0_dp/6.0_dp))
./dft_plus_u.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./dft_plus_u.F:                                              qs_rho_type
./dft_plus_u.F:      TYPE(qs_rho_type), POINTER                         :: rho
./dft_plus_u.F:      NULLIFY (rho)
./dft_plus_u.F:                      rho=rho, &
./dft_plus_u.F:      CPASSERT(ASSOCIATED(rho))
./dft_plus_u.F:      CALL qs_rho_get(rho, rho_ao=matrix_p) ! Density matrices in sparse format
./dft_plus_u.F:      TYPE(qs_rho_type), POINTER                         :: rho
./dft_plus_u.F:      NULLIFY (rho)
./dft_plus_u.F:                      rho=rho, &
./dft_plus_u.F:      CPASSERT(ASSOCIATED(rho))
./dft_plus_u.F:      CALL qs_rho_get(rho, rho_ao=matrix_p)
./dft_plus_u.F:      TYPE(qs_rho_type), POINTER                         :: rho
./dft_plus_u.F:      NULLIFY (rho)
./dft_plus_u.F:                      rho=rho, &
./dft_plus_u.F:      CPASSERT(ASSOCIATED(rho))
./dft_plus_u.F:      CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_kpp1_env_types.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_release,&
./qs_kpp1_env_types.F:                                              xc_rho_set_type
./qs_kpp1_env_types.F:!> \param drho_r (idir,ispin): the derivative of rho wrt. x,y,z in the real space
./qs_kpp1_env_types.F:      TYPE(pw_p_type), DIMENSION(:, :), POINTER :: drho_r
./qs_kpp1_env_types.F:      TYPE(xc_rho_set_type), POINTER        :: rho_set
./qs_kpp1_env_types.F:            IF (ASSOCIATED(kpp1_env%drho_r)) THEN
./qs_kpp1_env_types.F:               DEALLOCATE (kpp1_env%drho_r)
./qs_kpp1_env_types.F:            IF (ASSOCIATED(kpp1_env%rho_set)) THEN
./qs_kpp1_env_types.F:               CALL xc_rho_set_release(kpp1_env%rho_set)
./qs_kpp1_env_types.F:               NULLIFY (kpp1_env%rho_set)
./qs_pdos.F:                  IF (cell%orthorhombic) THEN
./qs_ks_methods.F.withprint:!>      - 10.2002 introduced pools, uses updated rho as input,
./qs_ks_methods.F.withprint:   USE admm_dm_methods,                 ONLY: admm_dm_calc_rho_aux,&
./qs_ks_methods.F.withprint:   USE admm_methods,                    ONLY: admm_mo_calc_rho_aux,&
./qs_ks_methods.F.withprint:                                              integrate_rho_nlcc,&
./qs_ks_methods.F.withprint:   USE qs_rho0_ggrid,                   ONLY: integrate_vhg0_rspace
./qs_ks_methods.F.withprint:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_ks_methods.F.withprint:                                              qs_rho_type
./qs_ks_methods.F.withprint:   USE rtp_admm_methods,                ONLY: rtp_admm_calc_rho_aux,&
./qs_ks_methods.F.withprint:   PUBLIC :: calc_rho_tot_gspace, qs_ks_update_qs_env, qs_ks_build_kohn_sham_matrix, &
./qs_ks_methods.F.withprint:!>      10.2002 introduced pools, uses updated rho as input, LSD [fawzi]
./qs_ks_methods.F.withprint:!>      make rho, energy and qs_charges optional, defaulting
./qs_ks_methods.F.withprint:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: ks_matrix, matrix_h, matrix_s, my_rho, &
./qs_ks_methods.F.withprint:                                                            rho_ao
./qs_ks_methods.F.withprint:      TYPE(pw_p_type) :: rho_tot_gspace, v_efield_rspace, v_hartree_gspace, v_hartree_rspace, &
./qs_ks_methods.F.withprint:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r, v_rspace_embed, v_rspace_new, &
./qs_ks_methods.F.withprint:      TYPE(pw_p_type), POINTER                           :: rho0_s_rs, rho_core, rho_nlcc, vee, &
./qs_ks_methods.F.withprint:      TYPE(qs_rho_type), POINTER                         :: rho, rho_struct, rho_xc
./qs_ks_methods.F.withprint:               mo_derivs, my_rho, rho_struct, para_env, pw_env, virial, &
./qs_ks_methods.F.withprint:               matrix_vxc, vee, rho_nlcc, ks_env, &
./qs_ks_methods.F.withprint:               ks_matrix, rho, energy, rho_xc, rho_r, rho_ao, rho_core)
./qs_ks_methods.F.withprint:                      rho_nlcc=rho_nlcc, &
./qs_ks_methods.F.withprint:                      rho=rho, &
./qs_ks_methods.F.withprint:                      rho_core=rho_core, &
./qs_ks_methods.F.withprint:                      rho_xc=rho_xc, &
./qs_ks_methods.F.withprint:      CALL qs_rho_get(rho, rho_r=rho_r, rho_ao_kp=rho_ao)
./qs_ks_methods.F.withprint:      CPASSERT(ASSOCIATED(rho))
./qs_ks_methods.F.withprint:         CPASSERT(ASSOCIATED(rho_xc))
./qs_ks_methods.F.withprint:         CALL prepare_gapw_den(qs_env, do_rho0=(.NOT. gapw_xc))
./qs_ks_methods.F.withprint:                             rho_tot_gspace%pw, &
./qs_ks_methods.F.withprint:         CALL pw_zero(rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:         CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho, skip_nuclear_density=.TRUE.)
./qs_ks_methods.F.withprint:         CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%e_hartree, &
./qs_ks_methods.F.withprint:         CALL pw_zero(rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:      CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho)
./qs_ks_methods.F.withprint:         CALL print_densities(qs_env, rho)
./qs_ks_methods.F.withprint:            CALL sccs(qs_env, rho_tot_gspace%pw, v_hartree_gspace%pw, v_sccs_rspace%pw, &
./qs_ks_methods.F.withprint:            CALL sccs(qs_env, rho_tot_gspace%pw, v_hartree_gspace%pw, v_sccs_rspace%pw)
./qs_ks_methods.F.withprint:            CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%hartree, &
./qs_ks_methods.F.withprint:                                  rho_core=rho_core)
./qs_ks_methods.F.withprint:            CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%hartree, &
./qs_ks_methods.F.withprint:                                  v_hartree_gspace%pw, rho_core=rho_core)
./qs_ks_methods.F.withprint:         CALL qs_ks_ddapc(qs_env, auxbas_pw_pool, rho_tot_gspace, v_hartree_gspace, &
./qs_ks_methods.F.withprint:      CALL calc_v_sic_rspace(v_sic_rspace, energy, qs_env, dft_control, rho, poisson_env, &
./qs_ks_methods.F.withprint:            ee_ener = ee_ener+pw_integral_ab(rho_r(ispin)%pw, vee%pw)
./qs_ks_methods.F.withprint:                               rho0_s_rs=rho0_s_rs)
./qs_ks_methods.F.withprint:               CPASSERT(ASSOCIATED(rho0_s_rs))
./qs_ks_methods.F.withprint:               ee_ener = ee_ener+pw_integral_ab(rho0_s_rs%pw, vee%pw)
./qs_ks_methods.F.withprint:                                    rho=rho_r, &
./qs_ks_methods.F.withprint:                                     rho_hartree_gspace=rho_tot_gspace, &
./qs_ks_methods.F.withprint:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:               CALL rtp_admm_calc_rho_aux(qs_env)
./qs_ks_methods.F.withprint:               CALL admm_mo_calc_rho_aux(qs_env)
./qs_ks_methods.F.withprint:            CALL admm_dm_calc_rho_aux(ks_env)
./qs_ks_methods.F.withprint:            CALL get_qs_env(qs_env=qs_env, rho_xc=rho_struct)
./qs_ks_methods.F.withprint:            CALL get_qs_env(qs_env=qs_env, rho_aux_fit=rho_struct)
./qs_ks_methods.F.withprint:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=xc_section, &
./qs_ks_methods.F.withprint:                            vxc_rho=v_rspace_new_aux_fit, vxc_tau=v_tau_rspace_aux_fit, exc=energy%exc_aux_fit, &
./qs_ks_methods.F.withprint:         NULLIFY (rho_struct)
./qs_ks_methods.F.withprint:         CALL get_qs_env(qs_env=qs_env, rho_xc=rho_struct)
./qs_ks_methods.F.withprint:         CALL get_qs_env(qs_env=qs_env, rho=rho_struct)
./qs_ks_methods.F.withprint:         CALL calculate_zmp_potential(qs_env, v_rspace_new, rho, exc=energy%exc)
./qs_ks_methods.F.withprint:            CALL get_embed_potential_energy(qs_env, rho, v_rspace_embed, dft_control, &
./qs_ks_methods.F.withprint:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_struct, xc_section=xc_section, &
./qs_ks_methods.F.withprint:                            vxc_rho=v_rspace_new, vxc_tau=v_tau_rspace, exc=energy%exc, &
./qs_ks_methods.F.withprint:      NULLIFY (rho_struct)
./qs_ks_methods.F.withprint:         CALL hfx_ks_matrix(qs_env, ks_matrix, rho, energy, calculate_forces, &
./qs_ks_methods.F.withprint:            CALL integrate_ppl_rspace(rho_r(ispin), qs_env)
./qs_ks_methods.F.withprint:      IF (ASSOCIATED(rho_nlcc) .AND. calculate_forces) THEN
./qs_ks_methods.F.withprint:            CALL integrate_rho_nlcc(v_rspace_new(ispin), qs_env)
./qs_ks_methods.F.withprint:            IF (dft_control%do_admm) CALL integrate_rho_nlcc(v_rspace_new_aux_fit(ispin), qs_env)
./qs_ks_methods.F.withprint:         ! Pointing my_rho to the density matrix rho_ao
./qs_ks_methods.F.withprint:         my_rho => rho_ao
./qs_ks_methods.F.withprint:         CALL sum_up_and_integrate(qs_env, ks_matrix, rho, my_rho, vppl_rspace, &
./qs_ks_methods.F.withprint:         CALL update_ks_atom(qs_env, ks_matrix, rho_ao, calculate_forces)
./qs_ks_methods.F.withprint:                                    ks_matrix, matrix_s, rho, mulliken_order_p)
./qs_ks_methods.F.withprint:                        SUM(vppl_rspace%pw%cr3d*rho_r(ispin)%pw%cr3d)*vppl_rspace%pw%pw_grid%dvol
./qs_ks_methods.F.withprint:!> \param rho_tot_gspace ...
./qs_ks_methods.F.withprint:!> \param rho ...
./qs_ks_methods.F.withprint:   SUBROUTINE calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho, skip_nuclear_density)
./qs_ks_methods.F.withprint:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_tot_gspace
./qs_ks_methods.F.withprint:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_methods.F.withprint:      CHARACTER(*), PARAMETER :: routineN = 'calc_rho_tot_gspace', &
./qs_ks_methods.F.withprint:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_ks_methods.F.withprint:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core
./qs_ks_methods.F.withprint:      CALL qs_rho_get(rho, rho_g=rho_g)
./qs_ks_methods.F.withprint:         NULLIFY (rho_core)
./qs_ks_methods.F.withprint:         CALL get_qs_env(qs_env=qs_env, rho_core=rho_core)
./qs_ks_methods.F.withprint:            NULLIFY (rho0_s_gs)
./qs_ks_methods.F.withprint:            CALL get_qs_env(qs_env=qs_env, rho0_s_gs=rho0_s_gs)
./qs_ks_methods.F.withprint:            CPASSERT(ASSOCIATED(rho0_s_gs))
./qs_ks_methods.F.withprint:            CALL pw_copy(rho0_s_gs%pw, rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:               CALL pw_axpy(rho_core%pw, rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:            CALL pw_copy(rho_core%pw, rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:            CALL pw_axpy(rho_g(ispin)%pw, rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:         qs_charges%total_rho_gspace = pw_integrate_function(rho_tot_gspace%pw, isign=-1)
./qs_ks_methods.F.withprint:            CALL pw_axpy(rho_g(ispin)%pw, rho_tot_gspace%pw)
./qs_ks_methods.F.withprint:   END SUBROUTINE calc_rho_tot_gspace
./qs_ks_methods.F.withprint:                                                            rho_changed, s_mstruct_changed
./qs_ks_methods.F.withprint:                      rho_changed=rho_changed, &
./qs_ks_methods.F.withprint:      do_rebuild = do_rebuild .OR. rho_changed
./qs_ks_methods.F.withprint:                            rho_changed=.FALSE., &
./qs_ks_methods.F.withprint:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrixkp_h, matrixkp_t, rho_ao_kp
./qs_ks_methods.F.withprint:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_methods.F.withprint:      NULLIFY (energy, rho, dft_control, rho_ao_kp, matrixkp_t, matrixkp_h)
./qs_ks_methods.F.withprint:                      rho=rho, &
./qs_ks_methods.F.withprint:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_ks_methods.F.withprint:      CALL calculate_ptrace(matrixkp_h, rho_ao_kp, energy%core, dft_control%nspins)
./qs_ks_methods.F.withprint:         CALL calculate_ptrace(matrixkp_t, rho_ao_kp, energy%kinetic, dft_control%nspins)
./hfx_pair_list_methods.F:                  R = potential_parameter%cutoff_radius*SQRT(rho)
./rt_propagation_forces.F:      TYPE(dbcsr_type), POINTER                          :: rho_im_sparse, tmp_dbcsr
./rt_propagation_forces.F:      NULLIFY (tmp_dbcsr, rho_im_sparse)
./rt_propagation_forces.F:      ALLOCATE (rho_im_sparse)
./rt_propagation_forces.F:      CALL dbcsr_create(rho_im_sparse, template=SinvH(1)%matrix)
./rt_propagation_forces.F:         CALL dbcsr_multiply("N", "T", alpha, db_mos_re, db_mos_im, 0.0_dp, rho_im_sparse)
./rt_propagation_forces.F:         CALL dbcsr_multiply("N", "T", -alpha, db_mos_im, db_mos_re, 1.0_dp, rho_im_sparse)
./rt_propagation_forces.F:         CALL compute_forces(force, tmp_dbcsr, S_der, rho_im_sparse, C_mat, kind_of, atom_of_kind)
./rt_propagation_forces.F:      CALL dbcsr_release(rho_im_sparse)
./rt_propagation_forces.F:      DEALLOCATE (rho_im_sparse)
./rt_propagation_forces.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: C_mat, rho_new, S_der, SinvB, SinvH
./rt_propagation_forces.F:      CALL get_rtp(rtp=rtp, rho_new=rho_new, S_minus_half=S_minus_half)
./rt_propagation_forces.F:         CALL dbcsr_multiply("N", "N", one, SinvH(ispin)%matrix, rho_new(re)%matrix, zero, tmp, &
./rt_propagation_forces.F:         CALL dbcsr_multiply("N", "N", one, SinvB(ispin)%matrix, rho_new(im)%matrix, one, tmp, &
./rt_propagation_forces.F:         CALL compute_forces(force, tmp, S_der, rho_new(im)%matrix, C_mat, kind_of, atom_of_kind)
./rt_propagation_forces.F:!> \param rho_im ...
./rt_propagation_forces.F:   SUBROUTINE compute_forces(force, tmp, S_der, rho_im, C_mat, kind_of, atom_of_kind)
./rt_propagation_forces.F:      TYPE(dbcsr_type), POINTER                          :: rho_im
./rt_propagation_forces.F:         CALL dbcsr_iterator_start(iter, rho_im)
./almo_scf.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./almo_scf.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./almo_scf.F:                                              qs_rho_type
./almo_scf.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, rho_ao
./almo_scf.F:      TYPE(qs_rho_type), POINTER                         :: rho
./almo_scf.F:      NULLIFY (rho, rho_ao)
./almo_scf.F:                      rho=rho)
./almo_scf.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./almo_scf.F:               CALL calculate_mopac_dm(rho_ao, &
./almo_scf.F:               CALL calculate_atomic_block_dm(rho_ao, &
./almo_scf.F:               CALL matrix_qs_to_almo(rho_ao(ispin)%matrix, &
./almo_scf.F:                                rho_ao(ispin)%matrix, &
./almo_scf.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./almo_scf.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_density_mixing_types.F:   USE qs_rho_atom_types,               ONLY: rho_atom_coeff
./qs_density_mixing_types.F:      TYPE(cp_1d_z_p_type), DIMENSION(:), POINTER :: last_res, rhoin, rhoin_old
./qs_density_mixing_types.F:      TYPE(cp_1d_z_p_type), DIMENSION(:, :), POINTER ::drho_buffer, rhoin_buffer, &
./qs_density_mixing_types.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER :: rho_ao_in, rho_ao_in_old, rho_ao_lastres
./qs_density_mixing_types.F:      TYPE(dbcsr_p_type), DIMENSION(:, :, :), POINTER :: rho_ao_in_buffer
./qs_density_mixing_types.F:      TYPE(dbcsr_p_type), DIMENSION(:, :, :), POINTER :: rho_ao_res_buffer
./qs_density_mixing_types.F:      TYPE(dbcsr_type), POINTER :: rho_ao_mix, rho_ao_res
./qs_density_mixing_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER :: cpc_h_lastres, cpc_s_lastres
./qs_density_mixing_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER :: cpc_h_in, cpc_s_in
./qs_density_mixing_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER :: cpc_h_old, cpc_s_old
./qs_density_mixing_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :, :), POINTER :: cpc_h_in_buffer, cpc_s_in_buffer
./qs_density_mixing_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :, :), POINTER :: cpc_h_res_buffer, cpc_s_res_buffer
./qs_density_mixing_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :, :), POINTER :: dcpc_h_in, dcpc_s_in
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rhoin)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rhoin_old)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%drho_buffer)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rhoin_buffer)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_in)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_in_old)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_in_buffer)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_lastres)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_res_buffer)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_mix)
./qs_density_mixing_types.F:      NULLIFY (mixing_store%rho_ao_res)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rhoin_buffer)) THEN
./qs_density_mixing_types.F:               DO i = 1, SIZE(mixing_store%rhoin_buffer, 2)
./qs_density_mixing_types.F:                  DO j = 1, SIZE(mixing_store%rhoin_buffer, 1)
./qs_density_mixing_types.F:                     DEALLOCATE (mixing_store%rhoin_buffer(j, i)%cc)
./qs_density_mixing_types.F:               DEALLOCATE (mixing_store%rhoin_buffer)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%drho_buffer)) THEN
./qs_density_mixing_types.F:               DO i = 1, SIZE(mixing_store%drho_buffer, 2)
./qs_density_mixing_types.F:                  DO j = 1, SIZE(mixing_store%drho_buffer, 1)
./qs_density_mixing_types.F:                     DEALLOCATE (mixing_store%drho_buffer(j, i)%cc)
./qs_density_mixing_types.F:               DEALLOCATE (mixing_store%drho_buffer)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rhoin)) THEN
./qs_density_mixing_types.F:               DO i = 1, SIZE(mixing_store%rhoin)
./qs_density_mixing_types.F:                  DEALLOCATE (mixing_store%rhoin(i)%cc)
./qs_density_mixing_types.F:               DEALLOCATE (mixing_store%rhoin)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rhoin_old)) THEN
./qs_density_mixing_types.F:               DO i = 1, SIZE(mixing_store%rhoin_old)
./qs_density_mixing_types.F:                  DEALLOCATE (mixing_store%rhoin_old(i)%cc)
./qs_density_mixing_types.F:               DEALLOCATE (mixing_store%rhoin_old)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_in)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix_set(mixing_store%rho_ao_in)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_in_old)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix_set(mixing_store%rho_ao_in_old)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_lastres)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix_set(mixing_store%rho_ao_lastres)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_in_buffer)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix_set(mixing_store%rho_ao_in_buffer)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_res_buffer)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix_set(mixing_store%rho_ao_res_buffer)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_mix)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix(mixing_store%rho_ao_mix)
./qs_density_mixing_types.F:            IF (ASSOCIATED(mixing_store%rho_ao_res)) THEN
./qs_density_mixing_types.F:               CALL dbcsr_deallocate_matrix(mixing_store%rho_ao_res)
./qs_density_mixing_types.F:                          "introduced to suppress charge sloshing: rho_mix(g) ="// &
./qs_density_mixing_types.F:                          "rho_in(g) + alpha*g^2/(g^2 + beta^2)*(rho_out(g)-"// &
./qs_density_mixing_types.F:                          "rho_in(g))", &
./cell_methods.F:      cell%orthorhombic = .FALSE.
./cell_methods.F:         IF (cell%orthorhombic) THEN
./cell_methods.F:               TRIM(my_label)//" Numerically orthorhombic: ", "YES"
./cell_methods.F:               TRIM(my_label)//" Numerically orthorhombic: ", " NO"
./lri_environment_types.F:   TYPE lri_rhoab_type
./lri_environment_types.F:   END TYPE lri_rhoab_type
./lri_environment_types.F:   TYPE lri_int_rho_type
./lri_environment_types.F:   END TYPE lri_int_rho_type
./lri_environment_types.F:      TYPE(lri_int_rho_type), DIMENSION(:), POINTER           :: lri_int_rho
./lri_environment_types.F:      TYPE(lri_rhoab_type), DIMENSION(:), POINTER             :: lri_rhoab
./lri_environment_types.F:      REAL(KIND=dp)                                             :: rho_tt
./lri_environment_types.F:      REAL(KIND=dp)                                             :: rho_sr
./lri_environment_types.F:      REAL(KIND=dp)                                             :: rho_ff
./lri_environment_types.F:      REAL(KIND=dp)                                             :: rho_1c
./lri_environment_types.F:      REAL(KIND=dp)                                             :: rhos_mem
./lri_environment_types.F:      ! local integral of rho**2; for optimization
./lri_environment_types.F:      TYPE(lri_list_type), POINTER                            :: lri_ints_rho
./lri_environment_types.F:      TYPE(lri_list_p_type), DIMENSION(:), POINTER            :: lri_rhos
./lri_environment_types.F:             lri_int_type, lri_int_rho_type, lri_density_type, &
./lri_environment_types.F:             lri_kind_type, lri_rhoab_type
./lri_environment_types.F:             allocate_lri_ints, allocate_lri_ints_rho, lri_density_create, &
./lri_environment_types.F:             lri_density_release, allocate_lri_rhos, allocate_lri_force_components, &
./lri_environment_types.F:             deallocate_lri_ints, deallocate_lri_ints_rho, &
./lri_environment_types.F:      NULLIFY (lri_env%lri_ints_rho)
./lri_environment_types.F:         IF (ASSOCIATED(lri_env%lri_ints_rho)) THEN
./lri_environment_types.F:            CALL deallocate_lri_ints_rho(lri_env%lri_ints_rho)
./lri_environment_types.F:      NULLIFY (lri_density%lri_rhos)
./lri_environment_types.F:         CALL deallocate_lri_rhos(lri_density%lri_rhos)
./lri_environment_types.F:!> \brief allocate lri_ints_rho, storing integral for the exact density
./lri_environment_types.F:!> \param lri_ints_rho structure storing the integrals (aa,bb)
./lri_environment_types.F:   SUBROUTINE allocate_lri_ints_rho(lri_env, lri_ints_rho, nkind)
./lri_environment_types.F:      TYPE(lri_list_type), POINTER                       :: lri_ints_rho
./lri_environment_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'allocate_lri_ints_rho', &
./lri_environment_types.F:      TYPE(lri_int_rho_type), POINTER                    :: lriir
./lri_environment_types.F:      ALLOCATE (lri_ints_rho)
./lri_environment_types.F:      lri_ints_rho%nkind = nkind
./lri_environment_types.F:      ALLOCATE (lri_ints_rho%lri_atom(nkind*nkind))
./lri_environment_types.F:         NULLIFY (lri_ints_rho%lri_atom(i)%lri_node)
./lri_environment_types.F:         lri_ints_rho%lri_atom(i)%natom = 0
./lri_environment_types.F:         IF (.NOT. ASSOCIATED(lri_ints_rho%lri_atom(iac)%lri_node)) THEN
./lri_environment_types.F:            lri_ints_rho%lri_atom(iac)%natom = nlist
./lri_environment_types.F:            ALLOCATE (lri_ints_rho%lri_atom(iac)%lri_node(nlist))
./lri_environment_types.F:               NULLIFY (lri_ints_rho%lri_atom(iac)%lri_node(i)%lri_int_rho)
./lri_environment_types.F:               lri_ints_rho%lri_atom(iac)%lri_node(i)%nnode = 0
./lri_environment_types.F:         IF (.NOT. ASSOCIATED(lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho)) THEN
./lri_environment_types.F:            lri_ints_rho%lri_atom(iac)%lri_node(ilist)%nnode = nneighbor
./lri_environment_types.F:            ALLOCATE (lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho(nneighbor))
./lri_environment_types.F:         lriir => lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho(jneighbor)
./lri_environment_types.F:   END SUBROUTINE allocate_lri_ints_rho
./lri_environment_types.F:!> \brief creates and initializes lri_rhos
./lri_environment_types.F:!> \param lri_rhos structure storing tvec and avec
./lri_environment_types.F:   SUBROUTINE allocate_lri_rhos(lri_env, lri_rhos, nspin, nkind)
./lri_environment_types.F:      TYPE(lri_list_p_type), DIMENSION(:), POINTER       :: lri_rhos
./lri_environment_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'allocate_lri_rhos', &
./lri_environment_types.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_environment_types.F:      TYPE(lri_rhoab_type), POINTER                      :: lrho
./lri_environment_types.F:      NULLIFY (lri_rho, lrho, lrii, nl_iterator)
./lri_environment_types.F:      ALLOCATE (lri_rhos(nspin))
./lri_environment_types.F:      lri_env%stat%rhos_mem = 0.0_dp
./lri_environment_types.F:         ALLOCATE (lri_rhos(ispin)%lri_list)
./lri_environment_types.F:         lri_rhos(ispin)%lri_list%nkind = nkind
./lri_environment_types.F:         ALLOCATE (lri_rhos(ispin)%lri_list%lri_atom(nkind*nkind))
./lri_environment_types.F:            NULLIFY (lri_rhos(ispin)%lri_list%lri_atom(i)%lri_node)
./lri_environment_types.F:            lri_rhos(ispin)%lri_list%lri_atom(i)%natom = 0
./lri_environment_types.F:         lri_rho => lri_rhos(ispin)%lri_list
./lri_environment_types.F:            IF (.NOT. ASSOCIATED(lri_rho%lri_atom(iac)%lri_node)) THEN
./lri_environment_types.F:               lri_rho%lri_atom(iac)%natom = nlist
./lri_environment_types.F:               ALLOCATE (lri_rho%lri_atom(iac)%lri_node(nlist))
./lri_environment_types.F:                  NULLIFY (lri_rho%lri_atom(iac)%lri_node(i)%lri_rhoab)
./lri_environment_types.F:                  lri_rho%lri_atom(iac)%lri_node(i)%nnode = 0
./lri_environment_types.F:            IF (.NOT. ASSOCIATED(lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab)) THEN
./lri_environment_types.F:               lri_rho%lri_atom(iac)%lri_node(ilist)%nnode = nneighbor
./lri_environment_types.F:               ALLOCATE (lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(nneighbor))
./lri_environment_types.F:            lrho => lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(jneighbor)
./lri_environment_types.F:            lrho%nba = lrii%nba
./lri_environment_types.F:            lrho%nbb = lrii%nbb
./lri_environment_types.F:            lrho%nfa = lrii%nfa
./lri_environment_types.F:            lrho%nfb = lrii%nfb
./lri_environment_types.F:            nfa = lrho%nfa
./lri_environment_types.F:            nfb = lrho%nfb
./lri_environment_types.F:            NULLIFY (lrho%avec, lrho%tvec)
./lri_environment_types.F:                     ALLOCATE (lrho%avec(nfa))
./lri_environment_types.F:                     ALLOCATE (lrho%tvec(nfa))
./lri_environment_types.F:                     lri_env%stat%rhos_mem = lri_env%stat%rhos_mem+2*nfa
./lri_environment_types.F:                  ALLOCATE (lrho%avec(nn))
./lri_environment_types.F:                  ALLOCATE (lrho%tvec(nn))
./lri_environment_types.F:                  lri_env%stat%rhos_mem = lri_env%stat%rhos_mem+2*nn
./lri_environment_types.F:            NULLIFY (lrho%aveca, lrho%tveca)
./lri_environment_types.F:            NULLIFY (lrho%avecb, lrho%tvecb)
./lri_environment_types.F:               ALLOCATE (lrho%aveca(nfa))
./lri_environment_types.F:               ALLOCATE (lrho%avecb(nfb))
./lri_environment_types.F:               ALLOCATE (lrho%tveca(nfa))
./lri_environment_types.F:               ALLOCATE (lrho%tvecb(nfb))
./lri_environment_types.F:               lri_env%stat%rhos_mem = lri_env%stat%rhos_mem+2*(nfa+nfb)
./lri_environment_types.F:   END SUBROUTINE allocate_lri_rhos
./lri_environment_types.F:!> \brief deallocates the given lri_ints_rho
./lri_environment_types.F:!> \param lri_ints_rho ...
./lri_environment_types.F:   SUBROUTINE deallocate_lri_ints_rho(lri_ints_rho)
./lri_environment_types.F:      TYPE(lri_list_type), POINTER                       :: lri_ints_rho
./lri_environment_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_lri_ints_rho', &
./lri_environment_types.F:      CPASSERT(ASSOCIATED(lri_ints_rho))
./lri_environment_types.F:      nkind = lri_ints_rho%nkind
./lri_environment_types.F:         DO ijkind = 1, SIZE(lri_ints_rho%lri_atom)
./lri_environment_types.F:            natom = lri_ints_rho%lri_atom(ijkind)%natom
./lri_environment_types.F:                  nnode = lri_ints_rho%lri_atom(ijkind)%lri_node(iatom)%nnode
./lri_environment_types.F:                     IF (ASSOCIATED(lri_ints_rho%lri_atom(ijkind)%lri_node(iatom)%lri_int_rho)) THEN
./lri_environment_types.F:                           IF (ASSOCIATED(lri_ints_rho%lri_atom(ijkind)%lri_node(iatom)%lri_int_rho(inode)%soaabb)) THEN
./lri_environment_types.F:                              DEALLOCATE (lri_ints_rho%lri_atom(ijkind)%lri_node(iatom)%lri_int_rho(inode)%soaabb)
./lri_environment_types.F:                        DEALLOCATE (lri_ints_rho%lri_atom(ijkind)%lri_node(iatom)%lri_int_rho)
./lri_environment_types.F:               DEALLOCATE (lri_ints_rho%lri_atom(ijkind)%lri_node)
./lri_environment_types.F:         DEALLOCATE (lri_ints_rho%lri_atom)
./lri_environment_types.F:      DEALLOCATE (lri_ints_rho)
./lri_environment_types.F:   END SUBROUTINE deallocate_lri_ints_rho
./lri_environment_types.F:!> \brief deallocates the given lri_rhos
./lri_environment_types.F:!> \param lri_rhos ...
./lri_environment_types.F:   SUBROUTINE deallocate_lri_rhos(lri_rhos)
./lri_environment_types.F:      TYPE(lri_list_p_type), DIMENSION(:), POINTER       :: lri_rhos
./lri_environment_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_lri_rhos', &
./lri_environment_types.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_environment_types.F:      TYPE(lri_rhoab_type), POINTER                      :: lri_rhoab
./lri_environment_types.F:      NULLIFY (lri_rho)
./lri_environment_types.F:      IF (ASSOCIATED(lri_rhos)) THEN
./lri_environment_types.F:         DO i = 1, SIZE(lri_rhos)
./lri_environment_types.F:            lri_rho => lri_rhos(i)%lri_list
./lri_environment_types.F:            CPASSERT(ASSOCIATED(lri_rho))
./lri_environment_types.F:            nkind = lri_rho%nkind
./lri_environment_types.F:               DO ijkind = 1, SIZE(lri_rho%lri_atom)
./lri_environment_types.F:                  natom = lri_rho%lri_atom(ijkind)%natom
./lri_environment_types.F:                        nnode = lri_rho%lri_atom(ijkind)%lri_node(iatom)%nnode
./lri_environment_types.F:                           IF (ASSOCIATED(lri_rho%lri_atom(ijkind)%lri_node(iatom)%lri_rhoab)) THEN
./lri_environment_types.F:                                 lri_rhoab => lri_rho%lri_atom(ijkind)%lri_node(iatom)%lri_rhoab(inode)
./lri_environment_types.F:                                 IF (ASSOCIATED(lri_rhoab%avec)) DEALLOCATE (lri_rhoab%avec)
./lri_environment_types.F:                                 IF (ASSOCIATED(lri_rhoab%tvec)) DEALLOCATE (lri_rhoab%tvec)
./lri_environment_types.F:                                 IF (ASSOCIATED(lri_rhoab%aveca)) DEALLOCATE (lri_rhoab%aveca)
./lri_environment_types.F:                                 IF (ASSOCIATED(lri_rhoab%tveca)) DEALLOCATE (lri_rhoab%tveca)
./lri_environment_types.F:                                 IF (ASSOCIATED(lri_rhoab%avecb)) DEALLOCATE (lri_rhoab%avecb)
./lri_environment_types.F:                                 IF (ASSOCIATED(lri_rhoab%tvecb)) DEALLOCATE (lri_rhoab%tvecb)
./lri_environment_types.F:                              DEALLOCATE (lri_rho%lri_atom(ijkind)%lri_node(iatom)%lri_rhoab)
./lri_environment_types.F:                     DEALLOCATE (lri_rho%lri_atom(ijkind)%lri_node)
./lri_environment_types.F:               DEALLOCATE (lri_rho%lri_atom)
./lri_environment_types.F:            DEALLOCATE (lri_rho)
./lri_environment_types.F:         DEALLOCATE (lri_rhos)
./lri_environment_types.F:      NULLIFY (lri_rhos)
./lri_environment_types.F:   END SUBROUTINE deallocate_lri_rhos
./pw/dgs.F:!> \param rhos ...
./pw/dgs.F:   SUBROUTINE dg_sum_patch_coef(rs, rhos, center)
./pw/dgs.F:      TYPE(pw_p_type), INTENT(IN)                        :: rhos
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 1), rhos%pw%pw_grid%bounds(2, 1)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 1)+1
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 2), rhos%pw%pw_grid%bounds(2, 2)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 2)+1
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 3), rhos%pw%pw_grid%bounds(2, 3)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 3)+1
./pw/dgs.F:         CALL dg_add_patch(rs%r, rhos%pw%cr3d, rhos%pw%pw_grid%npts, &
./pw/dgs.F:         CALL dg_add_patch(rs%r, rhos%pw%cr3d, rhos%pw%pw_grid%npts, nc)
./pw/dgs.F:!> \param rhos ...
./pw/dgs.F:   SUBROUTINE dg_sum_patch_arr(rs, rhos, center)
./pw/dgs.F:      REAL(KIND=dp), DIMENSION(:, :, :), INTENT(IN)      :: rhos
./pw/dgs.F:      ns(1) = SIZE(rhos, 1)
./pw/dgs.F:      ns(2) = SIZE(rhos, 2)
./pw/dgs.F:      ns(3) = SIZE(rhos, 3)
./pw/dgs.F:         CALL dg_add_patch(rs%r, rhos, ns, rs%px, rs%py, rs%pz)
./pw/dgs.F:         CALL dg_add_patch(rs%r, rhos, ns, nc)
./pw/dgs.F:!> \param rhos ...
./pw/dgs.F:   SUBROUTINE dg_sum_patch_force_arr_3d(drpot, rhos, center, force)
./pw/dgs.F:      REAL(KIND=dp), DIMENSION(:, :, :), INTENT(IN)      :: rhos
./pw/dgs.F:      ns(1) = SIZE(rhos, 1)
./pw/dgs.F:      ns(2) = SIZE(rhos, 2)
./pw/dgs.F:      ns(3) = SIZE(rhos, 3)
./pw/dgs.F:                              drpot(3)%rs_grid%r, rhos, force, ns, &
./pw/dgs.F:                              drpot(3)%rs_grid%r, rhos, force, ns, nc)
./pw/dgs.F:!> \param rhos ...
./pw/dgs.F:   SUBROUTINE dg_sum_patch_force_arr_1d(drpot, rhos, center, force)
./pw/dgs.F:      REAL(KIND=dp), DIMENSION(:, :, :), INTENT(IN)      :: rhos
./pw/dgs.F:      ns(1) = SIZE(rhos, 1)
./pw/dgs.F:      ns(2) = SIZE(rhos, 2)
./pw/dgs.F:      ns(3) = SIZE(rhos, 3)
./pw/dgs.F:         CALL dg_int_patch_1d(drpot%r, rhos, force, ns, &
./pw/dgs.F:         CALL dg_int_patch_1d(drpot%r, rhos, force, ns, nc)
./pw/dgs.F:!> \param rhos ...
./pw/dgs.F:   SUBROUTINE dg_sum_patch_force_coef_3d(drpot, rhos, center, force)
./pw/dgs.F:      TYPE(pw_p_type), INTENT(IN)                        :: rhos
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 1), rhos%pw%pw_grid%bounds(2, 1)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 1)+1
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 2), rhos%pw%pw_grid%bounds(2, 2)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 2)+1
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 3), rhos%pw%pw_grid%bounds(2, 3)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 3)+1
./pw/dgs.F:                              drpot(3)%rs_grid%r, rhos%pw%cr3d, force, rhos%pw%pw_grid%npts, &
./pw/dgs.F:                              drpot(3)%rs_grid%r, rhos%pw%cr3d, force, rhos%pw%pw_grid%npts, nc)
./pw/dgs.F:!> \param rhos ...
./pw/dgs.F:   SUBROUTINE dg_sum_patch_force_coef_1d(drpot, rhos, center, force)
./pw/dgs.F:      TYPE(pw_p_type), INTENT(IN)                        :: rhos
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 1), rhos%pw%pw_grid%bounds(2, 1)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 1)+1
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 2), rhos%pw%pw_grid%bounds(2, 2)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 2)+1
./pw/dgs.F:      DO i = rhos%pw%pw_grid%bounds(1, 3), rhos%pw%pw_grid%bounds(2, 3)
./pw/dgs.F:         ia = i-rhos%pw%pw_grid%bounds(1, 3)+1
./pw/dgs.F:         CALL dg_int_patch_1d(drpot%r, rhos%pw%cr3d, force, &
./pw/dgs.F:                              rhos%pw%pw_grid%npts, drpot%px, drpot%py, drpot%pz)
./pw/dgs.F:         CALL dg_int_patch_1d(drpot%r, rhos%pw%cr3d, force, rhos%pw%pw_grid%npts, nc)
./pw/dgs.F:!> \param rho0 ...
./pw/dgs.F:!> \param rhos1 ...
./pw/dgs.F:   SUBROUTINE dg_get_patch_1(rho0, rhos1, charge1, ex1, ey1, ez1)
./pw/dgs.F:      TYPE(pw_p_type), INTENT(IN)                        :: rho0
./pw/dgs.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rhos1
./pw/dgs.F:      nd = rhos1%pw%pw_grid%npts
./pw/dgs.F:      IF (rho0%pw%in_use == REALDATA3D) &
./pw/dgs.F:         CALL vr_x_vc(rho0%pw%cr3d, cd)
./pw/dgs.F:      IF (rho0%pw%in_use == COMPLEXDATA3D) &
./pw/dgs.F:         CALL vc_x_vc(rho0%pw%cc3d, cd)
./pw/dgs.F:      CALL copy_cr(cd, rhos1%pw%cr3d)
./pw/dgs.F:!> \param rho0 ...
./pw/dgs.F:!> \param rhos1 ...
./pw/dgs.F:!> \param rhos2 ...
./pw/dgs.F:   SUBROUTINE dg_get_patch_2(rho0, rhos1, rhos2, charge1, charge2, &
./pw/dgs.F:      TYPE(pw_p_type), INTENT(IN)                        :: rho0
./pw/dgs.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rhos1, rhos2
./pw/dgs.F:      nd = rhos1%pw%pw_grid%npts
./pw/dgs.F:      IF (rho0%pw%in_use == REALDATA3D) &
./pw/dgs.F:         CALL vr_x_vc(rho0%pw%cr3d, cd)
./pw/dgs.F:      IF (rho0%pw%in_use == COMPLEXDATA3D) &
./pw/dgs.F:         CALL vc_x_vc(rho0%pw%cc3d, cd)
./pw/dgs.F:      CALL copy_cri(cd, rhos1%pw%cr3d, rhos2%pw%cr3d)
./pw/ps_wavelet_util.F:!> \brief Calculate the Poisson equation $\nabla^2 V(x,y,z)=-4 \pi \rho(x,y,z)$
./pw/ps_wavelet_util.F:!>     from a given $\rho$, for different boundary conditions an for different data distributions.
./pw/ps_wavelet_util.F:!> \param rhopot main input/output array.
./pw/ps_wavelet_util.F:                      rhopot, karray, pw_grid)
./pw/ps_wavelet_util.F:      REAL(KIND=dp), DIMENSION(*), INTENT(inout)         :: rhopot
./pw/ps_wavelet_util.F:      !let us calculate the dimension of the portion of the rhopot array to be passed
./pw/ps_wavelet_util.F:      !nxt is the dimension of the part of rhopot that must be passed to the gradient routine
./pw/ps_wavelet_util.F:      !nwb is the dimension of the part of rhopot in the wb-postprocessing routine
./pw/ps_wavelet_util.F:         CALL scale_and_distribute(m1, m3, md1, md2, md3, nxc, rhopot, zf, nproc, red_fact)
./pw/ps_wavelet_util.F:      CALL scale_and_distribute(m1, m3, md1, md2, md3, nxc, zf, rhopot, nproc, red_fact)
./pw/ps_wavelet_util.F:!> \param rhopot ...
./pw/ps_wavelet_util.F:                                   rhopot, zf, nproc, factor)
./pw/ps_wavelet_util.F:         INTENT(inout)                                   :: zf, rhopot
./pw/ps_wavelet_util.F:                  zf(j1, j3, jp2) = factor*rhopot(j1, j3, jp2)
./pw/ps_wavelet_methods.F:      NULLIFY (wavelet%karray, wavelet%rho_z_sliced)
./pw/ps_wavelet_methods.F:      ALLOCATE (wavelet%rho_z_sliced(md1, md3, z_dim))
./pw/ps_wavelet_methods.F:      wavelet%rho_z_sliced = 0.0_dp
./pw/ps_wavelet_methods.F:                        wavelet%rho_z_sliced(m, l, k) = rbuf(ii+rdispl(dest+1))
./pw/ps_wavelet_methods.F:                        sbuf(ii) = wavelet%rho_z_sliced(k, l, m)
./pw/ps_wavelet_methods.F:                   wavelet%rho_z_sliced, wavelet%karray, pw_grid)
./pw/dg_types.F:   USE dg_rho0_types,                   ONLY: dg_rho0_create,&
./pw/dg_types.F:                                              dg_rho0_release,&
./pw/dg_types.F:                                              dg_rho0_retain,&
./pw/dg_types.F:                                              dg_rho0_type
./pw/dg_types.F:      TYPE(dg_rho0_type), POINTER :: dg_rho0
./pw/dg_types.F:!> \param dg_rho0 ...
./pw/dg_types.F:   SUBROUTINE dg_get(dg, id_nr, grid_index, dg_rho0)
./pw/dg_types.F:      TYPE(dg_rho0_type), OPTIONAL, POINTER              :: dg_rho0
./pw/dg_types.F:      IF (PRESENT(dg_rho0)) dg_rho0 => dg%dg_rho0
./pw/dg_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_types.F:      NULLIFY (dg_rho0)
./pw/dg_types.F:      CALL dg_rho0_create(dg_rho0)
./pw/dg_types.F:      dg%dg_rho0 => dg_rho0
./pw/dg_types.F:            CALL dg_rho0_release(dg%dg_rho0)
./pw/dg_types.F:!> \param dg_rho0 ...
./pw/dg_types.F:   SUBROUTINE dg_set(dg, dg_rho0, grid_index)
./pw/dg_types.F:      TYPE(dg_rho0_type), OPTIONAL, POINTER              :: dg_rho0
./pw/dg_types.F:      IF (PRESENT(dg_rho0)) THEN
./pw/dg_types.F:         CALL dg_rho0_retain(dg_rho0)
./pw/dg_types.F:         CALL dg_rho0_release(dg%dg_rho0)
./pw/dg_types.F:         dg%dg_rho0 => dg_rho0
./pw/pw_poisson_methods.F:!> \param rho_core ...
./pw/pw_poisson_methods.F:                               dvhartree, h_stress, rho_core)
./pw/pw_poisson_methods.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: rho_core
./pw/pw_poisson_methods.F:      TYPE(pw_type), POINTER                             :: rhog, rhor, tmpg, vhartree_rs
./pw/pw_poisson_methods.F:      NULLIFY (rhog)
./pw/pw_poisson_methods.F:      CALL pw_pool_create_pw(pw_pool, rhog, use_data=COMPLEXDATA1D, in_space=RECIPROCALSPACE)
./pw/pw_poisson_methods.F:            CALL pw_transfer(density, rhog)
./pw/pw_poisson_methods.F:               CALL pw_copy(rhog, tmpg)
./pw/pw_poisson_methods.F:            rhog%cc(:) = rhog%cc(:)*poisson_env%green_fft%influence_fn%cc(:)
./pw/pw_poisson_methods.F:               CALL pw_transfer(rhog, vhartree)
./pw/pw_poisson_methods.F:               ehartree = 0.5_dp*pw_integral_ab(rhog, tmpg)
./pw/pw_poisson_methods.F:            IF (has_dielectric .AND. PRESENT(rho_core)) THEN
./pw/pw_poisson_methods.F:                                          density, rho_core=rho_core%pw)
./pw/pw_poisson_methods.F:                                          density, rho_core=rho_core%pw)
./pw/pw_poisson_methods.F:            CALL pw_pool_create_pw(pw_pool, rhor, use_data=REALDATA3D, in_space=REALSPACE)
./pw/pw_poisson_methods.F:            CALL pw_transfer(density, rhor)
./pw/pw_poisson_methods.F:               CALL implicit_poisson_solver_periodic(poisson_env, rhor, vhartree_rs, &
./pw/pw_poisson_methods.F:               CALL implicit_poisson_solver_neumann(poisson_env, rhor, vhartree_rs, &
./pw/pw_poisson_methods.F:               CALL implicit_poisson_solver_mixed_periodic(poisson_env, rhor, vhartree_rs, &
./pw/pw_poisson_methods.F:               CALL implicit_poisson_solver_mixed(poisson_env, rhor, vhartree_rs, &
./pw/pw_poisson_methods.F:            IF (PRESENT(dvhartree)) CALL pw_transfer(rhor, rhog)
./pw/pw_poisson_methods.F:            CALL pw_pool_give_back_pw(pw_pool, rhor)
./pw/pw_poisson_methods.F:         CALL pw_pool_create_pw(pw_pool, rhor, use_data=REALDATA3D, in_space=REALSPACE)
./pw/pw_poisson_methods.F:         CALL pw_transfer(density, rhor)
./pw/pw_poisson_methods.F:         CALL cp2k_distribution_to_z_slices(rhor, poisson_env%wavelet, rhor%pw_grid)
./pw/pw_poisson_methods.F:         CALL ps_wavelet_solve(poisson_env%wavelet, rhor%pw_grid)
./pw/pw_poisson_methods.F:         CALL z_slices_to_cp2k_distribution(rhor, poisson_env%wavelet, rhor%pw_grid)
./pw/pw_poisson_methods.F:            CALL pw_transfer(rhor, vhartree)
./pw/pw_poisson_methods.F:            ehartree = 0.5_dp*pw_integral_ab(density, rhor)
./pw/pw_poisson_methods.F:            CALL pw_transfer(rhor, rhog)
./pw/pw_poisson_methods.F:         CALL pw_pool_give_back_pw(pw_pool, rhor)
./pw/pw_poisson_methods.F:            CALL pw_copy(rhog, dvg(i)%pw)
./pw/pw_poisson_methods.F:      CALL pw_pool_give_back_pw(pw_pool, rhog)
./pw/dielectric_types.F:      REAL(KIND=dp)                          :: rho_min
./pw/dielectric_types.F:      REAL(KIND=dp)                          :: rho_max
./pw/dielectric_types.F:      TYPE(pw_type), POINTER            :: deps_drho
./pw/dielectric_types.F:                                           derivative_fft_use_drho = 102
./pw/dielectric_types.F:   INTEGER, PARAMETER, PUBLIC           :: rho_dependent = 10, &
./pw/dielectric_types.F:                                           spatially_rho_dependent = 30
./pw/dielectric_types.F:            CALL pw_pool_give_back_pw(pw_pool, dielectric%deps_drho, &
./pw/dielectric_types.F:            CALL pw_release(dielectric%deps_drho)
./pw/pw_grids.F:!> \param orthorhombic ...
./pw/pw_grids.F:                               ngpts_cut, dr, cutoff, orthorhombic, gvectors, gsquare)
./pw/pw_grids.F:      LOGICAL, INTENT(OUT), OPTIONAL                     :: orthorhombic
./pw/pw_grids.F:      IF (PRESENT(orthorhombic)) orthorhombic = pw_grid%orthorhombic
./pw/pw_grids.F:!>      JGH (21-May-2002) : Remove orthorhombic keyword (code is fast enough)
./pw/pw_grids.F:         pw_grid%orthorhombic = .TRUE.
./pw/pw_grids.F:         pw_grid%orthorhombic = .FALSE.
./pw/realspace_grid_cube.F:            ! latest version of VMD can read non orthorhombic cells
./pw/realspace_grid_cube.F:         ! latest version of VMD can read non orthorhombic cells
./pw/pw_grid_types.F:      LOGICAL :: orthorhombic ! cell symmetry
./pw/pw_grid_info.F:!>      JGH (21-05-2002) : Optimise code, remove orthorhombic special case
./pw/ps_wavelet_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER    :: rho_z_sliced
./pw/ps_wavelet_types.F:         IF (ASSOCIATED(wavelet%rho_z_sliced)) &
./pw/ps_wavelet_types.F:            DEALLOCATE (wavelet%rho_z_sliced)
./pw/realspace_grid_types.F:      LOGICAL :: orthorhombic ! grid symmetry
./pw/realspace_grid_types.F:      desc%orthorhombic = pw_grid%orthorhombic
./pw/ps_implicit_methods.F:!>        v_eps = - \frac{1}{8*\pi} * |\nabla_r(v)|^2 * \frac{d \eps}{d \rho}
./pw/ps_implicit_methods.F:      TYPE(pw_type), POINTER                             :: deps_drho, dv2
./pw/ps_implicit_methods.F:      deps_drho => dielectric%deps_drho
./pw/ps_implicit_methods.F:      v_eps%cr3d = -(1.0_dp/eightpi)*(dv2%cr3d*deps_drho%cr3d)
./pw/ps_implicit_methods.F:! E_H = \frac{1}{2} * \int \rho * v dr
./pw/ps_implicit_methods.F:      REAL(dp)                                           :: dvol, ehartree_rho, ehartree_rho_cstr
./pw/ps_implicit_methods.F:! E_H = \frac{1}{2} * \int \rho * v dr + \frac{1}{8 \pi} * \int Btxlambda * v dr
./pw/ps_implicit_methods.F:      ehartree_rho = accurate_sum(density%cr3d*v%cr3d)
./pw/ps_implicit_methods.F:      ehartree_rho_cstr = accurate_sum(eps%cr3d*Btxlambda*v%cr3d/fourpi)
./pw/ps_implicit_methods.F:      ehartree_rho = 0.5_dp*ehartree_rho*dvol
./pw/ps_implicit_methods.F:      ehartree_rho_cstr = 0.5_dp*ehartree_rho_cstr*dvol
./pw/ps_implicit_methods.F:      CALL mp_sum(ehartree_rho, pw_grid%para%group)
./pw/ps_implicit_methods.F:      CALL mp_sum(ehartree_rho_cstr, pw_grid%para%group)
./pw/ps_implicit_methods.F:      electric_enthalpy = ehartree_rho+ehartree_rho_cstr
./pw/ps_implicit_methods.F:      ehartree = ehartree_rho-ehartree_rho_cstr
./pw/pw_poisson_types.F:      !CPASSERT(cell%orthorhombic)
./pw/dg_rho0_types.F:MODULE dg_rho0_types
./pw/dg_rho0_types.F:   PUBLIC:: dg_rho0_type, dg_rho0_init, dg_rho0_set, dg_rho0_get, &
./pw/dg_rho0_types.F:            dg_rho0_create, dg_rho0_retain, dg_rho0_release
./pw/dg_rho0_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'dg_rho0_types'
./pw/dg_rho0_types.F:   INTEGER, PRIVATE, SAVE :: last_dg_rho0_id_nr = 0
./pw/dg_rho0_types.F:   TYPE dg_rho0_type
./pw/dg_rho0_types.F:   END TYPE dg_rho0_type
./pw/dg_rho0_types.F:!> \brief   Set the dg_rho0_type
./pw/dg_rho0_types.F:!> \param dg_rho0 ...
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_set(dg_rho0, TYPE, grid, kind, cutoff_radius, &
./pw/dg_rho0_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'dg_rho0_set', routineP = moduleN//':'//routineN
./pw/dg_rho0_types.F:      IF (PRESENT(grid)) dg_rho0%grid = grid
./pw/dg_rho0_types.F:      IF (PRESENT(kind)) dg_rho0%kind = kind
./pw/dg_rho0_types.F:      IF (PRESENT(density)) dg_rho0%density = density
./pw/dg_rho0_types.F:      IF (PRESENT(gcc)) dg_rho0%gcc => gcc
./pw/dg_rho0_types.F:      IF (PRESENT(zet)) dg_rho0%zet => zet
./pw/dg_rho0_types.F:      IF (PRESENT(TYPE)) dg_rho0%type = TYPE
./pw/dg_rho0_types.F:      IF (PRESENT(cutoff_radius)) dg_rho0%cutoff_radius = cutoff_radius
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_set
./pw/dg_rho0_types.F:!> \brief  Get the dg_rho0_type
./pw/dg_rho0_types.F:!> \param dg_rho0 ...
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_get(dg_rho0, cutoff_radius, TYPE, grid, kind, gcc, zet, density)
./pw/dg_rho0_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'dg_rho0_get', routineP = moduleN//':'//routineN
./pw/dg_rho0_types.F:      IF (PRESENT(grid)) grid = dg_rho0%grid
./pw/dg_rho0_types.F:      IF (PRESENT(kind)) kind = dg_rho0%kind
./pw/dg_rho0_types.F:      IF (PRESENT(density)) density = dg_rho0%density
./pw/dg_rho0_types.F:      IF (PRESENT(gcc)) gcc => dg_rho0%gcc
./pw/dg_rho0_types.F:      IF (PRESENT(zet)) zet => dg_rho0%zet
./pw/dg_rho0_types.F:      IF (PRESENT(TYPE)) TYPE = dg_rho0%type
./pw/dg_rho0_types.F:      IF (PRESENT(cutoff_radius)) cutoff_radius = dg_rho0%cutoff_radius
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_get
./pw/dg_rho0_types.F:!> \brief   create the dg_rho0 structure
./pw/dg_rho0_types.F:!> \param dg_rho0 ...
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_create(dg_rho0)
./pw/dg_rho0_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'dg_rho0_create', routineP = moduleN//':'//routineN
./pw/dg_rho0_types.F:      ALLOCATE (dg_rho0)
./pw/dg_rho0_types.F:      NULLIFY (dg_rho0%gcc)
./pw/dg_rho0_types.F:      NULLIFY (dg_rho0%zet)
./pw/dg_rho0_types.F:      dg_rho0%cutoff_radius = 0.0_dp
./pw/dg_rho0_types.F:      dg_rho0%grid = 0
./pw/dg_rho0_types.F:      dg_rho0%kind = 0
./pw/dg_rho0_types.F:      dg_rho0%type = do_ewald_none
./pw/dg_rho0_types.F:      last_dg_rho0_id_nr = last_dg_rho0_id_nr+1
./pw/dg_rho0_types.F:      dg_rho0%id_nr = last_dg_rho0_id_nr
./pw/dg_rho0_types.F:      dg_rho0%ref_count = 1
./pw/dg_rho0_types.F:      NULLIFY (dg_rho0%density%pw)
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_create
./pw/dg_rho0_types.F:!> \brief retains the given dg_rho0_type
./pw/dg_rho0_types.F:!> \param dg_rho0 the dg_rho0_type to retain
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_retain(dg_rho0)
./pw/dg_rho0_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'dg_rho0_retain', routineP = moduleN//':'//routineN
./pw/dg_rho0_types.F:      CPASSERT(ASSOCIATED(dg_rho0))
./pw/dg_rho0_types.F:      CPASSERT(dg_rho0%ref_count > 0)
./pw/dg_rho0_types.F:      dg_rho0%ref_count = dg_rho0%ref_count+1
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_retain
./pw/dg_rho0_types.F:!> \brief releases the given dg_rho0_type
./pw/dg_rho0_types.F:!> \param dg_rho0 the dg_rho0_type to release
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_release(dg_rho0)
./pw/dg_rho0_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'dg_rho0_release', &
./pw/dg_rho0_types.F:      IF (ASSOCIATED(dg_rho0)) THEN
./pw/dg_rho0_types.F:         CPASSERT(dg_rho0%ref_count > 0)
./pw/dg_rho0_types.F:         dg_rho0%ref_count = dg_rho0%ref_count-1
./pw/dg_rho0_types.F:         IF (dg_rho0%ref_count == 0) THEN
./pw/dg_rho0_types.F:            IF (ASSOCIATED(dg_rho0%gcc)) THEN
./pw/dg_rho0_types.F:               DEALLOCATE (dg_rho0%gcc)
./pw/dg_rho0_types.F:            IF (ASSOCIATED(dg_rho0%zet)) THEN
./pw/dg_rho0_types.F:               DEALLOCATE (dg_rho0%zet)
./pw/dg_rho0_types.F:            CALL pw_release(dg_rho0%density%pw)
./pw/dg_rho0_types.F:            NULLIFY (dg_rho0%gcc)
./pw/dg_rho0_types.F:            NULLIFY (dg_rho0%zet)
./pw/dg_rho0_types.F:            DEALLOCATE (dg_rho0)
./pw/dg_rho0_types.F:      NULLIFY (dg_rho0)
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_release
./pw/dg_rho0_types.F:!> \param dg_rho0 ...
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_init(dg_rho0, pw_grid)
./pw/dg_rho0_types.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'dg_rho0_init', routineP = moduleN//':'//routineN
./pw/dg_rho0_types.F:      CALL pw_release(dg_rho0%density%pw)
./pw/dg_rho0_types.F:      SELECT CASE (dg_rho0%type)
./pw/dg_rho0_types.F:         CALL pw_create(dg_rho0%density%pw, pw_grid, REALDATA3D)
./pw/dg_rho0_types.F:         CALL dg_rho0_pme_gauss(dg_rho0%density, dg_rho0%zet(1))
./pw/dg_rho0_types.F:         CALL pw_create(dg_rho0%density%pw, pw_grid, REALDATA3D)
./pw/dg_rho0_types.F:         CALL dg_rho0_pme_gauss(dg_rho0%density, dg_rho0%zet(1))
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_init
./pw/dg_rho0_types.F:!> \param dg_rho0 ...
./pw/dg_rho0_types.F:   SUBROUTINE dg_rho0_pme_gauss(dg_rho0, alpha)
./pw/dg_rho0_types.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: dg_rho0
./pw/dg_rho0_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'dg_rho0_pme_gauss', &
./pw/dg_rho0_types.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: rho0
./pw/dg_rho0_types.F:      pw_grid => dg_rho0%pw%pw_grid
./pw/dg_rho0_types.F:      CALL pw_zero(dg_rho0%pw)
./pw/dg_rho0_types.F:      rho0 => dg_rho0%pw%cr3d
./pw/dg_rho0_types.F:         rho0(lp, mp, np) = e_gsq
./pw/dg_rho0_types.F:         rho0(ln, mn, nn) = e_gsq
./pw/dg_rho0_types.F:            rho0(lp, mp, np) = 0.0_dp
./pw/dg_rho0_types.F:            rho0(ln, mn, nn) = 0.0_dp
./pw/dg_rho0_types.F:   END SUBROUTINE dg_rho0_pme_gauss
./pw/dg_rho0_types.F:END MODULE dg_rho0_types
./pw/cube_utils.F:      LOGICAL                      :: orthorhombic
./pw/cube_utils.F:      IF (info%orthorhombic) THEN
./pw/cube_utils.F:      IF (info%orthorhombic) THEN
./pw/cube_utils.F:      info%orthorhombic = ortho
./pw/cube_utils.F:      IF (.NOT. info%orthorhombic) THEN
./pw/dielectric_methods.F:        derivative_fft_use_drho, dielectric_parameters, dielectric_type, rho_dependent, &
./pw/dielectric_methods.F:        spatially_dependent, spatially_rho_dependent
./pw/dielectric_methods.F:         NULLIFY (dielectric%deps_drho)
./pw/dielectric_methods.F:         CALL pw_pool_create_pw(pw_pool, dielectric%deps_drho, &
./pw/dielectric_methods.F:         CALL pw_zero(dielectric%deps_drho)
./pw/dielectric_methods.F:!> \param rho electronic density
./pw/dielectric_methods.F:!> \param rho_core core density
./pw/dielectric_methods.F:   SUBROUTINE dielectric_compute_periodic(dielectric, diel_rs_grid, pw_pool, rho, rho_core)
./pw/dielectric_methods.F:      TYPE(pw_type), INTENT(IN), POINTER                 :: rho
./pw/dielectric_methods.F:      TYPE(pw_type), INTENT(IN), OPTIONAL, POINTER       :: rho_core
./pw/dielectric_methods.F:      REAL(dp)                                           :: eps0, rho_max, rho_min
./pw/dielectric_methods.F:      TYPE(pw_p_type), DIMENSION(3)                      :: deps, drho
./pw/dielectric_methods.F:      TYPE(pw_type), POINTER                             :: ln_eps, rho_core_rs, rho_elec_rs
./pw/dielectric_methods.F:      rho_min = dielectric%params%rho_min
./pw/dielectric_methods.F:      rho_max = dielectric%params%rho_max
./pw/dielectric_methods.F:      IF (.NOT. dielec_functiontype .EQ. rho_dependent .AND. &
./pw/dielectric_methods.F:      NULLIFY (rho_elec_rs)
./pw/dielectric_methods.F:      CALL pw_pool_create_pw(pw_pool, rho_elec_rs, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:      ! for evaluating epsilon make sure rho is in the real space
./pw/dielectric_methods.F:      CALL pw_transfer(rho, rho_elec_rs)
./pw/dielectric_methods.F:      IF (PRESENT(rho_core)) THEN
./pw/dielectric_methods.F:         ! make sure rho_core is in the real space
./pw/dielectric_methods.F:         CALL pw_pool_create_pw(pw_pool, rho_core_rs, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:         CALL pw_transfer(rho_core, rho_core_rs)
./pw/dielectric_methods.F:            ! use (rho_elec - rho_core) to compute dielectric to avoid obtaining spurious
./pw/dielectric_methods.F:            CALL pw_axpy(rho_core_rs, rho_elec_rs, -2.0_dp)
./pw/dielectric_methods.F:            CALL pw_axpy(rho_core_rs, rho_elec_rs, -1.0_dp)
./pw/dielectric_methods.F:         CALL pw_pool_give_back_pw(pw_pool, rho_core_rs)
./pw/dielectric_methods.F:         CPABORT("For dielectric constant larger than 1, rho_core has to be present.")
./pw/dielectric_methods.F:      CASE (rho_dependent)
./pw/dielectric_methods.F:         CALL dielectric_constant_sccs(rho_elec_rs, dielectric%eps, dielectric%deps_drho, &
./pw/dielectric_methods.F:                                       eps0, rho_max, rho_min)
./pw/dielectric_methods.F:      CASE (spatially_rho_dependent)
./pw/dielectric_methods.F:         CALL dielectric_constant_spatially_rho_dependent(rho_elec_rs, dielectric%eps, &
./pw/dielectric_methods.F:                                                          dielectric%deps_drho, pw_pool, dielectric%params)
./pw/dielectric_methods.F:      IF ((dielec_functiontype .EQ. rho_dependent) .OR. &
./pw/dielectric_methods.F:          (dielec_functiontype .EQ. spatially_rho_dependent) .OR. &
./pw/dielectric_methods.F:         CASE (derivative_fft_use_drho)
./pw/dielectric_methods.F:               NULLIFY (deps(i)%pw, drho(i)%pw)
./pw/dielectric_methods.F:               CALL pw_pool_create_pw(pw_pool, drho(i)%pw, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:               CALL pw_zero(drho(i)%pw)
./pw/dielectric_methods.F:                        IF (ABS(dielectric%deps_drho%cr3d(i, j, k)) .LE. small_value) THEN
./pw/dielectric_methods.F:         CASE (derivative_fft_use_drho)
./pw/dielectric_methods.F:            ! \Nabla \eps = \Nabla \rho \cdot \frac{\partial \eps}{\partial \rho}
./pw/dielectric_methods.F:            CALL derive_fft(rho_elec_rs, drho, pw_pool)
./pw/dielectric_methods.F:               deps(i)%pw%cr3d = drho(i)%pw%cr3d*dielectric%deps_drho%cr3d
./pw/dielectric_methods.F:         CASE (derivative_fft_use_drho)
./pw/dielectric_methods.F:               CALL pw_pool_give_back_pw(pw_pool, drho(i)%pw)
./pw/dielectric_methods.F:      CALL pw_pool_give_back_pw(pw_pool, rho_elec_rs)
./pw/dielectric_methods.F:!> \param rho electronic density
./pw/dielectric_methods.F:!> \param rho_core core density
./pw/dielectric_methods.F:                                         dests_expand, srcs_expand, flipg_stat, bounds_shftd, rho, rho_core)
./pw/dielectric_methods.F:      TYPE(pw_type), INTENT(IN), POINTER                 :: rho
./pw/dielectric_methods.F:      TYPE(pw_type), INTENT(IN), OPTIONAL, POINTER       :: rho_core
./pw/dielectric_methods.F:      REAL(dp)                                           :: eps0, rho_max, rho_min
./pw/dielectric_methods.F:      TYPE(pw_p_type), DIMENSION(3)                      :: deps, drho
./pw/dielectric_methods.F:      TYPE(pw_type), POINTER                             :: ln_eps, rho_core_rs, rho_core_rs_xpndd, &
./pw/dielectric_methods.F:                                                            rho_elec_rs, rho_elec_rs_xpndd
./pw/dielectric_methods.F:      rho_min = dielectric%params%rho_min
./pw/dielectric_methods.F:      rho_max = dielectric%params%rho_max
./pw/dielectric_methods.F:      IF (.NOT. dielec_functiontype .EQ. rho_dependent .AND. &
./pw/dielectric_methods.F:      NULLIFY (rho_elec_rs)
./pw/dielectric_methods.F:      ! make sure rho is in the real space
./pw/dielectric_methods.F:      CALL pw_pool_create_pw(pw_pool_orig, rho_elec_rs, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:      CALL pw_transfer(rho, rho_elec_rs)
./pw/dielectric_methods.F:      ! expand rho_elec
./pw/dielectric_methods.F:      NULLIFY (rho_elec_rs_xpndd)
./pw/dielectric_methods.F:      CALL pw_pool_create_pw(pw_pool_xpndd, rho_elec_rs_xpndd, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:                     rho_elec_rs, rho_elec_rs_xpndd)
./pw/dielectric_methods.F:      IF (PRESENT(rho_core)) THEN
./pw/dielectric_methods.F:         ! make sure rho_core is in the real space
./pw/dielectric_methods.F:         CALL pw_pool_create_pw(pw_pool_orig, rho_core_rs, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:         CALL pw_transfer(rho_core, rho_core_rs)
./pw/dielectric_methods.F:         ! expand rho_core
./pw/dielectric_methods.F:         NULLIFY (rho_core_rs_xpndd)
./pw/dielectric_methods.F:         CALL pw_pool_create_pw(pw_pool_xpndd, rho_core_rs_xpndd, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:                        rho_core_rs, rho_core_rs_xpndd)
./pw/dielectric_methods.F:            ! use (rho_elec - rho_core) to compute dielectric
./pw/dielectric_methods.F:            CALL pw_axpy(rho_core_rs_xpndd, rho_elec_rs_xpndd, -2.0_dp)
./pw/dielectric_methods.F:            CALL pw_axpy(rho_core_rs_xpndd, rho_elec_rs_xpndd, -1.0_dp)
./pw/dielectric_methods.F:         CALL pw_pool_give_back_pw(pw_pool_orig, rho_core_rs)
./pw/dielectric_methods.F:         CALL pw_pool_give_back_pw(pw_pool_xpndd, rho_core_rs_xpndd)
./pw/dielectric_methods.F:         CPABORT("For dielectric constant larger than 1, rho_core has to be present.")
./pw/dielectric_methods.F:      CASE (rho_dependent)
./pw/dielectric_methods.F:         CALL dielectric_constant_sccs(rho_elec_rs_xpndd, dielectric%eps, dielectric%deps_drho, &
./pw/dielectric_methods.F:                                       eps0, rho_max, rho_min)
./pw/dielectric_methods.F:      CASE (spatially_rho_dependent)
./pw/dielectric_methods.F:         CALL dielectric_constant_spatially_rho_dependent(rho_elec_rs_xpndd, dielectric%eps, &
./pw/dielectric_methods.F:                                                          dielectric%deps_drho, pw_pool_xpndd, dielectric%params)
./pw/dielectric_methods.F:      IF ((dielec_functiontype .EQ. rho_dependent) .OR. &
./pw/dielectric_methods.F:          (dielec_functiontype .EQ. spatially_rho_dependent) .OR. &
./pw/dielectric_methods.F:         CASE (derivative_fft_use_drho)
./pw/dielectric_methods.F:               NULLIFY (deps(i)%pw, drho(i)%pw)
./pw/dielectric_methods.F:               CALL pw_pool_create_pw(pw_pool_xpndd, drho(i)%pw, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:               CALL pw_zero(drho(i)%pw)
./pw/dielectric_methods.F:                        IF (ABS(dielectric%deps_drho%cr3d(i, j, k)) .LE. small_value) THEN
./pw/dielectric_methods.F:         CASE (derivative_fft_use_drho)
./pw/dielectric_methods.F:            ! \Nabla \eps = \Nabla \rho \cdot \frac{\partial \eps}{\partial \rho}
./pw/dielectric_methods.F:            CALL derive_fft(rho_elec_rs_xpndd, drho, pw_pool_xpndd)
./pw/dielectric_methods.F:               deps(i)%pw%cr3d = drho(i)%pw%cr3d*dielectric%deps_drho%cr3d
./pw/dielectric_methods.F:         CASE (derivative_fft_use_drho)
./pw/dielectric_methods.F:               CALL pw_pool_give_back_pw(pw_pool_xpndd, drho(i)%pw)
./pw/dielectric_methods.F:      CALL pw_pool_give_back_pw(pw_pool_orig, rho_elec_rs)
./pw/dielectric_methods.F:      CALL pw_pool_give_back_pw(pw_pool_xpndd, rho_elec_rs_xpndd)
./pw/dielectric_methods.F:!> \param rho electron density
./pw/dielectric_methods.F:!> \param deps_drho derivative of the dielectric constant wrt the density
./pw/dielectric_methods.F:!> \param rho_max upper density threshold
./pw/dielectric_methods.F:!> \param rho_min lower density threshold
./pw/dielectric_methods.F:   SUBROUTINE dielectric_constant_sccs(rho, eps, deps_drho, eps0, rho_max, rho_min)
./pw/dielectric_methods.F:      TYPE(pw_type), POINTER                             :: rho, eps, deps_drho
./pw/dielectric_methods.F:      REAL(KIND=dp), INTENT(IN)                          :: eps0, rho_max, rho_min
./pw/dielectric_methods.F:      bounds_local = rho%pw_grid%bounds_local
./pw/dielectric_methods.F:      denom = LOG(rho_max)-LOG(rho_min)
./pw/dielectric_methods.F:               IF (rho%cr3d(i, j, k) .LT. rho_min) THEN
./pw/dielectric_methods.F:                  deps_drho%cr3d(i, j, k) = 0.0_dp
./pw/dielectric_methods.F:               ELSE IF (rho%cr3d(i, j, k) .GT. rho_max) THEN
./pw/dielectric_methods.F:                  deps_drho%cr3d(i, j, k) = 0.0_dp
./pw/dielectric_methods.F:                  t = twopi*(LOG(rho_max)-LOG(rho%cr3d(i, j, k)))/denom
./pw/dielectric_methods.F:                  deps_drho%cr3d(i, j, k) = -eps%cr3d(i, j, k)*LOG(eps0)*(1.0_dp-COS(t))/(denom*rho%cr3d(i, j, k))
./pw/dielectric_methods.F:!> \param rho electron density
./pw/dielectric_methods.F:!> \param deps_drho derivative of the dielectric constant wrt the density
./pw/dielectric_methods.F:   SUBROUTINE dielectric_constant_spatially_rho_dependent(rho, eps, deps_drho, &
./pw/dielectric_methods.F:      TYPE(pw_type), POINTER                             :: rho, eps, deps_drho
./pw/dielectric_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'dielectric_constant_spatially_rho_dependent', &
./pw/dielectric_methods.F:      TYPE(pw_type), POINTER                             :: dswch_func_drho, eps_sptldep, swch_func
./pw/dielectric_methods.F:      CALL pw_pool_create_pw(pw_pool, dswch_func_drho, use_data=REALDATA3D, in_space=REALSPACE)
./pw/dielectric_methods.F:      CALL pw_zero(dswch_func_drho)
./pw/dielectric_methods.F:      CALL dielectric_constant_sccs(rho, swch_func, dswch_func_drho, 2.0_dp, &
./pw/dielectric_methods.F:                                    dielectric_params%rho_max, dielectric_params%rho_min)
./pw/dielectric_methods.F:      deps_drho%cr3d = dswch_func_drho%cr3d*(eps_sptldep%cr3d-1.0_dp)
./pw/dielectric_methods.F:      CALL pw_pool_give_back_pw(pw_pool, dswch_func_drho)
./pw/dielectric_methods.F:   END SUBROUTINE dielectric_constant_spatially_rho_dependent
./manybody_potential.F:               indexa = INT(eam_data(iparticle)%rho/eam%drhoar)+1
./manybody_potential.F:               qr = eam_data(iparticle)%rho-eam%rhoval(indexa)
./manybody_potential.F:               embed = eam%frho(indexa)+qr*eam%frhop(indexa)
./manybody_potential.F:               fembed(iparticle) = eam%frhop(indexa)+qr*(eam%frhop(indexa+1)-eam%frhop(indexa))/eam%drhoar
./qs_rho0_types.F:MODULE qs_rho0_types
./qs_rho0_types.F:   USE qs_rho_atom_types,               ONLY: rho_atom_coeff
./qs_rho0_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho0_types'
./qs_rho0_types.F:   TYPE mpole_rho_atom
./qs_rho0_types.F:   END TYPE mpole_rho_atom
./qs_rho0_types.F:   TYPE rho0_mpole_type
./qs_rho0_types.F:      TYPE(mpole_rho_atom), DIMENSION(:), POINTER  :: mp_rho
./qs_rho0_types.F:                                                     total_rho0_h
./qs_rho0_types.F:      TYPE(pw_p_type), POINTER                    :: rho0_s_rs, &
./qs_rho0_types.F:                                                     rho0_s_gs
./qs_rho0_types.F:   END TYPE rho0_mpole_type
./qs_rho0_types.F:   TYPE rho0_atom_type
./qs_rho0_types.F:      TYPE(rho_atom_coeff), POINTER               :: rho0_rad_h, &
./qs_rho0_types.F:                                                     vrho0_rad_h
./qs_rho0_types.F:   END TYPE rho0_atom_type
./qs_rho0_types.F:   PUBLIC :: mpole_rho_atom, mpole_gau_overlap, &
./qs_rho0_types.F:             rho0_atom_type, rho0_mpole_type
./qs_rho0_types.F:   PUBLIC :: allocate_multipoles, allocate_rho0_mpole, &
./qs_rho0_types.F:             allocate_rho0_atom, allocate_rho0_atom_rad, &
./qs_rho0_types.F:             deallocate_rho0_atom, deallocate_rho0_mpole, &
./qs_rho0_types.F:             calculate_g0, get_rho0_mpole, initialize_mpole_rho, &
./qs_rho0_types.F:             write_rho0_info
./qs_rho0_types.F:!> \param mp_rho ...
./qs_rho0_types.F:   SUBROUTINE allocate_multipoles(mp_rho, natom, mp_gau, nkind)
./qs_rho0_types.F:      TYPE(mpole_rho_atom), DIMENSION(:), POINTER        :: mp_rho
./qs_rho0_types.F:      IF (ASSOCIATED(mp_rho)) THEN
./qs_rho0_types.F:         CALL deallocate_mpole_rho(mp_rho)
./qs_rho0_types.F:      ALLOCATE (mp_rho(natom))
./qs_rho0_types.F:         NULLIFY (mp_rho(iat)%Qlm_h)
./qs_rho0_types.F:         NULLIFY (mp_rho(iat)%Qlm_s)
./qs_rho0_types.F:         NULLIFY (mp_rho(iat)%Qlm_tot)
./qs_rho0_types.F:         NULLIFY (mp_rho(iat)%Qlm_car)
./qs_rho0_types.F:!> \param rho0_set ...
./qs_rho0_types.F:   SUBROUTINE allocate_rho0_atom(rho0_set, natom)
./qs_rho0_types.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_set
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rho0_atom', &
./qs_rho0_types.F:      IF (ASSOCIATED(rho0_set)) THEN
./qs_rho0_types.F:         CALL deallocate_rho0_atom(rho0_set)
./qs_rho0_types.F:      ALLOCATE (rho0_set(natom))
./qs_rho0_types.F:         NULLIFY (rho0_set(iat)%rho0_rad_h)
./qs_rho0_types.F:         NULLIFY (rho0_set(iat)%vrho0_rad_h)
./qs_rho0_types.F:   END SUBROUTINE allocate_rho0_atom
./qs_rho0_types.F:!> \param rho0_atom ...
./qs_rho0_types.F:   SUBROUTINE allocate_rho0_atom_rad(rho0_atom, nr, nchannels)
./qs_rho0_types.F:      TYPE(rho0_atom_type)                               :: rho0_atom
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rho0_atom_rad', &
./qs_rho0_types.F:      ALLOCATE (rho0_atom%rho0_rad_h)
./qs_rho0_types.F:      NULLIFY (rho0_atom%rho0_rad_h%r_coef)
./qs_rho0_types.F:      ALLOCATE (rho0_atom%rho0_rad_h%r_coef(1:nr, 1:nchannels))
./qs_rho0_types.F:      rho0_atom%rho0_rad_h%r_coef = 0.0_dp
./qs_rho0_types.F:      ALLOCATE (rho0_atom%vrho0_rad_h)
./qs_rho0_types.F:      NULLIFY (rho0_atom%vrho0_rad_h%r_coef)
./qs_rho0_types.F:      ALLOCATE (rho0_atom%vrho0_rad_h%r_coef(1:nr, 1:nchannels))
./qs_rho0_types.F:      rho0_atom%vrho0_rad_h%r_coef = 0.0_dp
./qs_rho0_types.F:   END SUBROUTINE allocate_rho0_atom_rad
./qs_rho0_types.F:!> \param rho0 ...
./qs_rho0_types.F:   SUBROUTINE allocate_rho0_mpole(rho0)
./qs_rho0_types.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rho0_mpole', &
./qs_rho0_types.F:      IF (ASSOCIATED(rho0)) THEN
./qs_rho0_types.F:         CALL deallocate_rho0_mpole(rho0)
./qs_rho0_types.F:      ALLOCATE (rho0)
./qs_rho0_types.F:      NULLIFY (rho0%mp_rho)
./qs_rho0_types.F:      NULLIFY (rho0%mp_gau)
./qs_rho0_types.F:      NULLIFY (rho0%norm_g0l_h)
./qs_rho0_types.F:      NULLIFY (rho0%lmax0_kind)
./qs_rho0_types.F:      NULLIFY (rho0%rho0_s_rs)
./qs_rho0_types.F:      NULLIFY (rho0%rho0_s_gs)
./qs_rho0_types.F:   END SUBROUTINE allocate_rho0_mpole
./qs_rho0_types.F:!> \param rho0_mpole ...
./qs_rho0_types.F:   SUBROUTINE calculate_g0(rho0_mpole, grid_atom, ik)
./qs_rho0_types.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_types.F:      lmax = rho0_mpole%lmax0_kind(ik)
./qs_rho0_types.F:      z_h = rho0_mpole%zet0_h
./qs_rho0_types.F:      CALL reallocate(rho0_mpole%mp_gau(ik)%g0_h, 1, nr, 0, lmax)
./qs_rho0_types.F:      CALL reallocate(rho0_mpole%mp_gau(ik)%vg0_h, 1, nr, 0, lmax)
./qs_rho0_types.F:      rho0_mpole%mp_gau(ik)%g0_h(1:nr, 0) = gh_tmp(1:nr)* &
./qs_rho0_types.F:                                            rho0_mpole%norm_g0l_h(0)
./qs_rho0_types.F:      prefactor = fourpi*rho0_mpole%norm_g0l_h(0)
./qs_rho0_types.F:      c1 = SQRT(pi*pi*pi/(z_h*z_h*z_h))*rho0_mpole%norm_g0l_h(0)
./qs_rho0_types.F:         rho0_mpole%mp_gau(ik)%vg0_h(ir, 0) = c1*erf_z_h(ir)*grid_atom%oorad2l(ir, 1)
./qs_rho0_types.F:         rho0_mpole%mp_gau(ik)%g0_h(1:nr, l) = gh_tmp(1:nr)* &
./qs_rho0_types.F:                                               rho0_mpole%norm_g0l_h(l)
./qs_rho0_types.F:         prefactor = fourpi/(2.0_dp*l+1.0_dp)*rho0_mpole%norm_g0l_h(l)
./qs_rho0_types.F:            rho0_mpole%mp_gau(ik)%vg0_h(ir, l) = prefactor*(int1(ir)+ &
./qs_rho0_types.F:!> \param mp_rho ...
./qs_rho0_types.F:   SUBROUTINE deallocate_mpole_rho(mp_rho)
./qs_rho0_types.F:      TYPE(mpole_rho_atom), DIMENSION(:), POINTER        :: mp_rho
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_mpole_rho', &
./qs_rho0_types.F:      natom = SIZE(mp_rho)
./qs_rho0_types.F:         DEALLOCATE (mp_rho(iat)%Qlm_h)
./qs_rho0_types.F:         DEALLOCATE (mp_rho(iat)%Qlm_s)
./qs_rho0_types.F:         DEALLOCATE (mp_rho(iat)%Qlm_tot)
./qs_rho0_types.F:         DEALLOCATE (mp_rho(iat)%Qlm_car)
./qs_rho0_types.F:      DEALLOCATE (mp_rho)
./qs_rho0_types.F:   END SUBROUTINE deallocate_mpole_rho
./qs_rho0_types.F:!> \param rho0_atom_set ...
./qs_rho0_types.F:   SUBROUTINE deallocate_rho0_atom(rho0_atom_set)
./qs_rho0_types.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_atom_set
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_rho0_atom', &
./qs_rho0_types.F:      IF (ASSOCIATED(rho0_atom_set)) THEN
./qs_rho0_types.F:         natom = SIZE(rho0_atom_set)
./qs_rho0_types.F:            IF (ASSOCIATED(rho0_atom_set(iat)%rho0_rad_h)) THEN
./qs_rho0_types.F:               DEALLOCATE (rho0_atom_set(iat)%rho0_rad_h%r_coef)
./qs_rho0_types.F:               DEALLOCATE (rho0_atom_set(iat)%rho0_rad_h)
./qs_rho0_types.F:            IF (ASSOCIATED(rho0_atom_set(iat)%vrho0_rad_h)) THEN
./qs_rho0_types.F:               DEALLOCATE (rho0_atom_set(iat)%vrho0_rad_h%r_coef)
./qs_rho0_types.F:               DEALLOCATE (rho0_atom_set(iat)%vrho0_rad_h)
./qs_rho0_types.F:         DEALLOCATE (rho0_atom_set)
./qs_rho0_types.F:                       "The pointer rho0_atom_set is not associated and "// &
./qs_rho0_types.F:   END SUBROUTINE deallocate_rho0_atom
./qs_rho0_types.F:!> \param rho0 ...
./qs_rho0_types.F:   SUBROUTINE deallocate_rho0_mpole(rho0)
./qs_rho0_types.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_rho0_mpole', &
./qs_rho0_types.F:      IF (ASSOCIATED(rho0)) THEN
./qs_rho0_types.F:         IF (ASSOCIATED(rho0%mp_gau)) CALL deallocate_mpole_gau(rho0%mp_gau)
./qs_rho0_types.F:         IF (ASSOCIATED(rho0%mp_rho)) CALL deallocate_mpole_rho(rho0%mp_rho)
./qs_rho0_types.F:         IF (ASSOCIATED(rho0%lmax0_kind)) THEN
./qs_rho0_types.F:            DEALLOCATE (rho0%lmax0_kind)
./qs_rho0_types.F:         IF (ASSOCIATED(rho0%norm_g0l_h)) THEN
./qs_rho0_types.F:            DEALLOCATE (rho0%norm_g0l_h)
./qs_rho0_types.F:         IF (ASSOCIATED(rho0%rho0_s_rs)) THEN
./qs_rho0_types.F:            CALL pw_release(rho0%rho0_s_rs%pw)
./qs_rho0_types.F:            DEALLOCATE (rho0%rho0_s_rs)
./qs_rho0_types.F:         IF (ASSOCIATED(rho0%rho0_s_gs)) THEN
./qs_rho0_types.F:            CALL pw_release(rho0%rho0_s_gs%pw)
./qs_rho0_types.F:            DEALLOCATE (rho0%rho0_s_gs)
./qs_rho0_types.F:         DEALLOCATE (rho0)
./qs_rho0_types.F:                       "The pointer rho0 is not associated and "// &
./qs_rho0_types.F:   END SUBROUTINE deallocate_rho0_mpole
./qs_rho0_types.F:!> \param rho0_mpole ...
./qs_rho0_types.F:!> \param mp_rho ...
./qs_rho0_types.F:!> \param rho0_s_rs ...
./qs_rho0_types.F:!> \param rho0_s_gs ...
./qs_rho0_types.F:   SUBROUTINE get_rho0_mpole(rho0_mpole, g0_h, vg0_h, iat, ikind, lmax_0, l0_ikind, &
./qs_rho0_types.F:                             mp_gau_ikind, mp_rho, norm_g0l_h, &
./qs_rho0_types.F:                             max_rpgf0_s, rho0_s_rs, rho0_s_gs)
./qs_rho0_types.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_types.F:      TYPE(mpole_rho_atom), DIMENSION(:), OPTIONAL, &
./qs_rho0_types.F:         POINTER                                         :: mp_rho
./qs_rho0_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: rho0_s_rs, rho0_s_gs
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'get_rho0_mpole', routineP = moduleN//':'//routineN
./qs_rho0_types.F:      IF (ASSOCIATED(rho0_mpole)) THEN
./qs_rho0_types.F:         IF (PRESENT(lmax_0)) lmax_0 = rho0_mpole%lmax_0
./qs_rho0_types.F:         IF (PRESENT(mp_rho)) mp_rho => rho0_mpole%mp_rho
./qs_rho0_types.F:         IF (PRESENT(norm_g0l_h)) norm_g0l_h => rho0_mpole%norm_g0l_h
./qs_rho0_types.F:         IF (PRESENT(zet0_h)) zet0_h = rho0_mpole%zet0_h
./qs_rho0_types.F:         IF (PRESENT(igrid_zet0_s)) igrid_zet0_s = rho0_mpole%igrid_zet0_s
./qs_rho0_types.F:         IF (PRESENT(max_rpgf0_s)) max_rpgf0_s = rho0_mpole%max_rpgf0_s
./qs_rho0_types.F:         IF (PRESENT(rho0_s_rs)) rho0_s_rs => rho0_mpole%rho0_s_rs
./qs_rho0_types.F:         IF (PRESENT(rho0_s_gs)) rho0_s_gs => rho0_mpole%rho0_s_gs
./qs_rho0_types.F:            IF (PRESENT(l0_ikind)) l0_ikind = rho0_mpole%lmax0_kind(ikind)
./qs_rho0_types.F:            IF (PRESENT(mp_gau_ikind)) mp_gau_ikind => rho0_mpole%mp_gau(ikind)
./qs_rho0_types.F:            IF (PRESENT(g0_h)) g0_h => rho0_mpole%mp_gau(ikind)%g0_h
./qs_rho0_types.F:            IF (PRESENT(vg0_h)) vg0_h => rho0_mpole%mp_gau(ikind)%vg0_h
./qs_rho0_types.F:            IF (PRESENT(Qlm_gg)) Qlm_gg => rho0_mpole%mp_gau(ikind)%Qlm_gg
./qs_rho0_types.F:            IF (PRESENT(rpgf0_h)) rpgf0_h = rho0_mpole%mp_gau(ikind)%rpgf0_h
./qs_rho0_types.F:            IF (PRESENT(rpgf0_s)) rpgf0_s = rho0_mpole%mp_gau(ikind)%rpgf0_s
./qs_rho0_types.F:            IF (PRESENT(Qlm_car)) Qlm_car => rho0_mpole%mp_rho(iat)%Qlm_car
./qs_rho0_types.F:            IF (PRESENT(Qlm_tot)) Qlm_tot => rho0_mpole%mp_rho(iat)%Qlm_tot
./qs_rho0_types.F:         CPABORT("The pointer rho0_mpole is not associated")
./qs_rho0_types.F:   END SUBROUTINE get_rho0_mpole
./qs_rho0_types.F:!> \param mp_rho ...
./qs_rho0_types.F:   SUBROUTINE initialize_mpole_rho(mp_rho, nchan_s, nchan_c, zeff, tddft)
./qs_rho0_types.F:      TYPE(mpole_rho_atom)                               :: mp_rho
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'initialize_mpole_rho', &
./qs_rho0_types.F:      CALL reallocate(mp_rho%Qlm_h, 1, nchan_s)
./qs_rho0_types.F:      CALL reallocate(mp_rho%Qlm_s, 1, nchan_s)
./qs_rho0_types.F:      CALL reallocate(mp_rho%Qlm_tot, 1, nchan_s)
./qs_rho0_types.F:      CALL reallocate(mp_rho%Qlm_car, 1, nchan_c)
./qs_rho0_types.F:      mp_rho%Qlm_h = 0.0_dp
./qs_rho0_types.F:      mp_rho%Qlm_s = 0.0_dp
./qs_rho0_types.F:      mp_rho%Qlm_tot = 0.0_dp
./qs_rho0_types.F:      mp_rho%Qlm_car = 0.0_dp
./qs_rho0_types.F:         mp_rho%Qlm_z = -2.0_dp*rootpi*Zeff
./qs_rho0_types.F:         mp_rho%Qlm_z = 0.0_dp
./qs_rho0_types.F:      mp_rho%Q0 = 0.0_dp
./qs_rho0_types.F:   END SUBROUTINE initialize_mpole_rho
./qs_rho0_types.F:!> \param rho0_mpole ...
./qs_rho0_types.F:   SUBROUTINE write_rho0_info(rho0_mpole, unit_str, output_unit)
./qs_rho0_types.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'write_rho0_info', &
./qs_rho0_types.F:      IF (ASSOCIATED(rho0_mpole)) THEN
./qs_rho0_types.F:            "- Rho0 exponent :", rho0_mpole%zet0_h
./qs_rho0_types.F:            "- Global max l :", rho0_mpole%lmax_0
./qs_rho0_types.F:         DO l = 0, rho0_mpole%lmax_0
./qs_rho0_types.F:               "ang. mom.= ", l, " hard= ", rho0_mpole%norm_g0l_h(l)
./qs_rho0_types.F:         nkind = SIZE(rho0_mpole%lmax0_kind, 1)
./qs_rho0_types.F:               "- rho0 max L and radii in "//TRIM(unit_str)// &
./qs_rho0_types.F:               "=> l max  :", rho0_mpole%lmax0_kind(ikind)
./qs_rho0_types.F:               rho0_mpole%mp_gau(ikind)%rpgf0_h*conv
./qs_rho0_types.F:            ' WARNING: I cannot print rho0, it is not associated'
./qs_rho0_types.F:   END SUBROUTINE write_rho0_info
./qs_rho0_types.F:END MODULE qs_rho0_types
./input_cp2k_poisson.F:        derivative_fft_use_drho, rho_dependent, spatially_dependent, spatially_rho_dependent
./input_cp2k_poisson.F:                          "The correction is based on rho_core.", &
./input_cp2k_poisson.F:         enum_c_vals=s2a('density_dependent', 'spatially_dependent', 'spatially_rho_dependent'), &
./input_cp2k_poisson.F:         enum_i_vals=(/rho_dependent, spatially_dependent, spatially_rho_dependent/), &
./input_cp2k_poisson.F:         usage="DIELECTRIC_FUNCTION_TYPE  <method>", default_i_val=rho_dependent)
./input_cp2k_poisson.F:      CALL keyword_create(keyword, name="rho_min", &
./input_cp2k_poisson.F:                          usage="rho_min <real>", default_r_val=1.0E-4_dp)
./input_cp2k_poisson.F:      CALL keyword_create(keyword, name="rho_max", &
./input_cp2k_poisson.F:                          usage="rho_max <real>", default_r_val=1.0E-3_dp)
./input_cp2k_poisson.F:         enum_c_vals=s2a('fft', 'fft_use_deps', 'fft_use_drho', 'cd3', 'cd5', 'cd7'), &
./input_cp2k_poisson.F:         enum_i_vals=(/derivative_fft, derivative_fft_use_deps, derivative_fft_use_drho, &
./input_cp2k_poisson.F:                       "FFT based deriv of epsilon, with correction using gradient of rho (high cutoff needed).", &
./rpa_ri_gpw.F:      COMPLEX(KIND=dp)                                   :: func_val, im_unit, one, re_unit, rho1, &
./rpa_ri_gpw.F:         rho1 = SUM(dLambda*dLambda)
./rpa_ri_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_work_ao
./rpa_ri_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: mat_2d, rho_ao_2d
./rpa_ri_gpw.F:      ! create a working rho environment
./rpa_ri_gpw.F:      NULLIFY (rho_work_ao)
./rpa_ri_gpw.F:      CALL dbcsr_allocate_matrix_set(rho_work_ao, 1)
./rpa_ri_gpw.F:      ALLOCATE (rho_work_ao(1)%matrix)
./rpa_ri_gpw.F:      CALL dbcsr_init_p(rho_work_ao(1)%matrix)
./rpa_ri_gpw.F:      CALL dbcsr_create(rho_work_ao(1)%matrix, template=mat_munu%matrix)
./rpa_ri_gpw.F:         CALL dbcsr_copy(rho_work_ao(1)%matrix, dbcsr_Gamma_munu_P(aux)%matrix)
./rpa_ri_gpw.F:            ns = SIZE(rho_work_ao)
./rpa_ri_gpw.F:            rho_ao_2d(1:ns, 1:1) => rho_work_ao(1:ns)
./rpa_ri_gpw.F:            CALL integrate_four_center(qs_env, mat_2d, ehfx, rho_ao_2d, hfx_sections, &
./rpa_ri_gpw.F:      ! release rho stuff
./rpa_ri_gpw.F:      CALL dbcsr_release(rho_work_ao(1)%matrix)
./rpa_ri_gpw.F:      DEALLOCATE (rho_work_ao(1)%matrix)
./rpa_ri_gpw.F:      DEALLOCATE (rho_work_ao)
./qs_scf_output.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf_output.F:                                              qs_rho_type
./qs_scf_output.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_output.F:      NULLIFY (rho, energy, dft_control, scf_env, qs_charges)
./qs_scf_output.F:      CALL get_qs_env(qs_env=qs_env, rho=rho, energy=energy, dft_control=dft_control, &
./qs_scf_output.F:      CALL qs_scf_print_scf_summary(output_unit, rho, qs_charges, energy, nelectron_total, &
./qs_scf_output.F:!> \param rho ...
./qs_scf_output.F:   SUBROUTINE qs_scf_print_scf_summary(output_unit, rho, qs_charges, energy, nelectron_total, &
./qs_scf_output.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_output.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r
./qs_scf_output.F:      NULLIFY (tot_rho_r, pw_env)
./qs_scf_output.F:         CALL qs_rho_get(rho, tot_rho_r=tot_rho_r)
./qs_scf_output.F:               accurate_sum(tot_rho_r), &
./qs_scf_output.F:               accurate_sum(tot_rho_r)+nelectron_total, &
./qs_scf_output.F:               qs_charges%total_rho_core_rspace, &
./qs_scf_output.F:               qs_charges%total_rho_core_rspace-REAL(nelectron_total+dft_control%charge, dp)
./qs_scf_output.F:               tot1_h = qs_charges%total_rho1_hard(1)
./qs_scf_output.F:               tot1_s = qs_charges%total_rho1_soft(1)
./qs_scf_output.F:                  tot1_h = tot1_h+qs_charges%total_rho1_hard(ispin)
./qs_scf_output.F:                  tot1_s = tot1_s+qs_charges%total_rho1_soft(ispin)
./qs_scf_output.F:                  accurate_sum(tot_rho_r)+tot1_h-tot1_s, &
./qs_scf_output.F:                  accurate_sum(tot_rho_r)+tot1_h-tot1_s &
./qs_scf_output.F:                  +qs_charges%total_rho_core_rspace, &
./qs_scf_output.F:                  qs_charges%total_rho_gspace
./qs_scf_output.F:                  accurate_sum(tot_rho_r)+ &
./qs_scf_output.F:                  qs_charges%total_rho_core_rspace, &
./qs_scf_output.F:                  qs_charges%total_rho_gspace
./qs_scf_output.F:                  "GAPW| Exc from hard and soft atomic rho1:      ", energy%exc1, &
./qs_scf_output.F:                  "GAPW_XC| Exc from hard and soft atomic rho1:      ", energy%exc1
./qs_scf_output.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_output.F:            CALL get_qs_env(qs_env, rho=rho)
./qs_scf_output.F:            CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_linres_current.F:   USE qs_linres_atom_current,          ONLY: calculate_jrho_atom,&
./qs_linres_current.F:                                              calculate_jrho_atom_coeff,&
./qs_linres_current.F:                                              calculate_jrho_atom_rad
./qs_linres_current.F:   USE qs_rho_types,                    ONLY: qs_rho_get
./qs_linres_current.F:   PUBLIC :: current_build_current, current_build_chi, calculate_jrho_resp
./qs_linres_current.F:      REAL(dp)                                           :: dk(3), jrho_tot_G(3, 3), &
./qs_linres_current.F:                                                            jrho_tot_R(3, 3), maxocc, scale_fac
./qs_linres_current.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: jrho1_g, jrho1_r
./qs_linres_current.F:      TYPE(pw_p_type), POINTER                           :: jrho_gspace, jrho_rspace
./qs_linres_current.F:      NULLIFY (jrho_rspace, jrho_gspace, logger, current_section, density_matrix0, density_matrix_a, &
./qs_linres_current.F:               para_env, center_list, mo_coeff, psi_a_iB, jrho1_r, jrho1_g, &
./qs_linres_current.F:      jrho_tot_G = 0.0_dp
./qs_linres_current.F:      jrho_tot_R = 0.0_dp
./qs_linres_current.F:            ! Use the qs_rho_type already  used for rho during the scf
./qs_linres_current.F:            CALL qs_rho_get(current_env%jrho1_set(idir)%rho, rho_r=jrho1_r)
./qs_linres_current.F:            CALL qs_rho_get(current_env%jrho1_set(idir)%rho, rho_g=jrho1_g)
./qs_linres_current.F:            jrho_rspace => jrho1_r(ispin)
./qs_linres_current.F:            jrho_gspace => jrho1_g(ispin)
./qs_linres_current.F:            CALL pw_zero(jrho_rspace%pw)
./qs_linres_current.F:            CALL pw_zero(jrho_gspace%pw)
./qs_linres_current.F:            CALL calculate_jrho_resp(density_matrix0(ispin)%matrix, &
./qs_linres_current.F:                                     iB, idir, jrho_rspace, jrho_gspace, qs_env, &
./qs_linres_current.F:            CALL pw_scale(jrho_rspace%pw, scale_fac)
./qs_linres_current.F:            CALL pw_scale(jrho_gspace%pw, scale_fac)
./qs_linres_current.F:            jrho_tot_G(idir, iB) = pw_integrate_function(jrho_gspace%pw, isign=-1)
./qs_linres_current.F:            jrho_tot_R(idir, iB) = pw_integrate_function(jrho_rspace%pw, isign=-1)
./qs_linres_current.F:                     jrho_tot_G(idir, iB), ' R-space=', jrho_tot_R(idir, iB)
./qs_linres_current.F:            CALL calculate_jrho_atom_coeff(qs_env, current_env, &
./qs_linres_current.F:            CALL calculate_jrho_atom_rad(qs_env, current_env, idir)
./qs_linres_current.F:            CALL calculate_jrho_atom(current_env, qs_env, iB, idir)
./qs_linres_current.F:            CALL qs_rho_get(current_env%jrho1_set(idir)%rho, rho_r=jrho1_r)
./qs_linres_current.F:               CALL pw_axpy(jrho1_r(ispin)%pw, wf_r%pw, 1.0_dp)
./qs_linres_current.F:            SQRT(DDOT(9, jrho_tot_R(1, 1), 1, jrho_tot_R(1, 1), 1))
./qs_linres_current.F:      ! Dellocate grids for the calculation of jrho and the shift
./qs_linres_current.F:   SUBROUTINE calculate_jrho_resp(mat_d0, mat_jp, mat_jp_rii, mat_jp_riii, iB, idir, &
./qs_linres_current.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'calculate_jrho_resp', &
./qs_linres_current.F:      REAL(dp), DIMENSION(:, :, :), POINTER              :: my_current, my_gauge, my_rho
./qs_linres_current.F:      REAL(KIND=dp)                                      :: eps_rho_rspace, kind_radius_a, &
./qs_linres_current.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_current, rs_rho
./qs_linres_current.F:      NULLIFY (qs_kind, cell, dft_control, orb_basis_set, rs_rho, &
./qs_linres_current.F:      CALL pw_env_get(pw_env, rs_descs=rs_descs, rs_grids=rs_rho)
./qs_linres_current.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_linres_current.F:            IF (ALL(100.0_dp*ABS(jpblock_a) < eps_rho_rspace) .AND. &
./qs_linres_current.F:                ALL(100.0_dp*ABS(jpblock_b) < eps_rho_rspace) .AND. &
./qs_linres_current.F:                ALL(100.0_dp*ABS(jpblock_c) < eps_rho_rspace)) THEN
./qs_linres_current.F:            CALL rs_grid_release(rs_rho(igrid_level)%rs_grid)
./qs_linres_current.F:            NULLIFY (rs_rho(igrid_level)%rs_grid)
./qs_linres_current.F:            CALL rs_grid_create(rs_rho(igrid_level)%rs_grid, rs_descs(igrid_level)%rs_desc)
./qs_linres_current.F:            IF (.NOT. my_retain_rsgrid) CALL rs_grid_retain(rs_rho(igrid_level)%rs_grid)
./qs_linres_current.F:         CALL rs_grid_zero(rs_rho(igrid_level)%rs_grid)
./qs_linres_current.F:            my_rho => rs_rho(igrid_level)%rs_grid%r
./qs_linres_current.F:            IF (LBOUND(my_rho, 3) .NE. LBOUND(my_current, 3) .OR. &
./qs_linres_current.F:                LBOUND(my_rho, 2) .NE. LBOUND(my_current, 2) .OR. &
./qs_linres_current.F:                LBOUND(my_rho, 1) .NE. LBOUND(my_current, 1) .OR. &
./qs_linres_current.F:                UBOUND(my_rho, 3) .NE. UBOUND(my_current, 3) .OR. &
./qs_linres_current.F:                UBOUND(my_rho, 2) .NE. UBOUND(my_current, 2) .OR. &
./qs_linres_current.F:                UBOUND(my_rho, 1) .NE. UBOUND(my_current, 1)) THEN
./qs_linres_current.F:               WRITE (*, *) 'LBOUND(my_rho,3),LBOUND(my_current,3)', LBOUND(my_rho, 3), LBOUND(my_current, 3)
./qs_linres_current.F:               WRITE (*, *) 'LBOUND(my_rho,2),LBOUND(my_current,2)', LBOUND(my_rho, 2), LBOUND(my_current, 2)
./qs_linres_current.F:               WRITE (*, *) 'LBOUND(my_rho,1),LBOUND(my_current,1)', LBOUND(my_rho, 1), LBOUND(my_current, 1)
./qs_linres_current.F:               WRITE (*, *) 'UBOUND(my_rho,3),UBOUND(my_current,3)', UBOUND(my_rho, 3), UBOUND(my_current, 3)
./qs_linres_current.F:               WRITE (*, *) 'UBOUND(my_rho,2),UBOUND(my_current,2)', UBOUND(my_rho, 2), UBOUND(my_current, 2)
./qs_linres_current.F:               WRITE (*, *) 'UBOUND(my_rho,1),UBOUND(my_current,1)', UBOUND(my_rho, 1), UBOUND(my_current, 1)
./qs_linres_current.F:            IF (LBOUND(my_rho, 3) .NE. LBOUND(my_gauge, 3) .OR. &
./qs_linres_current.F:                LBOUND(my_rho, 2) .NE. LBOUND(my_gauge, 2) .OR. &
./qs_linres_current.F:                LBOUND(my_rho, 1) .NE. LBOUND(my_gauge, 1) .OR. &
./qs_linres_current.F:                UBOUND(my_rho, 3) .NE. UBOUND(my_gauge, 3) .OR. &
./qs_linres_current.F:                UBOUND(my_rho, 2) .NE. UBOUND(my_gauge, 2) .OR. &
./qs_linres_current.F:                UBOUND(my_rho, 1) .NE. UBOUND(my_gauge, 1)) THEN
./qs_linres_current.F:               WRITE (*, *) 'LBOUND(my_rho,3),LBOUND(my_gauge,3)', LBOUND(my_rho, 3), LBOUND(my_gauge, 3)
./qs_linres_current.F:               WRITE (*, *) 'LBOUND(my_rho,2),LBOUND(my_gauge,2)', LBOUND(my_rho, 2), LBOUND(my_gauge, 2)
./qs_linres_current.F:               WRITE (*, *) 'LBOUND(my_rho,1),LBOUND(my_gauge,1)', LBOUND(my_rho, 1), LBOUND(my_gauge, 1)
./qs_linres_current.F:               WRITE (*, *) 'UBOUND(my_rho,3),UbOUND(my_gauge,3)', UBOUND(my_rho, 3), UBOUND(my_gauge, 3)
./qs_linres_current.F:               WRITE (*, *) 'UBOUND(my_rho,2),UBOUND(my_gauge,2)', UBOUND(my_rho, 2), UBOUND(my_gauge, 2)
./qs_linres_current.F:               WRITE (*, *) 'UBOUND(my_rho,1),UBOUND(my_gauge,1)', UBOUND(my_rho, 1), UBOUND(my_gauge, 1)
./qs_linres_current.F:                                           eps_rho_rspace, &
./qs_linres_current.F:                                                 rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_linres_current.F:                                                 eps_rho_rspace, &
./qs_linres_current.F:                                              eps_rho_rspace, &
./qs_linres_current.F:                                              eps_rho_rspace, &
./qs_linres_current.F:                                              eps_rho_rspace, &
./qs_linres_current.F:                                              eps_rho_rspace, &
./qs_linres_current.F:      ! Scale the density with the gauge rho * ( r - d(r) ) if needed
./qs_linres_current.F:            CALL rs_grid_mult_and_add(rs_current(igrid_level)%rs_grid, rs_rho(igrid_level)%rs_grid, &
./qs_linres_current.F:      IF (ASSOCIATED(rs_rho) .AND. .NOT. my_retain_rsgrid) THEN
./qs_linres_current.F:         DO i = 1, SIZE(rs_rho)
./qs_linres_current.F:            CALL rs_grid_release(rs_rho(i)%rs_grid)
./qs_linres_current.F:   END SUBROUTINE calculate_jrho_resp
./mao_wfn_analysis.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./mao_wfn_analysis.F:                                              qs_rho_type
./mao_wfn_analysis.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mao_wfn_analysis.F:      CALL get_qs_env(qs_env, rho=rho, matrix_s_kp=matrix_s)
./mao_wfn_analysis.F:      CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./almo_scf_qs.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./almo_scf_qs.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./almo_scf_qs.F:                                              qs_rho_type
./almo_scf_qs.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./almo_scf_qs.F:      TYPE(qs_rho_type), POINTER                         :: rho
./almo_scf_qs.F:      NULLIFY (rho, rho_ao)
./almo_scf_qs.F:      CALL get_qs_env(qs_env, energy=energy, rho=rho)
./almo_scf_qs.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./almo_scf_qs.F:                                rho_ao(ispin)%matrix, &
./almo_scf_qs.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./almo_scf_qs.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./optimize_embedding_potential.F:             opt_embed_step, print_rho_diff, step_control, max_dens_diff, print_emb_opt_info, &
./optimize_embedding_potential.F:!> \brief rho_1(alpha) + rho_2(alpha) = rho_total(alpha)
./optimize_embedding_potential.F:!> \brief rho_1(beta) + rho_2(beta) = rho_total(beta)
./optimize_embedding_potential.F:!> \param diff_rho_r ...
./optimize_embedding_potential.F:!> \param diff_rho_spin ...
./optimize_embedding_potential.F:   SUBROUTINE calculate_embed_pot_grad(qs_env, diff_rho_r, diff_rho_spin, opt_embed)
./optimize_embedding_potential.F:      TYPE(pw_p_type), POINTER                           :: diff_rho_r, diff_rho_spin
./optimize_embedding_potential.F:      CALL calculate_embed_pot_grad_inner(qs_env, opt_embed%dimen_aux, diff_rho_r, diff_rho_spin, &
./optimize_embedding_potential.F:!> \param rho_r ...
./optimize_embedding_potential.F:!> \param rho_spin ...
./optimize_embedding_potential.F:   SUBROUTINE calculate_embed_pot_grad_inner(qs_env, dimen_aux, rho_r, rho_spin, embed_pot_grad, &
./optimize_embedding_potential.F:      TYPE(pw_p_type), POINTER                           :: rho_r, rho_spin
./optimize_embedding_potential.F:      CALL integrate_v_rspace_one_center(rho_r, qs_env, lri, &
./optimize_embedding_potential.F:         CALL integrate_v_rspace_one_center(rho_spin, qs_env, lri, &
./optimize_embedding_potential.F:      pot_grad = pot_grad*rho_r%pw%pw_grid%dvol
./optimize_embedding_potential.F:!> \param diff_rho_r ...
./optimize_embedding_potential.F:!> \param diff_rho_spin ...
./optimize_embedding_potential.F:   SUBROUTINE opt_embed_step(diff_rho_r, diff_rho_spin, opt_embed, embed_pot, spin_embed_pot, qs_env)
./optimize_embedding_potential.F:      TYPE(pw_p_type), POINTER                           :: diff_rho_r, diff_rho_spin
./optimize_embedding_potential.F:         CALL grid_based_step(diff_rho_r, diff_rho_spin, opt_embed, embed_pot, spin_embed_pot)
./optimize_embedding_potential.F:!> \param diff_rho_r ...
./optimize_embedding_potential.F:!> \param diff_rho_spin ...
./optimize_embedding_potential.F:   SUBROUTINE grid_based_step(diff_rho_r, diff_rho_spin, opt_embed, embed_pot, spin_embed_pot)
./optimize_embedding_potential.F:      TYPE(pw_p_type), POINTER                           :: diff_rho_r, diff_rho_spin
./optimize_embedding_potential.F:      CALL pw_axpy(diff_rho_r%pw, embed_pot%pw, opt_embed%step_len)
./optimize_embedding_potential.F:         CALL pw_axpy(diff_rho_spin%pw, spin_embed_pot%pw, opt_embed%step_len)
./optimize_embedding_potential.F:      TYPE(pw_p_type)                                    :: psi_L, rho_g
./optimize_embedding_potential.F:      NULLIFY (rho_g%pw)
./optimize_embedding_potential.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, &
./optimize_embedding_potential.F:         CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./optimize_embedding_potential.F:         CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./optimize_embedding_potential.F:         CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./optimize_embedding_potential.F:         CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./optimize_embedding_potential.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./optimize_embedding_potential.F:!> \param diff_rho_r ...
./optimize_embedding_potential.F:   FUNCTION max_dens_diff(diff_rho_r) RESULT(total_max_diff)
./optimize_embedding_potential.F:      TYPE(pw_p_type)                                    :: diff_rho_r
./optimize_embedding_potential.F:      size_x = SIZE(diff_rho_r%pw%cr3d, 1)
./optimize_embedding_potential.F:      size_y = SIZE(diff_rho_r%pw%cr3d, 2)
./optimize_embedding_potential.F:      size_z = SIZE(diff_rho_r%pw%cr3d, 3)
./optimize_embedding_potential.F:      grid_3d(:, :, :) = diff_rho_r%pw%cr3d(:, :, :)
./optimize_embedding_potential.F:      CALL mp_max(total_max_diff, diff_rho_r%pw%pw_grid%para%group)
./optimize_embedding_potential.F:!> \brief Prints a cube for the (rho_A + rho_B - rho_ref) to be minimized in embedding
./optimize_embedding_potential.F:!> \param diff_rho_r ...
./optimize_embedding_potential.F:   SUBROUTINE print_rho_diff(diff_rho_r, i_iter, qs_env)
./optimize_embedding_potential.F:      TYPE(pw_p_type), POINTER                           :: diff_rho_r
./optimize_embedding_potential.F:         CALL cp_pw_to_cube(diff_rho_r%pw, unit_nr, title, particles=particles, &
./optimize_embedding_potential.F:   END SUBROUTINE print_rho_diff
./optimize_embedding_potential.F:!> \param diff_rho_r ...
./optimize_embedding_potential.F:!> \param diff_rho_spin ...
./optimize_embedding_potential.F:   SUBROUTINE conv_check_embed(opt_embed, diff_rho_r, diff_rho_spin, output_unit)
./optimize_embedding_potential.F:      TYPE(pw_p_type), POINTER                           :: diff_rho_r, diff_rho_spin
./optimize_embedding_potential.F:      opt_embed%max_diff(1) = max_dens_diff(diff_rho_r)
./optimize_embedding_potential.F:      opt_embed%int_diff(1) = pw_integrate_function(fun=diff_rho_r%pw, oprt='ABS')
./optimize_embedding_potential.F:         opt_embed%max_diff(2) = max_dens_diff(diff_rho_spin)
./optimize_embedding_potential.F:         opt_embed%int_diff(2) = pw_integrate_function(fun=diff_rho_spin%pw, oprt='ABS')
./force_env_methods.F:        print_rho_diff, read_embed_pot, release_opt_embed, step_control, understand_spin_states
./force_env_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./force_env_methods.F:                                              qs_rho_type
./force_env_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r_ref, rho_r_subsys
./force_env_methods.F:      TYPE(pw_p_type), POINTER                           :: diff_rho_r, diff_rho_spin, embed_pot, &
./force_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, subsys_rho
./force_env_methods.F:                      pw_env=pw_env, dft_control=dft_control, rho=rho, energy=energy, &
./force_env_methods.F:      CALL qs_rho_get(rho_struct=rho, rho_r=rho_r_ref)
./force_env_methods.F:      NULLIFY (diff_rho_r)
./force_env_methods.F:      ALLOCATE (diff_rho_r)
./force_env_methods.F:      NULLIFY (diff_rho_r%pw)
./force_env_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, diff_rho_r%pw, &
./force_env_methods.F:      CALL pw_zero(diff_rho_r%pw)
./force_env_methods.F:         NULLIFY (diff_rho_spin)
./force_env_methods.F:         ALLOCATE (diff_rho_spin)
./force_env_methods.F:         NULLIFY (diff_rho_spin%pw)
./force_env_methods.F:         CALL pw_pool_create_pw(auxbas_pw_pool, diff_rho_spin%pw, &
./force_env_methods.F:         CALL pw_zero(diff_rho_spin%pw)
./force_env_methods.F:         diff_rho_r%pw%cr3d(:, :, :) = diff_rho_r%pw%cr3d(:, :, :)-rho_r_ref(i_spin)%pw%cr3d(:, :, :)
./force_env_methods.F:         IF (nspins .EQ. 2) THEN ! Reference systems has an open shell, else the reference diff_rho_spin is zero
./force_env_methods.F:            diff_rho_spin%pw%cr3d(:, :, :) = diff_rho_spin%pw%cr3d(:, :, :)-rho_r_ref(1)%pw%cr3d(:, :, :) &
./force_env_methods.F:                                             +rho_r_ref(2)%pw%cr3d(:, :, :)
./force_env_methods.F:         NULLIFY (subsys_rho, rho_r_subsys, dft_control)
./force_env_methods.F:         CALL get_qs_env(force_env%sub_force_env(i_force_eval)%force_env%qs_env, rho=subsys_rho, energy=energy, &
./force_env_methods.F:         CALL qs_rho_get(rho_struct=subsys_rho, rho_r=rho_r_subsys)
./force_env_methods.F:            diff_rho_r%pw%cr3d(:, :, :) = diff_rho_r%pw%cr3d(:, :, :)+rho_r_subsys(i_spin)%pw%cr3d(:, :, :)
./force_env_methods.F:                  diff_rho_spin%pw%cr3d(:, :, :) = diff_rho_spin%pw%cr3d(:, :, :)- &
./force_env_methods.F:                                                   rho_r_subsys(1)%pw%cr3d(:, :, :)+rho_r_subsys(2)%pw%cr3d(:, :, :)
./force_env_methods.F:                  diff_rho_spin%pw%cr3d(:, :, :) = diff_rho_spin%pw%cr3d(:, :, :)+ &
./force_env_methods.F:                                                   rho_r_subsys(1)%pw%cr3d(:, :, :)-rho_r_subsys(2)%pw%cr3d(:, :, :)
./force_env_methods.F:      CALL print_rho_diff(diff_rho_r, 0, force_env%sub_force_env(ref_subsys_number)%force_env%qs_env)
./force_env_methods.F:         CALL pw_zero(diff_rho_r%pw)
./force_env_methods.F:            diff_rho_r%pw%cr3d(:, :, :) = diff_rho_r%pw%cr3d(:, :, :)-rho_r_ref(i_spin)%pw%cr3d(:, :, :)
./force_env_methods.F:            CALL pw_zero(diff_rho_spin%pw)
./force_env_methods.F:            IF (nspins .EQ. 2) THEN ! Reference systems has an open shell, else the reference diff_rho_spin is zero
./force_env_methods.F:               diff_rho_spin%pw%cr3d(:, :, :) = diff_rho_spin%pw%cr3d(:, :, :)-rho_r_ref(1)%pw%cr3d(:, :, :) &
./force_env_methods.F:                                                +rho_r_ref(2)%pw%cr3d(:, :, :)
./force_env_methods.F:            NULLIFY (rho_r_subsys, energy)
./force_env_methods.F:            CALL get_qs_env(force_env%sub_force_env(i_force_eval)%force_env%qs_env, rho=subsys_rho, &
./force_env_methods.F:            CALL qs_rho_get(rho_struct=subsys_rho, rho_r=rho_r_subsys)
./force_env_methods.F:               diff_rho_r%pw%cr3d(:, :, :) = diff_rho_r%pw%cr3d(:, :, :)+rho_r_subsys(i_spin)%pw%cr3d(:, :, :)
./force_env_methods.F:                     diff_rho_spin%pw%cr3d(:, :, :) = diff_rho_spin%pw%cr3d(:, :, :)- &
./force_env_methods.F:                                                      rho_r_subsys(1)%pw%cr3d(:, :, :)+rho_r_subsys(2)%pw%cr3d(:, :, :)
./force_env_methods.F:                     diff_rho_spin%pw%cr3d(:, :, :) = diff_rho_spin%pw%cr3d(:, :, :)+ &
./force_env_methods.F:                                                      rho_r_subsys(1)%pw%cr3d(:, :, :)-rho_r_subsys(2)%pw%cr3d(:, :, :)
./force_env_methods.F:            opt_embed%w_func(i_iter) = opt_embed%w_func(i_iter)-pw_integral_ab(embed_pot%pw, rho_r_ref(i_spin)%pw)
./force_env_methods.F:                                          -pw_integral_ab(spin_embed_pot%pw, rho_r_ref(1)%pw) &
./force_env_methods.F:                                          +pw_integral_ab(spin_embed_pot%pw, rho_r_ref(2)%pw)
./force_env_methods.F:         CALL conv_check_embed(opt_embed, diff_rho_r, diff_rho_spin, output_unit)
./force_env_methods.F:         CALL print_rho_diff(diff_rho_r, i_iter, force_env%sub_force_env(ref_subsys_number)%force_env%qs_env)
./force_env_methods.F:                                          diff_rho_r, diff_rho_spin, opt_embed)
./force_env_methods.F:         CALL opt_embed_step(diff_rho_r, diff_rho_spin, opt_embed, embed_pot, spin_embed_pot, &
./force_env_methods.F:      CALL pw_release(diff_rho_r%pw)
./force_env_methods.F:      DEALLOCATE (diff_rho_r)
./force_env_methods.F:         CALL pw_release(diff_rho_spin%pw)
./force_env_methods.F:         DEALLOCATE (diff_rho_spin)
./common/powell.F:    REAL(dp)           :: rhobeg, rhoend
./common/powell.F:    REAL(dp)           :: rhosq, recip, reciq, fbeg, fopt, diffa, xoptsq, &
./common/powell.F:                          rho, delta, dsq, dnorm, ratio, temp, tempq, beta, &
./common/powell.F:      REAL(dp)                                           :: rhobeg, rhoend
./common/powell.F:    rhobeg = optstate%rhobeg
./common/powell.F:    rhoend = optstate%rhoend
./common/powell.F:    CALL newuob (n,npt,x,rhobeg,rhoend,maxfun,optstate%w(ixb:),optstate%w(ixo:),&
./common/powell.F:!> \param rhobeg ...
./common/powell.F:!> \param rhoend ...
./common/powell.F:  SUBROUTINE newuob (n,npt,x,rhobeg,rhoend,maxfun,xbase,&
./common/powell.F:    REAL(dp), INTENT(inout)                  :: rhobeg, rhoend
./common/powell.F:      gisq, gqsq, half, hdiag, one, ratio, recip, reciq, rho, rhosq, sum, &
./common/powell.F:       rhosq        = 0._dp
./common/powell.F:       rho          = 0._dp
./common/powell.F:    rhosq=rhobeg*rhobeg
./common/powell.F:    recip=one/rhosq
./common/powell.F:    reciq=SQRT(half)/rhosq
./common/powell.F:          xpt(nf,nfm)=rhobeg
./common/powell.F:          xpt(nf,nfmm)=-rhobeg
./common/powell.F:       xipt=rhobeg
./common/powell.F:          gq(nfm)=(f-fbeg)/rhobeg
./common/powell.F:             bmat(1,nfm)=-one/rhobeg
./common/powell.F:             bmat(nf,nfm)=one/rhobeg
./common/powell.F:             bmat(npt+nfm,nfm)=-half*rhosq
./common/powell.F:          bmat(nf-n,nfmm)=half/rhobeg
./common/powell.F:          bmat(nf,nfmm)=-half/rhobeg
./common/powell.F:          temp=(fbeg-f)/rhobeg
./common/powell.F:          hq(ih)=(gq(nfmm)-temp)/rhobeg
./common/powell.F:    rho=rhobeg
./common/powell.F:    delta=rho
./common/powell.F:    IF (dnorm < half*rho) THEN
./common/powell.F:       IF (delta <= 1.5_dp*rho) delta=rho
./common/powell.F:       temp=0.125_dp*crvmin*rho*rho
./common/powell.F:    IF (dnorm > rho) nfsav=nf
./common/powell.F:    IF (delta <= 1.5_dp*rho) delta=rho
./common/powell.F:    rhosq=MAX(tenth*delta,rho)**2
./common/powell.F:       IF (distsq > rhosq) temp=temp*(distsq/rhosq)**3
./common/powell.F:    IF (ksave == 0 .AND. delta == rho) THEN
./common/powell.F:       dstep=MAX(MIN(tenth*SQRT(distsq),half*delta),rho)
./common/powell.F:    IF (MAX(delta,dnorm) > rho) GOTO 100
./common/powell.F:490 IF (rho > rhoend) THEN
./common/powell.F:       delta=half*rho
./common/powell.F:       ratio=rho/rhoend
./common/powell.F:          rho=rhoend
./common/powell.F:          rho=SQRT(ratio)*rhoend
./common/powell.F:          rho=tenth*rho
./common/powell.F:       delta=MAX(delta,rho)
./common/powell.F:      opt%rhosq    = rhosq
./common/powell.F:      opt%rho      = rho
./common/powell.F:      rhosq        = opt%rhosq
./common/powell.F:      rho          = opt%rho
./common/bibliography.F:                         "   Ernzerhof, M", &
./common/bibliography.F:                         "   Ernzerhof, M", &
./common/bibliography.F:                         "   Ernzerhof, M", &
./common/string_utilities.F:                   "&rho;     ", "&#961;    ", "&sigmaf;  ", "&#962;    ", "&sigma;   ", "&#963;    ", "&tau;     ", "&#964;    ", &
./cp_ddapc.F:!> \param rho_tot_gspace ...
./cp_ddapc.F:   SUBROUTINE qs_ks_ddapc(qs_env, auxbas_pw_pool, rho_tot_gspace, v_hartree_gspace, &
./cp_ddapc.F:      TYPE(pw_p_type)                                    :: rho_tot_gspace, v_hartree_gspace, &
./cp_ddapc.F:      CALL cp_ddapc_apply_CD(qs_env, rho_tot_gspace, energy%hartree, v_hartree_gspace, &
./cp_ddapc.F:      CALL cp_ddapc_apply_RF(qs_env, rho_tot_gspace, energy%hartree, v_hartree_gspace, &
./cp_ddapc.F:!> \param rho_tot_gspace ...
./cp_ddapc.F:   SUBROUTINE cp_ddapc_apply_CD(qs_env, rho_tot_gspace, energy, v_hartree_gspace, &
./cp_ddapc.F:      TYPE(pw_p_type)                                    :: rho_tot_gspace
./cp_ddapc.F:                           ext_rho_tot_g=rho_tot_gspace%pw, &
./cp_ddapc.F:                           ext_rho_tot_g=rho_tot_gspace%pw, &
./cp_ddapc.F:         energy = 0.5_dp*pw_integral_ab(rho_tot_gspace%pw, v_hartree_gspace%pw)
./cp_ddapc.F:!> \param rho_tot_gspace ...
./cp_ddapc.F:   SUBROUTINE cp_ddapc_apply_RF(qs_env, rho_tot_gspace, energy, &
./cp_ddapc.F:      TYPE(pw_p_type)                                    :: rho_tot_gspace
./cp_ddapc.F:                           ext_rho_tot_g=rho_tot_gspace%pw, &
./cp_ddapc.F:                           ext_rho_tot_g=rho_tot_gspace%pw, &
./cp_ddapc.F:         energy = 0.5_dp*pw_integral_ab(rho_tot_gspace%pw, v_hartree_gspace%pw)
./input_cp2k_dft.F:        wfi_use_guess_method_nr, wfi_use_prev_p_method_nr, wfi_use_prev_rho_r_method_nr, &
./input_cp2k_dft.F:      CALL cp_print_key_section_create(print_key, "rho0_information", &
./input_cp2k_dft.F:                                       description="If the printkey is activated controls if information on rho0 is printed.", &
./input_cp2k_dft.F:         "the norm of the density gradient |&nabla;&rho;| "// &
./input_cp2k_dft.F:                          description="GAPW : precision to determine the range of V(rho0-rho0soft)", &
./input_cp2k_dft.F:         wfi_use_prev_rho_r_method_nr, &
./input_cp2k_dft.F:                          "(rho_alpha-rho_beta) for fragment A should be flipped. With default (off) "// &
./input_cp2k_dft.F:                          "(rho_alpha-rho_beta) for fragment B should be flipped. With default (off) "// &
./input_cp2k_dft.F:                          enum_desc=s2a("Total charge density constraint (rho_alpha + rho_beta).", &
./input_cp2k_dft.F:                                        "Magnetization density constraint (rho_alpha - rho_beta).", &
./input_cp2k_dft.F:                          description="If both rho and rho_gspace are needed ", &
./input_cp2k_dft.F:                          enum_desc=s2a("Coulomb constraint, integral of [rho_0(r)-rho(r)]/|r-r'|", &
./input_cp2k_dft.F:                                        "Simple constraint, [rho_0(r)-rho(r)]", &
./input_cp2k_dft.F:                          " the unit cell, only if DELTA_PULSE_SCALE is set to unity. For an orthorhombic cell"// &
./input_cp2k_dft.F:                          description="Parameter &rho;<sub>0</sub> defines the critical density in the middle "// &
./qs_linres_epr_nablavks.F:   USE qs_ks_methods,                   ONLY: calc_rho_tot_gspace
./qs_linres_epr_nablavks.F:   USE qs_local_rho_types,              ONLY: rhoz_type
./qs_linres_epr_nablavks.F:   USE qs_rho0_types,                   ONLY: rho0_atom_type
./qs_linres_epr_nablavks.F:   USE qs_rho_atom_methods,             ONLY: calculate_rho_atom_coeff
./qs_linres_epr_nablavks.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_linres_epr_nablavks.F:                                              rho_atom_coeff,&
./qs_linres_epr_nablavks.F:                                              rho_atom_type
./qs_linres_epr_nablavks.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_linres_epr_nablavks.F:                                              qs_rho_p_type,&
./qs_linres_epr_nablavks.F:                                              qs_rho_type
./qs_linres_epr_nablavks.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: cexp_ppl, rho_rad_z
./qs_linres_epr_nablavks.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho_rad_0
./qs_linres_epr_nablavks.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao
./qs_linres_epr_nablavks.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho1_r, rho2_r, rho_r, v_rspace_new, &
./qs_linres_epr_nablavks.F:      TYPE(pw_p_type), POINTER :: rho_tot_gspace, v_coulomb_gspace, v_coulomb_gtemp, &
./qs_linres_epr_nablavks.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), POINTER      :: nablavks_set
./qs_linres_epr_nablavks.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_xc
./qs_linres_epr_nablavks.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_atom_set
./qs_linres_epr_nablavks.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: rho_rad_h, rho_rad_s
./qs_linres_epr_nablavks.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER     :: nablavks_vec_rad_h, nablavks_vec_rad_s
./qs_linres_epr_nablavks.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_linres_epr_nablavks.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_linres_epr_nablavks.F:      TYPE(rhoz_type), DIMENSION(:), POINTER             :: rhoz_set
./qs_linres_epr_nablavks.F:      NULLIFY (rho)
./qs_linres_epr_nablavks.F:      NULLIFY (rho_xc)
./qs_linres_epr_nablavks.F:      NULLIFY (rho0_atom_set)
./qs_linres_epr_nablavks.F:      NULLIFY (rho_atom_set)
./qs_linres_epr_nablavks.F:      NULLIFY (rhoz_set)
./qs_linres_epr_nablavks.F:      NULLIFY (rho_r, rho_ao, rho1_r, rho2_r)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(idir, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_zero(rho_r(1)%pw)
./qs_linres_epr_nablavks.F:      CALL qs_rho_get(nablavks_set(1, 1)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:      pwx => rho_r(1)%pw
./qs_linres_epr_nablavks.F:      CALL qs_rho_get(nablavks_set(2, 1)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:      pwy => rho_r(1)%pw
./qs_linres_epr_nablavks.F:      CALL qs_rho_get(nablavks_set(3, 1)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:      pwz => rho_r(1)%pw
./qs_linres_epr_nablavks.F:                      rho=rho, &
./qs_linres_epr_nablavks.F:                      rho_xc=rho_xc, &
./qs_linres_epr_nablavks.F:                      rho_atom_set=rho_atom_set, &
./qs_linres_epr_nablavks.F:                      rho0_atom_set=rho0_atom_set, &
./qs_linres_epr_nablavks.F:                      rhoz_set=rhoz_set, &
./qs_linres_epr_nablavks.F:      ALLOCATE (rho_tot_gspace)
./qs_linres_epr_nablavks.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_tot_gspace%pw, &
./qs_linres_epr_nablavks.F:         CALL qs_rho_get(rho, rho_ao_kp=rho_ao)
./qs_linres_epr_nablavks.F:         CALL calculate_rho_atom_coeff(qs_env, rho_ao)
./qs_linres_epr_nablavks.F:         CALL prepare_gapw_den(qs_env, do_rho0=.TRUE.)
./qs_linres_epr_nablavks.F:      CALL pw_zero(rho_tot_gspace%pw)
./qs_linres_epr_nablavks.F:      CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho, &
./qs_linres_epr_nablavks.F:      CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, ehartree, &
./qs_linres_epr_nablavks.F:            NULLIFY (rho_rad_z)
./qs_linres_epr_nablavks.F:            rho_rad_z => rhoz_set(ikind)%r_coef
./qs_linres_epr_nablavks.F:                  rho_atom => rho_atom_set(iatom)
./qs_linres_epr_nablavks.F:                  NULLIFY (rho_rad_h, rho_rad_s, rho_rad_0)
./qs_linres_epr_nablavks.F:                  CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=rho_rad_h, &
./qs_linres_epr_nablavks.F:                                    rho_rad_s=rho_rad_s)
./qs_linres_epr_nablavks.F:                  rho_rad_0 => rho0_atom_set(iatom)%rho0_rad_h%r_coef
./qs_linres_epr_nablavks.F:                  CALL calculate_Vh_1center(vh1_rad_h, vh1_rad_s, rho_rad_h, rho_rad_s, rho_rad_0, rho_rad_z, grid_atom)
./qs_linres_epr_nablavks.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tot_gspace%pw)
./qs_linres_epr_nablavks.F:      DEALLOCATE (rho_tot_gspace)
./qs_linres_epr_nablavks.F:         CALL qs_rho_get(nablavks_set(idir, 1)%rho, rho_r=rho1_r)
./qs_linres_epr_nablavks.F:         CALL qs_rho_get(nablavks_set(idir, 2)%rho, rho_r=rho2_r)
./qs_linres_epr_nablavks.F:         CALL pw_copy(rho1_r(1)%pw, rho2_r(1)%pw)
./qs_linres_epr_nablavks.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_xc, xc_section=xc_section, &
./qs_linres_epr_nablavks.F:                            vxc_rho=v_rspace_new, vxc_tau=v_tau_rspace, exc=exc, just_energy=.FALSE.)
./qs_linres_epr_nablavks.F:         CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho, xc_section=xc_section, &
./qs_linres_epr_nablavks.F:                            vxc_rho=v_rspace_new, vxc_tau=v_tau_rspace, exc=exc, just_energy=.FALSE.)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(1, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_axpy(v_xc_rtemp%pw, rho_r(1)%pw)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(2, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_axpy(v_xc_rtemp%pw, rho_r(1)%pw)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(3, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_axpy(v_xc_rtemp%pw, rho_r(1)%pw)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(1, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_axpy(v_xc_rtemp%pw, rho_r(1)%pw)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(2, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_axpy(v_xc_rtemp%pw, rho_r(1)%pw)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(3, ispin)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_axpy(v_xc_rtemp%pw, rho_r(1)%pw)
./qs_linres_epr_nablavks.F:            CALL qs_rho_get(nablavks_set(idir, 1)%rho, rho_r=rho_r)
./qs_linres_epr_nablavks.F:            CALL pw_copy(rho_r(1)%pw, wf_r%pw) ! RA
./semi_empirical_par_utils.F:      IF (ABS(sep%rho) > EPSILON(0.0_dp)) THEN
./semi_empirical_par_utils.F:         sep%ko(9) = sep%rho
./hfx_admm_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./hfx_admm_utils.F:                                              qs_rho_type
./hfx_admm_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux_fit
./hfx_admm_utils.F:               matrix_s_aux_fit_vs_orb, rho, rho_aux_fit, ks_env, dft_control, &
./hfx_admm_utils.F:                      rho=rho, &
./hfx_admm_utils.F:                      rho_aux_fit=rho_aux_fit, &
./hfx_admm_utils.F:!> \param rho ...
./hfx_admm_utils.F:   SUBROUTINE hfx_ks_matrix(qs_env, matrix_ks, rho, energy, calculate_forces, &
./hfx_admm_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./hfx_admm_utils.F:                                                            rho_ao_1d
./hfx_admm_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_h, matrix_ks_orb, rho_ao_orb
./hfx_admm_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho_orb
./hfx_admm_utils.F:               matrix_ks_im, matrix_ks_orb, rho_ao_orb, &
./hfx_admm_utils.F:                            rho_aux_fit=rho_orb)
./hfx_admm_utils.F:            CALL get_qs_env(qs_env=qs_env, matrix_ks_kp=matrix_ks_orb, rho=rho_orb)
./hfx_admm_utils.F:         CALL qs_rho_get(rho_struct=rho_orb, rho_ao_kp=rho_ao_orb)
./hfx_admm_utils.F:            CALL integrate_four_center(qs_env, matrix_ks_orb, eh1, rho_ao_orb, hfx_sections, &
./hfx_admm_utils.F:               CALL scale_dm(qs_env, rho_ao_orb, scale_back=.FALSE.)
./hfx_admm_utils.F:            CALL derivatives_four_center(qs_env, rho_ao_orb, hfx_sections, &
./hfx_admm_utils.F:               CALL scale_dm(qs_env, rho_ao_orb, scale_back=.TRUE.)
./hfx_admm_utils.F:            CALL qs_rho_get(rho_orb, rho_ao_im=rho_ao_1d)
./hfx_admm_utils.F:            ns = SIZE(rho_ao_1d)
./hfx_admm_utils.F:            rho_ao_orb(1:ns, 1:1) => rho_ao_1d(1:ns)
./hfx_admm_utils.F:               CALL integrate_four_center(qs_env, matrix_ks_orb, eh1, rho_ao_orb, hfx_sections, &
./hfx_admm_utils.F:               CALL derivatives_four_center(qs_env, rho_ao_orb, hfx_sections, &
./hfx_admm_utils.F:         CALL rescale_xc_potential(qs_env, matrix_ks, rho, energy, v_rspace_new, v_tau_rspace, &
./hfx_admm_utils.F:      TYPE(pw_p_type)                                    :: pot_g, rho_g, rho_r
./hfx_admm_utils.F:      TYPE(pw_p_type), ALLOCATABLE, DIMENSION(:)         :: rho_i, rho_j
./hfx_admm_utils.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_r%pw, &
./hfx_admm_utils.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, &
./hfx_admm_utils.F:         ALLOCATE (rho_i(blocksize))
./hfx_admm_utils.F:         ALLOCATE (rho_j(blocksize))
./hfx_admm_utils.F:            NULLIFY (rho_i(iorb_block)%pw)
./hfx_admm_utils.F:            CALL pw_create(rho_i(iorb_block)%pw, rho_r%pw%pw_grid, &
./hfx_admm_utils.F:            NULLIFY (rho_j(iorb_block)%pw)
./hfx_admm_utils.F:            CALL pw_create(rho_j(iorb_block)%pw, rho_r%pw%pw_grid, &
./hfx_admm_utils.F:                  CALL calculate_wavefunction(mo_coeff, iorb, rho_i(iloc), rho_g, &
./hfx_admm_utils.F:                     CALL calculate_wavefunction(mo_coeff, jorb, rho_j(jloc), rho_g, &
./hfx_admm_utils.F:                        rho_r%pw%cr3d = rho_i(iloc)%pw%cr3d*rho_j(jloc)%pw%cr3d
./hfx_admm_utils.F:                        CALL pw_transfer(rho_r%pw, rho_g%pw)
./hfx_admm_utils.F:                        CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./hfx_admm_utils.F:            CALL pw_release(rho_i(iorb_block)%pw)
./hfx_admm_utils.F:            CALL pw_release(rho_j(iorb_block)%pw)
./hfx_admm_utils.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r%pw)
./hfx_admm_utils.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./hfx_admm_utils.F:!> \param rho_ao    electron density expressed in terms of atomic orbitals
./hfx_admm_utils.F:   SUBROUTINE tddft_hfx_matrix(matrix_ks, rho_ao, qs_env)
./hfx_admm_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, rho_ao
./hfx_admm_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_ks_kp, rho_ao_kp
./hfx_admm_utils.F:      NULLIFY (dft_control, hfx_sections, input, para_env, matrix_ks_kp, rho_ao_kp)
./hfx_admm_utils.F:         rho_ao_kp(1:nspins, 1:1) => rho_ao(1:nspins)
./hfx_admm_utils.F:               CALL integrate_four_center(qs_env, matrix_ks_kp, eh1, rho_ao_kp, hfx_sections, para_env, &
./qmmm_image_charge.F:   USE qs_collocate_density,            ONLY: calculate_rho_metal,&
./qmmm_image_charge.F:                                              calculate_rho_single_gaussian
./qmmm_image_charge.F:!> \param rho_hartree_gspace Kohn Sham density in reciprocal space
./qmmm_image_charge.F:   SUBROUTINE calculate_image_pot(v_hartree_rspace, rho_hartree_gspace, energy, &
./qmmm_image_charge.F:      TYPE(pw_p_type), INTENT(IN)                        :: v_hartree_rspace, rho_hartree_gspace
./qmmm_image_charge.F:                                     rho_hartree_gspace=rho_hartree_gspace, &
./qmmm_image_charge.F:!>        rho_metal=sum_a c_a*g_a
./qmmm_image_charge.F:!>        rho_metal=sum_a c_a*g_a
./qmmm_image_charge.F:      REAL(KIND=dp)                                      :: eps_rho_rspace
./qmmm_image_charge.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qmmm_image_charge.F:                                           eps_gvg_rspace=eps_rho_rspace, calculate_forces=.FALSE., &
./qmmm_image_charge.F:!>        rho_metal=sum_a c_a*g_a
./qmmm_image_charge.F:      REAL(KIND=dp)                                      :: eps_rho_rspace
./qmmm_image_charge.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qmmm_image_charge.F:                                           eps_gvg_rspace=eps_rho_rspace, calculate_forces=.TRUE., &
./qmmm_image_charge.F:      TYPE(pw_p_type)                                    :: rho_gb, vb_gspace, vb_rspace
./qmmm_image_charge.F:                             rho_gb%pw, &
./qmmm_image_charge.F:      CALL pw_zero(rho_gb%pw)
./qmmm_image_charge.F:      CALL calculate_rho_single_gaussian(rho_gb, qs_env, iatom_ref)
./qmmm_image_charge.F:      CALL pw_poisson_solve(poisson_env, rho_gb%pw, vhartree=vb_gspace%pw)
./qmmm_image_charge.F:      CALL pw_release(rho_gb%pw)
./qmmm_image_charge.F:!> \param v_metal_rspace potential generated by rho_metal in real space
./qmmm_image_charge.F:!>        rho_metal=sum_a c_a*g_a
./qmmm_image_charge.F:!> \param rho_hartree_gspace Kohn Sham density in reciprocal space
./qmmm_image_charge.F:   SUBROUTINE calculate_potential_metal(v_metal_rspace, coeff, rho_hartree_gspace, energy, &
./qmmm_image_charge.F:      TYPE(pw_p_type), INTENT(IN), OPTIONAL              :: rho_hartree_gspace
./qmmm_image_charge.F:      REAL(KIND=dp)                                      :: en_external, en_vmetal_rhohartree, &
./qmmm_image_charge.F:                                                            total_rho_metal
./qmmm_image_charge.F:      TYPE(pw_p_type)                                    :: rho_metal, v_metal_gspace
./qmmm_image_charge.F:      en_vmetal_rhohartree = 0.0_dp
./qmmm_image_charge.F:                             rho_metal%pw, &
./qmmm_image_charge.F:      CALL pw_zero(rho_metal%pw)
./qmmm_image_charge.F:      CALL calculate_rho_metal(rho_metal, coeff, total_rho_metal=total_rho_metal, &
./qmmm_image_charge.F:      CALL pw_poisson_solve(poisson_env, rho_metal%pw, &
./qmmm_image_charge.F:      IF (PRESENT(rho_hartree_gspace)) THEN
./qmmm_image_charge.F:         en_vmetal_rhohartree = 0.5_dp*pw_integral_ab(v_metal_gspace%pw, &
./qmmm_image_charge.F:                                                      rho_hartree_gspace%pw)
./qmmm_image_charge.F:         en_external = qs_env%qmmm_env_qm%image_charge_pot%V0*total_rho_metal
./qmmm_image_charge.F:         energy%image_charge = en_vmetal_rhohartree-0.5_dp*en_external
./qmmm_image_charge.F:         CALL print_image_energy_terms(en_vmetal_rhohartree, en_external, &
./qmmm_image_charge.F:                                       total_rho_metal, qs_env)
./qmmm_image_charge.F:      CALL pw_release(rho_metal%pw)
./qmmm_image_charge.F:!> \param v_metal potential generated by rho_metal (in real space)
./qmmm_image_charge.F:!> \param en_vmetal_rhohartree energy contribution of the image charges
./qmmm_image_charge.F:!>        without external potential, i.e. 0.5*integral(v_metal*rho_hartree)
./qmmm_image_charge.F:!>        to an external potential, i.e. V0*total_rho_metal
./qmmm_image_charge.F:!> \param total_rho_metal total induced image charge density
./qmmm_image_charge.F:   SUBROUTINE print_image_energy_terms(en_vmetal_rhohartree, en_external, &
./qmmm_image_charge.F:                                       total_rho_metal, qs_env)
./qmmm_image_charge.F:      REAL(KIND=dp), INTENT(IN)                          :: en_vmetal_rhohartree, en_external, &
./qmmm_image_charge.F:                                                            total_rho_metal
./qmmm_image_charge.F:            "Total induced charge density [a.u.]:", total_rho_metal
./qmmm_image_charge.F:            "Coulomb energy of QM and image charge density [a.u.]:", en_vmetal_rhohartree
./qmmm_image_charge.F:            "Total image charge energy [a.u.]:", en_vmetal_rhohartree-0.5_dp*en_external
./pair_potential.F:                        pot_par(nk, 2) = potparm%pot(i, j)%pot%set(1)%eam%drhoar
./qs_collocate_density.F:             calculate_rho_core, &
./qs_collocate_density.F:             calculate_lri_rho_elec, &
./qs_collocate_density.F:             calculate_rho_single_gaussian, &
./qs_collocate_density.F:             calculate_rho_metal, &
./qs_collocate_density.F:             calculate_rho_resp_single, &
./qs_collocate_density.F:             calculate_rho_resp_all, &
./qs_collocate_density.F:             calculate_rho_elec, &
./qs_collocate_density.F:             calculate_drho_elec, &
./qs_collocate_density.F:             calculate_rho_nlcc
./qs_collocate_density.F:!> \param rho_nlcc ...
./qs_collocate_density.F:   SUBROUTINE calculate_rho_nlcc(rho_nlcc, qs_env)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_nlcc
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_nlcc', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: alpha, eps_rho_rspace
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:               atom_list, pw_env, rs_rho, auxbas_pw_pool, cores, mylmax)
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:               IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:                  IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:                                                 (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, 1.0_dp, pab, 0, 0, rs_rho, &
./qs_collocate_density.F:                                                 cell, cube_info, eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, rho_nlcc%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_nlcc
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: alpha, eps_rho_rspace
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:               atom_list, pw_env, rs_rho, auxbas_pw_pool, cores)
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:            IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:               IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:                                                 (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, 1.0_dp, pab, 0, 0, rs_rho, &
./qs_collocate_density.F:                                                 cell, cube_info, eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, vppl%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:!> \param lri_rho_g ...
./qs_collocate_density.F:!> \param lri_rho_r ...
./qs_collocate_density.F:!> \param total_rho ...
./qs_collocate_density.F:   SUBROUTINE calculate_lri_rho_elec(lri_rho_g, lri_rho_r, qs_env, &
./qs_collocate_density.F:                                     lri_coef, total_rho, basis_type, exact_1c_terms, pmat, atomlist)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: lri_rho_g, lri_rho_r
./qs_collocate_density.F:      REAL(KIND=dp), INTENT(OUT)                         :: total_rho
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_lri_rho_elec', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace, rab2, zetp
./qs_collocate_density.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_rho
./qs_collocate_density.F:               particle_set, pw_env, pw_pools, rs_grid, rs_rho, sphi_a, &
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:      CALL pw_env_get(pw_env=pw_env, rs_grids=rs_rho, pw_pools=pw_pools)
./qs_collocate_density.F:         CALL rs_grid_retain(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:         CALL rs_grid_zero(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:                  rs_grid => rs_rho(igrid_level)%rs_grid
./qs_collocate_density.F:                     rs_grid => rs_rho(igrid_level)%rs_grid
./qs_collocate_density.F:                                                          eps_rho_rspace=eps_rho_rspace, &
./qs_collocate_density.F:                           rs_grid => rs_rho(igrid_level)%rs_grid
./qs_collocate_density.F:                              rs_grid => rs_rho(igrid_level)%rs_grid
./qs_collocate_density.F:                                    eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL pw_zero(lri_rho_g%pw)
./qs_collocate_density.F:      CALL pw_zero(lri_rho_r%pw)
./qs_collocate_density.F:         CALL rs_pw_transfer(rs=rs_rho(igrid_level)%rs_grid, &
./qs_collocate_density.F:         CALL rs_grid_release(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:         CALL pw_axpy(mgrid_gspace(igrid_level)%pw, lri_rho_g%pw)
./qs_collocate_density.F:      CALL pw_transfer(lri_rho_g%pw, lri_rho_r%pw)
./qs_collocate_density.F:      total_rho = pw_integrate_function(lri_rho_r%pw, isign=-1)
./qs_collocate_density.F:   END SUBROUTINE calculate_lri_rho_elec
./qs_collocate_density.F:!> \param rho_core ...
./qs_collocate_density.F:!> \param total_rho ...
./qs_collocate_density.F:   SUBROUTINE calculate_rho_core(rho_core, total_rho, qs_env, only_nopaw)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_core
./qs_collocate_density.F:      REAL(KIND=dp), INTENT(OUT)                         :: total_rho
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_core', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: alpha, eps_rho_rspace
./qs_collocate_density.F:      TYPE(pw_p_type)                                    :: rhoc_r
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:               atom_list, pw_env, rs_rho, auxbas_pw_pool, cores)
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:            IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:               IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:                                                 (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, -1.0_dp, pab, 0, 0, rs_rho, &
./qs_collocate_density.F:                                                 cell, cube_info, eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhoc_r%pw, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, rhoc_r%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:      total_rho = pw_integrate_function(rhoc_r%pw, isign=-1)
./qs_collocate_density.F:      CALL pw_transfer(rhoc_r%pw, rho_core%pw)
./qs_collocate_density.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhoc_r%pw)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_core
./qs_collocate_density.F:!> \param rho_gb charge density generated by a single gaussian
./qs_collocate_density.F:   SUBROUTINE calculate_rho_single_gaussian(rho_gb, qs_env, iatom_in)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_gb
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_single_gaussian', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace
./qs_collocate_density.F:      TYPE(pw_p_type)                                    :: rhoc_r
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:      NULLIFY (cell, dft_control, pab, pw_env, rs_rho, auxbas_pw_pool)
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:      IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:         IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:                                           0, 0, 0.0_dp, 0, ra, (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, 1.0_dp, pab, 0, 0, rs_rho, &
./qs_collocate_density.F:                                           cell, pw_env%cube_info(1), eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhoc_r%pw, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, rhoc_r%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:      CALL pw_transfer(rhoc_r%pw, rho_gb%pw)
./qs_collocate_density.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhoc_r%pw)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_single_gaussian
./qs_collocate_density.F:!> \param rho_metal image charge density
./qs_collocate_density.F:!>        rho_metal=sum_a c_a*g_a
./qs_collocate_density.F:!> \param total_rho_metal total induced image charge density
./qs_collocate_density.F:   SUBROUTINE calculate_rho_metal(rho_metal, coeff, total_rho_metal, qs_env)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_metal
./qs_collocate_density.F:      REAL(KIND=dp), INTENT(OUT), OPTIONAL               :: total_rho_metal
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_metal', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace
./qs_collocate_density.F:      TYPE(pw_p_type)                                    :: rhoc_r
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:      NULLIFY (cell, dft_control, pab, pw_env, rs_rho, auxbas_pw_pool, cores)
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:         IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:            IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:               0, 0, 0.0_dp, 0, ra, (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, coeff(iatom), pab, 0, 0, rs_rho, &
./qs_collocate_density.F:               cell, pw_env%cube_info(1), eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhoc_r%pw, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, rhoc_r%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:      IF (PRESENT(total_rho_metal)) &
./qs_collocate_density.F:         !minus sign: account for the fact that rho_metal has opposite sign
./qs_collocate_density.F:         total_rho_metal = pw_integrate_function(rhoc_r%pw, isign=-1)
./qs_collocate_density.F:      CALL pw_transfer(rhoc_r%pw, rho_metal%pw)
./qs_collocate_density.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhoc_r%pw)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_metal
./qs_collocate_density.F:!> \param rho_gb charge density generated by a single gaussian
./qs_collocate_density.F:   SUBROUTINE calculate_rho_resp_single(rho_gb, qs_env, eta, iatom_in)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_gb
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_resp_single', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace
./qs_collocate_density.F:      TYPE(pw_p_type)                                    :: rhoc_r
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:      NULLIFY (cell, dft_control, pab, pw_env, rs_rho, auxbas_pw_pool, &
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:      IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:         IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:                                           (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, 1.0_dp, pab, 0, 0, rs_rho, &
./qs_collocate_density.F:                                           cell, pw_env%cube_info(1), eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhoc_r%pw, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, rhoc_r%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:      CALL pw_transfer(rhoc_r%pw, rho_gb%pw)
./qs_collocate_density.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhoc_r%pw)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_resp_single
./qs_collocate_density.F:!> \param rho_resp RESP charge density
./qs_collocate_density.F:   SUBROUTINE calculate_rho_resp_all(rho_resp, coeff, natom, eta, qs_env)
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho_resp
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_resp_all', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace
./qs_collocate_density.F:      TYPE(pw_p_type)                                    :: rhoc_r
./qs_collocate_density.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./qs_collocate_density.F:      NULLIFY (cell, cores, dft_control, pab, pw_env, rs_rho, auxbas_pw_pool, &
./qs_collocate_density.F:      CALL pw_env_get(pw_env, auxbas_rs_grid=rs_rho, &
./qs_collocate_density.F:      CALL rs_grid_retain(rs_rho)
./qs_collocate_density.F:      CALL rs_grid_zero(rs_rho)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:         IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./qs_collocate_density.F:            IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./qs_collocate_density.F:               0, 0, 0.0_dp, 0, ra, (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, coeff(iatom), pab, 0, 0, rs_rho, &
./qs_collocate_density.F:               cell, pw_env%cube_info(1), eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhoc_r%pw, &
./qs_collocate_density.F:      CALL rs_pw_transfer(rs_rho, rhoc_r%pw, rs2pw)
./qs_collocate_density.F:      CALL rs_grid_release(rs_rho)
./qs_collocate_density.F:      CALL pw_transfer(rhoc_r%pw, rho_resp%pw)
./qs_collocate_density.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhoc_r%pw)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_resp_all
./qs_collocate_density.F:!> \param rho ...
./qs_collocate_density.F:!> \param rho_gspace ...
./qs_collocate_density.F:!> \param total_rho ...
./qs_collocate_density.F:!>      both rho and rho_gspace contain the new rho
./qs_collocate_density.F:   SUBROUTINE calculate_rho_elec(matrix_p, matrix_p_kp, rho, rho_gspace, total_rho, &
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho, rho_gspace
./qs_collocate_density.F:      REAL(KIND=dp), INTENT(OUT)                         :: total_rho
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_elec', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace, rab2, scale, zetp
./qs_collocate_density.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_rho
./qs_collocate_density.F:               qs_kind_set, particle_set, rs_rho, pw_env, rs_descs, &
./qs_collocate_density.F:      ! if compute_tau, all grids referening to rho are actually tau
./qs_collocate_density.F:      CALL pw_env_get(pw_env, rs_descs=rs_descs, rs_grids=rs_rho, lgrid=lgrid)
./qs_collocate_density.F:      CPASSERT(ASSOCIATED(rs_rho))
./qs_collocate_density.F:         CALL rs_grid_retain(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:         CALL rs_grid_zero(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:         IF (rs_rho(igrid_level)%rs_grid%desc%distributed) THEN
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:!$OMP          SHARED(cell,cube_info,eps_rho_rspace,ga_gb_function, my_idir,map_consistent), &
./qs_collocate_density.F:!$OMP          SHARED(rs_rho,lgrid,gridlevel_info,task_list,qs_kind_set,lmax_global), &
./qs_collocate_density.F:            lgrid%r(1:rs_rho(igrid_level)%rs_grid%ngpts_local, ithread) = 0._dp
./qs_collocate_density.F:            IF (rs_rho(igrid_level)%rs_grid%desc%distributed) THEN
./qs_collocate_density.F:                     rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                     eps_rho_rspace, &
./qs_collocate_density.F:                     rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                     eps_rho_rspace, &
./qs_collocate_density.F:                     rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                     eps_rho_rspace, &
./qs_collocate_density.F:                     rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                     eps_rho_rspace, &
./qs_collocate_density.F:            nz = (1+rs_rho(igrid_level)%rs_grid%ub_local(3) &
./qs_collocate_density.F:                  -rs_rho(igrid_level)%rs_grid%lb_local(3))
./qs_collocate_density.F:            nxy = (1+rs_rho(igrid_level)%rs_grid%ub_local(1) &
./qs_collocate_density.F:                   -rs_rho(igrid_level)%rs_grid%lb_local(1)) &
./qs_collocate_density.F:                  *(1+rs_rho(igrid_level)%rs_grid%ub_local(2) &
./qs_collocate_density.F:                    -rs_rho(igrid_level)%rs_grid%lb_local(2))
./qs_collocate_density.F:            lb = lb+rs_rho(igrid_level)%rs_grid%lb_local(3)
./qs_collocate_density.F:            ub = ub+rs_rho(igrid_level)%rs_grid%lb_local(3)
./qs_collocate_density.F:                       rs_rho(igrid_level)%rs_grid%r(:, :, lb:ub), 1)
./qs_collocate_density.F:      CALL density_rs2pw(pw_env, rs_rho, rho, rho_gspace)
./qs_collocate_density.F:      total_rho = pw_integrate_function(rho%pw, isign=-1)
./qs_collocate_density.F:   END SUBROUTINE calculate_rho_elec
./qs_collocate_density.F:!> \param drho ...
./qs_collocate_density.F:!> \param drho_gspace ...
./qs_collocate_density.F:   SUBROUTINE calculate_drho_elec(matrix_p, matrix_p_kp, drho, drho_gspace, qs_env, &
./qs_collocate_density.F:      TYPE(pw_p_type), DIMENSION(:), INTENT(INOUT)       :: drho, drho_gspace
./qs_collocate_density.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_drho_elec', &
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: eps_rho_rspace, rab2, scale, zetp
./qs_collocate_density.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_rho
./qs_collocate_density.F:               qs_kind_set, sab_orb, particle_set, rs_rho, pw_env, rs_descs, &
./qs_collocate_density.F:      CALL pw_env_get(pw_env, rs_descs=rs_descs, rs_grids=rs_rho)
./qs_collocate_density.F:         CALL rs_grid_retain(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:         distributed_rs_grids = rs_rho(igrid_level)%rs_grid%desc%distributed
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:            CALL rs_grid_zero(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:            IF (rs_rho(igrid_level)%rs_grid%desc%distributed) THEN
./qs_collocate_density.F:                  rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                  eps_rho_rspace, &
./qs_collocate_density.F:                  rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                  eps_rho_rspace, &
./qs_collocate_density.F:         CALL density_rs2pw_basic(pw_env, rs_rho, drho(idir), drho_gspace(idir))
./qs_collocate_density.F:      IF (ASSOCIATED(rs_rho)) THEN
./qs_collocate_density.F:         DO i = 1, SIZE(rs_rho)
./qs_collocate_density.F:            CALL rs_grid_release(rs_rho(i)%rs_grid)
./qs_collocate_density.F:   END SUBROUTINE calculate_drho_elec
./qs_collocate_density.F:!> \param rho ...
./qs_collocate_density.F:!> \param rho_gspace ...
./qs_collocate_density.F:!>      modified calculate_rho_elec, should write the wavefunction represented by
./qs_collocate_density.F:   SUBROUTINE calculate_wavefunction(mo_vectors, ivector, rho, rho_gspace, &
./qs_collocate_density.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rho, rho_gspace
./qs_collocate_density.F:      REAL(KIND=dp)                                      :: dab, eps_rho_rspace, rab2, scale, zetp
./qs_collocate_density.F:      TYPE(REALSPACE_GRID_P_TYPE), DIMENSION(:), POINTER :: rs_rho
./qs_collocate_density.F:               rs_rho, pw_pools, mgrid_rspace, mgrid_gspace, mylmax)
./qs_collocate_density.F:      CALL pw_env_get(pw_env, rs_grids=rs_rho, pw_pools=pw_pools, &
./qs_collocate_density.F:         CALL rs_grid_retain(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:         CALL rs_grid_zero(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_collocate_density.F:               IF (.NOT. ALL(rs_rho(igrid_level)%rs_grid%desc%perd == 1)) THEN
./qs_collocate_density.F:                     tp(dir) = FLOOR(DOT_PRODUCT(cell%h_inv(dir, :), ra)*rs_rho(igrid_level)%rs_grid%desc%npts(dir))
./qs_collocate_density.F:                     tp(dir) = MODULO(tp(dir), rs_rho(igrid_level)%rs_grid%desc%npts(dir))
./qs_collocate_density.F:                     IF (rs_rho(igrid_level)%rs_grid%desc%perd(dir) .NE. 1) THEN
./qs_collocate_density.F:                        lb(dir) = rs_rho(igrid_level)%rs_grid%lb_local(dir)+rs_rho(igrid_level)%rs_grid%desc%border
./qs_collocate_density.F:                        ub(dir) = rs_rho(igrid_level)%rs_grid%ub_local(dir)-rs_rho(igrid_level)%rs_grid%desc%border
./qs_collocate_density.F:                        lb(dir) = rs_rho(igrid_level)%rs_grid%lb_local(dir)
./qs_collocate_density.F:                        ub(dir) = rs_rho(igrid_level)%rs_grid%ub_local(dir)
./qs_collocate_density.F:                     location(dir) = tp(dir)+rs_rho(igrid_level)%rs_grid%desc%lb(dir)
./qs_collocate_density.F:                  rs_rho(igrid_level)%rs_grid, cell, cube_info(igrid_level), &
./qs_collocate_density.F:                  eps_rho_rspace, map_consistent=.TRUE., ga_gb_function=FUNC_AB, &
./qs_collocate_density.F:         CALL rs_pw_transfer(rs_rho(igrid_level)%rs_grid, &
./qs_collocate_density.F:         CALL rs_grid_release(rs_rho(igrid_level)%rs_grid)
./qs_collocate_density.F:      CALL pw_zero(rho_gspace%pw)
./qs_collocate_density.F:         CALL pw_axpy(mgrid_gspace(igrid_level)%pw, rho_gspace%pw)
./qs_collocate_density.F:      CALL pw_transfer(rho_gspace%pw, rho%pw)
./qs_collocate_density.F:!> \param eps_rho_rspace ...
./qs_collocate_density.F:!> \param collocate_rho0 ...
./qs_collocate_density.F:                                           eps_rho_rspace, ga_gb_function, &
./qs_collocate_density.F:                                           collocate_rho0, &
./qs_collocate_density.F:      REAL(KIND=dp), INTENT(IN)                :: eps_rho_rspace
./qs_collocate_density.F:      LOGICAL, INTENT(IN), OPTIONAL            :: map_consistent, collocate_rho0
./qs_collocate_density.F:      LOGICAL                                  :: my_collocate_rho0, &
./qs_collocate_density.F:      IF (PRESENT(collocate_rho0) .AND. PRESENT(rpgf0_s)) THEN
./qs_collocate_density.F:         my_collocate_rho0 = collocate_rho0
./qs_collocate_density.F:         my_collocate_rho0 = .FALSE.
./qs_collocate_density.F:                                           zetp=zetp, eps=eps_rho_rspace, &
./qs_collocate_density.F:      ELSE IF (my_collocate_rho0) THEN
./qs_collocate_density.F:                                           zetp, eps_rho_rspace, prefactor, cutoff)
./qs_collocate_density.F:         IF (rsgrid%desc%orthorhombic) THEN
./qs_collocate_density.F:!> \param eps_rho_gspace ...
./qs_collocate_density.F:                                           eps_rho_gspace, gsq_max, pw)
./qs_collocate_density.F:      REAL(dp), INTENT(IN)                               :: eps_rho_gspace, gsq_max
./qs_collocate_density.F:            IF (ABS(pij) < eps_rho_gspace) CYCLE
./hfx_screening_methods.F:         opt_state%rhobeg = 0.1_dp
./hfx_screening_methods.F:         opt_state%rhoend = 0.000001_dp
./pw_env_methods.F:                                              rho_dependent
./pw_env_methods.F:   USE qs_rho0_types,                   ONLY: get_rho0_mpole,&
./pw_env_methods.F:                                              rho0_mpole_type
./pw_env_methods.F:        xc_rho_nn10, xc_rho_nn50, xc_rho_no_smooth, xc_rho_spline2_smooth, xc_rho_spline3_smooth
./pw_env_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./pw_env_methods.F:               pw_pools, rho0_mpole, rs_descs, para_env, cell_ref, vdw_ref_grid, &
./pw_env_methods.F:         CALL get_qs_env(qs_env=qs_env, rho0_mpole=rho0_mpole)
./pw_env_methods.F:         CPASSERT(ASSOCIATED(rho0_mpole))
./pw_env_methods.F:         CALL get_rho0_mpole(rho0_mpole=rho0_mpole, &
./pw_env_methods.F:      CASE (xc_rho_no_smooth)
./pw_env_methods.F:      CASE (xc_rho_spline2_smooth, xc_rho_spline3_smooth, xc_rho_nn10, xc_rho_nn50)
./pw_env_methods.F:                             pw_grid%dr(:), pw_grid%dh(:, :), pw_grid%dh_inv(:, :), pw_grid%orthorhombic, &
./pw_env_methods.F:            IF (poisson_params%dielectric_params%dielec_functiontype .EQ. rho_dependent) THEN
./pw_env_methods.F:      REAL(KIND=dp)                                      :: alpha, core_charge, eps_gvg, eps_rho, &
./pw_env_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./pw_env_methods.F:      NULLIFY (dft_control, qs_kind_set, rho0_mpole)
./pw_env_methods.F:      eps_rho = dft_control%qs_control%eps_rho_rspace
./pw_env_methods.F:         CALL get_qs_env(qs_env=qs_env, rho0_mpole=rho0_mpole)
./pw_env_methods.F:         CPASSERT(ASSOCIATED(rho0_mpole))
./pw_env_methods.F:         CALL get_rho0_mpole(rho0_mpole=rho0_mpole, zet0_h=zet0, max_rpgf0_s=max_rpgf0_s)
./pw_env_methods.F:      ! Find the grid level suitable for rho0_soft
./pw_env_methods.F:         rho0_mpole%igrid_zet0_s = igrid_zet0_s
./pw_env_methods.F:         ! Take into account the radius of the soft compensation charge rho0_soft1
./pw_env_methods.F:               maxradius = MAX(maxradius, exp_radius(0, alpha, eps_rho, core_charge))
./pw_env_methods.F:               maxradius = MAX(maxradius, exp_radius(1, alpha, eps_rho, core_charge))
./pw_env_methods.F:                           maxradius = MAX(maxradius, exp_radius(la, zetp, eps_rho, 1.0_dp))
./pw_env_methods.F:                           maxradius = MAX(maxradius, exp_radius(lb, zetp, eps_rho, 2.0_dp))
./pw_env_methods.F:                           maxradius = MAX(maxradius, exp_radius(lb+1, zetp, eps_rho, 2.0_dp))
./qs_cdft_methods.F:   USE qs_rho0_types,                   ONLY: get_rho0_mpole,&
./qs_cdft_methods.F:                                              mpole_rho_atom,&
./qs_cdft_methods.F:                                              rho0_mpole_type
./qs_cdft_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_cdft_methods.F:                                              qs_rho_type
./qs_cdft_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_cdft_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_cdft_methods.F:               rho, rho_r, force, cutoffs, becke_control, group)
./qs_cdft_methods.F:                      rho=rho, &
./qs_cdft_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_cdft_methods.F:                                                                rho_r(ispin)%pw%cr3d(k, j, i)*dvol
./qs_cdft_methods.F:                                                                rho_r(ispin)%pw%cr3d(k, j, i)*dvol
./qs_cdft_methods.F:      ! by the number of processes when the final force%rho_elec is constructed in qs_force
./qs_cdft_methods.F:               force(ikind)%rho_elec(:, i) = force(ikind)%rho_elec(:, i)+group(igroup)%integrated(:, iatom)*strength(igroup)
./qs_cdft_methods.F:      TYPE(mpole_rho_atom), DIMENSION(:), POINTER        :: mp_rho
./qs_cdft_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: charge, rho_frag, rho_r
./qs_cdft_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_cdft_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_cdft_methods.F:      NULLIFY (para_env, dft_control, particle_set, rho_r, energy, rho, logger, becke_constraint_section, qs_kind_set, &
./qs_cdft_methods.F:               particles, subsys, pw_env, auxbas_pw_pool, mp_rho, rho0_mpole, group, charge, rho_frag)
./qs_cdft_methods.F:                      rho=rho, &
./qs_cdft_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_cdft_methods.F:      ! Calculate value of constraint i.e. int ( rho(r) w(r) dr)
./qs_cdft_methods.F:               dE(igroup) = dE(igroup)+sign*accurate_dot_product(group(igroup)%weight%pw%cr3d, rho_r(i)%pw%cr3d, &
./qs_cdft_methods.F:               dE(igroup) = dE(igroup)+sign*accurate_sum(group(igroup)%weight%pw%cr3d*rho_r(i)%pw%cr3d)*dvol
./qs_cdft_methods.F:               electronic_charge(iatom, i) = accurate_sum(charge(iatom)%pw%cr3d*rho_r(i)%pw%cr3d)*dvol
./qs_cdft_methods.F:            ALLOCATE (rho_frag(nfrag_spins))
./qs_cdft_methods.F:            ! Total density (rho_alpha + rho_beta)
./qs_cdft_methods.F:            ! Spin difference density (rho_alpha - rho_beta) if needed
./qs_cdft_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, rho_frag(i)%pw, use_data=REALDATA3D, &
./qs_cdft_methods.F:               CALL pw_copy(becke_control%fragments(i, 1)%pw, rho_frag(i)%pw)
./qs_cdft_methods.F:               CALL pw_axpy(becke_control%fragments(i, 2)%pw, rho_frag(i)%pw, 1.0_dp)
./qs_cdft_methods.F:            nelectron_frag = pw_integrate_function(rho_frag(1)%pw)
./qs_cdft_methods.F:            ! Update constraint target value i.e. perform integration w_i*rho_frag_{tot/spin}*dr
./qs_cdft_methods.F:                                                 accurate_dot_product(group(igroup)%weight%pw%cr3d, rho_frag(i)%pw%cr3d, &
./qs_cdft_methods.F:                                                 accurate_sum(group(igroup)%weight%pw%cr3d*rho_frag(i)%pw%cr3d)*dvol
./qs_cdft_methods.F:               CALL cp_pw_to_cube(rho_frag(1)%pw, &
./qs_cdft_methods.F:            ! Calculate reference atomic charges int( w_i * rho_frag * dr )
./qs_cdft_methods.F:                     becke_control%charges_fragment(iatom, i) = accurate_sum(charge(iatom)%pw%cr3d*rho_frag(i)%pw%cr3d)*dvol
./qs_cdft_methods.F:               CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_frag(i)%pw)
./qs_cdft_methods.F:            DEALLOCATE (rho_frag)
./qs_cdft_methods.F:         ! GAPW: add core charges (rho_hard - rho_soft)
./qs_cdft_methods.F:         CALL get_qs_env(qs_env, rho0_mpole=rho0_mpole)
./qs_cdft_methods.F:         CALL get_rho0_mpole(rho0_mpole, mp_rho=mp_rho)
./qs_cdft_methods.F:                     gapw_offset(igroup, i) = gapw_offset(igroup, i)+sign*group(igroup)%coeff(iatom)*mp_rho(jatom)%q0(i)
./qs_cdft_methods.F:                     electronic_charge(iatom, i) = electronic_charge(iatom, i)+mp_rho(jatom)%q0(i)
./qs_cdft_methods.F:      REAL(kind=dp)                                      :: alpha, coef, dE, dvol, eps_rho_rspace, &
./qs_cdft_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_cdft_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_cdft_methods.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho_all, rs_rho_constr
./qs_cdft_methods.F:               pw_env, fnorm, rho_r, auxbas_pw_pool, energy, rho, qs_kind_set, &
./qs_cdft_methods.F:               subsys, auxbas_rs_desc, rs_rho_all, rs_rho_constr, print_section)
./qs_cdft_methods.F:                      rho=rho, &
./qs_cdft_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_cdft_methods.F:            ! rs_rho_all: Promolecular density i.e. superposition of isolated Gaussian densities
./qs_cdft_methods.F:            ! rs_rho_constr: Sum of isolated Gaussian densities over constraint atoms multiplied by coeff
./qs_cdft_methods.F:            CALL pw_env_get(pw_env, auxbas_rs_desc=auxbas_rs_desc, auxbas_rs_grid=rs_rho_all, &
./qs_cdft_methods.F:            CALL rs_grid_retain(rs_rho_all)
./qs_cdft_methods.F:            CALL rs_grid_zero(rs_rho_all)
./qs_cdft_methods.F:            CALL rs_grid_create(rs_rho_constr, auxbas_rs_desc)
./qs_cdft_methods.F:            CALL rs_grid_zero(rs_rho_constr)
./qs_cdft_methods.F:            eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_cdft_methods.F:                     IF (rs_rho_all%desc%parallel .AND. .NOT. rs_rho_all%desc%distributed) THEN
./qs_cdft_methods.F:                        IF (MODULO(iatom, rs_rho_all%desc%group_size) == rs_rho_all%desc%my_pos) THEN
./qs_cdft_methods.F:                                                       rs_rho_all, cell, cube_info, eps_rho_rspace, &
./qs_cdft_methods.F:                                                          pab, 0, 0, rs_rho_constr, cell, cube_info, eps_rho_rspace, &
./qs_cdft_methods.F:            CALL rs_pw_transfer(rs_rho_all, fnorm%pw, rs2pw)
./qs_cdft_methods.F:            CALL rs_pw_transfer(rs_rho_constr, tmp%pw, rs2pw)
./qs_cdft_methods.F:            CALL rs_grid_release(rs_rho_constr)
./qs_cdft_methods.F:            CALL rs_grid_release(rs_rho_all)
./qs_cdft_methods.F:            dE = dE+accurate_sum(cdft_control%weight%pw%cr3d*rho_r(i)%pw%cr3d)*dvol
./qs_cdft_methods.F:      LOGICAL                                            :: rho_r_valid
./qs_cdft_methods.F:      REAL(kind=dp)                                      :: alpha, coef, dvol, eps_rho_rspace, &
./qs_cdft_methods.F:      TYPE(pw_p_type)                                    :: acceptor_weight, donor_weight, rhonorm, &
./qs_cdft_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_cdft_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_cdft_methods.F:               pw_env, rho_r, auxbas_pw_pool, force, rho, auxbas_rs_desc, &
./qs_cdft_methods.F:                      rho=rho, &
./qs_cdft_methods.F:         CALL qs_rho_get(rho, rho_r=rho_r, rho_r_valid=rho_r_valid)
./qs_cdft_methods.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rhonorm%pw, use_data=REALDATA3D)
./qs_cdft_methods.F:         eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./qs_cdft_methods.F:         DO is = 1, SIZE(rho_r)
./qs_cdft_methods.F:            IF (rho_r_valid) THEN
./qs_cdft_methods.F:               CALL hfun_scale(rhonorm%pw%cr3d, rho_r(is)%pw%cr3d, &
./qs_cdft_methods.F:               CPABORT("We need rho in real space")
./qs_cdft_methods.F:            CALL hfun_scale(tmp%pw%cr3d, rhonorm%pw%cr3d, weight%pw%cr3d, divide=.FALSE.)
./qs_cdft_methods.F:            CALL hfun_scale(tmp%pw%cr3d, rhonorm%pw%cr3d, donor_weight%pw%cr3d, divide=.FALSE.)
./qs_cdft_methods.F:            CALL hfun_scale(tmp%pw%cr3d, rhonorm%pw%cr3d, acceptor_weight%pw%cr3d, divide=.FALSE.)
./qs_cdft_methods.F:                                                          o1=0, o2=0, eps_gvg_rspace=eps_rho_rspace, &
./qs_cdft_methods.F:                                                          o1=0, o2=0, eps_gvg_rspace=eps_rho_rspace, &
./qs_cdft_methods.F:                                                          o1=0, o2=0, eps_gvg_rspace=eps_rho_rspace, &
./qs_cdft_methods.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rhonorm%pw)
./qs_cdft_methods.F:               force(ikind)%rho_elec(:, i) = &
./qs_cdft_methods.F:                  force(ikind)%rho_elec(:, i)+fderiv(:, iatom)*cdft_control%strength
./admm_methods.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./admm_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./admm_methods.F:                                              qs_rho_set,&
./admm_methods.F:                                              qs_rho_type
./admm_methods.F:   PUBLIC :: admm_mo_calc_rho_aux, &
./admm_methods.F:   SUBROUTINE admm_mo_calc_rho_aux(qs_env)
./admm_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'admm_mo_calc_rho_aux', &
./admm_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r_aux
./admm_methods.F:                                                            matrix_s_aux_fit_vs_orb, rho_ao, &
./admm_methods.F:                                                            rho_ao_aux
./admm_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g_aux, rho_r_aux
./admm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux_fit
./admm_methods.F:               matrix_s_aux_fit_vs_orb, matrix_s, rho, rho_aux_fit, para_env)
./admm_methods.F:      NULLIFY (rho_g_aux, rho_r_aux, rho_ao, rho_ao_aux, tot_rho_r_aux)
./admm_methods.F:                      rho=rho, &
./admm_methods.F:                      rho_aux_fit=rho_aux_fit)
./admm_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./admm_methods.F:      CALL qs_rho_get(rho_aux_fit, &
./admm_methods.F:                      rho_ao=rho_ao_aux, &
./admm_methods.F:                      rho_g=rho_g_aux, &
./admm_methods.F:                      rho_r=rho_r_aux, &
./admm_methods.F:                      tot_rho_r=tot_rho_r_aux)
./admm_methods.F:                                         density_matrix=rho_ao(ispin)%matrix, &
./admm_methods.F:                                         density_matrix_aux=rho_ao_aux(ispin)%matrix, &
./admm_methods.F:            ! Here, the auxiliary DM gets calculated and is written into rho_aux_fit%...
./admm_methods.F:                                         density_matrix=rho_ao_aux(ispin)%matrix, &
./admm_methods.F:                                         density_matrix_large=rho_ao(ispin)%matrix, &
./admm_methods.F:                                  density_matrix=rho_ao_aux(ispin)%matrix, &
./admm_methods.F:         CALL calculate_rho_elec(ks_env=ks_env, &
./admm_methods.F:                                 matrix_p=rho_ao_aux(ispin)%matrix, &
./admm_methods.F:                                 rho=rho_r_aux(ispin), &
./admm_methods.F:                                 rho_gspace=rho_g_aux(ispin), &
./admm_methods.F:                                 total_rho=tot_rho_r_aux(ispin), &
./admm_methods.F:      CALL qs_rho_set(rho_aux_fit, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./admm_methods.F:   END SUBROUTINE admm_mo_calc_rho_aux
./admm_methods.F:         matrix_ks_aux_fit_dft, matrix_ks_aux_fit_hfx, matrix_s, matrix_s_aux_fit, rho_ao, &
./admm_methods.F:         rho_ao_aux
./admm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux_fit
./admm_methods.F:               matrix_ks_aux_fit_hfx, matrix_s, matrix_s_aux_fit, rho_ao, rho_ao_aux, matrix_k_tilde, &
./admm_methods.F:               matrix_TtsT, matrix_ks_aux_fit_admms_tmp, rho, rho_aux_fit, sparse_block, para_env, energy)
./admm_methods.F:                      rho=rho, &
./admm_methods.F:                      rho_aux_fit=rho_aux_fit, &
./admm_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./admm_methods.F:      CALL qs_rho_get(rho_aux_fit, &
./admm_methods.F:                      rho_ao=rho_ao_aux)
./admm_methods.F:               CALL dbcsr_trace(matrix_ks_aux_fit(ispin)%matrix, rho_ao_aux(ispin)%matrix, trace_tmp)
./admm_methods.F:               CALL dbcsr_trace(matrix_ks_aux_fit_hfx(ispin)%matrix, rho_ao_aux(ispin)%matrix, trace_tmp)
./admm_methods.F:               CALL dbcsr_trace(matrix_ks_aux_fit_dft(ispin)%matrix, rho_ao_aux(ispin)%matrix, trace_tmp_two)
./admm_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r
./admm_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks_aux_fit_hfx, rho_ao_aux, &
./admm_methods.F:                                                            rho_ao_aux_buffer
./admm_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r, v_rspace_dummy, &
./admm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_aux_fit, rho_aux_fit_buffer
./admm_methods.F:      NULLIFY (ks_env, rho_aux_fit, rho_aux_fit_buffer, &
./admm_methods.F:               rho_ao_aux, rho_ao_aux_buffer, dft_control, &
./admm_methods.F:      NULLIFY (rho_g, rho_r, tot_rho_r)
./admm_methods.F:                      rho_aux_fit=rho_aux_fit, &
./admm_methods.F:                      rho_aux_fit_buffer=rho_aux_fit_buffer, &
./admm_methods.F:      CALL qs_rho_get(rho_aux_fit, &
./admm_methods.F:                      rho_ao=rho_ao_aux)
./admm_methods.F:      CALL qs_rho_get(rho_aux_fit_buffer, &
./admm_methods.F:                      rho_ao=rho_ao_aux_buffer, &
./admm_methods.F:                      rho_g=rho_g, &
./admm_methods.F:                      rho_r=rho_r, &
./admm_methods.F:                      tot_rho_r=tot_rho_r)
./admm_methods.F:!   Calculate rho_buffer = rho_aux(ispin) to get exchange of ispin electrons
./admm_methods.F:      CALL dbcsr_set(rho_ao_aux_buffer(1)%matrix, 0.0_dp)
./admm_methods.F:      CALL dbcsr_set(rho_ao_aux_buffer(2)%matrix, 0.0_dp)
./admm_methods.F:      CALL dbcsr_add(rho_ao_aux_buffer(ispin)%matrix, &
./admm_methods.F:                     rho_ao_aux(ispin)%matrix, 0.0_dp, 1.0_dp)
./admm_methods.F:         CALL calculate_rho_elec(ks_env=ks_env, &
./admm_methods.F:                                 matrix_p=rho_ao_aux_buffer(myspin)%matrix, &
./admm_methods.F:                                 rho=rho_r(myspin), &
./admm_methods.F:                                 rho_gspace=rho_g(myspin), &
./admm_methods.F:                                 total_rho=tot_rho_r(myspin), &
./admm_methods.F:      CALL qs_rho_set(rho_aux_fit_buffer, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./admm_methods.F:      CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_aux_fit_buffer, xc_section=xc_section_aux, &
./admm_methods.F:                         vxc_rho=v_rspace_dummy, vxc_tau=v_tau_rspace_dummy, exc=ener_x_ispin, &
./admm_methods.F:      CALL dbcsr_trace(matrix_ks_aux_fit_hfx(ispin)%matrix, rho_ao_aux_buffer(ispin)%matrix, &
./admm_methods.F:!> \param rho_ao_orb ...
./admm_methods.F:   SUBROUTINE scale_dm(qs_env, rho_ao_orb, scale_back)
./admm_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_orb
./admm_methods.F:                  CALL dbcsr_scale(rho_ao_orb(ispin, img)%matrix, 1.0_dp/admm_env%gsi(ispin))
./admm_methods.F:                  CALL dbcsr_scale(rho_ao_orb(ispin, img)%matrix, admm_env%gsi(ispin))
./admm_methods.F:                                                            matrix_s_aux_fit_vs_orb, rho_ao, &
./admm_methods.F:                                                            rho_ao_aux
./admm_methods.F:      TYPE(dbcsr_type), POINTER                          :: matrix_rho_aux_desymm_tmp, matrix_w_q, &
./admm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux_fit
./admm_methods.F:               rho, rho_aux_fit, energy, sab_aux_fit, sab_aux_fit_asymm, &
./admm_methods.F:                      rho=rho, &
./admm_methods.F:                      rho_aux_fit=rho_aux_fit, &
./admm_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./admm_methods.F:      CALL qs_rho_get(rho_aux_fit, &
./admm_methods.F:                      rho_ao=rho_ao_aux)
./admm_methods.F:            NULLIFY (matrix_rho_aux_desymm_tmp)
./admm_methods.F:            ALLOCATE (matrix_rho_aux_desymm_tmp)
./admm_methods.F:            CALL dbcsr_create(matrix_rho_aux_desymm_tmp, template=matrix_s_aux_fit(1)%matrix, &
./admm_methods.F:            CALL dbcsr_desymmetrize(rho_ao_aux(ispin)%matrix, matrix_rho_aux_desymm_tmp)
./admm_methods.F:               CALL dbcsr_add(matrix_w_s, matrix_rho_aux_desymm_tmp, 1.0_dp, &
./admm_methods.F:               CALL dbcsr_add(matrix_w_s, matrix_rho_aux_desymm_tmp, 1.0_dp, &
./admm_methods.F:               CALL dbcsr_add(matrix_w_s, matrix_rho_aux_desymm_tmp, 1.0_dp, &
./admm_methods.F:            CALL dbcsr_deallocate_matrix(matrix_rho_aux_desymm_tmp)
./admm_methods.F:            CALL dbcsr_scale(rho_ao(ispin)%matrix, -admm_env%lambda_merlot(ispin))
./admm_methods.F:                                     sab_nl=sab_orb, matrix_p=rho_ao(ispin)%matrix)
./admm_methods.F:            CALL dbcsr_scale(rho_ao(ispin)%matrix, -1.0_dp/admm_env%lambda_merlot(ispin))
./admm_methods.F:            CALL dbcsr_scale(rho_ao(ispin)%matrix, admm_env%lambda_merlot(ispin))
./admm_methods.F:                                     sab_nl=sab_orb, matrix_p=rho_ao(ispin)%matrix)
./admm_methods.F:            CALL dbcsr_scale(rho_ao(ispin)%matrix, 1.0_dp/admm_env%lambda_merlot(ispin))
./admm_methods.F:            CALL dbcsr_scale(rho_ao(ispin)%matrix, -admm_env%lambda_merlot(ispin))
./admm_methods.F:                                     sab_nl=sab_orb, matrix_p=rho_ao(ispin)%matrix)
./admm_methods.F:            CALL dbcsr_scale(rho_ao(ispin)%matrix, -1.0_dp/admm_env%lambda_merlot(ispin))
./stm_images.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./stm_images.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./stm_images.F:                                              qs_rho_type
./stm_images.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./stm_images.F:      TYPE(qs_rho_type), POINTER                         :: rho
./stm_images.F:      NULLIFY (ks_env, mos, rho, rho_ao, pw_env, stm_th_torb, fm_struct_tmp)
./stm_images.F:                      rho=rho, &
./stm_images.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./stm_images.F:      CALL dbcsr_copy(stm_density_ao, rho_ao(1)%matrix, &
./stm_images.F:      REAL(KIND=dp)                                      :: alpha, total_rho
./stm_images.F:            CALL calculate_rho_elec(matrix_p=stm_density_ao, &
./stm_images.F:                                    rho=wf_r, rho_gspace=wf_g, total_rho=total_rho, &
./mao_basis.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./mao_basis.F:                                              qs_rho_type
./mao_basis.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mao_basis.F:         CALL get_qs_env(qs_env, rho=rho)
./mao_basis.F:         CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_ks_qmmm_methods.F:                                pools(igrid)%pool%pw_grid%orthorhombic, &
./qs_ks_qmmm_methods.F:!> \param rho ...
./qs_ks_qmmm_methods.F:   SUBROUTINE qmmm_calculate_energy(qs_env, rho, v_qmmm, qmmm_energy)
./qs_ks_qmmm_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho
./qs_ks_qmmm_methods.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_rs
./qs_ks_qmmm_methods.F:      CPASSERT(ASSOCIATED(rho))
./qs_ks_qmmm_methods.F:         qmmm_energy = qmmm_energy+pw_integral_ab(rho(ispin)%pw, v_qmmm%pw)
./qs_ks_qmmm_methods.F:                         rho0_s_rs=rho0_s_rs)
./qs_ks_qmmm_methods.F:         CPASSERT(ASSOCIATED(rho0_s_rs))
./qs_ks_qmmm_methods.F:         qmmm_energy = qmmm_energy+pw_integral_ab(rho0_s_rs%pw, v_qmmm%pw)
./semi_empirical_types.F:      REAL(KIND=dp)                        :: a, b, c, rho
./semi_empirical_types.F:      sep%rho = 0.0_dp
./qs_scf_post_gpw.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec,&
./qs_scf_post_gpw.F:   USE qs_ks_methods,                   ONLY: calc_rho_tot_gspace,&
./qs_scf_post_gpw.F:   USE qs_rho0_types,                   ONLY: get_rho0_mpole,&
./qs_scf_post_gpw.F:                                              mpole_rho_atom,&
./qs_scf_post_gpw.F:                                              rho0_mpole_type
./qs_scf_post_gpw.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_scf_post_gpw.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf_post_gpw.F:                                              qs_rho_type
./qs_scf_post_gpw.F:   USE xray_diffraction,                ONLY: calculate_rhotot_elec_gspace,&
./qs_scf_post_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: kinetic_m, rho_ao
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_gpw.F:      NULLIFY (admm_env, dft_control, pw_env, auxbas_pw_pool, pw_pools, mos, rho, &
./qs_scf_post_gpw.F:      NULLIFY (homo_localized, lumo_localized, lumo_ptr, rho_ao)
./qs_scf_post_gpw.F:                      rho=rho, &
./qs_scf_post_gpw.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao)
./qs_scf_post_gpw.F:      IF (ASSOCIATED(qs_env%mp2_env)) CALL update_hartree_with_mp2(rho, qs_env)
./qs_scf_post_gpw.F:         CALL calculate_ptrace(kinetic_m, rho_ao, e_kin, dft_control%nspins)
./qs_scf_post_gpw.F:      REAL(dp)                                           :: rho_cutoff
./qs_scf_post_gpw.F:            rho_cutoff = section_get_rval(elf_section, "density_cutoff")
./qs_scf_post_gpw.F:            CALL qs_elf_calc(qs_env, elf_r, rho_cutoff)
./qs_scf_post_gpw.F:!> \param rho_cutoff ...
./qs_scf_post_gpw.F:   SUBROUTINE qs_elf_calc(qs_env, elf_r, rho_cutoff)
./qs_scf_post_gpw.F:      REAL(kind=dp), INTENT(IN)                          :: rho_cutoff
./qs_scf_post_gpw.F:      LOGICAL                                            :: deriv_pw, drho_r_valid, tau_r_valid
./qs_scf_post_gpw.F:      REAL(kind=dp)                                      :: cfermi, dum, elf_kernel, norm_drho, &
./qs_scf_post_gpw.F:                                                            rho_53, udvol
./qs_scf_post_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./qs_scf_post_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_struct_ao
./qs_scf_post_gpw.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: drho_g, drho_r, drho_struct_r, rho_r, &
./qs_scf_post_gpw.F:                                                            rho_struct_r, tau_g, tau_r, &
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_scf_post_gpw.F:      NULLIFY (rho_struct, rho_r, drho_g, drho_r, tau_r, tau_g, pw_env, auxbas_pw_pool, pw_pools, tmp_g, ks_env)
./qs_scf_post_gpw.F:      NULLIFY (rho_struct_ao, rho_struct_r, tau_struct_r, drho_struct_r)
./qs_scf_post_gpw.F:      CALL get_qs_env(qs_env, ks_env=ks_env, pw_env=pw_env, rho=rho_struct)
./qs_scf_post_gpw.F:      CALL qs_rho_get(rho_struct, &
./qs_scf_post_gpw.F:                      rho_ao_kp=rho_struct_ao, &
./qs_scf_post_gpw.F:                      rho_r=rho_struct_r, &
./qs_scf_post_gpw.F:                      drho_r=drho_struct_r, &
./qs_scf_post_gpw.F:                      drho_r_valid=drho_r_valid)
./qs_scf_post_gpw.F:      nspin = SIZE(rho_struct_r)
./qs_scf_post_gpw.F:      bo = rho_struct_r(1)%pw%pw_grid%bounds_local
./qs_scf_post_gpw.F:      ALLOCATE (rho_r(nspin))
./qs_scf_post_gpw.F:      ALLOCATE (drho_r(3*nspin))
./qs_scf_post_gpw.F:      ALLOCATE (drho_g(3*nspin))
./qs_scf_post_gpw.F:         rho_r(ispin)%pw => rho_struct_r(ispin)%pw
./qs_scf_post_gpw.F:            rho_ao => rho_struct_ao(ispin, :)
./qs_scf_post_gpw.F:            CALL calculate_rho_elec(matrix_p_kp=rho_ao, &
./qs_scf_post_gpw.F:                                    rho=tau_r(ispin), &
./qs_scf_post_gpw.F:                                    rho_gspace=tau_g(ispin), &
./qs_scf_post_gpw.F:                                    total_rho=dum, &
./qs_scf_post_gpw.F:         IF (drho_r_valid) THEN
./qs_scf_post_gpw.F:               drho_r(3*(ispin-1)+idir)%pw => drho_struct_r(3*(ispin-1)+idir)%pw
./qs_scf_post_gpw.F:               udvol = 1.0_dp/rho_struct_r(ispin)%pw%pw_grid%dvol
./qs_scf_post_gpw.F:                  CALL pw_pool_create_pw(auxbas_pw_pool, drho_r(3*(ispin-1)+idir)%pw, &
./qs_scf_post_gpw.F:                  CALL pw_transfer(rho_struct_r(ispin)%pw, tmp_g)
./qs_scf_post_gpw.F:                  CALL pw_transfer(tmp_g, drho_r(3*(ispin-1)+idir)%pw)
./qs_scf_post_gpw.F:!              CALL pw_scale(drho_r(3*(ispin-1)+idir)%pw,udvol)
./qs_scf_post_gpw.F:                  CALL pw_pool_create_pw(auxbas_pw_pool, drho_r(3*(ispin-1)+idir)%pw, &
./qs_scf_post_gpw.F:                  CALL pw_pool_create_pw(auxbas_pw_pool, drho_g(3*(ispin-1)+idir)%pw, &
./qs_scf_post_gpw.F:                  rho_ao => rho_struct_ao(ispin, :)
./qs_scf_post_gpw.F:                  CALL calculate_rho_elec(matrix_p_kp=rho_ao, &
./qs_scf_post_gpw.F:                                          rho=drho_r(3*(ispin-1)+idir), &
./qs_scf_post_gpw.F:                                          rho_gspace=drho_g(3*(ispin-1)+idir), &
./qs_scf_post_gpw.F:                                          total_rho=dum, &
./qs_scf_post_gpw.F:!$OMP        PARALLEL DO DEFAULT(NONE) SHARED(bo,elf_r, ispin, drho_r,rho_r, tau_r, cfermi, rho_cutoff)&
./qs_scf_post_gpw.F:!$OMP                    PRIVATE(k,j,i, norm_drho, rho_53, elf_kernel)
./qs_scf_post_gpw.F:                  norm_drho = drho_r(3*(ispin-1)+1)%pw%cr3d(i, j, k)**2+ &
./qs_scf_post_gpw.F:                              drho_r(3*(ispin-1)+2)%pw%cr3d(i, j, k)**2+ &
./qs_scf_post_gpw.F:                              drho_r(3*(ispin-1)+3)%pw%cr3d(i, j, k)**2
./qs_scf_post_gpw.F:                  norm_drho = norm_drho/MAX(rho_r(ispin)%pw%cr3d(i, j, k), rho_cutoff)
./qs_scf_post_gpw.F:                  rho_53 = cfermi*MAX(rho_r(ispin)%pw%cr3d(i, j, k), rho_cutoff)**f53
./qs_scf_post_gpw.F:                  elf_kernel = (tau_r(ispin)%pw%cr3d(i, j, k)-f18*norm_drho)+2.87E-5_dp
./qs_scf_post_gpw.F:                  elf_kernel = (elf_kernel/rho_53)**2
./qs_scf_post_gpw.F:         IF (.NOT. drho_r_valid) THEN
./qs_scf_post_gpw.F:                  CALL pw_pool_give_back_pw(auxbas_pw_pool, drho_r(3*(ispin-1)+idir)%pw)
./qs_scf_post_gpw.F:                  CALL pw_pool_give_back_pw(auxbas_pw_pool, drho_r(3*(ispin-1)+idir)%pw)
./qs_scf_post_gpw.F:                  CALL pw_pool_give_back_pw(auxbas_pw_pool, drho_g(3*(ispin-1)+idir)%pw)
./qs_scf_post_gpw.F:      DEALLOCATE (rho_r)
./qs_scf_post_gpw.F:      DEALLOCATE (drho_r)
./qs_scf_post_gpw.F:      DEALLOCATE (drho_g)
./qs_scf_post_gpw.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_gpw.F:               particle_set, rho, ks_rmpv, matrix_s, scf_control, dft_section, &
./qs_scf_post_gpw.F:               molecule_set, input, particles, subsys, rho_r)
./qs_scf_post_gpw.F:      CALL get_qs_env(qs_env, rho=rho)
./qs_scf_post_gpw.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_scf_post_gpw.F:         CALL pw_copy(rho_r(1)%pw, wf_r%pw)
./qs_scf_post_gpw.F:         CALL pw_axpy(rho_r(2)%pw, wf_r%pw, alpha=-1._dp)
./qs_scf_post_gpw.F:         rho_r_valid, write_ks, write_xc, xrd_interface
./qs_scf_post_gpw.F:      REAL(KIND=dp)                                      :: q_max, rho_hard, rho_soft, rho_total, &
./qs_scf_post_gpw.F:                                                            rho_total_rspace, udvol, volume
./qs_scf_post_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: ks_rmpv, matrix_vxc, rho_ao
./qs_scf_post_gpw.F:      TYPE(pw_p_type)                                    :: aux_g, aux_r, rho_elec_gspace, &
./qs_scf_post_gpw.F:                                                            rho_elec_rspace, wf_r
./qs_scf_post_gpw.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_scf_post_gpw.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core, vee
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_gpw.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_scf_post_gpw.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_scf_post_gpw.F:               atomic_kind_set, qs_kind_set, particle_set, rho, ks_rmpv, rho_ao, rho_r, &
./qs_scf_post_gpw.F:      CALL get_qs_env(qs_env, rho=rho)
./qs_scf_post_gpw.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_scf_post_gpw.F:         NULLIFY (rho_core, rho0_s_gs)
./qs_scf_post_gpw.F:         CALL get_qs_env(qs_env=qs_env, pw_env=pw_env, rho_core=rho_core, &
./qs_scf_post_gpw.F:                         rho0_s_gs=rho0_s_gs)
./qs_scf_post_gpw.F:            CALL pw_transfer(rho0_s_gs%pw, wf_r%pw)
./qs_scf_post_gpw.F:               CALL pw_axpy(rho_core%pw, wf_r%pw)
./qs_scf_post_gpw.F:            CALL pw_transfer(rho_core%pw, wf_r%pw)
./qs_scf_post_gpw.F:            CALL pw_axpy(rho_r(ispin)%pw, wf_r%pw)
./qs_scf_post_gpw.F:               CALL get_qs_env(qs_env=qs_env, rho_atom_set=rho_atom_set)
./qs_scf_post_gpw.F:                  rho_atom => rho_atom_set(iat)
./qs_scf_post_gpw.F:                  IF (ASSOCIATED(rho_atom%rho_rad_h(1)%r_coef)) THEN
./qs_scf_post_gpw.F:                     nr = SIZE(rho_atom%rho_rad_h(1)%r_coef, 1)
./qs_scf_post_gpw.F:                     niso = SIZE(rho_atom%rho_rad_h(1)%r_coef, 2)
./qs_scf_post_gpw.F:                     IF (ASSOCIATED(rho_atom%rho_rad_h(1)%r_coef)) THEN
./qs_scf_post_gpw.F:                        bfun(:, :) = bfun+rho_atom%rho_rad_h(ispin)%r_coef-rho_atom%rho_rad_s(ispin)%r_coef
./qs_scf_post_gpw.F:                                   pw=rho_elec_rspace%pw, &
./qs_scf_post_gpw.F:            CALL pw_zero(rho_elec_rspace%pw)
./qs_scf_post_gpw.F:                                   pw=rho_elec_gspace%pw, &
./qs_scf_post_gpw.F:            CALL pw_zero(rho_elec_gspace%pw)
./qs_scf_post_gpw.F:            CALL get_pw_grid_info(pw_grid=rho_elec_gspace%pw%pw_grid, &
./qs_scf_post_gpw.F:            CALL calculate_rhotot_elec_gspace(qs_env=qs_env, &
./qs_scf_post_gpw.F:                                              rhotot_elec_gspace=rho_elec_gspace, &
./qs_scf_post_gpw.F:                                              rho_hard=rho_hard, &
./qs_scf_post_gpw.F:                                              rho_soft=rho_soft)
./qs_scf_post_gpw.F:            rho_total = rho_hard+rho_soft
./qs_scf_post_gpw.F:            CALL get_pw_grid_info(pw_grid=rho_elec_gspace%pw%pw_grid, &
./qs_scf_post_gpw.F:            CALL pw_transfer(rho_elec_gspace%pw, rho_elec_rspace%pw, debug=.FALSE.)
./qs_scf_post_gpw.F:            rho_total_rspace = pw_integrate_function(rho_elec_rspace%pw, isign=-1)/volume
./qs_scf_post_gpw.F:                  "Soft electronic charge (G-space) :", rho_soft, &
./qs_scf_post_gpw.F:                  "Hard electronic charge (G-space) :", rho_hard, &
./qs_scf_post_gpw.F:                  "Total electronic charge (G-space):", rho_total, &
./qs_scf_post_gpw.F:                  "Total electronic charge (R-space):", rho_total_rspace
./qs_scf_post_gpw.F:            CALL cp_pw_to_cube(rho_elec_rspace%pw, unit_nr, "TOTAL ELECTRON DENSITY", &
./qs_scf_post_gpw.F:               CALL pw_zero(rho_elec_gspace%pw)
./qs_scf_post_gpw.F:               CALL pw_zero(rho_elec_rspace%pw)
./qs_scf_post_gpw.F:               CALL calculate_rhotot_elec_gspace(qs_env=qs_env, &
./qs_scf_post_gpw.F:                                                 rhotot_elec_gspace=rho_elec_gspace, &
./qs_scf_post_gpw.F:                                                 rho_hard=rho_hard, &
./qs_scf_post_gpw.F:                                                 rho_soft=rho_soft, &
./qs_scf_post_gpw.F:               rho_total = rho_hard+rho_soft
./qs_scf_post_gpw.F:               CALL pw_transfer(rho_elec_gspace%pw, rho_elec_rspace%pw, debug=.FALSE.)
./qs_scf_post_gpw.F:               rho_total_rspace = pw_integrate_function(rho_elec_rspace%pw, isign=-1)/volume
./qs_scf_post_gpw.F:                     "Soft part of the spin density (G-space):", rho_soft, &
./qs_scf_post_gpw.F:                     "Hard part of the spin density (G-space):", rho_hard, &
./qs_scf_post_gpw.F:                     "Total spin density (G-space)           :", rho_total, &
./qs_scf_post_gpw.F:                     "Total spin density (R-space)           :", rho_total_rspace
./qs_scf_post_gpw.F:               CALL cp_pw_to_cube(rho_elec_rspace%pw, unit_nr, "TOTAL SPIN DENSITY", &
./qs_scf_post_gpw.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_elec_gspace%pw)
./qs_scf_post_gpw.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_elec_rspace%pw)
./qs_scf_post_gpw.F:                                      pw=rho_elec_rspace%pw, &
./qs_scf_post_gpw.F:               CALL pw_copy(rho_r(1)%pw, rho_elec_rspace%pw)
./qs_scf_post_gpw.F:               CALL pw_axpy(rho_r(2)%pw, rho_elec_rspace%pw)
./qs_scf_post_gpw.F:               CALL cp_pw_to_cube(rho_elec_rspace%pw, unit_nr, "SUM OF ALPHA AND BETA DENSITY", &
./qs_scf_post_gpw.F:               CALL pw_copy(rho_r(1)%pw, rho_elec_rspace%pw)
./qs_scf_post_gpw.F:               CALL pw_axpy(rho_r(2)%pw, rho_elec_rspace%pw, alpha=-1.0_dp)
./qs_scf_post_gpw.F:               CALL cp_pw_to_cube(rho_elec_rspace%pw, unit_nr, "SPIN DENSITY", &
./qs_scf_post_gpw.F:               CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_elec_rspace%pw)
./qs_scf_post_gpw.F:               CALL cp_pw_to_cube(rho_r(1)%pw, unit_nr, "ELECTRON DENSITY", &
./qs_scf_post_gpw.F:         CALL qs_rho_get(rho, rho_ao_kp=rho_ao)
./qs_scf_post_gpw.F:               CALL cp_dbcsr_write_sparse_matrix(rho_ao(ispin, img)%matrix, 4, after, qs_env, &
./qs_scf_post_gpw.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_scf_post_gpw.F:         NULLIFY (rho)
./qs_scf_post_gpw.F:         CALL get_qs_env(qs_env=qs_env, rho=rho)
./qs_scf_post_gpw.F:         CALL qs_rho_get(rho, rho_r_valid=rho_r_valid)
./qs_scf_post_gpw.F:         IF (rho_r_valid) THEN
./qs_scf_post_gpw.F:      TYPE(mpole_rho_atom), DIMENSION(:), POINTER        :: mp_rho
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_gpw.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_scf_post_gpw.F:      CALL get_qs_env(qs_env, rho=rho)
./qs_scf_post_gpw.F:      CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_scf_post_gpw.F:         ! GAPW: add core charges (rho_hard - rho_soft)
./qs_scf_post_gpw.F:         CALL get_qs_env(qs_env, rho0_mpole=rho0_mpole)
./qs_scf_post_gpw.F:         CALL get_rho0_mpole(rho0_mpole, mp_rho=mp_rho)
./qs_scf_post_gpw.F:               charges(iat, 1:nspin) = charges(iat, 1:nspin)+mp_rho(iat)%q0(1:nspin)
./qs_scf_post_gpw.F:         filter_eps, frob_norm, lanzcos_threshold, lower_bound, occupation, total_rho, upper_bound
./qs_scf_post_gpw.F:         P_eigenvectors, P_window_fm, rho_ao_ortho_fm, S_minus_half_fm, tmp_fm, &
./qs_scf_post_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho_ao
./qs_scf_post_gpw.F:      TYPE(dbcsr_type), POINTER                          :: rho_ao_ortho, window
./qs_scf_post_gpw.F:      TYPE(pw_p_type), POINTER                           :: rho_g, rho_r
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_gpw.F:      CALL get_qs_env(qs_env=qs_env, blacs_env=blacs_env, matrix_ks=matrix_ks, pw_env=pw_env, rho=rho, &
./qs_scf_post_gpw.F:      CALL qs_rho_get(rho_struct=rho, rho_ao=rho_ao)
./qs_scf_post_gpw.F:      IF (SIZE(rho_ao) > 1) CALL cp_warn(__LOCATION__, &
./qs_scf_post_gpw.F:      ALLOCATE (window, rho_ao_ortho)
./qs_scf_post_gpw.F:      CALL dbcsr_create(rho_ao_ortho, template=matrix_s(1)%matrix, matrix_type="N")
./qs_scf_post_gpw.F:      CALL cp_fm_create(rho_ao_ortho_fm, ao_ao_fmstruct)
./qs_scf_post_gpw.F:      NULLIFY (rho_r, rho_g)
./qs_scf_post_gpw.F:      ALLOCATE (rho_r, rho_g)
./qs_scf_post_gpw.F:      NULLIFY (rho_r%pw, rho_g%pw)
./qs_scf_post_gpw.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_r%pw, use_data=REALDATA3D, in_space=REALSPACE)
./qs_scf_post_gpw.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, use_data=COMPLEXDATA1D, in_space=RECIPROCALSPACE)
./qs_scf_post_gpw.F:      CALL dbcsr_multiply("N", "N", one, S_half, rho_ao(1)%matrix, zero, tmp, filter_eps=filter_eps)
./qs_scf_post_gpw.F:      CALL dbcsr_multiply("N", "N", one, tmp, S_half, zero, rho_ao_ortho, filter_eps=filter_eps)
./qs_scf_post_gpw.F:      CALL copy_dbcsr_to_fm(rho_ao_ortho, rho_ao_ortho_fm)
./qs_scf_post_gpw.F:         CALL calculate_rho_elec(matrix_p=window, &
./qs_scf_post_gpw.F:                                 rho=rho_r, &
./qs_scf_post_gpw.F:                                 rho_gspace=rho_g, &
./qs_scf_post_gpw.F:                                 total_rho=total_rho, &
./qs_scf_post_gpw.F:         density_total = pw_integrate_function(rho_r%pw)
./qs_scf_post_gpw.F:         CALL dbcsr_add(window, rho_ao(1)%matrix, one, -one)
./qs_scf_post_gpw.F:         frob_norm = dbcsr_frobenius_norm(rho_ao(1)%matrix)
./qs_scf_post_gpw.F:         CALL cp_fm_to_fm(rho_ao_ortho_fm, tmp_fm)
./qs_scf_post_gpw.F:         CALL cp_fm_trace(P_window_fm, rho_ao_ortho_fm, occupation)
./qs_scf_post_gpw.F:            CALL calculate_rho_elec(matrix_p=window, &
./qs_scf_post_gpw.F:                                    rho=rho_r, &
./qs_scf_post_gpw.F:                                    rho_gspace=rho_g, &
./qs_scf_post_gpw.F:                                    total_rho=total_rho, &
./qs_scf_post_gpw.F:            CALL cp_pw_to_cube(rho_r%pw, print_unit, title, particles=particles, stride=stride, mpi_io=mpi_io)
./qs_scf_post_gpw.F:            density_ewindow_total = pw_integrate_function(rho_r%pw)
./qs_scf_post_gpw.F:      CALL dbcsr_release(rho_ao_ortho)
./qs_scf_post_gpw.F:      DEALLOCATE (window, rho_ao_ortho)
./qs_scf_post_gpw.F:      CALL cp_fm_release(rho_ao_ortho_fm)
./qs_scf_post_gpw.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r%pw)
./qs_scf_post_gpw.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./qs_scf_post_gpw.F:      DEALLOCATE (rho_r, rho_g)
./qs_scf_post_gpw.F:!> \param rho ...
./qs_scf_post_gpw.F:   SUBROUTINE update_hartree_with_mp2(rho, qs_env)
./qs_scf_post_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_gpw.F:      TYPE(pw_p_type)                                    :: rho_tot_gspace, v_hartree_gspace, &
./qs_scf_post_gpw.F:      TYPE(pw_p_type), POINTER                           :: rho_core
./qs_scf_post_gpw.F:      NULLIFY (auxbas_pw_pool, pw_env, poisson_env, energy, rho_core, v_hartree_rspace%pw, virial)
./qs_scf_post_gpw.F:                      rho_core=rho_core, virial=virial, &
./qs_scf_post_gpw.F:                                rho_tot_gspace%pw, &
./qs_scf_post_gpw.F:         CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho)
./qs_scf_post_gpw.F:         CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, energy%hartree, &
./qs_scf_post_gpw.F:                               v_hartree_gspace%pw, rho_core=rho_core)
./qs_scf_post_gpw.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tot_gspace%pw)
./xas_restart.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./xas_restart.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./xas_restart.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./xas_restart.F:                                              qs_rho_type
./xas_restart.F:   PUBLIC ::  xas_read_restart, xas_write_restart, xas_initialize_rho, find_excited_core_orbital
./xas_restart.F:!****f* xas_restart/xas_initialize_rho [1.0] *
./xas_restart.F:   SUBROUTINE xas_initialize_rho(qs_env, scf_env, scf_control)
./xas_restart.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'xas_initialize_rho', &
./xas_restart.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./xas_restart.F:      TYPE(qs_rho_type), POINTER                         :: rho
./xas_restart.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./xas_restart.F:      NULLIFY (mos, rho, xas_env, para_env, rho_ao)
./xas_restart.F:                      rho=rho, &
./xas_restart.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./xas_restart.F:                                       density_matrix=rho_ao(ispin)%matrix)
./xas_restart.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./xas_restart.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./xas_restart.F:         CALL get_qs_env(qs_env=qs_env, rho_atom_set=rho_atom)
./xas_restart.F:         CALL mixing_init(scf_env%mixing_method, rho, scf_env%mixing_store, &
./xas_restart.F:                          para_env, rho_atom=rho_atom)
./xas_restart.F:   END SUBROUTINE xas_initialize_rho
./se_fock_matrix.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./se_fock_matrix.F:                                              qs_rho_type
./se_fock_matrix.F:      TYPE(qs_rho_type), POINTER                         :: rho
./se_fock_matrix.F:      NULLIFY (ks_env, ks_matrix, rho, energy)
./se_fock_matrix.F:                      rho=rho, &
./se_fock_matrix.F:         CPASSERT(ASSOCIATED(rho))
./se_fock_matrix.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_scf_initialization.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_scf_initialization.F:   USE qs_rho_methods,                  ONLY: duplicate_rho_type,&
./qs_scf_initialization.F:                                              qs_rho_update_rho
./qs_scf_initialization.F:   USE qs_rho_types,                    ONLY: qs_rho_create,&
./qs_scf_initialization.F:                                              qs_rho_get,&
./qs_scf_initialization.F:                                              qs_rho_type
./qs_scf_initialization.F:   USE xas_restart,                     ONLY: xas_initialize_rho
./qs_scf_initialization.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_scf_initialization.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_initialization.F:      NULLIFY (rho_g)
./qs_scf_initialization.F:               CALL get_qs_env(qs_env, rho=rho)
./qs_scf_initialization.F:               CALL qs_rho_get(rho, rho_g=rho_g)
./qs_scf_initialization.F:               IF (SIZE(rho_g(1)%pw%pw_grid%gsq) /= SIZE(scf_env%mixing_store%rhoin(1)%cc)) &
./qs_scf_initialization.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_initialization.F:      NULLIFY (qs_kind_set, matrix_s, dft_control, mos, qs_kind, rho, xas_env)
./qs_scf_initialization.F:                      rho=rho, &
./qs_scf_initialization.F:      ! initializes rho and the mos
./qs_scf_initialization.F:         CALL xas_initialize_rho(qs_env, scf_env, scf_control)
./qs_scf_initialization.F:         CALL scf_env_initial_rho_setup(scf_env, qs_env=qs_env, &
./qs_scf_initialization.F:               CALL qs_rho_create(qs_env%wf_history%past_states(1)%snapshot%rho_frozen)
./qs_scf_initialization.F:               CALL duplicate_rho_type(rho_input=rho, &
./qs_scf_initialization.F:                                       rho_output=qs_env%wf_history%past_states(1)%snapshot%rho_frozen, &
./qs_scf_initialization.F:!> \brief Initializes rho and the mos, so that an scf cycle can start
./qs_scf_initialization.F:   SUBROUTINE scf_env_initial_rho_setup(scf_env, qs_env, scf_section, scf_control)
./qs_scf_initialization.F:      CHARACTER(len=*), PARAMETER :: routineN = 'scf_env_initial_rho_setup', &
./qs_scf_initialization.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_initialization.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_scf_initialization.F:      NULLIFY (mo_coeff, rho, dft_control, para_env, mos)
./qs_scf_initialization.F:                      rho=rho, &
./qs_scf_initialization.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf_initialization.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_scf_initialization.F:                            rho_atom_set=rho_atom)
./qs_scf_initialization.F:            CALL mixing_init(scf_env%mixing_method, rho, scf_env%mixing_store, &
./qs_scf_initialization.F:                             para_env, rho_atom=rho_atom)
./qs_scf_initialization.F:            CALL mixing_init(scf_env%mixing_method, rho, scf_env%mixing_store, &
./qs_scf_initialization.F:   END SUBROUTINE scf_env_initial_rho_setup
./qs_dftb_matrices.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_dftb_matrices.F:                                              qs_rho_type
./qs_dftb_matrices.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_matrices.F:         NULLIFY (rho, force, matrix_w)
./qs_dftb_matrices.F:                         rho=rho, &
./qs_dftb_matrices.F:         CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_dftb_matrices.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_matrices.F:               ks_matrix, rho, energy)
./qs_dftb_matrices.F:                      rho=rho, &
./qs_dftb_matrices.F:      CPASSERT(ASSOCIATED(rho))
./qs_dftb_matrices.F:         CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_dftb_matrices.F:         CALL build_dftb_coulomb(qs_env, ks_matrix, rho, mcharge, energy, &
./qs_dftb_matrices.F:            CALL qs_rho_get(rho, rho_ao=matrix_p1)
./qs_dftb_matrices.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_matrices.F:                      rho=rho, &
./qs_dftb_matrices.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_matrices.F:                      rho=rho, &
./qs_dftb_matrices.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_matrices.F:         NULLIFY (rho, atomic_kind_set, qs_kind_set, particles_qm)
./qs_dftb_matrices.F:                         rho=rho, &
./qs_dftb_matrices.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_dftb_matrices.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_matrices.F:         NULLIFY (rho, atomic_kind_set, qs_kind_set, particles_qm)
./qs_dftb_matrices.F:                         rho=rho, &
./qs_dftb_matrices.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./xray_diffraction.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./xray_diffraction.F:                                              rho_atom_coeff,&
./xray_diffraction.F:                                              rho_atom_type
./xray_diffraction.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./xray_diffraction.F:                                              qs_rho_type
./xray_diffraction.F:   PUBLIC :: calculate_rhotot_elec_gspace, &
./xray_diffraction.F:      REAL(KIND=dp)                                      :: cutoff, f, f2, q, rho_hard, rho_soft, &
./xray_diffraction.F:                                                            rho_total
./xray_diffraction.F:      TYPE(pw_p_type)                                    :: rhotot_elec_gspace
./xray_diffraction.F:      TYPE(qs_rho_type), POINTER                         :: rho
./xray_diffraction.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./xray_diffraction.F:      NULLIFY (rho)
./xray_diffraction.F:      NULLIFY (rho_atom_set)
./xray_diffraction.F:                      rho=rho, &
./xray_diffraction.F:                      rho_atom_set=rho_atom_set)
./xray_diffraction.F:                             pw=rhotot_elec_gspace%pw, &
./xray_diffraction.F:      CALL pw_zero(rhotot_elec_gspace%pw)
./xray_diffraction.F:      CALL get_pw_grid_info(pw_grid=rhotot_elec_gspace%pw%pw_grid, &
./xray_diffraction.F:      CALL calculate_rhotot_elec_gspace(qs_env=qs_env, &
./xray_diffraction.F:                                        rhotot_elec_gspace=rhotot_elec_gspace, &
./xray_diffraction.F:                                        rho_hard=rho_hard, &
./xray_diffraction.F:                                        rho_soft=rho_soft)
./xray_diffraction.F:      rho_total = rho_hard+rho_soft
./xray_diffraction.F:            f = ABS(rhotot_elec_gspace%pw%cc(ig+ig_shell))
./xray_diffraction.F:            "# Soft electronic charge (G-space) :", rho_soft, &
./xray_diffraction.F:            "# Hard electronic charge (G-space) :", rho_hard, &
./xray_diffraction.F:            "# Total electronic charge (G-space):", rho_total, &
./xray_diffraction.F:                                rhotot_elec_gspace%pw)
./xray_diffraction.F:!> \param rhotot_elec_gspace ...
./xray_diffraction.F:!> \param rho_hard ...
./xray_diffraction.F:!> \param rho_soft ...
./xray_diffraction.F:   SUBROUTINE calculate_rhotot_elec_gspace(qs_env, auxbas_pw_pool, &
./xray_diffraction.F:                                           rhotot_elec_gspace, q_max, rho_hard, &
./xray_diffraction.F:                                           rho_soft, fsign)
./xray_diffraction.F:      TYPE(pw_p_type), INTENT(INOUT)                     :: rhotot_elec_gspace
./xray_diffraction.F:      REAL(KIND=dp), INTENT(OUT)                         :: rho_hard, rho_soft
./xray_diffraction.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'calculate_rhotot_elec_gspace', &
./xray_diffraction.F:      LOGICAL                                            :: orthorhombic, paw_atom
./xray_diffraction.F:      REAL(KIND=dp)                                      :: alpha, eps_rho_gspace, rho_total, scale, &
./xray_diffraction.F:      TYPE(pw_p_type)                                    :: rho_elec_gspace
./xray_diffraction.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./xray_diffraction.F:      TYPE(qs_rho_type), POINTER                         :: rho
./xray_diffraction.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: cpc_h, cpc_s
./xray_diffraction.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./xray_diffraction.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./xray_diffraction.F:      NULLIFY (rho, rho_r)
./xray_diffraction.F:      NULLIFY (rho_atom)
./xray_diffraction.F:      NULLIFY (rho_atom_set)
./xray_diffraction.F:                      rho=rho, &
./xray_diffraction.F:                      rho_atom_set=rho_atom_set)
./xray_diffraction.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./xray_diffraction.F:      eps_rho_gspace = dft_control%qs_control%eps_rho_gspace
./xray_diffraction.F:                             pw=rho_elec_gspace%pw, &
./xray_diffraction.F:      CALL pw_zero(rhotot_elec_gspace%pw)
./xray_diffraction.F:         CALL pw_zero(rho_elec_gspace%pw)
./xray_diffraction.F:         CALL pw_transfer(rho_r(ispin)%pw, rho_elec_gspace%pw, debug=.FALSE.)
./xray_diffraction.F:         CALL pw_axpy(rho_elec_gspace%pw, rhotot_elec_gspace%pw, alpha=alpha)
./xray_diffraction.F:                                pw=rho_elec_gspace%pw)
./xray_diffraction.F:      rho_soft = pw_integrate_function(rhotot_elec_gspace%pw, isign=-1)
./xray_diffraction.F:      CALL get_pw_grid_info(pw_grid=rhotot_elec_gspace%pw%pw_grid, &
./xray_diffraction.F:                            orthorhombic=orthorhombic)
./xray_diffraction.F:      CPASSERT(orthorhombic)
./xray_diffraction.F:      CALL pw_scale(rhotot_elec_gspace%pw, volume)
./xray_diffraction.F:            rho_atom => rho_atom_set(atom)
./xray_diffraction.F:            CALL get_rho_atom(rho_atom=rho_atom, &
./xray_diffraction.F:                           eps_rho_gspace=eps_rho_gspace, &
./xray_diffraction.F:                           pw=rhotot_elec_gspace%pw)
./xray_diffraction.F:      rho_total = pw_integrate_function(rhotot_elec_gspace%pw, isign=-1)/volume
./xray_diffraction.F:      rho_hard = rho_total-rho_soft
./xray_diffraction.F:   END SUBROUTINE calculate_rhotot_elec_gspace
./qs_linres_nmr_shift.F:                                              jrho_atom_type,&
./qs_linres_nmr_shift.F:   USE qs_rho_types,                    ONLY: qs_rho_get
./qs_linres_nmr_shift.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: jrho1_g
./qs_linres_nmr_shift.F:      TYPE(pw_p_type), POINTER                           :: jrho_gspace
./qs_linres_nmr_shift.F:               cell, dft_control, pw_env, auxbas_rs_desc, auxbas_pw_pool, jrho_gspace, &
./qs_linres_nmr_shift.F:               pw_pools, particle_set, jrho1_g)
./qs_linres_nmr_shift.F:      ! Allocate grids for the calculation of jrho and the shift
./qs_linres_nmr_shift.F:            CALL qs_rho_get(current_env%jrho1_set(idir)%rho, rho_g=jrho1_g)
./qs_linres_nmr_shift.F:            jrho_gspace => jrho1_g(ispin)
./qs_linres_nmr_shift.F:                  CALL mult_G_ov_G2_grid(cell, auxbas_pw_pool, jrho_gspace, &
./qs_linres_nmr_shift.F:      ! Dellocate grids for the calculation of jrho and the shift
./qs_linres_nmr_shift.F:      REAL(dp)                                           :: ddiff, dist, dum, itegrated_jrho, &
./qs_linres_nmr_shift.F:      REAL(dp), DIMENSION(:, :), POINTER                 :: jrho_h_grid, jrho_s_grid, r_nics
./qs_linres_nmr_shift.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_nmr_shift.F:      TYPE(jrho_atom_type), POINTER                      :: jrho1_atom
./qs_linres_nmr_shift.F:               chemical_shift_loc, chemical_shift_nics_loc, jrho1_atom_set, &
./qs_linres_nmr_shift.F:               jrho1_atom, r_nics, jrho_h_grid, jrho_s_grid, &
./qs_linres_nmr_shift.F:                           jrho1_atom_set=jrho1_atom_set)
./qs_linres_nmr_shift.F:      itegrated_jrho = 0.0_dp
./qs_linres_nmr_shift.F:               NULLIFY (jrho1_atom, jrho_h_grid, jrho_s_grid)
./qs_linres_nmr_shift.F:               jrho1_atom => jrho1_atom_set(iatom)
./qs_linres_nmr_shift.F:                  jrho_h_grid => jrho1_atom%jrho_vec_rad_h(idir, ispin)%r_coef
./qs_linres_nmr_shift.F:                  jrho_s_grid => jrho1_atom%jrho_vec_rad_s(idir, ispin)%r_coef
./qs_linres_nmr_shift.F:                        j_grid(ira) = (jrho_h_grid(ir, ia)-jrho_s_grid(ir, ia))*grid_atom%weight(ia, ir)
./qs_linres_nmr_shift.F:                        itegrated_jrho = itegrated_jrho+j_grid(ira)
./qs_linres_nmr_shift.F:      CALL mp_sum(itegrated_jrho, para_env%group)
./qs_linres_nmr_shift.F:              &//ACHAR(idir+119)//ACHAR(iB+119)//'(r)=', itegrated_jrho
./grid/xyz_to_vab_optimised.F:!>      If grid operations (subroutines integrate_v_rspace, calculate_rho_elec and similar)
./mp2_ri_gpw.F:!> \param rho_r ...
./mp2_ri_gpw.F:!> \param rho_g ...
./mp2_ri_gpw.F:                                    rho_r, rho_g, pot_g, mat_munu, mat_munu_mao_occ_virt, mat_munu_mao_virt_occ, &
./mp2_ri_gpw.F:      TYPE(pw_p_type)                                    :: rho_r, rho_g, pot_g
./mp2_ri_gpw.F:         wfn_size = REAL(SIZE(rho_r%pw%cr3d), KIND=dp)
./mp2_ri_gpw.F:                           mo_coeff, dft_control, psi_L, rho_r, rho_g, pot_g, pw_env_sub, poisson_env, &
./mp2_ri_gpw.F:               CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_gpw.F:               rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_gpw.F:                  CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_gpw.F:                  CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_gpw.F:                  CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_gpw.F:               CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_gpw.F:               CALL integrate_v_rspace(rho_r, hmat=mat_munu, qs_env=qs_env, &
./mp2_ri_gpw.F:                              mo_coeff, dft_control, psi_L, rho_r, rho_g, pot_g, pw_env_sub, poisson_env, &
./mp2_ri_gpw.F:            CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_gpw.F:            rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_gpw.F:               CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_gpw.F:               CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_gpw.F:               CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_gpw.F:            CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_gpw.F:            CALL integrate_v_rspace(rho_r, hmat=mat_munu, qs_env=qs_env, &
./mp2_ri_gpw.F:!> \param rho_r ...
./mp2_ri_gpw.F:!> \param rho_g ...
./mp2_ri_gpw.F:                              mo_coeff, dft_control, psi_L, rho_r, rho_g, pot_g, pw_env_sub, poisson_env, &
./mp2_ri_gpw.F:      TYPE(pw_p_type)                                    :: psi_L, rho_r, rho_g, pot_g
./mp2_ri_gpw.F:                                mo_coeff, dft_control, psi_L, rho_r, rho_g, pot_g, pw_env_sub, poisson_env, &
./mp2_ri_gpw.F:                                      mo_coeff, dft_control, psi_L, rho_r, rho_g, pot_g, pw_env_sub, poisson_env, &
./mp2_ri_gpw.F:!> \param rho_r ...
./mp2_ri_gpw.F:!> \param rho_g ...
./mp2_ri_gpw.F:                                   mo_coeff, dft_control, psi_L, rho_r, rho_g, pot_g, pw_env_sub, poisson_env, &
./mp2_ri_gpw.F:      TYPE(pw_p_type)                                    :: psi_L, rho_r, rho_g, pot_g
./mp2_ri_gpw.F:      TYPE(pw_p_type), ALLOCATABLE, DIMENSION(:)         :: rho_r_array
./mp2_ri_gpw.F:         ALLOCATE (rho_r_array(i_counter_diff_bf_at_any_atom))
./mp2_ri_gpw.F:            CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_gpw.F:            rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_gpw.F:            CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_gpw.F:            CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_gpw.F:            CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_gpw.F:            CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_gpw.F:            ! Writing array of potential copied from xc/xc_rho_set_types.F
./mp2_ri_gpw.F:            NULLIFY (rho_r_array(j)%pw)
./mp2_ri_gpw.F:            rho_r_array(j)%pw => rho_r%pw
./mp2_ri_gpw.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r_array(j)%pw, &
./mp2_ri_gpw.F:            CALL pw_copy(rho_r%pw, rho_r_array(j)%pw)
./mp2_ri_gpw.F:         ! Fill pw_grid and zero-components cr3d, aso. into rho_r_array for parallization
./mp2_ri_gpw.F:            CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_gpw.F:            rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_gpw.F:            CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_gpw.F:            CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_gpw.F:            CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_gpw.F:            CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_gpw.F:         ! Fill pw_grid and 0.0_dp potential in every component of rho_r_array
./mp2_ri_gpw.F:               NULLIFY (rho_r_array(j)%pw)
./mp2_ri_gpw.F:               rho_r%pw%cr3d = 0.0_dp
./mp2_ri_gpw.F:               rho_r_array(j)%pw => rho_r%pw
./mp2_ri_gpw.F:               CALL pw_pool_create_pw(auxbas_pw_pool, rho_r_array(j)%pw, &
./mp2_ri_gpw.F:               CALL pw_copy(rho_r%pw, rho_r_array(j)%pw)
./mp2_ri_gpw.F:            CALL mp_sum(rho_r_array(j)%pw%cr3d, para_env_exc%group)
./mp2_ri_gpw.F:            CALL potential_pw2rs(rs_v, rho_r_array(j_ref_bf), pw_env_sub)
./mp2_ri_gpw.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r_array(j)%pw, &
./mp2_ri_gpw.F:         DEALLOCATE (rho_r_array)
./mp2_ri_gpw.F:                              Pi/(rho_r%pw%pw_grid%vol)*(4.0_dp*Pi**2.0_dp/(zeta(1, iset)*zetb(1, jset)))**0.75_dp* &
./mp2_ri_gpw.F:               CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_gpw.F:               rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_gpw.F:                  CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_gpw.F:                  CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_gpw.F:                  CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_gpw.F:               CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_gpw.F:               CALL potential_pw2rs(rs_v, rho_r, pw_env_sub)
./qs_active_space_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_active_space_methods.F:                                              qs_rho_type
./qs_active_space_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: ks_matrix, rho_ao
./qs_active_space_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_active_space_methods.F:      CALL get_qs_env(qs_env, rho=rho)
./qs_active_space_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_active_space_methods.F:      CPASSERT(ASSOCIATED(rho_ao))
./qs_active_space_methods.F:         CALL dbcsr_copy(denmat, rho_ao(ispin)%matrix)
./qs_active_space_methods.F:      TYPE(pw_p_type)                                    :: pot_g, rho_g, rho_r, wfn_r
./qs_active_space_methods.F:      NULLIFY (wfn_r%pw, rho_g%pw)
./qs_active_space_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, use_data=COMPLEXDATA1D, in_space=RECIPROCALSPACE)
./qs_active_space_methods.F:               CALL calculate_wavefunction(mo_coeff, iwfn, wfn_a(iwfn, ispin), rho_g, atomic_kind_set, &
./qs_active_space_methods.F:      NULLIFY (rho_r%pw, pot_g%pw)
./qs_active_space_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_r%pw, use_data=REALDATA3D, in_space=REALSPACE)
./qs_active_space_methods.F:      rho_r%pw%cr3d = 0.0D0
./qs_active_space_methods.F:      CALL pw_transfer(rho_r%pw, rho_g%pw)
./qs_active_space_methods.F:      dvol = rho_r%pw%pw_grid%dvol
./qs_active_space_methods.F:               rho_r%pw%cr3d = wfn1%pw%cr3d*wfn2%pw%cr3d
./qs_active_space_methods.F:                  erint = pw_integrate_function(rho_r%pw)/dvol
./qs_active_space_methods.F:                  WRITE (iw, "(T4,'ERI_GPW| Integral rho_ab ',T32,2I4,' [',I1,']',T58,G20.14)") &
./qs_active_space_methods.F:               CALL pw_transfer(rho_r%pw, rho_g%pw)
./qs_active_space_methods.F:               CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_int, pot_g%pw)
./qs_active_space_methods.F:               CALL pw_transfer(pot_g%pw, rho_r%pw)
./qs_active_space_methods.F:                           wfn_r%pw%cr3d = rho_r%pw%cr3d*wfn3%pw%cr3d*wfn4%pw%cr3d
./qs_active_space_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./qs_active_space_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r%pw)
./qs_active_space_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./qs_active_space_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_active_space_methods.F:      CALL get_qs_env(qs_env, rho=rho)
./qs_active_space_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_active_space_methods.F:         CALL dbcsr_copy(rho_ao(ispin)%matrix, pinact)
./qs_active_space_methods.F:         CALL cp_dbcsr_plus_fm_fm_t(sparse_matrix=rho_ao(ispin)%matrix, &
./vab.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./vab.F:                                              qs_rho_type
./qs_charges_types.F:!> \param total_rho_core_rspace total charge on the rho_core grid
./qs_charges_types.F:!> \param total_rho_rspace total charge in the real space
./qs_charges_types.F:!> \param total_rho_gspace total charge in the g space
./qs_charges_types.F:!>      11.2002 moved total_rho_elec_rspace to qs_rho_type
./qs_charges_types.F:      REAL(KIND=dp) :: total_rho_core_rspace, total_rho_gspace
./qs_charges_types.F:      REAL(KIND=dp) :: total_rho0_soft_rspace, total_rho0_hard_lebedev
./qs_charges_types.F:      REAL(KIND=dp) :: total_rho_soft_gspace
./qs_charges_types.F:      REAL(KIND=dp), DIMENSION(:), POINTER  :: total_rho1_hard, &
./qs_charges_types.F:                                               total_rho1_soft
./qs_charges_types.F:!> \param total_rho_core_rspace ...
./qs_charges_types.F:!> \param total_rho_gspace ...
./qs_charges_types.F:   SUBROUTINE qs_charges_create(qs_charges, nspins, total_rho_core_rspace, &
./qs_charges_types.F:                                total_rho_gspace)
./qs_charges_types.F:      REAL(KIND=dp), INTENT(in), OPTIONAL                :: total_rho_core_rspace, total_rho_gspace
./qs_charges_types.F:      qs_charges%total_rho_core_rspace = 0.0_dp
./qs_charges_types.F:      IF (PRESENT(total_rho_core_rspace)) &
./qs_charges_types.F:         qs_charges%total_rho_core_rspace = total_rho_core_rspace
./qs_charges_types.F:      qs_charges%total_rho_gspace = 0.0_dp
./qs_charges_types.F:      IF (PRESENT(total_rho_gspace)) &
./qs_charges_types.F:         qs_charges%total_rho_gspace = total_rho_gspace
./qs_charges_types.F:      qs_charges%total_rho_soft_gspace = 0.0_dp
./qs_charges_types.F:      qs_charges%total_rho0_hard_lebedev = 0.0_dp
./qs_charges_types.F:      qs_charges%total_rho_soft_gspace = 0.0_dp
./qs_charges_types.F:      ALLOCATE (qs_charges%total_rho1_hard(nspins))
./qs_charges_types.F:      qs_charges%total_rho1_hard(:) = 0.0_dp
./qs_charges_types.F:      ALLOCATE (qs_charges%total_rho1_soft(nspins))
./qs_charges_types.F:      qs_charges%total_rho1_soft(:) = 0.0_dp
./qs_charges_types.F:            DEALLOCATE (qs_charges%total_rho1_hard)
./qs_charges_types.F:            DEALLOCATE (qs_charges%total_rho1_soft)
./qmmm_se_forces.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qmmm_se_forces.F:                                              qs_rho_type
./qmmm_se_forces.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qmmm_se_forces.F:         NULLIFY (rho, atomic_kind_set, qs_kind_set, se_taper)
./qmmm_se_forces.F:                         rho=rho, &
./qmmm_se_forces.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./metadyn_tools/graph_methods.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:)           :: rho, rhot
./metadyn_tools/graph_methods.F:      ALLOCATE (rho(np), rhot(np))
./metadyn_tools/graph_methods.F:      CALL fes_write(123, idim, fes, pos, ndim, ngrid, dp_grid, x0, ndw, l_fes_int, rho)
./metadyn_tools/graph_methods.F:               rhot(ii) = rho(i)
./metadyn_tools/graph_methods.F:            WRITE (123, '(6e13.5)') (rhot(ix+(iy-1)*ngrid(1)+(iz-1)*ngrid(1)&
./metadyn_tools/graph_methods.F:      DEALLOCATE (xat, rho, rhot)
./semi_empirical_parameters.F:         sep%rho = 3.173734_dp
./semi_empirical_parameters.F:         sep%rho = 1.272092_dp
./semi_empirical_parameters.F:         sep%rho = 1.586979_dp
./semi_empirical_parameters.F:         sep%rho = 2.773703_dp
./semi_empirical_parameters.F:         sep%rho = 2.511701_dp
./semi_empirical_parameters.F:         sep%rho = 2.743262_dp
./semi_empirical_parameters.F:         sep%rho = 3.173734_dp
./semi_empirical_parameters.F:         sep%rho = 1.272092_dp
./semi_empirical_parameters.F:         sep%rho = 1.586979_dp
./semi_empirical_parameters.F:         sep%rho = 2.773703_dp
./semi_empirical_parameters.F:         sep%rho = 2.511701_dp
./semi_empirical_parameters.F:         sep%rho = 2.743262_dp
./lri_forces.F:        lri_rhoab_type
./lri_forces.F:                  force(ikind)%rho_lri_elec(:, iatom) = force(ikind)%rho_lri_elec(:, iatom) &
./lri_forces.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_forces.F:      TYPE(lri_rhoab_type), POINTER                      :: lrho
./lri_forces.F:      NULLIFY (atom_of_kind, lri_coef, lri_force, lrii, lri_rho, lrho, &
./lri_forces.F:            lri_rho => lri_density%lri_rhos(ispin)%lri_list
./lri_forces.F:!$OMP SHARED (nthread,nl_iterator,pmatrix,nkind,lri_env,lri_rho,lri_coef,&
./lri_forces.F:!$OMP PRIVATE (mepos,ikind,jkind,iatom,jatom,nlist,ilist,jneighbor,rab,iac,lrii,lrho,&
./lri_forces.F:               lrho => lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(jneighbor)
./lri_forces.F:               st(1:nn) = MATMUL(lrii%sinv(1:nn, 1:nn), lrho%tvec(1:nn))
./lri_forces.F:                               +(lrho%charge-lrho%nst)*nsdssn(k)/(lrii%nsn*lrii%nsn)
./lri_forces.F:                  st(1:nn) = dtvec(1:nn, k)-dsst(1:nn, k)-lrho%lambda*dssn(1:nn, k)
./lri_forces.F:                  ai = 2.0_dp*dfw/dab*SUM(lrho%avec(1:nn)*vint(1:nn))
./lri_forces.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_forces.F:      TYPE(lri_rhoab_type), POINTER                      :: lrho
./lri_forces.F:      NULLIFY (atom_of_kind, lri_coef, lrii, lri_rho, lrho, &
./lri_forces.F:            lri_rho => lri_density%lri_rhos(ispin)%lri_list
./lri_forces.F:!$OMP SHARED (nthread,nl_iterator,pmatrix,nkind,lri_env,lri_rho,lri_coef,&
./lri_forces.F:!$OMP PRIVATE (mepos,ikind,jkind,iatom,jatom,nlist,ilist,jneighbor,rab,iac,lrii,lrho,&
./lri_forces.F:               lrho => lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(jneighbor)
./lri_forces.F:                       (SUM(lrho%aveca(1:nfa)*vinta(1:nfa))+ &
./lri_forces.F:                        SUM(lrho%avecb(1:nfb)*vintb(1:nfb)))
./lri_forces.F:               force(ikind)%rho_lri_elec(:, iatom) = force(ikind)%rho_lri_elec(:, iatom) &
./pme.F:   USE dg_rho0_types,                   ONLY: dg_rho0_type
./pme.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pme.F:      TYPE(pw_p_type)                                    :: rhos1, rhos2
./pme.F:      TYPE(pw_type), POINTER                             :: phi_g, phi_r, rhob_g, rhob_r
./pme.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./pme.F:      CALL pw_pool_create_pw(pw_small_pool, rhos1%pw, &
./pme.F:      CALL pw_pool_create_pw(pw_small_pool, rhos2%pw, &
./pme.F:                           rhos1, rhos2, is1_core=is1_core, is2_core=is2_core, &
./pme.F:               CALL dg_sum_patch(rden, rhos1, exp_igr%core_centre(:, particle_set(p1)%shell_index))
./pme.F:               CALL dg_sum_patch(rden, rhos1, exp_igr%centre(:, p1))
./pme.F:               CALL dg_sum_patch(rden, rhos2, exp_igr%core_centre(:, particle_set(p2)%shell_index))
./pme.F:               CALL dg_sum_patch(rden, rhos2, exp_igr%centre(:, p2))
./pme.F:                           rhos1, rhos2, charges=charges)
./pme.F:            CALL dg_sum_patch(rden, rhos1, exp_igr%centre(:, p1))
./pme.F:            IF (p2 /= 0) CALL dg_sum_patch(rden, rhos2, exp_igr%centre(:, p2))
./pme.F:                           rhos1, rhos2, is1_shell=.TRUE., is2_shell=.TRUE., charges=charges)
./pme.F:            CALL dg_sum_patch(rpot, rhos1, exp_igr%shell_centre(:, p1))
./pme.F:            IF (p2 /= 0) CALL dg_sum_patch(rpot, rhos2, exp_igr%shell_centre(:, p2))
./pme.F:      CALL pw_pool_create_pw(pw_big_pool, rhob_r, use_data=REALDATA3D, in_space=REALSPACE)
./pme.F:      CALL rs_pw_transfer(rden, rhob_r, rs2pw)
./pme.F:      CALL pw_poisson_solve(poisson_env, rhob_r, vg_coulomb, phi_r, dphi_g, h_stress)
./pme.F:         dvols = rhos1%pw%pw_grid%dvol
./pme.F:                           rhos1, rhos2, charges=charges)
./pme.F:            CALL dg_sum_patch_force_1d(rpot, rhos1, exp_igr%centre(:, p1), fat1)
./pme.F:               CALL dg_sum_patch_force_1d(rpot, rhos2, exp_igr%centre(:, p2), fat1)
./pme.F:            CALL pw_pool_create_pw(pw_big_pool, rhob_g, &
./pme.F:            ffa = (0.5_dp/dg_rho0%zet(1))**2
./pme.F:                  CALL pw_copy(phi_g, rhob_g)
./pme.F:                  CALL pw_derive(rhob_g, nd)
./pme.F:                  CALL pw_transfer(rhob_g, rhob_r)
./pme.F:                  CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./pme.F:                                    rhos1, rhos2, charges=charges)
./pme.F:                     CALL dg_sum_patch_force_1d(rpot, rhos1, exp_igr%centre(:, p1), fat1)
./pme.F:                        CALL dg_sum_patch_force_1d(rpot, rhos2, exp_igr%centre(:, p2), fat1)
./pme.F:            CALL pw_pool_give_back_pw(pw_big_pool, rhob_g)
./pme.F:         ffa = (1.0_dp/fourpi)*(0.5_dp/dg_rho0%zet(1))**2
./pme.F:         CALL pw_transfer(dphi_g(i)%pw, rhob_r)
./pme.F:         CALL rs_pw_transfer(drpot(i)%rs_grid, rhob_r, pw2rs)
./pme.F:      CALL pw_pool_give_back_pw(pw_big_pool, rhob_r)
./pme.F:         dvols = rhos1%pw%pw_grid%dvol
./pme.F:            CALL get_patch_again(dg, particle_set, exp_igr, p1, p2, rhos1, rhos2, &
./pme.F:               CALL dg_sum_patch_force_3d(drpot, rhos1, &
./pme.F:               CALL dg_sum_patch_force_3d(drpot, rhos1, exp_igr%centre(:, p1), fat)
./pme.F:               CALL dg_sum_patch_force_3d(drpot, rhos1, &
./pme.F:               CALL dg_sum_patch_force_3d(drpot, rhos2, exp_igr%centre(:, p2), fat)
./pme.F:         dvols = rhos1%pw%pw_grid%dvol
./pme.F:            CALL get_patch_again(dg, shell_particle_set, exp_igr, p1, p2, rhos1, rhos2, &
./pme.F:            CALL dg_sum_patch_force_3d(drpot, rhos1, exp_igr%shell_centre(:, p1), fat)
./pme.F:               CALL dg_sum_patch_force_3d(drpot, rhos2, exp_igr%shell_centre(:, p2), fat)
./pme.F:      CALL pw_pool_give_back_pw(pw_small_pool, rhos1%pw)
./pme.F:      CALL pw_pool_give_back_pw(pw_small_pool, rhos2%pw)
./pme.F:!> \param rhos1 ...
./pme.F:!> \param rhos2 ...
./pme.F:                        grid_b, grid_s, rhos1, rhos2, is1_core, is2_core, is1_shell, &
./pme.F:      TYPE(pw_p_type)                                    :: rhos1, rhos2
./pme.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pme.F:      TYPE(pw_p_type), POINTER                           :: rho0
./pme.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./pme.F:      rho0 => dg_rho0%density
./pme.F:         CALL dg_get_patch(rho0, rhos1, q1, ex1, ey1, ez1)
./pme.F:         CALL dg_get_patch(rho0, rhos1, rhos2, q1, q2, ex1, ey1, ez1, ex2, ey2, ez2)
./pme.F:!> \param rhos1 ...
./pme.F:!> \param rhos2 ...
./pme.F:   SUBROUTINE get_patch_again(dg, particle_set, exp_igr, p1, p2, rhos1, rhos2, is1_core, &
./pme.F:      TYPE(pw_p_type)                                    :: rhos1, rhos2
./pme.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./pme.F:      TYPE(pw_p_type), POINTER                           :: rho0
./pme.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./pme.F:      rho0 => dg_rho0%density
./pme.F:         CALL dg_get_patch(rho0, rhos1, q1, ex1, ey1, ez1)
./pme.F:         CALL dg_get_patch(rho0, rhos1, rhos2, q1, q2, &
./qs_rho0_methods.F:MODULE qs_rho0_methods
./qs_rho0_methods.F:   USE qs_local_rho_types,              ONLY: allocate_rhoz,&
./qs_rho0_methods.F:                                              calculate_rhoz,&
./qs_rho0_methods.F:                                              local_rho_type,&
./qs_rho0_methods.F:                                              rhoz_type
./qs_rho0_methods.F:   USE qs_rho0_ggrid,                   ONLY: rho0_s_grid_create
./qs_rho0_methods.F:   USE qs_rho0_types,                   ONLY: &
./qs_rho0_methods.F:        allocate_multipoles, allocate_rho0_atom, allocate_rho0_atom_rad, allocate_rho0_mpole, &
./qs_rho0_methods.F:        calculate_g0, get_rho0_mpole, initialize_mpole_rho, mpole_gau_overlap, mpole_rho_atom, &
./qs_rho0_methods.F:        rho0_atom_type, rho0_mpole_type, write_rho0_info
./qs_rho0_methods.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_rho0_methods.F:                                              rho_atom_coeff,&
./qs_rho0_methods.F:                                              rho_atom_type
./qs_rho0_methods.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho0_methods'
./qs_rho0_methods.F:   PUBLIC :: calculate_rho0_atom, init_rho0
./qs_rho0_methods.F:!> \param rho_atom_set ...
./qs_rho0_methods.F:!> \param rho0_atom_set ...
./qs_rho0_methods.F:!> \param rho0_mp ...
./qs_rho0_methods.F:!> \param rho0_h_tot ...
./qs_rho0_methods.F:   SUBROUTINE calculate_rho0_atom(gapw_control, rho_atom_set, rho0_atom_set, &
./qs_rho0_methods.F:                                  rho0_mp, a_list, g_atom, &
./qs_rho0_methods.F:                                  rho0_h_tot)
./qs_rho0_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho0_methods.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_atom_set
./qs_rho0_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mp
./qs_rho0_methods.F:      REAL(dp), INTENT(INOUT)                            :: rho0_h_tot
./qs_rho0_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho0_atom', &
./qs_rho0_methods.F:      TYPE(mpole_rho_atom), POINTER                      :: mpole_rho
./qs_rho0_methods.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: cpc_h, cpc_s
./qs_rho0_methods.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_rho0_methods.F:      NULLIFY (mpole_rho)
./qs_rho0_methods.F:      CALL get_rho0_mpole(rho0_mpole=rho0_mp, ikind=ikind, &
./qs_rho0_methods.F:         rho0_atom_set(iatom)%rho0_rad_h%r_coef = 0.0_dp
./qs_rho0_methods.F:         rho0_mp%mp_rho(iatom)%Qlm_tot = 0.0_dp
./qs_rho0_methods.F:         rho0_mp%mp_rho(iatom)%Qlm_tot(1) = rho0_mp%mp_rho(iatom)%Qlm_z
./qs_rho0_methods.F:         rho0_mp%mp_rho(iatom)%Q0 = 0.0_dp
./qs_rho0_methods.F:            mpole_rho => rho0_mp%mp_rho(iatom)
./qs_rho0_methods.F:            rho_atom => rho_atom_set(iatom)
./qs_rho0_methods.F:               CALL get_rho_atom(rho_atom=rho_atom, cpc_h=cpc_h, cpc_s=cpc_s)
./qs_rho0_methods.F:                  mpole_rho%Q0(ispin) = (trace_r_AxB(mpole_gau%Qlm_gg(:, :, 1), nsotot, &
./qs_rho0_methods.F:                  mpole_rho%Qlm_h(iso) = 0.0_dp
./qs_rho0_methods.F:                  mpole_rho%Qlm_s(iso) = 0.0_dp
./qs_rho0_methods.F:                     mpole_rho%Qlm_h(iso) = mpole_rho%Qlm_h(iso)+ &
./qs_rho0_methods.F:                     mpole_rho%Qlm_s(iso) = mpole_rho%Qlm_s(iso)+ &
./qs_rho0_methods.F:                  mpole_rho%Qlm_tot(iso) = mpole_rho%Qlm_tot(iso)+ &
./qs_rho0_methods.F:                                           mpole_rho%Qlm_h(iso)-mpole_rho%Qlm_s(iso)
./qs_rho0_methods.F:               rho0_atom_set(iatom)%rho0_rad_h%r_coef(1:nr, iso) = &
./qs_rho0_methods.F:                  g0_h(1:nr, l)*mpole_rho%Qlm_tot(iso)
./qs_rho0_methods.F:               rho0_atom_set(iatom)%vrho0_rad_h%r_coef(1:nr, iso) = &
./qs_rho0_methods.F:                  vg0_h(1:nr, l)*mpole_rho%Qlm_tot(iso)
./qs_rho0_methods.F:                         rho0_atom_set(iatom)%rho0_rad_h%r_coef(ir, iso)
./qs_rho0_methods.F:               rho0_h_tot = rho0_h_tot+sum1*harmonics%slm_int(iso)
./qs_rho0_methods.F:            mpole_rho => rho0_mp%mp_rho(iatom)
./qs_rho0_methods.F:                  mpole_rho%Qlm_car(ico) = 0.0_dp
./qs_rho0_methods.F:            mpole_rho => rho0_mp%mp_rho(iatom)
./qs_rho0_methods.F:                  mpole_rho%Qlm_car(ico) = 0.0_dp
./qs_rho0_methods.F:                     mpole_rho%Qlm_car(ico) = mpole_rho%Qlm_car(ico)+ &
./qs_rho0_methods.F:                                              orbtramat(lshell)%c2s(is, ic)*mpole_rho%Qlm_tot(iso)* &
./qs_rho0_methods.F:   END SUBROUTINE calculate_rho0_atom
./qs_rho0_methods.F:!> \param tddft_local_rho_set ...
./qs_rho0_methods.F:   SUBROUTINE init_rho0(qs_env, gapw_control, &
./qs_rho0_methods.F:                        tddft, tddft_local_rho_set)
./qs_rho0_methods.F:      TYPE(local_rho_type), OPTIONAL, POINTER            :: tddft_local_rho_set
./qs_rho0_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'init_rho0', routineP = moduleN//':'//routineN
./qs_rho0_methods.F:      INTEGER :: handle, iat, iatom, ikind, l, l_rho1_max, laddg, lmaxg, maxl, maxnset, maxso, &
./qs_rho0_methods.F:      REAL(dp)                                           :: alpha_core, eps_Vrho0, max_rpgf0_s, &
./qs_rho0_methods.F:                                                            total_rho_core_rspace
./qs_rho0_methods.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_atom_set
./qs_rho0_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_methods.F:      TYPE(rhoz_type), DIMENSION(:), POINTER             :: rhoz_set
./qs_rho0_methods.F:      NULLIFY (rho0_mpole)
./qs_rho0_methods.F:      NULLIFY (rho0_atom_set)
./qs_rho0_methods.F:      NULLIFY (rhoz_set)
./qs_rho0_methods.F:      eps_Vrho0 = gapw_control%eps_Vrho0
./qs_rho0_methods.F:!   Initialize rhoz total to zero
./qs_rho0_methods.F:!   in gapw rhoz is calculated on local the lebedev grids
./qs_rho0_methods.F:      total_rho_core_rspace = 0.0_dp
./qs_rho0_methods.F:      CALL allocate_rho0_mpole(rho0_mpole)
./qs_rho0_methods.F:      CALL allocate_rho0_atom(rho0_atom_set, natom)
./qs_rho0_methods.F:      CALL allocate_multipoles(rho0_mpole%mp_rho, natom, rho0_mpole%mp_gau, nkind)
./qs_rho0_methods.F:!   Allocate the core density on the radial grid for each kind: rhoz_set
./qs_rho0_methods.F:      CALL allocate_rhoz(rhoz_set, nkind)
./qs_rho0_methods.F:      lmaxg = gapw_control%lmax_rho0
./qs_rho0_methods.F:      laddg = gapw_control%ladd_rho0
./qs_rho0_methods.F:      CALL reallocate(rho0_mpole%lmax0_kind, 1, nkind)
./qs_rho0_methods.F:      rho0_mpole%lmax_0 = 0
./qs_rho0_methods.F:         l_rho1_max = indso(1, harmonics%max_iso_not0)
./qs_rho0_methods.F:            rho0_mpole%lmax0_kind(ikind) = MIN(2*maxl, l_rho1_max, maxl+laddg, lmaxg)
./qs_rho0_methods.F:            rho0_mpole%lmax0_kind(ikind) = 0
./qs_rho0_methods.F:         CALL set_qs_kind(qs_kind_set(ikind), lmax_rho0=rho0_mpole%lmax0_kind(ikind))
./qs_rho0_methods.F:         IF (gapw_control%lrho1_eq_lrho0) harmonics%max_iso_not0 = &
./qs_rho0_methods.F:            nsoset(rho0_mpole%lmax0_kind(ikind))
./qs_rho0_methods.F:         rho0_mpole%lmax_0 = MAX(rho0_mpole%lmax_0, rho0_mpole%lmax0_kind(ikind))
./qs_rho0_methods.F:         nchan_s = nsoset(rho0_mpole%lmax0_kind(ikind))
./qs_rho0_methods.F:         nchan_c = ncoset(rho0_mpole%lmax0_kind(ikind))
./qs_rho0_methods.F:!        Allocate the multipole for rho1_h rho1_s and rho_z
./qs_rho0_methods.F:            CALL initialize_mpole_rho(rho0_mpole%mp_rho(iatom), nchan_s, nchan_c, zeff, my_tddft)
./qs_rho0_methods.F:!        Allocate the radial part of rho0_h and rho0_s
./qs_rho0_methods.F:            CALL allocate_rho0_atom_rad(rho0_atom_set(iatom), nr, nchan_s)
./qs_rho0_methods.F:            CALL calculate_mpole_gau(rho0_mpole%mp_gau(ikind), &
./qs_rho0_methods.F:!     Calculate the core density rhoz
./qs_rho0_methods.F:         CALL calculate_rhoz(rhoz_set(ikind), grid_atom, alpha_core, zeff, &
./qs_rho0_methods.F:                             nat, total_rho_core_rspace, harmonics)
./qs_rho0_methods.F:      total_rho_core_rspace = -total_rho_core_rspace
./qs_rho0_methods.F:!   The Exponent for the compensation charge rho0_hard is read from input
./qs_rho0_methods.F:         rho0_mpole%zet0_h = gapw_control%alpha0_hard
./qs_rho0_methods.F:!   Calculate the exponent for the compensation charge rho0_hard
./qs_rho0_methods.F:         rho0_mpole%zet0_h = 0.1_dp
./qs_rho0_methods.F:            radius = exp_radius(rho0_mpole%lmax_0, rho0_mpole%zet0_h, eps_Vrho0, 1.0_dp)
./qs_rho0_methods.F:            rho0_mpole%zet0_h = rho0_mpole%zet0_h+0.1_dp
./qs_rho0_methods.F:      CALL reallocate(rho0_mpole%norm_g0l_h, 0, rho0_mpole%lmax_0)
./qs_rho0_methods.F:      DO l = 0, rho0_mpole%lmax_0
./qs_rho0_methods.F:         rho0_mpole%norm_g0l_h(l) = (2._dp*l+1._dp)/ &
./qs_rho0_methods.F:                                    (fourpi*gaussint_sph(rho0_mpole%zet0_h, 2*l))
./qs_rho0_methods.F:         CALL calculate_g0(rho0_mpole, grid_atom, ikind)
./qs_rho0_methods.F:         CALL interaction_radii_g0(rho0_mpole, ikind, eps_Vrho0, max_rpgf0_s)
./qs_rho0_methods.F:      rho0_mpole%max_rpgf0_s = max_rpgf0_s
./qs_rho0_methods.F:         CALL set_qs_env(qs_env=qs_env, rho0_mpole=rho0_mpole, &
./qs_rho0_methods.F:                         rho0_atom_set=rho0_atom_set, &
./qs_rho0_methods.F:                         rhoz_set=rhoz_set, &
./qs_rho0_methods.F:                         rhoz_tot=total_rho_core_rspace)
./qs_rho0_methods.F:         tddft_local_rho_set%rho0_mpole => rho0_mpole
./qs_rho0_methods.F:         tddft_local_rho_set%rho0_atom_set => rho0_atom_set
./qs_rho0_methods.F:         tddft_local_rho_set%rhoz_set => rhoz_set
./qs_rho0_methods.F:         tddft_local_rho_set%rhoz_tot = total_rho_core_rspace
./qs_rho0_methods.F:         CALL rho0_s_grid_create(qs_env, rho0_mpole, .TRUE.)
./qs_rho0_methods.F:         CALL write_rho0_info(rho0_mpole, unit_str, output_unit)
./qs_rho0_methods.F:   END SUBROUTINE init_rho0
./qs_rho0_methods.F:!> \param rho0_mpole ...
./qs_rho0_methods.F:!> \param eps_Vrho0 ...
./qs_rho0_methods.F:   SUBROUTINE interaction_radii_g0(rho0_mpole, ik, eps_Vrho0, max_rpgf0_s)
./qs_rho0_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_rho0_methods.F:      REAL(dp), INTENT(IN)                               :: eps_Vrho0
./qs_rho0_methods.F:      CALL get_rho0_mpole(rho0_mpole, ikind=ik, l0_ikind=lmax, &
./qs_rho0_methods.F:         r_h = MAX(r_h, exp_radius(l, z0_h, eps_Vrho0, ng0_h(l)))
./qs_rho0_methods.F:      rho0_mpole%mp_gau(ik)%rpgf0_h = r_h
./qs_rho0_methods.F:      rho0_mpole%mp_gau(ik)%rpgf0_s = r_h
./qs_rho0_methods.F:END MODULE qs_rho0_methods
./qmmm_gpw_forces.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qmmm_gpw_forces.F:                                              qs_rho_type
./qmmm_gpw_forces.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qmmm_gpw_forces.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core
./qmmm_gpw_forces.F:      TYPE(pw_type), POINTER                             :: rho_tot_r, rho_tot_r2
./qmmm_gpw_forces.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qmmm_gpw_forces.F:    NULLIFY(dft_control, ks_qmmm_env_loc, rho, pw_env, rho_tot_r, energy, Forces,&
./qmmm_gpw_forces.F:            Forces_added_charges,input_section,rho0_s_gs, rho_r)
./qmmm_gpw_forces.F:         rho=rho,&
./qmmm_gpw_forces.F:         rho_core=rho_core,&
./qmmm_gpw_forces.F:         rho0_s_gs=rho0_s_gs,&
./qmmm_gpw_forces.F:    CALL qs_rho_get(rho, rho_r=rho_r)
./qmmm_gpw_forces.F:       CALL pw_pool_create_pw(auxbas_pool,rho_tot_r,&
./qmmm_gpw_forces.F:            CALL pw_transfer(rho_core%pw,rho_tot_r)
./qmmm_gpw_forces.F:            energy%qmmm_nu = pw_integral_ab ( rho_tot_r, ks_qmmm_env_loc%v_qmmm_rspace%pw)
./qmmm_gpw_forces.F:            CALL pw_pool_create_pw(auxbas_pool,rho_tot_r2,&
./qmmm_gpw_forces.F:            CALL pw_transfer(rho0_s_gs%pw,rho_tot_r2)
./qmmm_gpw_forces.F:            CALL pw_axpy(rho_tot_r2,rho_tot_r)
./qmmm_gpw_forces.F:            CALL pw_pool_give_back_pw(auxbas_pool,rho_tot_r2,accept_non_compatible=.TRUE.)
./qmmm_gpw_forces.F:            CALL pw_transfer(rho0_s_gs%pw,rho_tot_r)
./qmmm_gpw_forces.F:          ! QM/MM Nuclear Electrostatic Potential already included through rho0
./qmmm_gpw_forces.F:          CALL pw_transfer(rho_core%pw,rho_tot_r)
./qmmm_gpw_forces.F:          energy%qmmm_nu = pw_integral_ab ( rho_tot_r, ks_qmmm_env_loc%v_qmmm_rspace%pw)
./qmmm_gpw_forces.F:          DO ispin=1,SIZE(rho_r)
./qmmm_gpw_forces.F:             CALL pw_axpy(rho_r(ispin)%pw,rho_tot_r)
./qmmm_gpw_forces.F:             CALL qmmm_forces_with_gaussian(rho=rho_tot_r,&
./qmmm_gpw_forces.F:             CALL qmmm_debug_forces(rho=rho_tot_r,&
./qmmm_gpw_forces.F:    ! Give back rho_tot_t to auxbas_pool only for GPW/GAPW
./qmmm_gpw_forces.F:       CALL pw_pool_give_back_pw(auxbas_pool,rho_tot_r,&
./qmmm_gpw_forces.F:!> \param rho ...
./qmmm_gpw_forces.F:  SUBROUTINE qmmm_forces_with_gaussian(rho, qmmm_env, mm_particles,  &
./qmmm_gpw_forces.F:      TYPE(pw_type), POINTER                             :: rho
./qmmm_gpw_forces.F:    lb = rho%pw_grid%bounds_local(1,:)
./qmmm_gpw_forces.F:    ub = rho%pw_grid%bounds_local(2,:)
./qmmm_gpw_forces.F:                                   lb(3):ub(3) )= rho % cr3d
./qmmm_gpw_forces.F:       grids(auxbas_grid) % pw %cr3d(i,ub(2)+1,ub(3)+1)=rho%cr3d(i,lb(2),lb(3))
./qmmm_gpw_forces.F:          grids(auxbas_grid) % pw %cr3d(i,ub(2)+1,k)=rho%cr3d(i,lb(2),k)
./qmmm_gpw_forces.F:          grids(auxbas_grid) % pw %cr3d(i,j,ub(3)+1)=rho%cr3d(i,j,lb(3))
./qmmm_gpw_forces.F:    glb=rho%pw_grid%bounds(1,:)
./qmmm_gpw_forces.F:    gub=rho%pw_grid%bounds(2,:)
./qmmm_gpw_forces.F:             grids(auxbas_grid) % pw %cr3d(ub(1)+1,j,k)=rho%cr3d(lb(1),j,k)
./qmmm_gpw_forces.F:          grids(auxbas_grid) % pw %cr3d(ub(1)+1,ub(2)+1,k)=rho%cr3d(lb(1),lb(2),k)
./qmmm_gpw_forces.F:          grids(auxbas_grid) % pw %cr3d(ub(1)+1,j,ub(3)+1)=rho%cr3d(lb(1),j,lb(3))
./qmmm_gpw_forces.F:       grids(auxbas_grid) % pw %cr3d(ub(1)+1,ub(2)+1,ub(3)+1)=rho%cr3d(lb(1),lb(2),lb(3))
./qmmm_gpw_forces.F:       ALLOCATE(tmp(rho%pw_grid%bounds_local(1,2):rho%pw_grid%bounds_local(2,2),&
./qmmm_gpw_forces.F:            rho%pw_grid%bounds_local(1,3):rho%pw_grid%bounds_local(2,3)),&
./qmmm_gpw_forces.F:       tmp=rho%cr3d(lb(1),:,:)
./qmmm_gpw_forces.F:       CALL mp_isend(msgin=tmp,dest=pos_of_x(rho%pw_grid%bounds(2,1)),comm=group,&
./qmmm_gpw_forces.F:       ALLOCATE(tmp(rho%pw_grid%bounds_local(1,2):rho%pw_grid%bounds_local(2,2),&
./qmmm_gpw_forces.F:            rho%pw_grid%bounds_local(1,3):rho%pw_grid%bounds_local(2,3)),&
./qmmm_gpw_forces.F:       CALL mp_irecv(msgout=tmp,source=pos_of_x(rho%pw_grid%bounds(1,1)),&
./qmmm_gpw_forces.F:                                            rho=cgrid,&
./qmmm_gpw_forces.F:                                            rho=cgrid,&
./qmmm_gpw_forces.F:!> \param rho ...
./qmmm_gpw_forces.F:  SUBROUTINE qmmm_debug_forces(rho,qs_env,qmmm_env,Analytical_Forces,&
./qmmm_gpw_forces.F:      TYPE(pw_type), POINTER                             :: rho
./qmmm_gpw_forces.F:             energy(K) =  pw_integral_ab ( rho, v_qmmm_rspace%pw)
./qmmm_gpw_forces.F:!> \param rho ...
./qmmm_gpw_forces.F:  SUBROUTINE debug_qmmm_forces_with_gauss_LG(pgfs,aug_pools, rho, mm_charges, mm_atom_index,&
./qmmm_gpw_forces.F:      TYPE(pw_type), POINTER                             :: rho
./qmmm_gpw_forces.F:             energy(K) =  pw_integral_ab ( rho, grids(coarser_grid_level)%pw)
./qmmm_gpw_forces.F:!> \param rho ...
./qmmm_gpw_forces.F:  SUBROUTINE debug_qmmm_forces_with_gauss_LR(pgfs,aug_pools, rho, mm_charges, mm_atom_index,&
./qmmm_gpw_forces.F:      TYPE(pw_type), POINTER                             :: rho
./qmmm_gpw_forces.F:             energy(K) =  pw_integral_ab ( rho, grids(coarser_grid_level)%pw)
./cp_ddapc_types.F:!> \param rho_tot_g ...
./cp_ddapc_types.F:                              particle_set, radii, cell, super_cell, rho_tot_g, gcut, iw2, Vol, &
./cp_ddapc_types.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_types.F:      CALL ddapc_eval_gfunc(cp_ddapc_env%gfunc, cp_ddapc_env%w, gcut, rho_tot_g, radii)
./cp_ddapc_types.F:                          rho_tot_g, &
./cp_control_utils.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./cp_control_utils.F:      TYPE(xc_rho_cflags_type)                           :: needs
./cp_control_utils.F:      dft_control%drho_by_collocation = (needs%norm_drho .AND. (xc_deriv_method_id == xc_deriv_collocate))
./cp_control_utils.F:      IF (dft_control%drho_by_collocation) THEN
./cp_control_utils.F:                                      r_val=dft_control%sccs_control%delta_rho)
./cp_control_utils.F:                                         r_val=dft_control%sccs_control%rho_max)
./cp_control_utils.F:                                         r_val=dft_control%sccs_control%rho_min)
./cp_control_utils.F:               IF (dft_control%sccs_control%rho_max < dft_control%sccs_control%rho_min) THEN
./cp_control_utils.F:                                         r_val=dft_control%sccs_control%rho_zero)
./cp_control_utils.F:      qs_control%eps_rho_gspace = value
./cp_control_utils.F:      qs_control%eps_rho_rspace = value
./cp_control_utils.F:         CALL section_vals_val_get(qs_section, "EPS_RHO", r_val=qs_control%eps_rho_gspace)
./cp_control_utils.F:         qs_control%eps_rho_rspace = qs_control%eps_rho_gspace
./cp_control_utils.F:         CALL section_vals_val_get(qs_section, "EPS_RHO_RSPACE", r_val=qs_control%eps_rho_rspace)
./cp_control_utils.F:         CALL section_vals_val_get(qs_section, "EPS_RHO_GSPACE", r_val=qs_control%eps_rho_gspace)
./cp_control_utils.F:      CALL section_vals_val_get(qs_section, "EPSRHO0", r_val=qs_control%gapw_control%eps_Vrho0)
./cp_control_utils.F:      qs_control%gapw_control%lrho1_eq_lrho0 = .FALSE.
./cp_control_utils.F:      CALL section_vals_val_get(qs_section, "LMAXN0", i_val=qs_control%gapw_control%lmax_rho0)
./cp_control_utils.F:      CALL section_vals_val_get(qs_section, "LADDN0", i_val=qs_control%gapw_control%ladd_rho0)
./cp_control_utils.F:                  "SCCS|  rho_max", dft_control%sccs_control%rho_max, &
./cp_control_utils.F:                  "SCCS|  rho_min", dft_control%sccs_control%rho_min
./cp_control_utils.F:                  "SCCS|  rho_zero", dft_control%sccs_control%rho_zero
./cp_control_utils.F:               dft_control%sccs_control%delta_rho
./cp_control_utils.F:            "QS|                         eps_rho_gspace:", &
./cp_control_utils.F:            qs_control%eps_rho_gspace, &
./cp_control_utils.F:            "QS|                         eps_rho_rspace:", &
./cp_control_utils.F:            qs_control%eps_rho_rspace, &
./cp_control_utils.F:               "QS| GAPW|      max_l_rho0 :", &
./cp_control_utils.F:               qs_control%gapw_control%lmax_rho0
./qs_vxc_atom.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_vxc_atom.F:                                              rho_atom_coeff,&
./qs_vxc_atom.F:                                              rho_atom_type
./qs_vxc_atom.F:   USE xc_atom,                         ONLY: fill_rho_set,&
./qs_vxc_atom.F:                                              xc_rho_set_atom_update
./qs_vxc_atom.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./qs_vxc_atom.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./qs_vxc_atom.F:                                              xc_rho_set_release,&
./qs_vxc_atom.F:                                              xc_rho_set_type
./qs_vxc_atom.F:             calc_rho_angular, &
./qs_vxc_atom.F:      REAL(dp), DIMENSION(:, :), POINTER                 :: rho_h, rho_nlcc, rho_s, tau_h, tau_s, &
./qs_vxc_atom.F:      REAL(dp), DIMENSION(:, :, :, :), POINTER           :: drho_h, drho_s, vxg_h, vxg_s
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: dr_h, dr_s, r_h, r_s
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER     :: r_h_d, r_s_d, trho_h, trho_s
./qs_vxc_atom.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_vxc_atom.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_vxc_atom.F:      TYPE(xc_rho_cflags_type)                           :: needs
./qs_vxc_atom.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set_h, rho_set_s
./qs_vxc_atom.F:      NULLIFY (rho_atom)
./qs_vxc_atom.F:      NULLIFY (rho_atom_set)
./qs_vxc_atom.F:      NULLIFY (rho_set_h)
./qs_vxc_atom.F:      NULLIFY (rho_set_s)
./qs_vxc_atom.F:                      rho_atom_set=rho_atom_set)
./qs_vxc_atom.F:         rho_atom_set(:)%exc_h = 0.0_dp
./qs_vxc_atom.F:         rho_atom_set(:)%exc_s = 0.0_dp
./qs_vxc_atom.F:         ! whatever the xc, if epr_xc, drho_spin is needed
./qs_vxc_atom.F:         IF (epr_xc) needs%drho_spin = .TRUE.
./qs_vxc_atom.F:         gradient_f = (needs%drho .OR. needs%drho_spin)
./qs_vxc_atom.F:         NULLIFY (rho_h, drho_h, rho_s, drho_s, weight)
./qs_vxc_atom.F:            CALL xc_rho_set_create(rho_set_h, bounds, rho_cutoff=density_cut, &
./qs_vxc_atom.F:                                   drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./qs_vxc_atom.F:            CALL xc_rho_set_create(rho_set_s, bounds, rho_cutoff=density_cut, &
./qs_vxc_atom.F:                                   drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./qs_vxc_atom.F:            ! allocate the required 3d arrays where to store rho and drho
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho_set_h, needs, nspins, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho_set_s, needs, nspins, bounds)
./qs_vxc_atom.F:            CALL reallocate(rho_h, 1, na, 1, nspins)
./qs_vxc_atom.F:            CALL reallocate(rho_s, 1, na, 1, nspins)
./qs_vxc_atom.F:               CALL reallocate(drho_h, 1, 4, 1, na, 1, nr, 1, nspins)
./qs_vxc_atom.F:               CALL reallocate(drho_s, 1, 4, 1, na, 1, nr, 1, nspins)
./qs_vxc_atom.F:            ! NLCC: prepare rho and drho of the core charge for this KIND
./qs_vxc_atom.F:               NULLIFY (rho_nlcc)
./qs_vxc_atom.F:               rho_nlcc => qs_kind_set(ikind)%nlcc_pot
./qs_vxc_atom.F:               IF (ASSOCIATED(rho_nlcc)) donlcc = .TRUE.
./qs_vxc_atom.F:               rho_atom_set(iatom)%exc_h = 0.0_dp
./qs_vxc_atom.F:               rho_atom_set(iatom)%exc_s = 0.0_dp
./qs_vxc_atom.F:               rho_atom => rho_atom_set(iatom)
./qs_vxc_atom.F:                  CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=r_h, &
./qs_vxc_atom.F:                                    rho_rad_s=r_s, drho_rad_h=dr_h, &
./qs_vxc_atom.F:                                    drho_rad_s=dr_s, rho_rad_h_d=r_h_d, &
./qs_vxc_atom.F:                                    rho_rad_s_d=r_s_d)
./qs_vxc_atom.F:                  drho_h = 0.0_dp
./qs_vxc_atom.F:                  drho_s = 0.0_dp
./qs_vxc_atom.F:                  CALL get_rho_atom(rho_atom=rho_atom, rho_rad_h=r_h, rho_rad_s=r_s)
./qs_vxc_atom.F:                  NULLIFY (trho_h, trho_s)
./qs_vxc_atom.F:                  CALL get_rho_atom(rho_atom=rho_atom, trho_rad_h=trho_h, trho_rad_s=trho_s)
./qs_vxc_atom.F:                  CALL calc_rho_angular(grid_atom, harmonics, nspins, gradient_f, &
./qs_vxc_atom.F:                                        ir, r_h, r_s, rho_h, rho_s, dr_h, dr_s, &
./qs_vxc_atom.F:                                        r_h_d, r_s_d, drho_h, drho_s)
./qs_vxc_atom.F:                                           trho_h, trho_s, tau_h, tau_s)
./qs_vxc_atom.F:                     CALL calc_rho_nlcc(grid_atom, nspins, gradient_f, &
./qs_vxc_atom.F:                                        ir, rho_nlcc(:, 1), rho_h, rho_s, rho_nlcc(:, 2), drho_h, drho_s)
./qs_vxc_atom.F:                  CALL fill_rho_set(rho_set_h, lsd, nspins, needs, rho_h, drho_h, tau_h, na, ir)
./qs_vxc_atom.F:                  CALL fill_rho_set(rho_set_s, lsd, nspins, needs, rho_s, drho_s, tau_s, na, ir)
./qs_vxc_atom.F:               CALL vxc_of_r_new(xc_fun_section, rho_set_h, deriv_set, 1, needs, weight, &
./qs_vxc_atom.F:               rho_atom%exc_h = rho_atom%exc_h+exc_h
./qs_vxc_atom.F:               CALL vxc_of_r_new(xc_fun_section, rho_set_s, deriv_set, 1, needs, weight, &
./qs_vxc_atom.F:               rho_atom%exc_s = rho_atom%exc_s+exc_s
./qs_vxc_atom.F:               energy%exc1 = energy%exc1+rho_atom%exc_h-rho_atom%exc_s
./qs_vxc_atom.F:                                     rho_atom, nspins)
./qs_vxc_atom.F:                     CALL gaVxcgb_noGC(vxc_h, vxc_s, qs_kind, rho_atom, nspins)
./qs_vxc_atom.F:                     CALL dgaVtaudgb(vtau_h, vtau_s, qs_kind, rho_atom, nspins)
./qs_vxc_atom.F:            CALL xc_rho_set_release(rho_set_h)
./qs_vxc_atom.F:            CALL xc_rho_set_release(rho_set_s)
./qs_vxc_atom.F:         IF (ASSOCIATED(rho_h)) THEN
./qs_vxc_atom.F:            DEALLOCATE (rho_h)
./qs_vxc_atom.F:         IF (ASSOCIATED(rho_s)) THEN
./qs_vxc_atom.F:            DEALLOCATE (rho_s)
./qs_vxc_atom.F:            IF (ASSOCIATED(drho_h)) THEN
./qs_vxc_atom.F:               DEALLOCATE (drho_h)
./qs_vxc_atom.F:            IF (ASSOCIATED(drho_s)) THEN
./qs_vxc_atom.F:               DEALLOCATE (drho_s)
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho1_h, rho1_s, rho_h, rho_s, tau1_h, &
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER      :: drho1_h, drho1_s, drho_h, drho_s, vxg_h, &
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: dr1_h, dr1_s, dr_h, dr_s, r1_h, r1_s, &
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER     :: r1_h_d, r1_s_d, r_h_d, r_s_d
./qs_vxc_atom.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho1_atom_set, rho_atom_set
./qs_vxc_atom.F:      TYPE(rho_atom_type), POINTER                       :: rho1_atom, rho_atom
./qs_vxc_atom.F:      TYPE(xc_rho_cflags_type)                           :: needs
./qs_vxc_atom.F:      TYPE(xc_rho_set_type), POINTER                     :: rho1_set_h, rho1_set_s, rho_set_h, &
./qs_vxc_atom.F:                                                            rho_set_s
./qs_vxc_atom.F:      NULLIFY (rho_h, rho_s, drho_h, drho_s, weight)
./qs_vxc_atom.F:      NULLIFY (rho1_h, rho1_s, drho1_h, drho1_s)
./qs_vxc_atom.F:                      rho_atom_set=rho_atom_set)
./qs_vxc_atom.F:      rho1_atom_set => p_env%local_rho_set%rho_atom_set
./qs_vxc_atom.F:      gradient_functional = needs%drho .OR. needs%drho_spin
./qs_vxc_atom.F:         NULLIFY (deriv_set, rho_set_h, rho_set_s, rho1_set_h, rho1_set_s)
./qs_vxc_atom.F:         CALL xc_rho_set_create(rho_set_h, bounds, rho_cutoff=density_cut, &
./qs_vxc_atom.F:                                drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./qs_vxc_atom.F:         CALL xc_rho_set_create(rho_set_s, bounds, rho_cutoff=density_cut, &
./qs_vxc_atom.F:                                drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./qs_vxc_atom.F:         CALL xc_rho_set_create(rho1_set_h, bounds, rho_cutoff=density_cut, &
./qs_vxc_atom.F:                                drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./qs_vxc_atom.F:         CALL xc_rho_set_create(rho1_set_s, bounds, rho_cutoff=density_cut, &
./qs_vxc_atom.F:                                drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./qs_vxc_atom.F:         ! allocate the required 3d arrays where to store rho and drho
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho_set_h, needs, 1, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho1_set_h, needs, 1, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho_set_s, needs, 1, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho1_set_s, needs, 1, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho_set_h, needs, 2, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho1_set_h, needs, 2, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho_set_s, needs, 2, bounds)
./qs_vxc_atom.F:            CALL xc_rho_set_atom_update(rho1_set_s, needs, 2, bounds)
./qs_vxc_atom.F:         ALLOCATE (rho_h(1:na, 1:nspins), rho1_h(1:na, 1:nspins), &
./qs_vxc_atom.F:                   rho_s(1:na, 1:nspins), rho1_s(1:na, 1:nspins))
./qs_vxc_atom.F:            ALLOCATE (drho_h(1:4, 1:na, 1:nr, 1:nspins), drho1_h(1:4, 1:na, 1:nr, 1:nspins), &
./qs_vxc_atom.F:                      drho_s(1:4, 1:na, 1:nr, 1:nspins), drho1_s(1:4, 1:na, 1:nr, 1:nspins))
./qs_vxc_atom.F:            rho_atom_set(atom)%exc_h = 0.0_dp
./qs_vxc_atom.F:            rho_atom_set(atom)%exc_s = 0.0_dp
./qs_vxc_atom.F:            rho1_atom_set(atom)%exc_h = 0.0_dp
./qs_vxc_atom.F:            rho1_atom_set(atom)%exc_s = 0.0_dp
./qs_vxc_atom.F:            rho_atom => rho_atom_set(atom)
./qs_vxc_atom.F:            rho1_atom => rho1_atom_set(atom)
./qs_vxc_atom.F:               CALL get_rho_atom(rho_atom=rho_atom, &
./qs_vxc_atom.F:                                 rho_rad_h=r_h, rho_rad_s=r_s, &
./qs_vxc_atom.F:                                 drho_rad_h=dr_h, drho_rad_s=dr_s, &
./qs_vxc_atom.F:                                 rho_rad_h_d=r_h_d, rho_rad_s_d=r_s_d)
./qs_vxc_atom.F:               CALL get_rho_atom(rho_atom=rho1_atom, &
./qs_vxc_atom.F:                                 rho_rad_h=r1_h, rho_rad_s=r1_s, &
./qs_vxc_atom.F:                                 drho_rad_h=dr1_h, drho_rad_s=dr1_s, &
./qs_vxc_atom.F:                                 rho_rad_h_d=r1_h_d, rho_rad_s_d=r1_s_d)
./qs_vxc_atom.F:               drho_h = 0.0_dp; drho_s = 0.0_dp
./qs_vxc_atom.F:               drho1_h = 0.0_dp; drho1_s = 0.0_dp
./qs_vxc_atom.F:               CALL get_rho_atom(rho_atom=rho_atom, &
./qs_vxc_atom.F:                                 rho_rad_h=r_h, rho_rad_s=r_s)
./qs_vxc_atom.F:               CALL get_rho_atom(rho_atom=rho1_atom, &
./qs_vxc_atom.F:                                 rho_rad_h=r1_h, rho_rad_s=r1_s)
./qs_vxc_atom.F:               CALL calc_rho_angular(grid_atom, harmonics, nspins, gradient_functional, &
./qs_vxc_atom.F:                                     ir, r_h, r_s, rho_h, rho_s, dr_h, dr_s, r_h_d, r_s_d, &
./qs_vxc_atom.F:                                     drho_h, drho_s)
./qs_vxc_atom.F:               CALL calc_rho_angular(grid_atom, harmonics, nspins, gradient_functional, &
./qs_vxc_atom.F:                                     ir, r1_h, r1_s, rho1_h, rho1_s, dr1_h, dr1_s, r1_h_d, r1_s_d, &
./qs_vxc_atom.F:                                     drho1_h, drho1_s)
./qs_vxc_atom.F:               CALL fill_rho_set(rho_set_h, lsd, nspins, needs, rho_h, drho_h, tau_h, na, ir)
./qs_vxc_atom.F:               CALL fill_rho_set(rho1_set_h, lsd, nspins, needs, rho1_h, drho1_h, tau1_h, na, ir)
./qs_vxc_atom.F:               CALL fill_rho_set(rho_set_s, lsd, nspins, needs, rho_s, drho_s, tau_s, na, ir)
./qs_vxc_atom.F:               CALL fill_rho_set(rho1_set_s, lsd, nspins, needs, rho1_s, drho1_s, tau1_s, na, ir)
./qs_vxc_atom.F:                                   rho_set=rho_set_h, rho1_set=rho1_set_h, &
./qs_vxc_atom.F:                                   rho_set=rho_set_s, rho1_set=rho1_set_s, &
./qs_vxc_atom.F:                               rho1_atom, nspins)
./qs_vxc_atom.F:                                 rho1_atom, nspins)
./qs_vxc_atom.F:         DEALLOCATE (rho_h, rho_s, rho1_h, rho1_s, vxc_h, vxc_s)
./qs_vxc_atom.F:            DEALLOCATE (drho_h, drho_s, vxg_h, vxg_s)
./qs_vxc_atom.F:            DEALLOCATE (drho1_h, drho1_s)
./qs_vxc_atom.F:         CALL xc_rho_set_release(rho_set_h)
./qs_vxc_atom.F:         CALL xc_rho_set_release(rho1_set_h)
./qs_vxc_atom.F:         CALL xc_rho_set_release(rho_set_s)
./qs_vxc_atom.F:         CALL xc_rho_set_release(rho1_set_s)
./qs_vxc_atom.F:!> \param rho_h ...
./qs_vxc_atom.F:!> \param rho_s ...
./qs_vxc_atom.F:!> \param drho_h ...
./qs_vxc_atom.F:!> \param drho_s ...
./qs_vxc_atom.F:   SUBROUTINE calc_rho_angular(grid_atom, harmonics, nspins, grad_func, &
./qs_vxc_atom.F:                               ir, r_h, r_s, rho_h, rho_s, &
./qs_vxc_atom.F:                               dr_h, dr_s, r_h_d, r_s_d, drho_h, drho_s)
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: r_h, r_s
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho_h, rho_s
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: dr_h, dr_s
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER     :: r_h_d, r_s_d
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER      :: drho_h, drho_s
./qs_vxc_atom.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'calc_rho_angular', &
./qs_vxc_atom.F:      CPASSERT(ASSOCIATED(rho_h))
./qs_vxc_atom.F:      CPASSERT(ASSOCIATED(rho_s))
./qs_vxc_atom.F:         CPASSERT(ASSOCIATED(drho_h))
./qs_vxc_atom.F:         CPASSERT(ASSOCIATED(drho_s))
./qs_vxc_atom.F:      rho_h = 0.0_dp; rho_s = 0.0_dp
./qs_vxc_atom.F:               rho_h(ia, ispin) = rho_h(ia, ispin)+ &
./qs_vxc_atom.F:               rho_s(ia, ispin) = rho_s(ia, ispin)+ &
./qs_vxc_atom.F:!              components of the gradient of rho1 hard
./qs_vxc_atom.F:                  drho_h(1, ia, ir, ispin) = drho_h(1, ia, ir, ispin)+ &
./qs_vxc_atom.F:                  drho_h(2, ia, ir, ispin) = drho_h(2, ia, ir, ispin)+ &
./qs_vxc_atom.F:                  drho_h(3, ia, ir, ispin) = drho_h(3, ia, ir, ispin)+ &
./qs_vxc_atom.F:!              components of the gradient of rho1 soft
./qs_vxc_atom.F:                  drho_s(1, ia, ir, ispin) = drho_s(1, ia, ir, ispin)+ &
./qs_vxc_atom.F:                  drho_s(2, ia, ir, ispin) = drho_s(2, ia, ir, ispin)+ &
./qs_vxc_atom.F:                  drho_s(3, ia, ir, ispin) = drho_s(3, ia, ir, ispin)+ &
./qs_vxc_atom.F:                  drho_h(4, ia, ir, ispin) = SQRT( &
./qs_vxc_atom.F:                                             drho_h(1, ia, ir, ispin)*drho_h(1, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                             drho_h(2, ia, ir, ispin)*drho_h(2, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                             drho_h(3, ia, ir, ispin)*drho_h(3, ia, ir, ispin))
./qs_vxc_atom.F:                  drho_s(4, ia, ir, ispin) = SQRT( &
./qs_vxc_atom.F:                                             drho_s(1, ia, ir, ispin)*drho_s(1, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                             drho_s(2, ia, ir, ispin)*drho_s(2, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                             drho_s(3, ia, ir, ispin)*drho_s(3, ia, ir, ispin))
./qs_vxc_atom.F:   END SUBROUTINE calc_rho_angular
./qs_vxc_atom.F:!> \param trho_h ...
./qs_vxc_atom.F:!> \param trho_s ...
./qs_vxc_atom.F:                               trho_h, trho_s, tau_h, tau_s)
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER     :: trho_h, trho_s
./qs_vxc_atom.F:      CPASSERT(ASSOCIATED(trho_h))
./qs_vxc_atom.F:      CPASSERT(ASSOCIATED(trho_s))
./qs_vxc_atom.F:                                  trho_h(1, ispin)%r_coef(ir, iso)*harmonics%slm(ia, iso)
./qs_vxc_atom.F:                                  trho_h(3, ispin)%r_coef(ir, iso)*harmonics%slm(ia, iso)
./qs_vxc_atom.F:                                  trho_s(1, ispin)%r_coef(ir, iso)*harmonics%slm(ia, iso)
./qs_vxc_atom.F:                                  trho_s(3, ispin)%r_coef(ir, iso)*harmonics%slm(ia, iso)
./qs_vxc_atom.F:                                  trho_h(2, ispin)%r_coef(ir, iso)*harmonics%slm(ia, iso)*grid_atom%usin_azi(ia)**2
./qs_vxc_atom.F:                                  trho_s(2, ispin)%r_coef(ir, iso)*harmonics%slm(ia, iso)*grid_atom%usin_azi(ia)**2
./qs_vxc_atom.F:!> \param rho_nlcc ...
./qs_vxc_atom.F:!> \param rho_h ...
./qs_vxc_atom.F:!> \param rho_s ...
./qs_vxc_atom.F:!> \param drho_nlcc ...
./qs_vxc_atom.F:!> \param drho_h ...
./qs_vxc_atom.F:!> \param drho_s ...
./qs_vxc_atom.F:   SUBROUTINE calc_rho_nlcc(grid_atom, nspins, grad_func, &
./qs_vxc_atom.F:                            ir, rho_nlcc, rho_h, rho_s, drho_nlcc, drho_h, drho_s)
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:)                        :: rho_nlcc
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho_h, rho_s
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:)                        :: drho_nlcc
./qs_vxc_atom.F:      REAL(KIND=dp), DIMENSION(:, :, :, :), POINTER      :: drho_h, drho_s
./qs_vxc_atom.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'calc_rho_nlcc', routineP = moduleN//':'//routineN
./qs_vxc_atom.F:      REAL(KIND=dp)                                      :: drho, dx, dy, dz, rad, rho, urad, xsp
./qs_vxc_atom.F:      CPASSERT(ASSOCIATED(rho_h))
./qs_vxc_atom.F:      CPASSERT(ASSOCIATED(rho_s))
./qs_vxc_atom.F:         CPASSERT(ASSOCIATED(drho_h))
./qs_vxc_atom.F:         CPASSERT(ASSOCIATED(drho_s))
./qs_vxc_atom.F:      rho = rho_nlcc(ir)/xsp
./qs_vxc_atom.F:         rho_h(1:na, ispin) = rho_h(1:na, ispin)+rho
./qs_vxc_atom.F:         rho_s(1:na, ispin) = rho_s(1:na, ispin)+rho
./qs_vxc_atom.F:         drho = drho_nlcc(ir)/xsp
./qs_vxc_atom.F:               ! components of the gradient of rho1 hard
./qs_vxc_atom.F:               drho_h(1, ia, ir, ispin) = drho_h(1, ia, ir, ispin)+drho*dx
./qs_vxc_atom.F:               drho_h(2, ia, ir, ispin) = drho_h(2, ia, ir, ispin)+drho*dy
./qs_vxc_atom.F:               drho_h(3, ia, ir, ispin) = drho_h(3, ia, ir, ispin)+drho*dz
./qs_vxc_atom.F:               ! components of the gradient of rho1 soft
./qs_vxc_atom.F:               drho_s(1, ia, ir, ispin) = drho_s(1, ia, ir, ispin)+drho*dx
./qs_vxc_atom.F:               drho_s(2, ia, ir, ispin) = drho_s(2, ia, ir, ispin)+drho*dy
./qs_vxc_atom.F:               drho_s(3, ia, ir, ispin) = drho_s(3, ia, ir, ispin)+drho*dz
./qs_vxc_atom.F:               drho_h(4, ia, ir, ispin) = SQRT( &
./qs_vxc_atom.F:                                          drho_h(1, ia, ir, ispin)*drho_h(1, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                          drho_h(2, ia, ir, ispin)*drho_h(2, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                          drho_h(3, ia, ir, ispin)*drho_h(3, ia, ir, ispin))
./qs_vxc_atom.F:               drho_s(4, ia, ir, ispin) = SQRT( &
./qs_vxc_atom.F:                                          drho_s(1, ia, ir, ispin)*drho_s(1, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                          drho_s(2, ia, ir, ispin)*drho_s(2, ia, ir, ispin)+ &
./qs_vxc_atom.F:                                          drho_s(3, ia, ir, ispin)*drho_s(3, ia, ir, ispin))
./qs_vxc_atom.F:   END SUBROUTINE calc_rho_nlcc
./qs_vxc_atom.F:!> \param rho_atom ...
./qs_vxc_atom.F:   SUBROUTINE gaVxcgb_noGC(vxc_h, vxc_s, qs_kind, rho_atom, nspins)
./qs_vxc_atom.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_hh, int_ss
./qs_vxc_atom.F:      CALL get_rho_atom(rho_atom=rho_atom, ga_Vlocal_gb_h=int_hh, ga_Vlocal_gb_s=int_ss)
./qs_vxc_atom.F:!> \param rho_atom ...
./qs_vxc_atom.F:   SUBROUTINE gaVxcgb_GC(vxc_h, vxc_s, vxg_h, vxg_s, qs_kind, rho_atom, &
./qs_vxc_atom.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_hh, int_ss
./qs_vxc_atom.F:      CALL get_rho_atom(rho_atom=rho_atom, ga_Vlocal_gb_h=int_hh, ga_Vlocal_gb_s=int_ss)
./qs_vxc_atom.F:!> \param rho_atom ...
./qs_vxc_atom.F:   SUBROUTINE dgaVtaudgb(vtau_h, vtau_s, qs_kind, rho_atom, nspins)
./qs_vxc_atom.F:      TYPE(rho_atom_type), POINTER                       :: rho_atom
./qs_vxc_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_hh, int_ss
./qs_vxc_atom.F:      CALL get_rho_atom(rho_atom=rho_atom, ga_Vlocal_gb_h=int_hh, ga_Vlocal_gb_s=int_ss)
./mp2.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./mp2.F:                                              qs_rho_type
./mp2.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2.F:                      rho=rho, &
./mp2.F:                                   qs_env, rho, para_env, &
./mp2.F:                                   qs_env, rho, para_env, &
./mp2.F:                                   qs_env, rho, para_env, &
./mp2.F:                                   qs_env, rho, para_env, &
./mp2.F:                                        kind_of, qs_env, rho, para_env, &
./mp2.F:                                        kind_of, qs_env, rho, para_env, &
./mp2.F:!> \param rho ...
./mp2.F:                                qs_env, rho, para_env, &
./mp2.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2.F:            CALL mp2_canonical_direct_single_batch(Emp2, Emp2_Cou, Emp2_ex, mp2_env, qs_env, rho, para_env_sub, &
./mp2.F:            CALL mp2_canonical_direct_single_batch(Emp2, Emp2_Cou, Emp2_ex, mp2_env, qs_env, rho, para_env_sub, &
./mp2.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_ks_aux_fit, rho_ao
./mp2.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_ks_2d, rho_ao_2d
./mp2.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2.F:      NULLIFY (hfx_sections, input, para_env, matrix_ks, matrix_ks_aux_fit, rho, rho_ao)
./mp2.F:      ! if ADMM for exchange energy, get rho_aux_fit and matrix_ks_aux_fit
./mp2.F:                         rho_aux_fit=rho, &
./mp2.F:                         rho=rho, &
./mp2.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./mp2.F:            ns = SIZE(rho_ao)
./mp2.F:            rho_ao_2d(1:ns, 1:1) => rho_ao(1:ns)
./mp2.F:            CALL integrate_four_center(qs_env, matrix_ks_2d, eh1, rho_ao_2d, hfx_sections, &
./mp2.F:                                                            matrix_sigma_x_minus_vxc, rho_ao
./mp2.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_ks_2d, rho_ao_2d
./mp2.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2.F:      NULLIFY (admm_env, matrix_ks, matrix_ks_aux_fit, rho_ao, matrix_sigma_x_minus_vxc, input, &
./mp2.F:               xc_section, xc_section_admm_aux, xc_section_admm_prim, hfx_sections, rho, &
./mp2.F:      ! In case we do admm for RPA/GW, get the aux. density matrix rho_aux_fit, otherwise
./mp2.F:      ! just the normal density matrix rho
./mp2.F:                         rho_aux_fit=rho, &
./mp2.F:                         rho=rho, &
./mp2.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./mp2.F:            ns = SIZE(rho_ao)
./mp2.F:            rho_ao_2d(1:ns, 1:1) => rho_ao(1:ns)
./mp2.F:            CALL integrate_four_center(qs_env, matrix_ks_2d, eh1, rho_ao_2d, hfx_sections, &
./rt_propagation_types.F:   TYPE rtp_rho_type
./rt_propagation_types.F:   END TYPE rtp_rho_type
./rt_propagation_types.F:      TYPE(dbcsr_p_type), POINTER, DIMENSION(:, :)               :: rho_history
./rt_propagation_types.F:      TYPE(rtp_rho_type), POINTER                  :: rho
./rt_propagation_types.F:      NULLIFY (rtp%mos, rtp%rho)
./rt_propagation_types.F:         ALLOCATE (rtp%rho)
./rt_propagation_types.F:         NULLIFY (rtp%rho%old)
./rt_propagation_types.F:         CALL dbcsr_allocate_matrix_set(rtp%rho%old, 2*nspin)
./rt_propagation_types.F:         NULLIFY (rtp%rho%next)
./rt_propagation_types.F:         CALL dbcsr_allocate_matrix_set(rtp%rho%next, 2*nspin)
./rt_propagation_types.F:         NULLIFY (rtp%rho%new)
./rt_propagation_types.F:         CALL dbcsr_allocate_matrix_set(rtp%rho%new, 2*nspin)
./rt_propagation_types.F:            CALL dbcsr_init_p(rtp%rho%old(i)%matrix)
./rt_propagation_types.F:            CALL dbcsr_create(rtp%rho%old(i)%matrix, template=template, matrix_type="N")
./rt_propagation_types.F:            CALL dbcsr_init_p(rtp%rho%next(i)%matrix)
./rt_propagation_types.F:            CALL dbcsr_create(rtp%rho%next(i)%matrix, template=template, matrix_type="N")
./rt_propagation_types.F:            CALL dbcsr_init_p(rtp%rho%new(i)%matrix)
./rt_propagation_types.F:            CALL dbcsr_create(rtp%rho%new(i)%matrix, template=template, matrix_type="N")
./rt_propagation_types.F:!> \param rho_old ...
./rt_propagation_types.F:!> \param rho_next ...
./rt_propagation_types.F:!> \param rho_new ...
./rt_propagation_types.F:   SUBROUTINE get_rtp(rtp, exp_H_old, exp_H_new, H_last_iter, rho_old, rho_next, rho_new, mos, mos_new, mos_old, mos_next, &
./rt_propagation_types.F:                                                            rho_old, rho_next, rho_new
./rt_propagation_types.F:      IF (PRESENT(rho_old)) rho_old => rtp%rho%old
./rt_propagation_types.F:      IF (PRESENT(rho_next)) rho_next => rtp%rho%next
./rt_propagation_types.F:      IF (PRESENT(rho_new)) rho_new => rtp%rho%new
./rt_propagation_types.F:      IF (ASSOCIATED(rtp%rho)) THEN
./rt_propagation_types.F:         IF (ASSOCIATED(rtp%rho%old)) &
./rt_propagation_types.F:            CALL dbcsr_deallocate_matrix_set(rtp%rho%old)
./rt_propagation_types.F:         IF (ASSOCIATED(rtp%rho%next)) &
./rt_propagation_types.F:            CALL dbcsr_deallocate_matrix_set(rtp%rho%next)
./rt_propagation_types.F:         IF (ASSOCIATED(rtp%rho%new)) &
./rt_propagation_types.F:            CALL dbcsr_deallocate_matrix_set(rtp%rho%new)
./rt_propagation_types.F:         DEALLOCATE (rtp%rho)
./rt_propagation_types.F:      NULLIFY (history%rho_history, history%mo_history, history%s_history)
./rt_propagation_types.F:            nmat = SIZE(rtp%rho%new)
./rt_propagation_types.F:            CALL dbcsr_allocate_matrix_set(history%rho_history, nmat, aspc_order)
./rt_propagation_types.F:                  CALL dbcsr_init_p(history%rho_history(i, j)%matrix)
./rt_propagation_types.F:                  CALL dbcsr_create(history%rho_history(i, j)%matrix, &
./rt_propagation_types.F:                                    name="rho_hist"//TRIM(ADJUSTL(cp_to_string(i))), &
./rt_propagation_types.F:                                    template=rtp%rho%new(1)%matrix)
./rt_propagation_types.F:      IF (ASSOCIATED(rtp%history%rho_history)) THEN
./rt_propagation_types.F:         CALL dbcsr_deallocate_matrix_set(rtp%history%rho_history)
./qs_scf.F:!>      - nrebuild_rho and nrebuild_gvg unified (12.04.02,MK)
./qs_scf.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_scf.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf.F:                                              qs_rho_type
./qs_scf.F:                                              qs_scf_rho_update,&
./qs_scf.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_scf.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf.F:      NULLIFY (dft_control, rho, energy, &
./qs_scf.F:               scf_section, para_env, results, kpoints, pw_env, rho_ao_kp)
./qs_scf.F:                      rho=rho, &
./qs_scf.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_scf.F:            CALL qs_scf_density_mixing(scf_env, rho, para_env, diis_step)
./qs_scf.F:               CALL write_kpoints_restart(rho_ao_kp, kpoints, scf_env, dft_section, particle_set, qs_kind_set)
./qs_scf.F:               DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_scf.F:                     CALL dbcsr_get_info(rho_ao_kp(ispin, ic)%matrix, name=name) ! keep the name
./qs_scf.F:                     CALL dbcsr_copy(rho_ao_kp(ispin, ic)%matrix, scf_env%p_mix_new(ispin, ic)%matrix, name=name)
./qs_scf.F:            CALL qs_scf_rho_update(rho, qs_env, scf_env, ks_env, &
./qs_scf.F:                                   mix_rho=scf_env%mixing_method >= gspace_mixing_nr)
./qs_scf.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, rho_ao
./qs_scf.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf.F:      NULLIFY (scf_env, ks_env, energy, rho, matrix_s, rho_ao, cdft_control, logger, &
./qs_scf.F:               CALL get_qs_env(qs_env, rho=rho)
./qs_scf.F:               CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_scf.F:                  CALL dbcsr_copy(cdft_control%matrix_p(ispin)%matrix, rho_ao(ispin)%matrix, &
./qs_scf.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_scf.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf.F:      NULLIFY (energy, gradient, p_rmpv, rho_ao_kp, mos, rho, mos_stashed, &
./qs_scf.F:                      scf_control=scf_control, mos=mos, rho=rho, &
./qs_scf.F:            CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_scf.F:            p_rmpv => rho_ao_kp(:, 1)
./qs_scf.F:                  CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf.F:                  CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_scf.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_scf.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf.F:      NULLIFY (energy, gradient, p_rmpv, rho_ao_kp, mos, rho, &
./qs_scf.F:                      scf_control=scf_control, mos=mos, rho=rho, &
./qs_scf.F:         CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_scf.F:         p_rmpv => rho_ao_kp(:, 1)
./qs_scf.F:               CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf.F:               CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_scf.F:            CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf.F:            CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./atom_operators.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:)           :: pot, rho
./atom_operators.F:      ALLOCATE (rho(n), pot(n))
./atom_operators.F:      CALL slater_density(rho, pot, NINT(zcore), state, grid)
./atom_operators.F:      CALL coulomb_potential_numeric(pot, rho, grid)
./atom_operators.F:      CALL wigner_slater_functional(rho, pot)
./atom_operators.F:      DEALLOCATE (rho, pot)
./dm_ls_scf.F:                                              rho_mixing_ls_init
./dm_ls_scf.F:      IF (ls_scf_env%do_rho_mixing) THEN
./dm_ls_scf.F:         CALL rho_mixing_ls_init(qs_env, ls_scf_env)
./dm_ls_scf.F:               IF (ls_scf_env%do_rho_mixing) THEN
./qs_linres_methods.F:   USE qs_rho0_ggrid,                   ONLY: integrate_vhg0_rspace
./qs_linres_methods.F:   USE qs_rho_methods,                  ONLY: qs_rho_rebuild,&
./qs_linres_methods.F:                                              qs_rho_update_rho
./qs_linres_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_linres_methods.F:                                              qs_rho_type
./qs_linres_methods.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./qs_linres_methods.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./qs_linres_methods.F:                                              xc_rho_set_release,&
./qs_linres_methods.F:                                              xc_rho_set_type,&
./qs_linres_methods.F:                                              xc_rho_set_update
./qs_linres_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, matrix_s, rho1_ao
./qs_linres_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_linres_methods.F:      NULLIFY (dft_control, matrix_ks, matrix_s, linres_control, rho1_ao)
./qs_linres_methods.F:            CALL qs_rho_get(p_env%rho1, rho_ao=rho1_ao)
./qs_linres_methods.F:               CALL dbcsr_copy(rho1_ao(ispin)%matrix, p_env%p1(ispin)%matrix)
./qs_linres_methods.F:            CALL qs_rho_update_rho(rho_struct=p_env%rho1, local_rho_set=p_env%local_rho_set, &
./qs_linres_methods.F:            CALL get_qs_env(qs_env, rho=rho) ! that could be called before
./qs_linres_methods.F:            CALL qs_rho_update_rho(rho, qs_env=qs_env) ! that could be called before
./qs_linres_methods.F:            !CALL kpp1_calc_k_p_p1(p_env%kpp1_env, p_env, qs_env, p_env%kpp1, qs_env%rho, p_env%rho1, p_env%rho1_xc)
./qs_linres_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho1_ao, rho_ao
./qs_linres_methods.F:      TYPE(pw_p_type)                                    :: rho1_tot_gspace, v_hartree_gspace, &
./qs_linres_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho1_g, rho1_g_pw, rho1_r, rho1_r_pw, &
./qs_linres_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho1, rho1_xc
./qs_linres_methods.F:      TYPE(xc_rho_cflags_type)                           :: needs
./qs_linres_methods.F:      TYPE(xc_rho_set_type), POINTER                     :: rho1_set
./qs_linres_methods.F:               rho1_r, rho1_g_pw, tau_pw, v_xc, rho1_set, rho1_ao, rho_ao, &
./qs_linres_methods.F:               poisson_env, input, scf_section, rho, dft_control, logger, rho1_g)
./qs_linres_methods.F:      rho1 => p_env%rho1
./qs_linres_methods.F:      rho1_xc => p_env%rho1_xc
./qs_linres_methods.F:      CPASSERT(ASSOCIATED(rho1))
./qs_linres_methods.F:                      rho=rho, &
./qs_linres_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_linres_methods.F:         CPASSERT(ASSOCIATED(rho1_xc))
./qs_linres_methods.F:         CALL prepare_gapw_den(qs_env, p_env%local_rho_set, do_rho0=(.NOT. gapw_xc))
./qs_linres_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho1_tot_gspace%pw, &
./qs_linres_methods.F:      CALL qs_rho_get(rho1, rho_g=rho1_g)
./qs_linres_methods.F:      CALL pw_copy(rho1_g(1)%pw, rho1_tot_gspace%pw)
./qs_linres_methods.F:         CALL pw_axpy(rho1_g(ispin)%pw, rho1_tot_gspace%pw)
./qs_linres_methods.F:         CALL pw_axpy(p_env%local_rho_set%rho0_mpole%rho0_s_gs%pw, rho1_tot_gspace%pw)
./qs_linres_methods.F:      !   CALL print_densities(kpp1_env, rho1, rho1_tot_gspace, output_unit)
./qs_linres_methods.F:         CALL pw_poisson_solve(poisson_env, rho1_tot_gspace%pw, &
./qs_linres_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho1_tot_gspace%pw)
./qs_linres_methods.F:         CALL qs_rho_get(rho1_xc, rho_r=rho1_r)
./qs_linres_methods.F:         CALL qs_rho_get(rho1, rho_r=rho1_r)
./qs_linres_methods.F:         ALLOCATE (rho1_r_pw(2))
./qs_linres_methods.F:            NULLIFY (rho1_r_pw(ispin)%pw)
./qs_linres_methods.F:            CALL pw_create(rho1_r_pw(ispin)%pw, rho1_r(1)%pw%pw_grid, &
./qs_linres_methods.F:                           rho1_r(1)%pw%in_use, rho1_r(1)%pw%in_space)
./qs_linres_methods.F:            CALL pw_transfer(rho1_r(1)%pw, rho1_r_pw(ispin)%pw)
./qs_linres_methods.F:         ALLOCATE (rho1_r_pw(nspins))
./qs_linres_methods.F:            rho1_r_pw(ispin)%pw => rho1_r(ispin)%pw
./qs_linres_methods.F:            CALL pw_retain(rho1_r_pw(ispin)%pw)
./qs_linres_methods.F:      ! rho1 !
./qs_linres_methods.F:      bo = rho1_r(1)%pw%pw_grid%bounds_local
./qs_linres_methods.F:      CALL xc_rho_set_create(rho1_set, bo, &
./qs_linres_methods.F:                             rho_cutoff=section_get_rval(xc_section, "DENSITY_CUTOFF"), &
./qs_linres_methods.F:                             drho_cutoff=section_get_rval(xc_section, "GRADIENT_CUTOFF"), &
./qs_linres_methods.F:      CALL xc_rho_set_update(rho1_set, rho1_r_pw, rho1_g_pw, tau_pw, needs, &
./qs_linres_methods.F:      CALL xc_calc_2nd_deriv(v_xc, p_env%kpp1_env%deriv_set, p_env%kpp1_env%rho_set, &
./qs_linres_methods.F:                             rho1_set, auxbas_pw_pool, xc_section=xc_section, &
./qs_linres_methods.F:      CALL xc_rho_set_release(rho1_set)
./qs_linres_methods.F:      DO ispin = 1, SIZE(rho1_r_pw)
./qs_linres_methods.F:         CALL pw_release(rho1_r_pw(ispin)%pw)
./qs_linres_methods.F:      DEALLOCATE (rho1_r_pw)
./qs_linres_methods.F:               CALL qs_rho_get(rho1, rho_ao=rho1_ao)
./qs_linres_methods.F:                                       pmat=rho1_ao(ispin), &
./qs_linres_methods.F:                                          pmat=rho_ao(ispin), &
./qs_linres_methods.F:                                       pmat=rho_ao(ispin), &
./qs_linres_methods.F:                                       pmat=rho_ao(ispin), &
./qs_linres_methods.F:                                    pmat=rho_ao(ispin), &
./qs_linres_methods.F:         ns = SIZE(rho_ao)
./qs_linres_methods.F:         psmat(1:ns, 1:1) => rho_ao(1:ns)
./qs_linres_methods.F:         CALL qs_rho_rebuild(p_env%rho1, qs_env=qs_env)
./qs_linres_methods.F:            CALL qs_rho_rebuild(p_env%rho1_xc, qs_env=qs_env)
./qs_linres_methods.F:      IF (.NOT. ASSOCIATED(p_env%rho1)) THEN
./qs_linres_methods.F:         CALL qs_rho_rebuild(p_env%rho1, qs_env=qs_env)
./qs_linres_methods.F:            CALL qs_rho_rebuild(p_env%rho1_xc, qs_env=qs_env)
./qs_linres_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: my_rho_r, rho_r
./qs_linres_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_linres_methods.F:      NULLIFY (pw_env, auxbas_pw_pool, matrix_s, rho, rho_r, input)
./qs_linres_methods.F:                      matrix_s=matrix_s, input=input, rho=rho)
./qs_linres_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_linres_methods.F:      nspins = SIZE(rho_r)
./qs_linres_methods.F:            ALLOCATE (my_rho_r(2))
./qs_linres_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, my_rho_r(ispin)%pw, &
./qs_linres_methods.F:                                      use_data=rho_r(1)%pw%in_use, in_space=rho_r(1)%pw%in_space)
./qs_linres_methods.F:               my_rho_r(ispin)%pw%cr3d = 0.5_dp*rho_r(1)%pw%cr3d
./qs_linres_methods.F:            ALLOCATE (my_rho_r(SIZE(rho_r)))
./qs_linres_methods.F:            DO ispin = 1, SIZE(rho_r)
./qs_linres_methods.F:               my_rho_r(ispin)%pw => rho_r(ispin)%pw
./qs_linres_methods.F:               CALL pw_retain(my_rho_r(ispin)%pw)
./qs_linres_methods.F:         !ALLOCATE(my_rho_r(SIZE(rho_r)))
./qs_linres_methods.F:         !DO ispin=1,SIZE(rho_r)
./qs_linres_methods.F:         !   my_rho_r(ispin)%pw => rho_r(ispin)%pw
./qs_linres_methods.F:         !   CALL pw_retain(my_rho_r(ispin)%pw)
./qs_linres_methods.F:         CALL xc_prep_2nd_deriv(kpp1_env%deriv_set, kpp1_env%rho_set, &
./qs_linres_methods.F:                                my_rho_r, auxbas_pw_pool, &
./qs_linres_methods.F:         DO ispin = 1, SIZE(my_rho_r)
./qs_linres_methods.F:            CALL pw_release(my_rho_r(ispin)%pw)
./qs_linres_methods.F:         DEALLOCATE (my_rho_r)
./atom_fit.F:         CALL section_vals_val_get(powell_section, "ACCURACY", r_val=ostate%rhoend)
./atom_fit.F:         CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=ostate%rhobeg)
./atom_fit.F:         ostate%rhoend = 1.e-8_dp
./atom_fit.F:         ostate%rhobeg = 5.e-2_dp
./atom_fit.F:      CALL section_vals_val_get(powell_section, "ACCURACY", r_val=ostate%rhoend)
./atom_fit.F:      CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=ostate%rhobeg)
./atom_fit.F:      REAL(KIND=dp) :: afun, charge, de, deig, drho, dx, eig, fopt, oc, pchg, peig, pv, rcm, rcov, &
./atom_fit.F:      CALL section_vals_val_get(powell_section, "ACCURACY", r_val=ostate%rhoend)
./atom_fit.F:      CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=ostate%rhobeg)
./atom_fit.F:                                 drho = charge-atom%orbitals%refchg(k, l, 1)
./atom_fit.F:                                    l, k, oc, eig*evolt, pct, deig*evolt, pc1, drho, pc2
./atom_fit.F:                                 drho = charge-atom%orbitals%refchg(k, l, 1)
./atom_fit.F:                                    l, k, "alpha", oc, eig*evolt, pct, deig*evolt, pc1, drho, pc2
./atom_fit.F:                                 drho = charge-atom%orbitals%refchg(k, l, 2)
./atom_fit.F:                                    l, k, " beta", oc, eig*evolt, pct, deig*evolt, pc1, drho, pc2
./atom_fit.F:         WRITE (iunit, '(" POWELL| Start optimization",I4," of total",I4,T60,"rhobeg = ",F12.8)') &
./atom_fit.F:            nre, nreinit, ostate%rhobeg
./atom_fit.F:         ! dx < SQRT(ostate%rhoend)
./atom_fit.F:         IF ((dx*dx) < ostate%rhoend) EXIT
./atom_fit.F:         ostate%rhobeg = step_size_scaling*ostate%rhobeg
./atom_fit.F:                              drho = charge-atom%orbitals%refchg(k, l, 1)
./atom_fit.F:                                 l, k, oc, eig*evolt, pct, deig*evolt, pc1, drho, pc2
./atom_fit.F:                              drho = charge-atom%orbitals%refchg(k, l, 1)
./atom_fit.F:                                 l, k, "  alpha", oc, eig*evolt, pct, deig*evolt, pc1, drho, pc2
./atom_fit.F:                              drho = charge-atom%orbitals%refchg(k, l, 2)
./atom_fit.F:                                 l, k, "   beta", oc, eig*evolt, pct, deig*evolt, pc1, drho, pc2
./atom_fit.F:         CALL section_vals_val_get(powell_section, "ACCURACY", r_val=ostate%rhoend)
./atom_fit.F:         CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=ostate%rhobeg)
./atom_fit.F:         ostate%rhoend = 1.e-8_dp
./atom_fit.F:         ostate%rhobeg = 5.e-2_dp
./fist_neighbor_list_control.F:         IF (cell%orthorhombic) THEN
./qs_linres_module.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_linres_module.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_linres_module.F:                                              qs_rho_type
./qs_linres_module.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_ks, rho_ao
./qs_linres_module.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_linres_module.F:      NULLIFY (dft_control, linres_control, loc_section, rho, mos, matrix_ks, rho_ao)
./qs_linres_module.F:                      dft_control=dft_control, matrix_ks=matrix_ks, mos=mos, rho=rho)
./qs_linres_module.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_linres_module.F:            CALL calculate_density_matrix(mos(ispin)%mo_set, rho_ao(ispin)%matrix)
./qs_linres_module.F:! ** update qs_env%rho
./qs_linres_module.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./input_constants.F:                                               wfi_use_prev_rho_r_method_nr = 2, &
./input_constants.F:                                               rho_negf = 41, &
./input_constants.F:                                               rho_qtbm = 42, &
./qs_environment_types.F:   USE qs_local_rho_types,              ONLY: get_local_rho,&
./qs_environment_types.F:                                              local_rho_set_create,&
./qs_environment_types.F:                                              local_rho_set_release,&
./qs_environment_types.F:                                              local_rho_type,&
./qs_environment_types.F:                                              rhoz_type,&
./qs_environment_types.F:                                              set_local_rho
./qs_environment_types.F:   USE qs_rho0_types,                   ONLY: rho0_atom_type,&
./qs_environment_types.F:                                              rho0_mpole_type
./qs_environment_types.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_environment_types.F:   USE qs_rho_types,                    ONLY: qs_rho_p_type,&
./qs_environment_types.F:                                              qs_rho_release,&
./qs_environment_types.F:                                              qs_rho_retain,&
./qs_environment_types.F:                                              qs_rho_type
./qs_environment_types.F:!> \param local_rho_set contains the atomic, compensations and core densities
./qs_environment_types.F:      TYPE(qs_rho_type), POINTER                            :: rho_external
./qs_environment_types.F:      TYPE(local_rho_type), POINTER                         :: local_rho_set
./qs_environment_types.F:      TYPE(qs_rho_p_type), DIMENSION(:), POINTER            :: subsys_dens
./qs_environment_types.F:!> \param rho ...
./qs_environment_types.F:!> \param rho_aux_fit ...
./qs_environment_types.F:!> \param rho_aux_fit_buffer ...
./qs_environment_types.F:!> \param rho_buffer ...
./qs_environment_types.F:!> \param rho_xc ...
./qs_environment_types.F:!> \param rho_core ...
./qs_environment_types.F:!> \param rho_nlcc ...
./qs_environment_types.F:!> \param rho_nlcc_g ...
./qs_environment_types.F:!> \param rho_atom_set ...
./qs_environment_types.F:!> \param rho0_atom_set ...
./qs_environment_types.F:!> \param rho0_mpole ...
./qs_environment_types.F:!> \param rhoz_set ...
./qs_environment_types.F:!> \param rho0_s_rs ...
./qs_environment_types.F:!> \param rho0_s_gs ...
./qs_environment_types.F:!> \param rho_external ...
./qs_environment_types.F:!> \param rho_changed ...
./qs_environment_types.F:                         matrix_w_mp2, matrix_p_mp2, gamma_matrix, rho, rho_aux_fit, rho_aux_fit_buffer, &
./qs_environment_types.F:                         rho_buffer, rho_xc, pw_env, ewald_env, ewald_pw, active_space, &
./qs_environment_types.F:                         vppl, rho_core, rho_nlcc, rho_nlcc_g, ks_env, ks_qmmm_env, wf_history, scf_env, id_nr, local_particles, &
./qs_environment_types.F:                         molecule_set, subsys, cp_subsys, oce, rho_atom_set, &
./qs_environment_types.F:                         rho0_atom_set, rho0_mpole, rhoz_set, ecoul_1c, &
./qs_environment_types.F:                         rho0_s_rs, rho0_s_gs, do_kpoints, has_unit_metric, requires_mo_derivs, mo_derivs, &
./qs_environment_types.F:                         lri_env, lri_density, dispersion_env, vee, rho_external, external_vxc, mask, &
./qs_environment_types.F:                         s_mstruct_changed, rho_changed, potential_changed, forces_up_to_date, mscfg_env, almo_scf_env, &
./qs_environment_types.F:      TYPE(qs_rho_type), OPTIONAL, POINTER               :: rho, rho_aux_fit, rho_aux_fit_buffer, &
./qs_environment_types.F:                                                            rho_buffer, rho_xc
./qs_environment_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: vppl, rho_core, rho_nlcc, rho_nlcc_g
./qs_environment_types.F:      TYPE(rho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_environment_types.F:         POINTER                                         :: rho_atom_set
./qs_environment_types.F:      TYPE(rho0_atom_type), DIMENSION(:), OPTIONAL, &
./qs_environment_types.F:         POINTER                                         :: rho0_atom_set
./qs_environment_types.F:      TYPE(rho0_mpole_type), OPTIONAL, POINTER           :: rho0_mpole
./qs_environment_types.F:      TYPE(rhoz_type), DIMENSION(:), OPTIONAL, POINTER   :: rhoz_set
./qs_environment_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: rho0_s_rs, rho0_s_gs
./qs_environment_types.F:      TYPE(qs_rho_type), OPTIONAL, POINTER               :: rho_external
./qs_environment_types.F:      LOGICAL, OPTIONAL                                  :: s_mstruct_changed, rho_changed, &
./qs_environment_types.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_m
./qs_environment_types.F:      NULLIFY (rho0_m)
./qs_environment_types.F:      IF (PRESENT(rho_external)) rho_external => qs_env%rho_external
./qs_environment_types.F:      IF (PRESENT(rho_atom_set)) &
./qs_environment_types.F:         CALL get_local_rho(qs_env%local_rho_set, rho_atom_set=rho_atom_set)
./qs_environment_types.F:      IF (PRESENT(rho0_atom_set)) &
./qs_environment_types.F:         CALL get_local_rho(qs_env%local_rho_set, rho0_atom_set=rho0_atom_set)
./qs_environment_types.F:      IF (PRESENT(rho0_mpole)) &
./qs_environment_types.F:         CALL get_local_rho(qs_env%local_rho_set, rho0_mpole=rho0_mpole)
./qs_environment_types.F:      IF (PRESENT(rhoz_set)) &
./qs_environment_types.F:         CALL get_local_rho(qs_env%local_rho_set, rhoz_set=rhoz_set)
./qs_environment_types.F:      IF (PRESENT(rho0_s_rs)) THEN
./qs_environment_types.F:         CALL get_local_rho(qs_env%local_rho_set, rho0_mpole=rho0_m)
./qs_environment_types.F:         IF (ASSOCIATED(rho0_m)) THEN
./qs_environment_types.F:            rho0_s_rs => rho0_m%rho0_s_rs
./qs_environment_types.F:      IF (PRESENT(rho0_s_gs)) THEN
./qs_environment_types.F:         CALL get_local_rho(qs_env%local_rho_set, rho0_mpole=rho0_m)
./qs_environment_types.F:         IF (ASSOCIATED(rho0_m)) THEN
./qs_environment_types.F:            rho0_s_gs => rho0_m%rho0_s_gs
./qs_environment_types.F:                      rho_changed=rho_changed, &
./qs_environment_types.F:                      rho=rho, &
./qs_environment_types.F:                      rho_buffer=rho_buffer, &
./qs_environment_types.F:                      rho_xc=rho_xc, &
./qs_environment_types.F:                      rho_aux_fit=rho_aux_fit, &
./qs_environment_types.F:                      rho_aux_fit_buffer=rho_aux_fit_buffer, &
./qs_environment_types.F:                      rho_core=rho_core, &
./qs_environment_types.F:                      rho_nlcc=rho_nlcc, &
./qs_environment_types.F:                      rho_nlcc_g=rho_nlcc_g, &
./qs_environment_types.F:      NULLIFY (qs_env%rho_external)
./qs_environment_types.F:      NULLIFY (qs_env%local_rho_set)
./qs_environment_types.F:      CALL local_rho_set_create(qs_env%local_rho_set)
./qs_environment_types.F:!> \param rho_external ...
./qs_environment_types.F:!> \param rho_atom_set ...
./qs_environment_types.F:!> \param rho0_atom_set ...
./qs_environment_types.F:!> \param rho0_mpole ...
./qs_environment_types.F:!> \param rhoz_set ...
./qs_environment_types.F:!> \param rhoz_tot ...
./qs_environment_types.F:                         rho_external, external_vxc, mask, &
./qs_environment_types.F:                         input, oce, rho_atom_set, rho0_atom_set, rho0_mpole, run_rtp, rtp, &
./qs_environment_types.F:                         rhoz_set, rhoz_tot, ecoul_1c, has_unit_metric, requires_mo_derivs, mo_derivs, &
./qs_environment_types.F:      TYPE(qs_rho_type), OPTIONAL, POINTER               :: rho_external
./qs_environment_types.F:      TYPE(rho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_environment_types.F:         POINTER                                         :: rho_atom_set
./qs_environment_types.F:      TYPE(rho0_atom_type), DIMENSION(:), OPTIONAL, &
./qs_environment_types.F:         POINTER                                         :: rho0_atom_set
./qs_environment_types.F:      TYPE(rho0_mpole_type), OPTIONAL, POINTER           :: rho0_mpole
./qs_environment_types.F:      TYPE(rhoz_type), DIMENSION(:), OPTIONAL, POINTER   :: rhoz_set
./qs_environment_types.F:      REAL(dp), OPTIONAL                                 :: rhoz_tot
./qs_environment_types.F:      IF (PRESENT(rho_external)) THEN ! accepts also null pointers !
./qs_environment_types.F:         IF (ASSOCIATED(rho_external)) CALL qs_rho_retain(rho_external)
./qs_environment_types.F:         CALL qs_rho_release(qs_env%rho_external)
./qs_environment_types.F:         qs_env%rho_external => rho_external
./qs_environment_types.F:      IF (PRESENT(rho_atom_set)) THEN
./qs_environment_types.F:         CALL set_local_rho(qs_env%local_rho_set, rho_atom_set=rho_atom_set)
./qs_environment_types.F:      IF (PRESENT(rho0_atom_set)) THEN
./qs_environment_types.F:         CALL set_local_rho(qs_env%local_rho_set, rho0_atom_set=rho0_atom_set)
./qs_environment_types.F:      IF (PRESENT(rho0_mpole)) THEN
./qs_environment_types.F:         CALL set_local_rho(qs_env%local_rho_set, rho0_mpole=rho0_mpole)
./qs_environment_types.F:      IF (PRESENT(rhoz_set)) THEN
./qs_environment_types.F:         CALL set_local_rho(qs_env%local_rho_set, rhoz_set=rhoz_set)
./qs_environment_types.F:      IF (PRESENT(rhoz_tot)) qs_env%local_rho_set%rhoz_tot = rhoz_tot
./qs_environment_types.F:            IF (ASSOCIATED(qs_env%local_rho_set)) THEN
./qs_environment_types.F:               CALL local_rho_set_release(qs_env%local_rho_set)
./qs_environment_types.F:            IF (ASSOCIATED(qs_env%rho_external)) THEN
./qs_environment_types.F:               CALL qs_rho_release(qs_env%rho_external)
./qs_external_density.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_external_density.F:                                              qs_rho_type
./qs_external_density.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r_ext
./qs_external_density.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_ext_g, rho_ext_r
./qs_external_density.F:      TYPE(qs_rho_type), POINTER                         :: rho_external
./qs_external_density.F:      TYPE(realspace_grid_p_type), DIMENSION(:), POINTER :: rs_rho_ext
./qs_external_density.F:      NULLIFY (cell, rs_rho_ext, input, ext_den_section, rs_descs, dft_control)
./qs_external_density.F:      NULLIFY (rho_ext_r, rho_ext_g, tot_rho_r_ext)
./qs_external_density.F:                      rho_external=rho_external, &
./qs_external_density.F:         CALL qs_rho_get(rho_external, &
./qs_external_density.F:                         rho_r=rho_ext_r, &
./qs_external_density.F:                         rho_g=rho_ext_g, &
./qs_external_density.F:                         tot_rho_r=tot_rho_r_ext)
./qs_external_density.F:         ALLOCATE (rs_rho_ext(gridlevel_info%ngrid_levels))
./qs_external_density.F:            CALL rs_grid_create(rs_rho_ext(igrid_level)%rs_grid, &
./qs_external_density.F:            CALL rs_grid_zero(rs_rho_ext(igrid_level)%rs_grid)
./qs_external_density.F:         gid = rho_ext_r(1)%pw%pw_grid%para%group
./qs_external_density.F:         my_rank = rho_ext_r(1)%pw%pw_grid%para%my_pos
./qs_external_density.F:         num_pe = rho_ext_r(1)%pw%pw_grid%para%group_size
./qs_external_density.F:            npoints_local = rho_ext_r(1)%pw%pw_grid%npts_local
./qs_external_density.F:            lbounds_local = rho_ext_r(1)%pw%pw_grid%bounds_local(1, :)
./qs_external_density.F:            ubounds_local = rho_ext_r(1)%pw%pw_grid%bounds_local(2, :)
./qs_external_density.F:                     rs_rho_ext(igrid_level)%rs_grid%r(i, j, lbounds(3):ubounds(3)) = buffer(lbounds(3):ubounds(3))
./qs_external_density.F:         CALL density_rs2pw(pw_env, rs_rho_ext, rho=rho_ext_r(1), rho_gspace=rho_ext_g(1))
./qs_external_density.F:         tot_rho_r_ext(1) = pw_integrate_function(rho_ext_r(1)%pw, isign=1)
./qs_external_density.F:               tot_rho_r_ext(1)
./qs_external_density.F:         DEALLOCATE (buffer, rs_rho_ext)
./qs_force_types.F:                                                 rho_core, &
./qs_force_types.F:                                                 rho_elec, &
./qs_force_types.F:                                                 rho_lri_elec, &
./qs_force_types.F:         ALLOCATE (qs_force(ikind)%rho_core(3, n))
./qs_force_types.F:         ALLOCATE (qs_force(ikind)%rho_elec(3, n))
./qs_force_types.F:         ALLOCATE (qs_force(ikind)%rho_lri_elec(3, n))
./qs_force_types.F:         IF (ASSOCIATED(qs_force(ikind)%rho_core)) THEN
./qs_force_types.F:            DEALLOCATE (qs_force(ikind)%rho_core)
./qs_force_types.F:         IF (ASSOCIATED(qs_force(ikind)%rho_elec)) THEN
./qs_force_types.F:            DEALLOCATE (qs_force(ikind)%rho_elec)
./qs_force_types.F:         IF (ASSOCIATED(qs_force(ikind)%rho_lri_elec)) THEN
./qs_force_types.F:            DEALLOCATE (qs_force(ikind)%rho_lri_elec)
./qs_force_types.F:         qs_force(ikind)%rho_core(:, :) = 0.0_dp
./qs_force_types.F:         qs_force(ikind)%rho_elec(:, :) = 0.0_dp
./qs_force_types.F:         qs_force(ikind)%rho_lri_elec(:, :) = 0.0_dp
./qs_force_types.F:         CALL mp_sum(qs_force(ikind)%rho_core, para_env%group)
./qs_force_types.F:         CALL mp_sum(qs_force(ikind)%rho_elec, para_env%group)
./qs_force_types.F:         CALL mp_sum(qs_force(ikind)%rho_lri_elec, para_env%group)
./qs_force_types.F:                                       qs_force(ikind)%rho_core(:, :)+ &
./qs_force_types.F:                                       qs_force(ikind)%rho_elec(:, :)+ &
./qs_force_types.F:                                       qs_force(ikind)%rho_lri_elec(:, :)+ &
./qs_linres_nmr_epr_common_utils.F:!> \param rho_gspace ...
./qs_linres_nmr_epr_common_utils.F:!> \param funcG_times_rho ...
./qs_linres_nmr_epr_common_utils.F:   SUBROUTINE mult_G_ov_G2_grid(cell, pw_pool, rho_gspace, funcG_times_rho, idir, my_chi)
./qs_linres_nmr_epr_common_utils.F:      TYPE(pw_p_type), POINTER                           :: rho_gspace
./qs_linres_nmr_epr_common_utils.F:      TYPE(pw_p_type)                                    :: funcG_times_rho
./qs_linres_nmr_epr_common_utils.F:      TYPE(pw_type), POINTER                             :: frho, influence_fn
./qs_linres_nmr_epr_common_utils.F:      frho => funcG_times_rho%pw
./qs_linres_nmr_epr_common_utils.F:      CALL pw_transfer(rho_gspace%pw, frho)
./qs_linres_nmr_epr_common_utils.F:      frho%cc(1:ng) = frho%cc(1:ng)*influence_fn%cc(1:ng)
./qs_linres_nmr_epr_common_utils.F:      IF (grid%have_g0) frho%cc(1) = my_chi
./input_cp2k_mp2.F:                                        "systems with orthorhombic cells).", &
./atom_output.F:                                              get_rho0
./atom_output.F:      REAL(KIND=dp)                                      :: drho
./atom_output.F:      CALL get_rho0(atom, drho)
./atom_output.F:      WRITE (iw, '(/,A,T66,F15.6)') " Total Electron Density at R=0: ", drho
./atom_output.F:            "Iteration", "Convergence", "rho diff.", "rho*v_xc[au]", "Energy[au]"
./atom_output.F:      WRITE (iw, '(T3,I9,T15,G13.6,T30,G13.6,T46,G13.6,T61,F20.12)') iter, deps, atom%rho_diff_integral, &
./input/input_section_types.F:! code a lot simpler. See xc_rho_set_and_dset_create in xc.F as
./fist_nonbond_env_types.F:      REAL(KIND=dp) :: f_embed, rho
./negf_methods.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./negf_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./negf_methods.F:                                              qs_rho_type
./negf_methods.F:      TYPE(cp_fm_type), POINTER                          :: matrix_s_fm, rho_ao_fm, work_fm
./negf_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_s_kp, rho_ao_qs_kp
./negf_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./negf_methods.F:                         rho=rho_struct, subsys=subsys)
./negf_methods.F:         CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_qs_kp)
./negf_methods.F:            NULLIFY (matrix_s_fm, rho_ao_fm, fm_struct)
./negf_methods.F:            CALL cp_fm_create(rho_ao_fm, fm_struct)
./negf_methods.F:            CALL cp_fm_create(rho_ao_fm, fm_struct)
./negf_methods.F:                  CALL dbcsr_trace(rho_ao_qs_kp(ispin, image)%matrix, matrix_s_kp(1, image)%matrix, trace)
./negf_methods.F:                  CALL dbcsr_trace(rho_ao_qs_kp(ispin, image)%matrix, matrix_s_kp(1, image)%matrix, trace)
./negf_methods.F:            CALL cp_fm_trace(negf_env%contacts(contact_id)%rho_00(ispin)%matrix, &
./negf_methods.F:               CALL negf_init_rho_equiv_residuals(rho_ao_fm=rho_ao_fm, &
./negf_methods.F:               CALL negf_add_rho_equiv_low(rho_ao_fm=rho_ao_fm, &
./negf_methods.F:               CALL negf_add_rho_equiv_low(rho_ao_fm=rho_ao_fm, &
./negf_methods.F:               CALL cp_fm_trace(rho_ao_fm, matrix_s_fm, trace)
./negf_methods.F:         CALL cp_fm_release(rho_ao_fm)
./negf_methods.F:      TYPE(cp_fm_p_type), ALLOCATABLE, DIMENSION(:)      :: rho_ao_fm
./negf_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_qs_kp
./negf_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./negf_methods.F:                      para_env=para_env, rho=rho_struct, subsys=subsys)
./negf_methods.F:      CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_qs_kp)
./negf_methods.F:      ALLOCATE (rho_ao_fm(nspins))
./negf_methods.F:         NULLIFY (rho_ao_fm(ispin)%matrix)
./negf_methods.F:         CALL cp_fm_create(rho_ao_fm(ispin)%matrix, fm_struct)
./negf_methods.F:         CALL negf_copy_sym_dbcsr_to_fm_submat(matrix=rho_ao_qs_kp(ispin, 1)%matrix, &
./negf_methods.F:                                               fm=rho_ao_fm(ispin)%matrix, &
./negf_methods.F:         CALL cp_fm_trace(rho_ao_fm(ispin)%matrix, matrix_s_fm, trace)
./negf_methods.F:            CALL negf_init_rho_equiv_residuals(rho_ao_fm=rho_ao_fm(ispin)%matrix, &
./negf_methods.F:            CALL negf_add_rho_equiv_low(rho_ao_fm=rho_ao_fm(ispin)%matrix, &
./negf_methods.F:            CALL negf_add_rho_equiv_low(rho_ao_fm=rho_ao_fm(ispin)%matrix, &
./negf_methods.F:               CALL cp_fm_scale_and_add(1.0_dp, rho_ao_fm(1)%matrix, 1.0_dp, rho_ao_fm(ispin)%matrix)
./negf_methods.F:            CALL cp_fm_scale(2.0_dp, rho_ao_fm(1)%matrix)
./negf_methods.F:         CALL cp_fm_trace(rho_ao_fm(1)%matrix, matrix_s_fm, nelectrons_guess)
./negf_methods.F:         CALL cp_fm_release(rho_ao_fm(ispin)%matrix)
./negf_methods.F:      DEALLOCATE (rho_ao_fm)
./negf_methods.F:      TYPE(cp_fm_p_type), ALLOCATABLE, DIMENSION(:)      :: rho_ao_delta_fm, rho_ao_new_fm
./negf_methods.F:                                                            rho_ao_initial_kp, rho_ao_new_kp, &
./negf_methods.F:                                                            rho_ao_qs_kp
./negf_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./negf_methods.F:                      matrix_ks_kp=matrix_ks_qs_kp, para_env=para_env, rho=rho_struct, subsys=subsys)
./negf_methods.F:      CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_qs_kp)
./negf_methods.F:      NULLIFY (matrix_ks_initial_kp, rho_ao_initial_kp, rho_ao_new_kp)
./negf_methods.F:      CALL dbcsr_allocate_matrix_set(rho_ao_initial_kp, nspins, nimages)
./negf_methods.F:      CALL dbcsr_allocate_matrix_set(rho_ao_new_kp, nspins, nimages)
./negf_methods.F:            CALL dbcsr_init_p(rho_ao_initial_kp(ispin, image)%matrix)
./negf_methods.F:            CALL dbcsr_copy(matrix_b=rho_ao_initial_kp(ispin, image)%matrix, matrix_a=rho_ao_qs_kp(ispin, image)%matrix)
./negf_methods.F:            CALL dbcsr_init_p(rho_ao_new_kp(ispin, image)%matrix)
./negf_methods.F:            CALL dbcsr_copy(matrix_b=rho_ao_new_kp(ispin, image)%matrix, matrix_a=rho_ao_qs_kp(ispin, image)%matrix)
./negf_methods.F:      ALLOCATE (rho_ao_delta_fm(nspins), rho_ao_new_fm(nspins))
./negf_methods.F:         NULLIFY (rho_ao_delta_fm(ispin)%matrix, rho_ao_new_fm(ispin)%matrix)
./negf_methods.F:         CALL cp_fm_create(rho_ao_delta_fm(ispin)%matrix, fm_struct)
./negf_methods.F:         CALL cp_fm_create(rho_ao_new_fm(ispin)%matrix, fm_struct)
./negf_methods.F:         CALL negf_copy_sym_dbcsr_to_fm_submat(matrix=rho_ao_qs_kp(ispin, 1)%matrix, &
./negf_methods.F:                                               fm=rho_ao_delta_fm(ispin)%matrix, &
./negf_methods.F:         CALL cp_fm_trace(rho_ao_delta_fm(ispin)%matrix, matrix_s_fm, trace)
./negf_methods.F:         CALL mixing_init(negf_env%mixing_method, rho_struct, negf_env%mixing_storage, para_env)
./negf_methods.F:                  CALL negf_init_rho_equiv_residuals(rho_ao_fm=rho_ao_new_fm(ispin)%matrix, &
./negf_methods.F:                  CALL negf_add_rho_equiv_low(rho_ao_fm=rho_ao_new_fm(ispin)%matrix, &
./negf_methods.F:                  CALL negf_add_rho_equiv_low(rho_ao_fm=rho_ao_new_fm(ispin)%matrix, &
./negf_methods.F:                     CALL negf_add_rho_nonequiv(rho_ao_fm=rho_ao_new_fm(ispin)%matrix, &
./negf_methods.F:               IF (nspins == 1) CALL cp_fm_scale(2.0_dp, rho_ao_new_fm(1)%matrix)
./negf_methods.F:                  CALL cp_fm_trace(rho_ao_new_fm(ispin)%matrix, matrix_s_fm, trace)
./negf_methods.F:                  ! rho_ao_delta_fm contains the original (non-mixed) density matrix from the previous iteration
./negf_methods.F:                  CALL cp_fm_scale_and_add(1.0_dp, rho_ao_delta_fm(ispin)%matrix, -1.0_dp, rho_ao_new_fm(ispin)%matrix)
./negf_methods.F:                  CALL cp_fm_trace(rho_ao_delta_fm(ispin)%matrix, matrix_s_fm, trace)
./negf_methods.F:                  ! rho_ao_new_fm -> rho_ao_delta_fm
./negf_methods.F:                  CALL cp_fm_to_fm(rho_ao_new_fm(ispin)%matrix, rho_ao_delta_fm(ispin)%matrix)
./negf_methods.F:                        CALL dbcsr_copy(matrix_b=rho_ao_new_kp(ispin, image)%matrix, &
./negf_methods.F:                                        matrix_a=rho_ao_initial_kp(ispin, image)%matrix)
./negf_methods.F:                     CALL negf_copy_fm_submat_to_dbcsr(fm=rho_ao_new_fm(ispin)%matrix, &
./negf_methods.F:                                                       matrix=rho_ao_new_kp(ispin, 1)%matrix, &
./negf_methods.F:                  CALL scf_env_density_mixing(rho_ao_new_kp, negf_env%mixing_storage, rho_ao_qs_kp, &
./negf_methods.F:                        CALL dbcsr_copy(rho_ao_qs_kp(ispin, image)%matrix, rho_ao_new_kp(ispin, image)%matrix)
./negf_methods.F:                  ! store the updated density matrix directly into the variable 'rho_ao_qs_kp'
./negf_methods.F:                  ! (which is qs_env%rho%rho_ao_kp); density mixing will be done on an inverse-space grid
./negf_methods.F:                        CALL dbcsr_copy(matrix_b=rho_ao_qs_kp(ispin, image)%matrix, &
./negf_methods.F:                                        matrix_a=rho_ao_initial_kp(ispin, image)%matrix)
./negf_methods.F:                     CALL negf_copy_fm_submat_to_dbcsr(fm=rho_ao_new_fm(ispin)%matrix, &
./negf_methods.F:                                                       matrix=rho_ao_qs_kp(ispin, 1)%matrix, &
./negf_methods.F:               CALL qs_rho_update_rho(rho_struct, qs_env=qs_env)
./negf_methods.F:                                     rho_struct, para_env, iter_count)
./negf_methods.F:         CALL cp_fm_release(rho_ao_new_fm(ispin)%matrix)
./negf_methods.F:         CALL cp_fm_release(rho_ao_delta_fm(ispin)%matrix)
./negf_methods.F:      DEALLOCATE (rho_ao_delta_fm, rho_ao_new_fm)
./negf_methods.F:            CALL dbcsr_copy(matrix_b=rho_ao_qs_kp(ispin, image)%matrix, matrix_a=rho_ao_initial_kp(ispin, image)%matrix)
./negf_methods.F:            CALL dbcsr_deallocate_matrix(rho_ao_initial_kp(ispin, image)%matrix)
./negf_methods.F:            CALL dbcsr_deallocate_matrix(rho_ao_new_kp(ispin, image)%matrix)
./negf_methods.F:      DEALLOCATE (matrix_ks_initial_kp, rho_ao_new_kp, rho_ao_initial_kp)
./negf_methods.F:!> \param rho_ao_fm     density matrix (initialised on exit)
./negf_methods.F:   SUBROUTINE negf_init_rho_equiv_residuals(rho_ao_fm, v_shift, ignore_bias, negf_env, &
./negf_methods.F:      TYPE(cp_fm_type), POINTER                          :: rho_ao_fm
./negf_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'negf_init_rho_equiv_residuals', &
./negf_methods.F:         CALL cp_fm_get_info(rho_ao_fm, para_env=para_env, matrix_struct=fm_struct)
./negf_methods.F:         CALL cp_cfm_to_fm(g_ret_s(1)%matrix, mtargetr=rho_ao_fm)
./negf_methods.F:         CALL cp_fm_scale(2.0_dp*temperature, rho_ao_fm)
./negf_methods.F:   END SUBROUTINE negf_init_rho_equiv_residuals
./negf_methods.F:!> \param rho_ao_fm       density matrix (initialised on exit)
./negf_methods.F:   SUBROUTINE negf_add_rho_equiv_low(rho_ao_fm, stats, v_shift, ignore_bias, negf_env, negf_control, sub_env, &
./negf_methods.F:      TYPE(cp_fm_type), POINTER                          :: rho_ao_fm
./negf_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'negf_add_rho_equiv_low', &
./negf_methods.F:      CALL cp_fm_get_info(rho_ao_fm, para_env=para_env, matrix_struct=fm_struct)
./negf_methods.F:      CALL cp_fm_scale_and_add(1.0_dp, rho_ao_fm, -1.0_dp/pi, integral_imag)
./negf_methods.F:   END SUBROUTINE negf_add_rho_equiv_low
./negf_methods.F:!> \param rho_ao_fm       density matrix (initialised on exit)
./negf_methods.F:   SUBROUTINE negf_add_rho_nonequiv(rho_ao_fm, stats, v_shift, negf_env, negf_control, sub_env, &
./negf_methods.F:      TYPE(cp_fm_type), POINTER                          :: rho_ao_fm
./negf_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'negf_add_rho_nonequiv', &
./negf_methods.F:            CALL cp_fm_get_info(rho_ao_fm, matrix_struct=fm_struct)
./negf_methods.F:            CALL cp_fm_scale_and_add(1.0_dp, rho_ao_fm, 0.5_dp/pi, integral_real)
./negf_methods.F:   END SUBROUTINE negf_add_rho_nonequiv
./qs_gapw_densities.F:   USE qs_local_rho_types,              ONLY: local_rho_type
./qs_gapw_densities.F:   USE qs_rho0_ggrid,                   ONLY: put_rho0_on_grid
./qs_gapw_densities.F:   USE qs_rho0_methods,                 ONLY: calculate_rho0_atom
./qs_gapw_densities.F:   USE qs_rho0_types,                   ONLY: rho0_atom_type,&
./qs_gapw_densities.F:                                              rho0_mpole_type
./qs_gapw_densities.F:   USE qs_rho_atom_methods,             ONLY: calculate_rho_atom
./qs_gapw_densities.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_gapw_densities.F:!> \param local_rho_set ...
./qs_gapw_densities.F:!> \param do_rho0 ...
./qs_gapw_densities.F:   SUBROUTINE prepare_gapw_den(qs_env, local_rho_set, do_rho0)
./qs_gapw_densities.F:      TYPE(local_rho_type), OPTIONAL, POINTER            :: local_rho_set
./qs_gapw_densities.F:      LOGICAL, INTENT(IN), OPTIONAL                      :: do_rho0
./qs_gapw_densities.F:      LOGICAL                                            :: my_do_rho0, paw_atom
./qs_gapw_densities.F:      REAL(dp)                                           :: rho0_h_tot, tot_rs_int
./qs_gapw_densities.F:      REAL(dp), DIMENSION(:), POINTER                    :: rho1_h_tot, rho1_s_tot
./qs_gapw_densities.F:      TYPE(rho0_atom_type), DIMENSION(:), POINTER        :: rho0_atom_set
./qs_gapw_densities.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_gapw_densities.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_gapw_densities.F:      NULLIFY (rho0_mpole)
./qs_gapw_densities.F:      NULLIFY (rho1_h_tot, rho1_s_tot)
./qs_gapw_densities.F:      NULLIFY (rho_atom_set)
./qs_gapw_densities.F:      NULLIFY (rho0_atom_set)
./qs_gapw_densities.F:      my_do_rho0 = .TRUE.
./qs_gapw_densities.F:      IF (PRESENT(do_rho0)) my_do_rho0 = do_rho0
./qs_gapw_densities.F:                      rho0_mpole=rho0_mpole, &
./qs_gapw_densities.F:                      rho_atom_set=rho_atom_set, &
./qs_gapw_densities.F:                      rho0_atom_set=rho0_atom_set)
./qs_gapw_densities.F:      IF (PRESENT(local_rho_set)) THEN
./qs_gapw_densities.F:         rho_atom_set => local_rho_set%rho_atom_set
./qs_gapw_densities.F:         IF (my_do_rho0) THEN
./qs_gapw_densities.F:            rho0_mpole => local_rho_set%rho0_mpole
./qs_gapw_densities.F:            rho0_atom_set => local_rho_set%rho0_atom_set
./qs_gapw_densities.F:      rho0_h_tot = 0.0_dp
./qs_gapw_densities.F:      ALLOCATE (rho1_h_tot(1:nspins), rho1_s_tot(1:nspins))
./qs_gapw_densities.F:      rho1_h_tot = 0.0_dp
./qs_gapw_densities.F:      rho1_s_tot = 0.0_dp
./qs_gapw_densities.F:         IF (paw_atom) WRITE(112,*) "Calculating rho1_h and rho1_s on radial grids for each atom"
./qs_gapw_densities.F:!     Calculate rho1_h and rho1_s on the radial grids centered on the atomic position
./qs_gapw_densities.F:            CALL calculate_rho_atom(para_env, rho_atom_set, qs_kind_set(ikind), &
./qs_gapw_densities.F:                                    atom_list, grid_atom, natom, nspins, rho1_h_tot, rho1_s_tot)
./qs_gapw_densities.F:         IF (my_do_rho0) WRITE(112,*) "Calculating rho0_h and rho0_s on radial grids for each atom"
./qs_gapw_densities.F:!     Calculate rho0_h and rho0_s on the radial grids centered on the atomic position
./qs_gapw_densities.F:         IF (my_do_rho0) &
./qs_gapw_densities.F:            CALL calculate_rho0_atom(gapw_control, rho_atom_set, rho0_atom_set, rho0_mpole, &
./qs_gapw_densities.F:                                     harmonics, rho0_h_tot)
./qs_gapw_densities.F:      CALL mp_sum(rho1_h_tot, para_env%group)
./qs_gapw_densities.F:      CALL mp_sum(rho1_s_tot, para_env%group)
./qs_gapw_densities.F:         qs_charges%total_rho1_hard(ispin) = -rho1_h_tot(ispin)
./qs_gapw_densities.F:         qs_charges%total_rho1_soft(ispin) = -rho1_s_tot(ispin)
./qs_gapw_densities.F:      IF (my_do_rho0) THEN
./qs_gapw_densities.F:         rho0_mpole%total_rho0_h = -rho0_h_tot
./qs_gapw_densities.F:!      Put the rho0_soft on the global grid
./qs_gapw_densities.F:         CALL put_rho0_on_grid(qs_env, rho0_mpole, tot_rs_int)
./qs_gapw_densities.F:         IF (ABS(rho0_h_tot) .GE. 1.0E-5_dp) THEN
./qs_gapw_densities.F:            IF (ABS(1.0_dp-ABS(tot_rs_int/rho0_h_tot)) .GT. 1.0E-3_dp) THEN
./qs_gapw_densities.F:                     "WARNING: rho0 calculated on the local grid is  :", -rho0_h_tot, &
./qs_gapw_densities.F:                     "         rho0 calculated on the global grid is :", tot_rs_int
./qs_gapw_densities.F:         qs_charges%total_rho0_soft_rspace = tot_rs_int
./qs_gapw_densities.F:         qs_charges%total_rho0_hard_lebedev = rho0_h_tot
./qs_gapw_densities.F:         qs_charges%total_rho0_hard_lebedev = 0.0_dp
./qs_gapw_densities.F:      DEALLOCATE (rho1_h_tot, rho1_s_tot)
./qs_ks_types.F:   USE qs_rho_types,                    ONLY: qs_rho_create,&
./qs_ks_types.F:                                              qs_rho_release,&
./qs_ks_types.F:                                              qs_rho_type
./qs_ks_types.F:!> \param rho_changed if the rho stored in the qs_env has changed
./qs_ks_types.F:!> \param rho the (old) density, in various representations (ao+grid)
./qs_ks_types.F:!> \param rho_xc the (old) soft density, used for the GAPW_XC method only
./qs_ks_types.F:!> \param rho_core a grid with the charges of the cores of the atoms in the
./qs_ks_types.F:!>        coefficients of the local atomic densities rho1_hard and rho1_soft
./qs_ks_types.F:!>      10.2002 introduced pools, uses updated rho as input,
./qs_ks_types.F:                                                               rho_changed = .TRUE., &
./qs_ks_types.F:      TYPE(qs_rho_type), POINTER                            :: rho => Null(), &
./qs_ks_types.F:                                                               rho_buffer => Null(), &
./qs_ks_types.F:                                                               rho_xc => Null(), &
./qs_ks_types.F:                                                               rho_aux_fit => Null(), &
./qs_ks_types.F:                                                               rho_aux_fit_buffer => Null()
./qs_ks_types.F:      TYPE(pw_p_type), POINTER                              :: rho_core => Null(), &
./qs_ks_types.F:                                                               rho_nlcc => Null(), &
./qs_ks_types.F:                                                               rho_nlcc_g => Null(), &
./qs_ks_types.F:      CALL qs_rho_create(ks_env%rho)
./qs_ks_types.F:      CALL qs_rho_create(ks_env%rho_aux_fit)
./qs_ks_types.F:      CALL qs_rho_create(ks_env%rho_aux_fit_buffer)
./qs_ks_types.F:      CALL qs_rho_create(ks_env%rho_xc)
./qs_ks_types.F:      CALL qs_rho_create(ks_env%rho_buffer)
./qs_ks_types.F:!> \param rho_changed ...
./qs_ks_types.F:!> \param rho ...
./qs_ks_types.F:!> \param rho_aux_fit ...
./qs_ks_types.F:!> \param rho_aux_fit_buffer ...
./qs_ks_types.F:!> \param rho_buffer ...
./qs_ks_types.F:!> \param rho_xc ...
./qs_ks_types.F:!> \param rho_core ...
./qs_ks_types.F:!> \param rho_nlcc ...
./qs_ks_types.F:!> \param rho_nlcc_g ...
./qs_ks_types.F:                         s_mstruct_changed, rho_changed, &
./qs_ks_types.F:                         rho, rho_aux_fit, rho_aux_fit_buffer, &
./qs_ks_types.F:                         rho_buffer, rho_xc, &
./qs_ks_types.F:                         vppl, rho_core, rho_nlcc, rho_nlcc_g, vee, &
./qs_ks_types.F:      LOGICAL, OPTIONAL                                  :: s_mstruct_changed, rho_changed, &
./qs_ks_types.F:      TYPE(qs_rho_type), OPTIONAL, POINTER               :: rho, rho_aux_fit, rho_aux_fit_buffer, &
./qs_ks_types.F:                                                            rho_buffer, rho_xc
./qs_ks_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: vppl, rho_core, rho_nlcc, rho_nlcc_g, vee
./qs_ks_types.F:      IF (PRESENT(rho_changed)) rho_changed = ks_env%rho_changed
./qs_ks_types.F:      IF (PRESENT(rho)) rho => ks_env%rho
./qs_ks_types.F:      IF (PRESENT(rho_aux_fit)) rho_aux_fit => ks_env%rho_aux_fit
./qs_ks_types.F:      IF (PRESENT(rho_aux_fit_buffer)) rho_aux_fit_buffer => ks_env%rho_aux_fit_buffer
./qs_ks_types.F:      IF (PRESENT(rho_buffer)) rho_buffer => ks_env%rho_buffer
./qs_ks_types.F:      IF (PRESENT(rho_xc)) rho_xc => ks_env%rho_xc
./qs_ks_types.F:      IF (PRESENT(rho_core)) rho_core => ks_env%rho_core
./qs_ks_types.F:      IF (PRESENT(rho_nlcc)) rho_nlcc => ks_env%rho_nlcc
./qs_ks_types.F:      IF (PRESENT(rho_nlcc_g)) rho_nlcc_g => ks_env%rho_nlcc_g
./qs_ks_types.F:!> \param rho_changed ...
./qs_ks_types.F:!> \param rho_core ...
./qs_ks_types.F:!> \param rho_nlcc ...
./qs_ks_types.F:!> \param rho_nlcc_g ...
./qs_ks_types.F:                         s_mstruct_changed, rho_changed, &
./qs_ks_types.F:                         vppl, rho_core, rho_nlcc, rho_nlcc_g, vee, &
./qs_ks_types.F:      LOGICAL, OPTIONAL                                  :: s_mstruct_changed, rho_changed, &
./qs_ks_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: vppl, rho_core, rho_nlcc, rho_nlcc_g, vee
./qs_ks_types.F:      IF (PRESENT(rho_changed)) ks_env%rho_changed = rho_changed
./qs_ks_types.F:      IF (ks_env%s_mstruct_changed .OR. ks_env%potential_changed .OR. ks_env%rho_changed) &
./qs_ks_types.F:      IF (PRESENT(rho_core)) ks_env%rho_core => rho_core
./qs_ks_types.F:      IF (PRESENT(rho_nlcc)) ks_env%rho_nlcc => rho_nlcc
./qs_ks_types.F:      IF (PRESENT(rho_nlcc_g)) ks_env%rho_nlcc_g => rho_nlcc_g
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho)) &
./qs_ks_types.F:               CALL qs_rho_release(ks_env%rho)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_buffer)) &
./qs_ks_types.F:               CALL qs_rho_release(ks_env%rho_buffer)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_xc)) &
./qs_ks_types.F:               CALL qs_rho_release(ks_env%rho_xc)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_aux_fit)) &
./qs_ks_types.F:               CALL qs_rho_release(ks_env%rho_aux_fit)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_aux_fit_buffer)) &
./qs_ks_types.F:               CALL qs_rho_release(ks_env%rho_aux_fit_buffer)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_nlcc_g)) THEN
./qs_ks_types.F:               CALL pw_release(ks_env%rho_nlcc_g%pw)
./qs_ks_types.F:               DEALLOCATE (ks_env%rho_nlcc_g)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_nlcc)) THEN
./qs_ks_types.F:               CALL pw_release(ks_env%rho_nlcc%pw)
./qs_ks_types.F:               DEALLOCATE (ks_env%rho_nlcc)
./qs_ks_types.F:            IF (ASSOCIATED(ks_env%rho_core)) THEN
./qs_ks_types.F:               CALL pw_release(ks_env%rho_core%pw)
./qs_ks_types.F:               DEALLOCATE (ks_env%rho_core)
./qs_ks_types.F:!> \param rho_changed if true it means that the density has changed
./qs_ks_types.F:   SUBROUTINE qs_ks_did_change(ks_env, s_mstruct_changed, rho_changed, &
./qs_ks_types.F:      LOGICAL, INTENT(in), OPTIONAL                      :: s_mstruct_changed, rho_changed, &
./qs_ks_types.F:      IF (PRESENT(rho_changed)) THEN
./qs_ks_types.F:         IF (rho_changed) ks_env%rho_changed = .TRUE.
./rtp_admm_methods.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./rtp_admm_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./rtp_admm_methods.F:                                              qs_rho_set,&
./rtp_admm_methods.F:                                              qs_rho_type
./rtp_admm_methods.F:   PUBLIC :: rtp_admm_calc_rho_aux, rtp_admm_merge_ks_matrix
./rtp_admm_methods.F:   SUBROUTINE rtp_admm_calc_rho_aux(qs_env)
./rtp_admm_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'rtp_admm_calc_rho_aux', &
./rtp_admm_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r_aux
./rtp_admm_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g_aux, rho_r_aux
./rtp_admm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux_fit
./rtp_admm_methods.F:               mos_aux_fit, para_env, matrix_s_aux_fit, matrix_s_aux_fit_vs_orb, rho, &
./rtp_admm_methods.F:               ks_env, dft_control, tot_rho_r_aux, rho_r_aux, rho_g_aux)
./rtp_admm_methods.F:                      rho=rho, &
./rtp_admm_methods.F:                      rho_aux_fit=rho_aux_fit, &
./rtp_admm_methods.F:         CALL qs_rho_get(rho_aux_fit, &
./rtp_admm_methods.F:                         rho_ao=matrix_p_aux, &
./rtp_admm_methods.F:                         rho_ao_im=matrix_p_aux_im, &
./rtp_admm_methods.F:                         rho_r=rho_r_aux, &
./rtp_admm_methods.F:                         rho_g=rho_g_aux, &
./rtp_admm_methods.F:                         tot_rho_r=tot_rho_r_aux)
./rtp_admm_methods.F:         CALL calculate_rho_elec(matrix_p=matrix_p_aux(ispin)%matrix, &
./rtp_admm_methods.F:                                 rho=rho_r_aux(ispin), &
./rtp_admm_methods.F:                                 rho_gspace=rho_g_aux(ispin), &
./rtp_admm_methods.F:                                 total_rho=tot_rho_r_aux(ispin), &
./rtp_admm_methods.F:      CALL qs_rho_set(rho_aux_fit, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./rtp_admm_methods.F:   END SUBROUTINE rtp_admm_calc_rho_aux
./lri_environment_methods.F:        allocate_lri_coefs, allocate_lri_ints, allocate_lri_ints_rho, allocate_lri_ppl_ints, &
./lri_environment_methods.F:        allocate_lri_rhos, deallocate_lri_ints, deallocate_lri_ints_rho, deallocate_lri_ppl_ints, &
./lri_environment_methods.F:        lri_int_rho_type, lri_int_type, lri_kind_type, lri_list_type, lri_rhoab_type
./lri_environment_methods.F:   USE qs_collocate_density,            ONLY: calculate_lri_rho_elec
./lri_environment_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./lri_environment_methods.F:                                              qs_rho_set,&
./lri_environment_methods.F:                                              qs_rho_type
./lri_environment_methods.F:             v_int_ppl_update, v_int_ppl_energy, lri_kg_rho_update, lri_print_stat
./lri_environment_methods.F:!> \param rho_struct ...
./lri_environment_methods.F:   SUBROUTINE lri_kg_rho_update(rho_struct, qs_env, lri_env, lri_density, atomlist)
./lri_environment_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./lri_environment_methods.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'lri_kg_rho_update', &
./lri_environment_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r
./lri_environment_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./lri_environment_methods.F:      CPASSERT(ASSOCIATED(rho_struct))
./lri_environment_methods.F:      CALL qs_rho_get(rho_struct, rho_r=rho_r, rho_g=rho_g, tot_rho_r=tot_rho_r)
./lri_environment_methods.F:         CALL calculate_lri_rho_elec(rho_g(ispin), rho_r(ispin), qs_env, &
./lri_environment_methods.F:                                     lri_density%lri_coefs(ispin)%lri_kinds, tot_rho_r(ispin), &
./lri_environment_methods.F:      CALL qs_rho_set(rho_struct, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./lri_environment_methods.F:   END SUBROUTINE lri_kg_rho_update
./lri_environment_methods.F:      TYPE(lri_int_rho_type), POINTER                    :: lriir
./lri_environment_methods.F:      TYPE(lri_list_type), POINTER                       :: lri_ints_rho
./lri_environment_methods.F:      NULLIFY (cell, lriir, lri_ints_rho, nl_iterator, obasa, obasb, &
./lri_environment_methods.F:         IF (ASSOCIATED(lri_env%lri_ints_rho)) THEN
./lri_environment_methods.F:            CALL deallocate_lri_ints_rho(lri_env%lri_ints_rho)
./lri_environment_methods.F:         CALL allocate_lri_ints_rho(lri_env, lri_env%lri_ints_rho, nkind)
./lri_environment_methods.F:         lri_ints_rho => lri_env%lri_ints_rho
./lri_environment_methods.F:            lriir => lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho(jneighbor)
./lri_environment_methods.F:!> \param lri_rho_struct ...
./lri_environment_methods.F:                                      lri_rho_struct, atomic_kind_set, para_env)
./lri_environment_methods.F:      TYPE(qs_rho_type), POINTER                         :: lri_rho_struct
./lri_environment_methods.F:                                              lri_rho_struct, atomic_kind_set, para_env)
./lri_environment_methods.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_environment_methods.F:      TYPE(lri_rhoab_type), POINTER                      :: lrho
./lri_environment_methods.F:      NULLIFY (lrii, lri_rho, nl_iterator, pbij, pmat, soo_list)
./lri_environment_methods.F:         ! allocate structure lri_rhos and vectors tvec and avec
./lri_environment_methods.F:         CALL allocate_lri_rhos(lri_env, lri_density%lri_rhos, nspin, nkind)
./lri_environment_methods.F:            lri_rho => lri_density%lri_rhos(ispin)%lri_list
./lri_environment_methods.F:!$OMP SHARED (nthread,nl_iterator,lri_env,lri_rho,pmatrix,nkind,cell_to_index,use_cell_mapping,ispin)&
./lri_environment_methods.F:!$OMP          trans,found,pmat,pbij,pab,paa,pbb,int3,lrho,lrii,nba,nbb,nfa,nfb,nn,threshold,i,m,cell,ic)
./lri_environment_methods.F:               lrho => lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(jneighbor)
./lri_environment_methods.F:                  lrho%charge = SUM(pab(1:nba, 1:nbb)*lrii%soo(1:nba, 1:nbb))
./lri_environment_methods.F:                     lrho%tvec(i) = SUM(pab(1:nba, 1:nbb)*int3(1:nba, 1:nbb))
./lri_environment_methods.F:                        lrho%tvec(nfa+i) = SUM(pab(1:nba, 1:nbb)*int3(1:nba, 1:nbb))
./lri_environment_methods.F:                     lrho%nst = SUM(lrho%tvec(1:nfa)*lrii%sn(1:nfa))
./lri_environment_methods.F:                     lrho%nst = SUM(lrho%tvec(1:nn)*lrii%sn(1:nn))
./lri_environment_methods.F:                  lrho%lambda = (lrho%charge-lrho%nst)/lrii%nsn
./lri_environment_methods.F:                     m(1:nfa) = lrho%tvec(1:nfa)+lrho%lambda*lrii%n(1:nfa)
./lri_environment_methods.F:                                m(1), 1, 0.0_dp, lrho%avec, 1)
./lri_environment_methods.F:                     m(1:nn) = lrho%tvec(1:nn)+lrho%lambda*lrii%n(1:nn)
./lri_environment_methods.F:                                m(1), 1, 0.0_dp, lrho%avec, 1)
./lri_environment_methods.F:                  lrho%chargea = SUM(paa(1:nba, 1:nbb)*lrii%soo(1:nba, 1:nbb))
./lri_environment_methods.F:                        lrho%tveca(i) = SUM(paa(1:nba, 1:nbb)*int3(1:nba, 1:nbb))
./lri_environment_methods.F:                        lrho%tveca(i) = 0.0_dp
./lri_environment_methods.F:                  lrho%chargeb = SUM(pbb(1:nba, 1:nbb)*lrii%soo(1:nba, 1:nbb))
./lri_environment_methods.F:                        lrho%tvecb(i) = SUM(pbb(1:nba, 1:nbb)*int3(1:nba, 1:nbb))
./lri_environment_methods.F:                        lrho%tvecb(i) = 0.0_dp
./lri_environment_methods.F:                  lrho%nsta = SUM(lrho%tveca(1:nfa)*lrii%sna(1:nfa))
./lri_environment_methods.F:                  lrho%nstb = SUM(lrho%tvecb(1:nfb)*lrii%snb(1:nfb))
./lri_environment_methods.F:                  lrho%lambdaa = (lrho%chargea-lrho%nsta)/lrii%nsna
./lri_environment_methods.F:                  lrho%lambdab = (lrho%chargeb-lrho%nstb)/lrii%nsnb
./lri_environment_methods.F:                  m(1:nfa) = lrho%tveca(1:nfa)+lrho%lambdaa*lrii%na(1:nfa)
./lri_environment_methods.F:                             m(1), 1, 0.0_dp, lrho%aveca, 1)
./lri_environment_methods.F:                  m(1:nfb) = lrho%tvecb(1:nfb)+lrho%lambdab*lrii%nb(1:nfb)
./lri_environment_methods.F:                             m(1), 1, 0.0_dp, lrho%avecb, 1)
./lri_environment_methods.F:!> \param lri_rho_struct ...
./lri_environment_methods.F:                                                 lri_rho_struct, atomic_kind_set, para_env)
./lri_environment_methods.F:      TYPE(qs_rho_type), POINTER                         :: lri_rho_struct
./lri_environment_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: aci, acj, tot_rho_r
./lri_environment_methods.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_environment_methods.F:      TYPE(lri_rhoab_type), POINTER                      :: lrho
./lri_environment_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./lri_environment_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./lri_environment_methods.F:      NULLIFY (aci, acj, atomic_kind, atom_of_kind, lri_coef, lri_rho, &
./lri_environment_methods.F:               nl_iterator, soo_list, rho_r, rho_g, tot_rho_r)
./lri_environment_methods.F:         lri_env%stat%rho_tt = 0.0_dp
./lri_environment_methods.F:         lri_env%stat%rho_sr = 0.0_dp
./lri_environment_methods.F:         lri_env%stat%rho_ff = 0.0_dp
./lri_environment_methods.F:         lri_env%stat%rho_1c = 0.0_dp
./lri_environment_methods.F:            lri_rho => lri_density%lri_rhos(ispin)%lri_list
./lri_environment_methods.F:               lrho => lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(jneighbor)
./lri_environment_methods.F:               nfa = lrho%nfa
./lri_environment_methods.F:               nfb = lrho%nfb
./lri_environment_methods.F:                        aci(1:nfa) = aci(1:nfa)+lrho%avec(1:nfa)
./lri_environment_methods.F:                        lri_env%stat%rho_sr = lri_env%stat%rho_sr+SUM(lrho%avec(:)*lrii%n(:))
./lri_environment_methods.F:                     aci(1:nfa) = aci(1:nfa)+fw*lrho%avec(1:nfa)
./lri_environment_methods.F:                     acj(1:nfb) = acj(1:nfb)+fw*lrho%avec(nfa+1:nfa+nfb)
./lri_environment_methods.F:                     lri_env%stat%rho_sr = lri_env%stat%rho_sr+fw*SUM(lrho%avec(:)*lrii%n(:))
./lri_environment_methods.F:                  aci(1:nfa) = aci(1:nfa)+fw*lrho%aveca(1:nfa)
./lri_environment_methods.F:                  acj(1:nfb) = acj(1:nfb)+fw*lrho%avecb(1:nfb)
./lri_environment_methods.F:                  lri_env%stat%rho_sr = lri_env%stat%rho_sr+fw*SUM(lrho%aveca(:)*lrii%na(:))
./lri_environment_methods.F:                  lri_env%stat%rho_sr = lri_env%stat%rho_sr+fw*SUM(lrho%avecb(:)*lrii%nb(:))
./lri_environment_methods.F:         CALL qs_rho_get(lri_rho_struct, rho_r=rho_r, rho_g=rho_g, &
./lri_environment_methods.F:                         tot_rho_r=tot_rho_r)
./lri_environment_methods.F:               CALL get_qs_env(qs_env, rho=rho, matrix_s_kp=matrix_s)
./lri_environment_methods.F:               CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./lri_environment_methods.F:               lri_env%stat%rho_1c = lri_env%stat%rho_1c+str
./lri_environment_methods.F:            CALL calculate_lri_rho_elec(rho_g(ispin), &
./lri_environment_methods.F:                                        rho_r(ispin), qs_env, &
./lri_environment_methods.F:                                        lri_density%lri_coefs(ispin)%lri_kinds, tot_rho_r(ispin), &
./lri_environment_methods.F:            lri_env%stat%rho_tt = lri_env%stat%rho_tt+tot_rho_r(ispin)
./lri_environment_methods.F:      TYPE(lri_int_rho_type), POINTER                    :: lriir
./lri_environment_methods.F:            lriir => lri_env%lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho(jneighbor)
./lri_environment_methods.F:         ppli_mem, ppx, rho_1c, rho_ff, rho_sr, rho_tt, rhos_mem
./lri_environment_methods.F:         rho_tt = -lri_env%stat%rho_tt
./lri_environment_methods.F:         rho_sr = lri_env%stat%rho_sr
./lri_environment_methods.F:         CALL mp_sum(rho_sr, para_env%group)
./lri_environment_methods.F:         rho_ff = lri_env%stat%rho_ff
./lri_environment_methods.F:         CALL mp_sum(rho_ff, para_env%group)
./lri_environment_methods.F:            rho_1c = lri_env%stat%rho_1c
./lri_environment_methods.F:            rho_1c = 0.0_dp
./lri_environment_methods.F:         rhos_mem = lri_env%stat%rhos_mem*ppx
./lri_environment_methods.F:         CALL mp_sum(rhos_mem, para_env%group)
./lri_environment_methods.F:            WRITE (iunit, FMT="(T4,A,T63,F16.2)") "Total charge approximated", rho_tt
./lri_environment_methods.F:            ppx = rho_sr/rho_tt*100._dp
./lri_environment_methods.F:               "[", ppx, "%]", rho_sr
./lri_environment_methods.F:            ppx = rho_ff/rho_tt*100._dp
./lri_environment_methods.F:               "[", ppx, "%]", rho_ff
./lri_environment_methods.F:               ppx = rho_1c/rho_tt*100._dp
./lri_environment_methods.F:                  "[", ppx, "%]", rho_1c
./lri_environment_methods.F:            WRITE (iunit, FMT="(T4,A,T63,F9.0,A)") "Max. memory/task for density expansions", rhos_mem, " Mbytes"
./qs_loc_utils.F:            IF (qs_loc_env%cell%orthorhombic) THEN
./qs_energy_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_energy_utils.F:                                              qs_rho_type
./qs_energy_utils.F:                                                            matrix_w_mp2, mo_derivs, rho_ao
./qs_energy_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_energy_utils.F:            NULLIFY (dft_control, rho_ao)
./qs_energy_utils.F:                            rho=rho, &
./qs_energy_utils.F:            CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_energy_utils.F:                                             matrix_p=rho_ao(ispin)%matrix, &
./qs_energy_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_h, matrix_ks, rho_ao
./qs_energy_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_energy_utils.F:      NULLIFY (atprop, matrix_h, matrix_ks, rho, rho_ao)
./qs_energy_utils.F:                      rho=rho, atprop=atprop)
./qs_energy_utils.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_energy_utils.F:         DO ispin = 1, SIZE(rho_ao)
./qs_energy_utils.F:            CALL atom_trace(matrix_h(1)%matrix, rho_ao(ispin)%matrix, &
./qs_energy_utils.F:            CALL atom_trace(matrix_ks(ispin)%matrix, rho_ao(ispin)%matrix, &
./pair_potential_types.F:      REAL(KIND=dp)                          :: drar, drhoar, acutal
./pair_potential_types.F:      REAL(KIND=dp), POINTER, DIMENSION(:)    :: rho, phi, frho, rhoval, rval
./pair_potential_types.F:      REAL(KIND=dp), POINTER, DIMENSION(:)    :: rhop, phip, frhop
./pair_potential_types.F:                   (pot1%set(i)%eam%drhoar == pot2%set(i)%eam%drhoar) .AND. &
./pair_potential_types.F:                   (SUM(ABS(pot1%set(i)%eam%rho-pot2%set(i)%eam%rho)) == 0.0_dp) .AND. &
./pair_potential_types.F:                   (SUM(ABS(pot1%set(i)%eam%frho-pot2%set(i)%eam%frho)) == 0.0_dp) .AND. &
./pair_potential_types.F:                   (SUM(ABS(pot1%set(i)%eam%rhoval-pot2%set(i)%eam%rhoval)) == 0.0_dp) .AND. &
./pair_potential_types.F:                   (SUM(ABS(pot1%set(i)%eam%rhop-pot2%set(i)%eam%rhop)) == 0.0_dp) .AND. &
./pair_potential_types.F:                   (SUM(ABS(pot1%set(i)%eam%frhop-pot2%set(i)%eam%frhop)) == 0.0_dp)) mycompare = .TRUE.
./pair_potential_types.F:      NULLIFY (eam%rho, eam%phi, eam%frho, eam%rhoval, eam%rval, &
./pair_potential_types.F:               eam%rhop, eam%phip, eam%frhop)
./pair_potential_types.F:      eam_dest%drhoar = eam_source%drhoar
./pair_potential_types.F:      CALL reallocate(eam_dest%rho, 1, eam_dest%npoints)
./pair_potential_types.F:      CALL reallocate(eam_dest%rhop, 1, eam_dest%npoints)
./pair_potential_types.F:      CALL reallocate(eam_dest%frho, 1, eam_dest%npoints)
./pair_potential_types.F:      CALL reallocate(eam_dest%frhop, 1, eam_dest%npoints)
./pair_potential_types.F:      CALL reallocate(eam_dest%rhoval, 1, eam_dest%npoints)
./pair_potential_types.F:      eam_dest%rho = eam_source%rho
./pair_potential_types.F:      eam_dest%frho = eam_source%frho
./pair_potential_types.F:      eam_dest%rhoval = eam_source%rhoval
./pair_potential_types.F:      eam_dest%rhop = eam_source%rhop
./pair_potential_types.F:      eam_dest%frhop = eam_source%frhop
./pair_potential_types.F:      eam%drhoar = 0.0_dp
./pair_potential_types.F:      CALL reallocate(eam%rho, 1, eam%npoints)
./pair_potential_types.F:      CALL reallocate(eam%rhop, 1, eam%npoints)
./pair_potential_types.F:      CALL reallocate(eam%frho, 1, eam%npoints)
./pair_potential_types.F:      CALL reallocate(eam%frhop, 1, eam%npoints)
./pair_potential_types.F:      CALL reallocate(eam%rhoval, 1, eam%npoints)
./pair_potential_types.F:         IF (ASSOCIATED(eam%rho)) THEN
./pair_potential_types.F:            DEALLOCATE (eam%rho)
./pair_potential_types.F:         IF (ASSOCIATED(eam%rhop)) THEN
./pair_potential_types.F:            DEALLOCATE (eam%rhop)
./pair_potential_types.F:         IF (ASSOCIATED(eam%frho)) THEN
./pair_potential_types.F:            DEALLOCATE (eam%frho)
./pair_potential_types.F:         IF (ASSOCIATED(eam%frhop)) THEN
./pair_potential_types.F:            DEALLOCATE (eam%frhop)
./pair_potential_types.F:         IF (ASSOCIATED(eam%rhoval)) THEN
./pair_potential_types.F:            DEALLOCATE (eam%rhoval)
./hfx_communication.F:!> \param rho Distributed density
./hfx_communication.F:!> \param rho_beta ...
./hfx_communication.F:   SUBROUTINE get_full_density(para_env, full_density, rho, number_of_p_entries, &
./hfx_communication.F:                               get_max_vals_spin, rho_beta, antisymmetric)
./hfx_communication.F:      TYPE(dbcsr_type), POINTER                          :: rho
./hfx_communication.F:      TYPE(dbcsr_type), OPTIONAL, POINTER                :: rho_beta
./hfx_communication.F:      CALL dbcsr_iterator_start(iter, rho, shared=.FALSE.)
./hfx_communication.F:            CALL dbcsr_get_block_p(rho_beta, &
./qs_update_s_mstruct.F:                                              calculate_rho_core,&
./qs_update_s_mstruct.F:                                              calculate_rho_nlcc
./qs_update_s_mstruct.F:   USE qs_rho_methods,                  ONLY: qs_rho_rebuild
./qs_update_s_mstruct.F:   USE qs_rho_types,                    ONLY: qs_rho_type
./qs_update_s_mstruct.F:!>      and also updates rho_core distribution.
./qs_update_s_mstruct.F:      TYPE(pw_p_type), POINTER                           :: rho_core, rho_nlcc, rho_nlcc_g, vppl
./qs_update_s_mstruct.F:      ! *** updates rho core ***
./qs_update_s_mstruct.F:      NULLIFY (rho_core)
./qs_update_s_mstruct.F:      CALL get_qs_env(qs_env, rho_core=rho_core)
./qs_update_s_mstruct.F:         qs_env%qs_charges%total_rho_core_rspace = qs_env%local_rho_set%rhoz_tot
./qs_update_s_mstruct.F:            CPASSERT(ASSOCIATED(rho_core))
./qs_update_s_mstruct.F:            CALL calculate_rho_core(rho_core, &
./qs_update_s_mstruct.F:                                    qs_env%qs_charges%total_rho_core_rspace, qs_env, only_nopaw=.TRUE.)
./qs_update_s_mstruct.F:            IF (ASSOCIATED(rho_core)) THEN
./qs_update_s_mstruct.F:               CALL pw_release(rho_core%pw)
./qs_update_s_mstruct.F:               DEALLOCATE (rho_core)
./qs_update_s_mstruct.F:         CPASSERT(ASSOCIATED(rho_core))
./qs_update_s_mstruct.F:         CALL calculate_rho_core(rho_core, &
./qs_update_s_mstruct.F:                                 qs_env%qs_charges%total_rho_core_rspace, qs_env)
./qs_update_s_mstruct.F:      ! compute the rho_nlcc
./qs_update_s_mstruct.F:      NULLIFY (rho_nlcc, rho_nlcc_g)
./qs_update_s_mstruct.F:      CALL get_qs_env(qs_env, rho_nlcc=rho_nlcc, rho_nlcc_g=rho_nlcc_g)
./qs_update_s_mstruct.F:      IF (ASSOCIATED(rho_nlcc)) THEN
./qs_update_s_mstruct.F:         CALL calculate_rho_nlcc(rho_nlcc, qs_env)
./qs_update_s_mstruct.F:         CALL pw_transfer(rho_nlcc%pw, rho_nlcc_g%pw)
./qs_update_s_mstruct.F:      !   *** Updates rho structure ***
./qs_update_s_mstruct.F:      CALL qs_env_rebuild_rho(qs_env=qs_env)
./qs_update_s_mstruct.F:!> \brief rebuilds the rho structure, making sure that everything is allocated
./qs_update_s_mstruct.F:!> \param qs_env the environment in which rho should be rebuilt
./qs_update_s_mstruct.F:!> \param rebuild_ao if it is necessary to rebuild rho_ao. Defaults to true.
./qs_update_s_mstruct.F:!> \param rebuild_grids if it in necessary to rebuild rho_r and rho_g.
./qs_update_s_mstruct.F:!>      If necessary rho is created from scratch.
./qs_update_s_mstruct.F:   SUBROUTINE qs_env_rebuild_rho(qs_env, rebuild_ao, rebuild_grids)
./qs_update_s_mstruct.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_env_rebuild_rho', &
./qs_update_s_mstruct.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux_fit, rho_aux_fit_buffer, &
./qs_update_s_mstruct.F:                                                            rho_external, rho_xc
./qs_update_s_mstruct.F:      NULLIFY (rho)
./qs_update_s_mstruct.F:                      rho=rho, &
./qs_update_s_mstruct.F:                      rho_xc=rho_xc, &
./qs_update_s_mstruct.F:                      rho_aux_fit=rho_aux_fit, &
./qs_update_s_mstruct.F:                      rho_aux_fit_buffer=rho_aux_fit_buffer, &
./qs_update_s_mstruct.F:                      rho_external=rho_external)
./qs_update_s_mstruct.F:      CALL qs_rho_rebuild(rho, qs_env=qs_env, &
./qs_update_s_mstruct.F:         CALL qs_rho_rebuild(rho_xc, qs_env=qs_env, &
./qs_update_s_mstruct.F:         CALL qs_rho_rebuild(rho_aux_fit, qs_env=qs_env, &
./qs_update_s_mstruct.F:         CALL qs_rho_rebuild(rho_aux_fit_buffer, qs_env=qs_env, &
./qs_update_s_mstruct.F:         CALL qs_rho_rebuild(rho_external, qs_env=qs_env, &
./qs_update_s_mstruct.F:   END SUBROUTINE qs_env_rebuild_rho
./ewald_pw_methods.F:   USE dg_rho0_types,                   ONLY: dg_rho0_get,&
./ewald_pw_methods.F:                                              dg_rho0_init,&
./ewald_pw_methods.F:                                              dg_rho0_set,&
./ewald_pw_methods.F:                                              dg_rho0_type
./ewald_pw_methods.F:         CALL ewald_pw_rho0_setup(ewald_env, pw_big_pool%pw_grid, dg)
./ewald_pw_methods.F:         CALL ewald_pw_rho0_setup(ewald_env, pw_small_pool%pw_grid, dg)
./ewald_pw_methods.F:   SUBROUTINE ewald_pw_rho0_setup(ewald_env, pw_grid, dg)
./ewald_pw_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'ewald_pw_rho0_setup', &
./ewald_pw_methods.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./ewald_pw_methods.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./ewald_pw_methods.F:      CALL dg_rho0_get(dg_rho0, gcc=gcc, zet=zet)
./ewald_pw_methods.F:      CALL dg_rho0_set(dg_rho0, TYPE=ewald_type, zet=zet)
./ewald_pw_methods.F:      CALL dg_rho0_init(dg_rho0, pw_grid)
./ewald_pw_methods.F:      CALL dg_set(dg, dg_rho0=dg_rho0, grid_index=grid_index)
./ewald_pw_methods.F:   END SUBROUTINE ewald_pw_rho0_setup
./qs_force.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_force.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_force.F:                                              qs_rho_type
./qs_force.F:         matrix_s_aux_fit, matrix_s_aux_fit_vs_orb, matrix_w, matrix_w_mp2, rho_ao
./qs_force.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_force.F:         NULLIFY (matrix_w, matrix_s, rho)
./qs_force.F:                         rho=rho)
./qs_force.F:         NULLIFY (rho_ao)
./qs_force.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_force.F:                                 para_env, matrix_s(1)%matrix, rho_ao, w_matrix=matrix_w)
./qs_force.F:         NULLIFY (matrix_p_mp2, matrix_w_mp2, rho, ks_env, energy)
./qs_force.F:                         rho=rho, &
./qs_force.F:         NULLIFY (rho_ao)
./qs_force.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_force.F:            CALL dbcsr_add(rho_ao(ispin)%matrix, matrix_p_mp2(ispin)%matrix, 1.0_dp, -1.0_dp)
./qs_force.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_force.F:         CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./qs_force.F:            CALL dbcsr_add(rho_ao(ispin)%matrix, matrix_p_mp2(ispin)%matrix, 1.0_dp, 1.0_dp)
./qs_force.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_force.F:         CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./qs_force.F:            CALL dbcsr_add(rho_ao(ispin)%matrix, matrix_p_mp2(ispin)%matrix, 1.0_dp, -1.0_dp)
./qs_force.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_force.F:         CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./qs_force.F:                  iatom, ikind, "      rho_core", qs_force(ikind)%rho_core(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_elec", qs_force(ikind)%rho_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_lri_elec", qs_force(ikind)%rho_lri_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_core", qs_force(ikind)%rho_core(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_elec", qs_force(ikind)%rho_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_lri_elec", qs_force(ikind)%rho_lri_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_elec", qs_force(ikind)%rho_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_lri_elec", qs_force(ikind)%rho_lri_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "       rho_core", qs_force(ikind)%rho_core(1:3, i), &
./qs_force.F:                  iatom, ikind, "       rho_elec", qs_force(ikind)%rho_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "       rho_lri_elec", qs_force(ikind)%rho_lri_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "       rho_elec", qs_force(ikind)%rho_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "       rho_lri_elec", qs_force(ikind)%rho_lri_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_elec", qs_force(ikind)%rho_elec(1:3, i), &
./qs_force.F:                  iatom, ikind, "      rho_lri_elec", qs_force(ikind)%rho_lri_elec(1:3, i), &
./mp2_direct_method.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./mp2_direct_method.F:                                              qs_rho_type
./mp2_direct_method.F:!> \param rho density matrix
./mp2_direct_method.F:   SUBROUTINE mp2_canonical_direct_single_batch(Emp2, Emp2_Cou, Emp2_ex, mp2_env, qs_env, rho, para_env, &
./mp2_direct_method.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2_direct_method.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./mp2_direct_method.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./mp2_cphf.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./mp2_cphf.F:   USE qs_rho_methods,                  ONLY: qs_rho_rebuild
./mp2_cphf.F:   USE qs_rho_types,                    ONLY: qs_rho_create,&
./mp2_cphf.F:                                              qs_rho_get,&
./mp2_cphf.F:                                              qs_rho_release,&
./mp2_cphf.F:                                              qs_rho_type
./mp2_cphf.F:                                                            pair_energy, tot_rho_r
./mp2_cphf.F:                                                            matrix_s, matrix_w_mp2, rho_ao
./mp2_cphf.F:      TYPE(pw_p_type)                                    :: dvg(3), pot_g, rho_g, rho_r, temp_pw_g
./mp2_cphf.F:      TYPE(pw_p_type), POINTER                           :: rho_core
./mp2_cphf.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_work
./mp2_cphf.F:      NULLIFY (input, pw_env, matrix_s, blacs_env, rho, energy, force, virial, matrix_w_mp2, &
./mp2_cphf.F:               matrix_p_mp2, matrix_ks, rho_core, sab_orb)
./mp2_cphf.F:                      rho=rho, &
./mp2_cphf.F:                      rho_core=rho_core, &
./mp2_cphf.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./mp2_cphf.F:      NULLIFY (rho_r%pw, rho_g%pw, pot_g%pw)
./mp2_cphf.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_r%pw, &
./mp2_cphf.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, &
./mp2_cphf.F:      CALL dbcsr_copy(P_mu_nu%matrix, rho_ao(1)%matrix, name="P_mu_nu")
./mp2_cphf.F:      ! create a working rho environment
./mp2_cphf.F:      NULLIFY (rho_work)
./mp2_cphf.F:      CALL qs_rho_create(rho_work)
./mp2_cphf.F:      CALL qs_rho_rebuild(rho=rho_work, qs_env=qs_env, rebuild_ao=.TRUE., rebuild_grids=.FALSE.)
./mp2_cphf.F:                            rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                               poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                            rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                               poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                                    poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                                    poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                            rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                               poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:      ! release rho stuff
./mp2_cphf.F:      CALL qs_rho_release(rho_struct=rho_work)
./mp2_cphf.F:         CALL dbcsr_copy(matrix_p_mp2(ispin)%matrix, rho_ao(ispin)%matrix, &
./mp2_cphf.F:      CALL calculate_rho_elec(matrix_p=matrix_p_mp2(1)%matrix, &
./mp2_cphf.F:                              rho=rho_r, &
./mp2_cphf.F:                              rho_gspace=rho_g, &
./mp2_cphf.F:                              total_rho=tot_rho_r, &
./mp2_cphf.F:      CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_cphf.F:      CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_cphf.F:      CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_cphf.F:      CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_cphf.F:      CALL integrate_v_core_rspace(rho_r, qs_env)
./mp2_cphf.F:         force(ikind)%mp2_sep = force(ikind)%rho_core
./mp2_cphf.F:         force(ikind)%rho_core = 0.0_dp
./mp2_cphf.F:         CALL dbcsr_add(rho_ao(1)%matrix, rho_ao(2)%matrix, 1.0_dp, 1.0_dp)
./mp2_cphf.F:      CALL integrate_v_rspace(v_rspace=rho_r, pmat=rho_ao(1), hmat=matrix_ks(1), &
./mp2_cphf.F:         CALL pw_copy(rho_g%pw, temp_pw_g%pw)
./mp2_cphf.F:         CALL calculate_rho_elec(matrix_p=rho_ao(1)%matrix, &
./mp2_cphf.F:                                 rho=rho_r, &
./mp2_cphf.F:                                 rho_gspace=rho_g, &
./mp2_cphf.F:                                 total_rho=tot_rho_r, &
./mp2_cphf.F:         CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_cphf.F:         CALL pw_axpy(rho_core%pw, rho_g%pw)
./mp2_cphf.F:         CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_cphf.F:            CALL pw_copy(pot_g%pw, rho_g%pw)
./mp2_cphf.F:            CALL pw_derive(rho_g%pw, comp)
./mp2_cphf.F:                                       -2.0_dp*pw_integral_ab(rho_g%pw, dvg(beta)%pw)/fourpi
./mp2_cphf.F:         CALL dbcsr_add(rho_ao(1)%matrix, rho_ao(2)%matrix, 1.0_dp, -1.0_dp)
./mp2_cphf.F:         CALL dbcsr_add(rho_ao(ispin)%matrix, matrix_p_mp2(ispin)%matrix, 1.0_dp, 1.0_dp)
./mp2_cphf.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r%pw)
./mp2_cphf.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./mp2_cphf.F:!> \param rho_work ...
./mp2_cphf.F:!> \param rho_g ...
./mp2_cphf.F:!> \param rho_r ...
./mp2_cphf.F:                               rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:      TYPE(qs_rho_type), POINTER                         :: rho_work
./mp2_cphf.F:      TYPE(pw_p_type)                                    :: pot_g, rho_g, rho_r
./mp2_cphf.F:      REAL(KIND=dp)                                      :: ehfx, pair_energy, total_rho
./mp2_cphf.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_work_ao
./mp2_cphf.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: mat_2d, rho_ao_2d
./mp2_cphf.F:      NULLIFY (ks_env, rho_work_ao)
./mp2_cphf.F:      CALL calculate_rho_elec(matrix_p=P_mu_nu%matrix, &
./mp2_cphf.F:                              rho=rho_r, &
./mp2_cphf.F:                              rho_gspace=rho_g, &
./mp2_cphf.F:                              total_rho=total_rho, &
./mp2_cphf.F:      CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_cphf.F:      CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_cphf.F:      CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_cphf.F:      CALL integrate_v_rspace(rho_r, hmat=mat_mu_nu(1), &
./mp2_cphf.F:      ! copy mat_mu_nu into rho_ao work
./mp2_cphf.F:         CALL qs_rho_get(rho_work, rho_ao=rho_work_ao)
./mp2_cphf.F:         CALL dbcsr_set(rho_work_ao(1)%matrix, 0.0_dp)
./mp2_cphf.F:         CALL dbcsr_copy(rho_work_ao(1)%matrix, P_mu_nu%matrix)
./mp2_cphf.F:            ns = SIZE(rho_work_ao)
./mp2_cphf.F:            rho_ao_2d(1:ns, 1:1) => rho_work_ao(1:ns)
./mp2_cphf.F:            CALL integrate_four_center(qs_env, mat_2d, ehfx, rho_ao_2d, hfx_sections, &
./mp2_cphf.F:!> \param rho_work ...
./mp2_cphf.F:!> \param rho_g ...
./mp2_cphf.F:!> \param rho_r ...
./mp2_cphf.F:                                    rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:      TYPE(qs_rho_type), POINTER                         :: rho_work
./mp2_cphf.F:      TYPE(pw_p_type)                                    :: pot_g, rho_g, rho_r
./mp2_cphf.F:                                  rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                                     rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                                     poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                                     rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                                  rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                                     rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./mp2_cphf.F:                                     poisson_env, rho_work, pot_g, rho_g, rho_r, mat_mu_nu, &
./mp2_cphf.F:                                     rho_work, pot_g, rho_g, rho_r, mat_mu_nu, P_mu_nu, &
./hfx_derivatives.F:!> \param rho_ao density matrix
./hfx_derivatives.F:   SUBROUTINE derivatives_four_center(qs_env, rho_ao, hfx_section, para_env, &
./hfx_derivatives.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao
./hfx_derivatives.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao_mp2
./hfx_derivatives.F:      IF (with_mp2_density) CALL get_qs_env(qs_env, matrix_p_mp2=rho_ao_mp2)
./hfx_derivatives.F:      is_anti_symmetric = dbcsr_get_matrix_type(rho_ao(1, 1)%matrix) .EQ. dbcsr_type_antisymmetric
./hfx_derivatives.F:!$OMP                                  rho_ao,&
./hfx_derivatives.F:!$OMP                                  rho_ao_mp2,&
./hfx_derivatives.F:      CALL get_full_density(para_env, full_density_alpha(:, 1), rho_ao(1, 1)%matrix, shm_number_of_p_entries, &
./hfx_derivatives.F:         CALL get_full_density(para_env, full_density_mp2, rho_ao_mp2(1)%matrix, shm_number_of_p_entries, &
./hfx_derivatives.F:         CALL get_full_density(para_env, full_density_beta(:, 1), rho_ao(2, 1)%matrix, shm_number_of_p_entries, &
./hfx_derivatives.F:            CALL get_full_density(para_env, full_density_mp2_beta, rho_ao_mp2(2)%matrix, shm_number_of_p_entries, &
./mp2_ri_grad.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec,&
./mp2_ri_grad.F:!> \param rho_r ...
./mp2_ri_grad.F:!> \param rho_g ...
./mp2_ri_grad.F:                                 my_group_L_start, my_group_L_end, my_group_L_size, sab_orb_sub, rho_r, rho_g, pot_g, &
./mp2_ri_grad.F:      TYPE(pw_p_type)                                    :: rho_r, rho_g, pot_g
./mp2_ri_grad.F:                                                            pair_energy, rab2, total_rho
./mp2_ri_grad.F:            CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_grad.F:            rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_grad.F:               CALL calculate_wavefunction(mo_coeff_beta, 1, psi_L_beta, rho_g, atomic_kind_set, &
./mp2_ri_grad.F:               rho_r%pw%cr3d = 0.50_dp*(rho_r%pw%cr3d+psi_L_beta%pw%cr3d)
./mp2_ri_grad.F:            CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_grad.F:            CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_grad.F:            CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_grad.F:            CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_grad.F:               CALL pw_copy(rho_g%pw, temp_pw_g%pw)
./mp2_ri_grad.F:            CALL potential_pw2rs(rs_v, rho_r, pw_env_sub)
./mp2_ri_grad.F:               force(ikind)%rho_elec(:, atom_a) = &
./mp2_ri_grad.F:                  force(ikind)%rho_elec(:, atom_a)+force_a(:)+force_b
./mp2_ri_grad.F:            CALL integrate_v_rspace(rho_r, hmat=mat_munu, pmat=matrix_P_munu, &
./mp2_ri_grad.F:               CALL calculate_wavefunction(mo_coeff, 1, psi_L, rho_g, atomic_kind_set, &
./mp2_ri_grad.F:               rho_r%pw%cr3d = psi_L%pw%cr3d
./mp2_ri_grad.F:               CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_grad.F:               CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_grad.F:                  CALL pw_copy(pot_g%pw, rho_g%pw)
./mp2_ri_grad.F:                  CALL pw_derive(rho_g%pw, comp)
./mp2_ri_grad.F:                                             -2.0_dp*pw_integral_ab(rho_g%pw, dvg(beta)%pw)/fourpi
./mp2_ri_grad.F:            CALL calculate_rho_elec(matrix_p=matrix_P_munu%matrix, &
./mp2_ri_grad.F:                                    rho=rho_r, &
./mp2_ri_grad.F:                                    rho_gspace=rho_g, &
./mp2_ri_grad.F:                                    total_rho=total_rho, &
./mp2_ri_grad.F:            ! CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_ri_grad.F:            CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_ri_grad.F:            CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_ri_grad.F:            CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_ri_grad.F:                  CALL pw_copy(pot_g%pw, rho_g%pw)
./mp2_ri_grad.F:                  CALL pw_derive(rho_g%pw, comp)
./mp2_ri_grad.F:                                             -2.0_dp*pw_integral_ab(rho_g%pw, dvg(beta)%pw)/fourpi
./mp2_ri_grad.F:            CALL potential_pw2rs(rs_v, rho_r, pw_env_sub)
./mp2_ri_grad.F:               force(ikind)%rho_elec(:, atom_a) = &
./mp2_ri_grad.F:                  force(ikind)%rho_elec(:, atom_a)+force_a(:)+force_b(:)
./mp2_ri_grad.F:            force(ikind)%mp2_non_sep(:, :) = force(ikind)%rho_elec(:, :)
./mp2_ri_grad.F:            force(ikind)%rho_elec(:, :) = 0.0_dp
./qs_environment_methods.F:   USE qs_rho0_types,                   ONLY: rho0_mpole_type
./qs_environment_methods.F:      TYPE(pw_p_type), POINTER                           :: embed_pot, external_vxc, rho0_gs, &
./qs_environment_methods.F:                                                            rho0_rs, rho_core, rho_nlcc, &
./qs_environment_methods.F:                                                            rho_nlcc_g, spin_embed_pot, vee, vppl
./qs_environment_methods.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_environment_methods.F:      NULLIFY (rho0_mpole, rho0_gs, rho0_rs)
./qs_environment_methods.F:      NULLIFY (ewald_env, ewald_pw, new_pw_env, external_vxc, rho_core, rho_nlcc, rho_nlcc_g, vee, vppl, &
./qs_environment_methods.F:         ! reallocate rho_core
./qs_environment_methods.F:         CALL get_qs_env(qs_env, pw_env=new_pw_env, rho_core=rho_core)
./qs_environment_methods.F:            IF (ASSOCIATED(rho_core)) THEN
./qs_environment_methods.F:               CALL pw_release(rho_core%pw)
./qs_environment_methods.F:               DEALLOCATE (rho_core)
./qs_environment_methods.F:               ALLOCATE (rho_core)
./qs_environment_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, rho_core%pw, &
./qs_environment_methods.F:               rho_core%pw%in_space = RECIPROCALSPACE
./qs_environment_methods.F:               CALL set_ks_env(ks_env, rho_core=rho_core)
./qs_environment_methods.F:            CALL get_qs_env(qs_env=qs_env, rho0_mpole=rho0_mpole)
./qs_environment_methods.F:            IF (ASSOCIATED(rho0_mpole)) THEN
./qs_environment_methods.F:               rho0_rs => rho0_mpole%rho0_s_rs
./qs_environment_methods.F:               rho0_gs => rho0_mpole%rho0_s_gs
./qs_environment_methods.F:               IF (ASSOCIATED(rho0_rs)) THEN
./qs_environment_methods.F:                  CALL pw_release(rho0_rs%pw)
./qs_environment_methods.F:                  DEALLOCATE (rho0_rs)
./qs_environment_methods.F:               ALLOCATE (rho0_rs)
./qs_environment_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, rho0_rs%pw, &
./qs_environment_methods.F:               rho0_mpole%rho0_s_rs => rho0_rs
./qs_environment_methods.F:               IF (ASSOCIATED(rho0_gs)) THEN
./qs_environment_methods.F:                  CALL pw_release(rho0_gs%pw)
./qs_environment_methods.F:                  DEALLOCATE (rho0_gs)
./qs_environment_methods.F:               ALLOCATE (rho0_gs)
./qs_environment_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, rho0_gs%pw, &
./qs_environment_methods.F:               rho0_mpole%rho0_s_gs => rho0_gs
./qs_environment_methods.F:            IF (ASSOCIATED(rho_core)) THEN
./qs_environment_methods.F:               CALL pw_release(rho_core%pw)
./qs_environment_methods.F:               DEALLOCATE (rho_core)
./qs_environment_methods.F:            ALLOCATE (rho_core)
./qs_environment_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_core%pw, &
./qs_environment_methods.F:            rho_core%pw%in_space = RECIPROCALSPACE
./qs_environment_methods.F:            CALL set_ks_env(ks_env, rho_core=rho_core)
./qs_environment_methods.F:         ! reallocate rho_nlcc
./qs_environment_methods.F:            NULLIFY (rho_nlcc)
./qs_environment_methods.F:            CALL get_qs_env(qs_env, pw_env=new_pw_env, rho_nlcc=rho_nlcc)
./qs_environment_methods.F:            IF (ASSOCIATED(rho_nlcc)) THEN
./qs_environment_methods.F:               CALL pw_release(rho_nlcc%pw)
./qs_environment_methods.F:               DEALLOCATE (rho_nlcc)
./qs_environment_methods.F:            ALLOCATE (rho_nlcc)
./qs_environment_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_nlcc%pw, use_data=REALDATA3D)
./qs_environment_methods.F:            rho_nlcc%pw%in_space = REALSPACE
./qs_environment_methods.F:            CALL set_ks_env(ks_env, rho_nlcc=rho_nlcc)
./qs_environment_methods.F:            NULLIFY (rho_nlcc_g)
./qs_environment_methods.F:            CALL get_qs_env(qs_env, pw_env=new_pw_env, rho_nlcc_g=rho_nlcc_g)
./qs_environment_methods.F:            IF (ASSOCIATED(rho_nlcc_g)) THEN
./qs_environment_methods.F:               CALL pw_release(rho_nlcc_g%pw)
./qs_environment_methods.F:               DEALLOCATE (rho_nlcc_g)
./qs_environment_methods.F:            ALLOCATE (rho_nlcc_g)
./qs_environment_methods.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_nlcc_g%pw, use_data=COMPLEXDATA1D)
./qs_environment_methods.F:            rho_nlcc_g%pw%in_space = RECIPROCALSPACE
./qs_environment_methods.F:            CALL set_ks_env(ks_env, rho_nlcc_g=rho_nlcc_g)
./cp_eri_mme_interface.F:                          "implemented for non-orthorhombic cells. ", &
./cp_eri_mme_interface.F:      CALL eri_mme_set_params_custom(param, cell%hmat, cell%orthorhombic, &
./cp_eri_mme_interface.F:      CALL cp_eri_mme_set_params(param, box%hmat, box%orthorhombic, MINVAL(zet), [MAXVAL(zet)], [l_max], l_max, para_env)
./atom_xc.F:   USE xc_atom,                         ONLY: xc_rho_set_atom_update
./atom_xc.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./atom_xc.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./atom_xc.F:                                              xc_rho_set_release,&
./atom_xc.F:                                              xc_rho_set_type
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: deltarho, rho_dum, vxc, vxc1, vxc2
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho
./atom_xc.F:      ALLOCATE (rho(nr, 1), vxc(nr), vxc1(nr), vxc2(nr), rho_dum(nr), deltarho(nr))
./atom_xc.F:      CALL atom_density(rho(:, 1), atom%orbitals%pmat, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:      CALL coulomb_potential_numeric(vxc1, rho(:, 1), atom%basis%grid)
./atom_xc.F:      rho_dum = rho(:, 1)*int1/z
./atom_xc.F:      deltarho = rho_dum-ext_density
./atom_xc.F:      int2 = integrate_grid(deltarho, atom%basis%grid)
./atom_xc.F:      CALL coulomb_potential_numeric(vxc2, deltarho, atom%basis%grid)
./atom_xc.F:      atom%energy%exc = fourpi*integrate_grid(vxc, rho(:, 1), atom%basis%grid)
./atom_xc.F:      atom%rho_diff_integral = fourpi*int2
./atom_xc.F:               atom%basis%grid%rad(ir), rho(ir, 1), deltarho(ir), vxc(ir), vxc1(ir), vxc2(ir)
./atom_xc.F:      DEALLOCATE (rho, vxc, vxc1, vxc2, rho_dum, deltarho)
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: rho
./atom_xc.F:      ALLOCATE (rho(nr, 1))
./atom_xc.F:      CALL atom_density(rho(:, 1), atom%orbitals%pmat, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:               atom%basis%grid%rad(ir), rho(ir, 1), vxc(ir)
./atom_xc.F:      atom%energy%exc = fourpi*integrate_grid(vxc, rho(:, 1), atom%basis%grid)
./atom_xc.F:      DEALLOCATE (rho)
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: drho, lap, rho, tau
./atom_xc.F:      TYPE(xc_rho_cflags_type)                           :: needs
./atom_xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./atom_xc.F:         NULLIFY (rho_set)
./atom_xc.F:            CALL xc_rho_set_create(rho_set, bounds, rho_cutoff=density_cut, &
./atom_xc.F:                                   drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./atom_xc.F:            ! allocate the required 3d arrays where to store rho and drho
./atom_xc.F:            CALL xc_rho_set_atom_update(rho_set, needs, nspins, bounds)
./atom_xc.F:            NULLIFY (rho, drho, tau)
./atom_xc.F:            IF (needs%rho) THEN
./atom_xc.F:               ALLOCATE (rho(nr, 1))
./atom_xc.F:               CALL atom_density(rho(:, 1), atom%orbitals%pmat, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:                  CALL atom_core_density(rho(:, 1), atom%potential, typ="RHO", rr=atom%basis%grid%rad)
./atom_xc.F:            IF (needs%norm_drho) THEN
./atom_xc.F:               ALLOCATE (drho(nr, 1))
./atom_xc.F:               CALL atom_density(drho(:, 1), atom%orbitals%pmat, atom%basis, atom%state%maxl_occ, typ="DER")
./atom_xc.F:                  CALL atom_core_density(drho(:, 1), atom%potential, typ="DER", rr=atom%basis%grid%rad)
./atom_xc.F:            IF (needs%laplace_rho) THEN
./atom_xc.F:            CALL fill_rho_set(rho_set, nspins, needs, rho, drho, tau, lap, nr)
./atom_xc.F:            CALL xc_functionals_eval(xc_fun_section, lsd=lsd, rho_set=rho_set, deriv_set=deriv_set, &
./atom_xc.F:                  WRITE (unit_nr, *) atom%basis%grid%rad(i), rho(i, 1), xcpot(i, 1, 1)
./atom_xc.F:            IF (needs%rho) THEN
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(rho)", allocate_deriv=.FALSE.)
./atom_xc.F:                     WRITE (unit_nr, *) atom%basis%grid%rad(i), rho(i, 1), xcpot(i, 1, 1)
./atom_xc.F:               DEALLOCATE (rho)
./atom_xc.F:            IF (needs%norm_drho) THEN
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", allocate_deriv=.FALSE.)
./atom_xc.F:                     WRITE (unit_nr, *) atom%basis%grid%rad(i), drho(i, 1), xcpot(i, 1, 1)
./atom_xc.F:               DEALLOCATE (drho)
./atom_xc.F:            IF (needs%laplace_rho) THEN
./atom_xc.F:            CALL xc_rho_set_release(rho_set)
./atom_xc.F:         ALLOCATE (rho(nr, 1), exc(nr), vxc(nr))
./atom_xc.F:         CALL atom_density(rho(:, 1), atom%orbitals%pmat, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:            CALL atom_core_density(rho(:, 1), atom%potential, typ="RHO", rr=atom%basis%grid%rad)
./atom_xc.F:         CALL lda_pade(rho(:, 1), exc, vxc)
./atom_xc.F:         DEALLOCATE (rho, exc, vxc)
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: drho, lap, rho, tau
./atom_xc.F:      TYPE(xc_rho_cflags_type)                           :: needs
./atom_xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./atom_xc.F:         NULLIFY (rho_set)
./atom_xc.F:            CALL xc_rho_set_create(rho_set, bounds, rho_cutoff=density_cut, &
./atom_xc.F:                                   drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./atom_xc.F:            ! allocate the required 3d arrays where to store rho and drho
./atom_xc.F:            CALL xc_rho_set_atom_update(rho_set, needs, nspins, bounds)
./atom_xc.F:            NULLIFY (rho, drho, tau)
./atom_xc.F:            IF (needs%rho_spin) THEN
./atom_xc.F:               ALLOCATE (rho(nr, 2))
./atom_xc.F:               CALL atom_density(rho(:, 1), atom%orbitals%pmata, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:               CALL atom_density(rho(:, 2), atom%orbitals%pmatb, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:                  rho(:, 1) = rho(:, 1)+0.5_dp*xfun(:)
./atom_xc.F:                  rho(:, 2) = rho(:, 2)+0.5_dp*xfun(:)
./atom_xc.F:            IF (needs%norm_drho_spin) THEN
./atom_xc.F:               ALLOCATE (drho(nr, 2))
./atom_xc.F:               CALL atom_density(drho(:, 1), atom%orbitals%pmata, atom%basis, atom%state%maxl_occ, typ="DER")
./atom_xc.F:               CALL atom_density(drho(:, 2), atom%orbitals%pmatb, atom%basis, atom%state%maxl_occ, typ="DER")
./atom_xc.F:                  drho(:, 1) = drho(:, 1)+0.5_dp*xfun(:)
./atom_xc.F:                  drho(:, 2) = drho(:, 2)+0.5_dp*xfun(:)
./atom_xc.F:            IF (needs%laplace_rho_spin) THEN
./atom_xc.F:            CALL fill_rho_set(rho_set, nspins, needs, rho, drho, tau, lap, nr)
./atom_xc.F:            CALL xc_functionals_eval(xc_fun_section, lsd=lsd, rho_set=rho_set, deriv_set=deriv_set, &
./atom_xc.F:            IF (needs%rho_spin) THEN
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", allocate_deriv=.FALSE.)
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(rhob)", allocate_deriv=.FALSE.)
./atom_xc.F:               DEALLOCATE (rho)
./atom_xc.F:            IF (needs%norm_drho_spin) THEN
./atom_xc.F:               ! drhoa
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", allocate_deriv=.FALSE.)
./atom_xc.F:               ! drhob
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", allocate_deriv=.FALSE.)
./atom_xc.F:               deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./atom_xc.F:               DEALLOCATE (drho)
./atom_xc.F:            IF (needs%laplace_rho_spin) THEN
./atom_xc.F:            CALL xc_rho_set_release(rho_set)
./atom_xc.F:         ALLOCATE (rho(nr, 2), exc(nr), vxca(nr), vxcb(nr))
./atom_xc.F:         CALL atom_density(rho(:, 1), atom%orbitals%pmata, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:         CALL atom_density(rho(:, 2), atom%orbitals%pmatb, atom%basis, atom%state%maxl_occ, typ="RHO")
./atom_xc.F:            rho(:, 1) = rho(:, 1)+0.5_dp*xfun(:)
./atom_xc.F:            rho(:, 2) = rho(:, 2)+0.5_dp*xfun(:)
./atom_xc.F:         CALL lsd_pade(rho(:, 1), rho(:, 2), exc, vxca, vxcb)
./atom_xc.F:         DEALLOCATE (rho, exc, vxca, vxcb)
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: drho, lap, rho, tau
./atom_xc.F:      TYPE(xc_rho_cflags_type)                           :: needs
./atom_xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./atom_xc.F:      NULLIFY (rho_set)
./atom_xc.F:         CALL xc_rho_set_create(rho_set, bounds, rho_cutoff=density_cut, &
./atom_xc.F:                                drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./atom_xc.F:         ! allocate the required 3d arrays where to store rho and drho
./atom_xc.F:         CALL xc_rho_set_atom_update(rho_set, needs, nspins, bounds)
./atom_xc.F:         NULLIFY (rho, drho, tau)
./atom_xc.F:         IF (needs%rho) THEN
./atom_xc.F:            ALLOCATE (rho(nr, 1))
./atom_xc.F:            CALL atom_density(rho(:, 1), pmat, basis, maxl, typ="RHO")
./atom_xc.F:         IF (needs%norm_drho) THEN
./atom_xc.F:            ALLOCATE (drho(nr, 1))
./atom_xc.F:            CALL atom_density(drho(:, 1), pmat, basis, maxl, typ="DER")
./atom_xc.F:         IF (needs%laplace_rho) THEN
./atom_xc.F:         CALL fill_rho_set(rho_set, nspins, needs, rho, drho, tau, lap, nr)
./atom_xc.F:         CALL xc_functionals_eval(xc_fun_section, lsd=lsd, rho_set=rho_set, deriv_set=deriv_set, &
./atom_xc.F:         IF (needs%rho) THEN
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rho)", allocate_deriv=.FALSE.)
./atom_xc.F:            DEALLOCATE (rho)
./atom_xc.F:         IF (needs%norm_drho) THEN
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)", allocate_deriv=.FALSE.)
./atom_xc.F:            DEALLOCATE (drho)
./atom_xc.F:         IF (needs%laplace_rho) THEN
./atom_xc.F:         CALL xc_rho_set_release(rho_set)
./atom_xc.F:      REAL(KIND=dp), DIMENSION(:, :), POINTER            :: drho, lap, rho, tau
./atom_xc.F:      TYPE(xc_rho_cflags_type)                           :: needs
./atom_xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./atom_xc.F:      NULLIFY (rho_set)
./atom_xc.F:         CALL xc_rho_set_create(rho_set, bounds, rho_cutoff=density_cut, &
./atom_xc.F:                                drho_cutoff=gradient_cut, tau_cutoff=tau_cut)
./atom_xc.F:         ! allocate the required 3d arrays where to store rho and drho
./atom_xc.F:         CALL xc_rho_set_atom_update(rho_set, needs, nspins, bounds)
./atom_xc.F:         NULLIFY (rho, drho, tau)
./atom_xc.F:         IF (needs%rho_spin) THEN
./atom_xc.F:            ALLOCATE (rho(nr, 2))
./atom_xc.F:            CALL atom_density(rho(:, 1), pmata, basis, maxl, typ="RHO")
./atom_xc.F:            CALL atom_density(rho(:, 2), pmatb, basis, maxl, typ="RHO")
./atom_xc.F:         IF (needs%norm_drho_spin) THEN
./atom_xc.F:            ALLOCATE (drho(nr, 2))
./atom_xc.F:            CALL atom_density(drho(:, 1), pmata, basis, maxl, typ="DER")
./atom_xc.F:            CALL atom_density(drho(:, 2), pmatb, basis, maxl, typ="DER")
./atom_xc.F:         IF (needs%laplace_rho_spin) THEN
./atom_xc.F:         CALL fill_rho_set(rho_set, nspins, needs, rho, drho, tau, lap, nr)
./atom_xc.F:         CALL xc_functionals_eval(xc_fun_section, lsd=lsd, rho_set=rho_set, deriv_set=deriv_set, &
./atom_xc.F:         IF (needs%rho_spin) THEN
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhoa)", allocate_deriv=.FALSE.)
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(rhob)", allocate_deriv=.FALSE.)
./atom_xc.F:            DEALLOCATE (rho)
./atom_xc.F:         IF (needs%norm_drho_spin) THEN
./atom_xc.F:            ! drhoa
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhoa)", allocate_deriv=.FALSE.)
./atom_xc.F:            ! drhob
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drhob)", allocate_deriv=.FALSE.)
./atom_xc.F:            deriv => xc_dset_get_derivative(deriv_set, "(norm_drho)")
./atom_xc.F:            DEALLOCATE (drho)
./atom_xc.F:         CALL xc_rho_set_release(rho_set)
./atom_xc.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:)           :: delta, drho0, drho1, pot0, pot1, rho0, &
./atom_xc.F:                                                            rho1
./atom_xc.F:      ALLOCATE (rho0(nr), drho0(nr))
./atom_xc.F:      CALL atom_density(rho0, pmat0, basis0, maxl, typ="RHO")
./atom_xc.F:      CALL atom_density(drho0, pmat0, basis0, maxl, typ="DER")
./atom_xc.F:      ALLOCATE (rho1(nr), drho1(nr))
./atom_xc.F:      CALL atom_density(rho1, pmat1, basis1, maxl, typ="RHO")
./atom_xc.F:      CALL atom_density(drho1, pmat1, basis1, maxl, typ="DER")
./atom_xc.F:      delta(1:nr) = fs*(rho0(1:nr)**fx-rho1(1:nr)**fx)
./atom_xc.F:            IF (rho0(ir) > 1.e-12_dp) THEN
./atom_xc.F:               pot0(ir) = 0.5_dp*drho0(ir)/(3._dp*pi*pi*rho0(ir)**fx)
./atom_xc.F:      DEALLOCATE (rho0, rho1, drho0, drho1, delta)
./atom_xc.F:!> \param rho_set ...
./atom_xc.F:!> \param rho ...
./atom_xc.F:!> \param drho ...
./atom_xc.F:   SUBROUTINE fill_rho_set(rho_set, nspins, needs, rho, drho, tau, lap, na)
./atom_xc.F:      TYPE(xc_rho_set_type), POINTER                     :: rho_set
./atom_xc.F:      TYPE(xc_rho_cflags_type), INTENT(in)               :: needs
./atom_xc.F:      REAL(dp), DIMENSION(:, :), POINTER                 :: rho, drho, tau, lap
./atom_xc.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'fill_rho_set', routineP = moduleN//':'//routineN
./atom_xc.F:         CPASSERT(.NOT. needs%rho_spin)
./atom_xc.F:         CPASSERT(.NOT. needs%drho_spin)
./atom_xc.F:         CPASSERT(.NOT. needs%norm_drho_spin)
./atom_xc.F:         CPASSERT(.NOT. needs%drhoa_drhob)
./atom_xc.F:         CPASSERT(.NOT. needs%rho_spin_1_3)
./atom_xc.F:         CPASSERT(.NOT. needs%drho)
./atom_xc.F:         ! Give rho to 1/3
./atom_xc.F:         IF (needs%rho_1_3) THEN
./atom_xc.F:               rho_set%rho_1_3(ia, 1, 1) = MAX(rho(ia, 1), 0.0_dp)**f13
./atom_xc.F:            rho_set%owns%rho_1_3 = .TRUE.
./atom_xc.F:            rho_set%has%rho_1_3 = .TRUE.
./atom_xc.F:         IF (needs%rho) THEN
./atom_xc.F:               rho_set%rho(ia, 1, 1) = rho(ia, 1)
./atom_xc.F:            rho_set%owns%rho = .TRUE.
./atom_xc.F:            rho_set%has%rho = .TRUE.
./atom_xc.F:         IF (needs%norm_drho) THEN
./atom_xc.F:               rho_set%norm_drho(ia, 1, 1) = drho(ia, 1)
./atom_xc.F:            rho_set%owns%norm_drho = .TRUE.
./atom_xc.F:            rho_set%has%norm_drho = .TRUE.
./atom_xc.F:         CPASSERT(.NOT. needs%drho)
./atom_xc.F:         CPASSERT(.NOT. needs%drho_spin)
./atom_xc.F:         CPASSERT(.NOT. needs%drhoa_drhob)
./atom_xc.F:         IF (needs%rho) THEN
./atom_xc.F:               rho_set%rho(ia, 1, 1) = rho(ia, 1)+rho(ia, 2)
./atom_xc.F:            rho_set%owns%rho = .TRUE.
./atom_xc.F:            rho_set%has%rho = .TRUE.
./atom_xc.F:         IF (needs%norm_drho) THEN
./atom_xc.F:               rho_set%norm_drho(ia, 1, 1) = drho(ia, 1)+drho(ia, 2)
./atom_xc.F:            rho_set%owns%norm_drho = .TRUE.
./atom_xc.F:            rho_set%has%norm_drho = .TRUE.
./atom_xc.F:         ! Give rho_spin
./atom_xc.F:         IF (needs%rho_spin) THEN
./atom_xc.F:               rho_set%rhoa(ia, 1, 1) = rho(ia, 1)
./atom_xc.F:               rho_set%rhob(ia, 1, 1) = rho(ia, 2)
./atom_xc.F:            rho_set%owns%rho_spin = .TRUE.
./atom_xc.F:            rho_set%has%rho_spin = .TRUE.
./atom_xc.F:         ! Give rho_spin to 1/3
./atom_xc.F:         IF (needs%rho_spin_1_3) THEN
./atom_xc.F:               rho_set%rhoa_1_3(ia, 1, 1) = MAX(rho(ia, 1), 0.0_dp)**f13
./atom_xc.F:               rho_set%rhob_1_3(ia, 1, 1) = MAX(rho(ia, 2), 0.0_dp)**f13
./atom_xc.F:            rho_set%owns%rho_1_3 = .TRUE.
./atom_xc.F:            rho_set%has%rho_1_3 = .TRUE.
./atom_xc.F:         ! Give the norm of the gradient of rhoa and of rhob separatedly
./atom_xc.F:         IF (needs%norm_drho_spin) THEN
./atom_xc.F:               rho_set%norm_drhoa(ia, 1, 1) = drho(ia, 1)
./atom_xc.F:               rho_set%norm_drhob(ia, 1, 1) = drho(ia, 2)
./atom_xc.F:            rho_set%owns%norm_drho_spin = .TRUE.
./atom_xc.F:            rho_set%has%norm_drho_spin = .TRUE.
./atom_xc.F:               rho_set%tau(ia, 1, 1) = tau(ia, 1)+tau(ia, 2)
./atom_xc.F:            rho_set%owns%tau = .TRUE.
./atom_xc.F:            rho_set%has%tau = .TRUE.
./atom_xc.F:               rho_set%tau(ia, 1, 1) = tau(ia, 1)
./atom_xc.F:            rho_set%owns%tau = .TRUE.
./atom_xc.F:            rho_set%has%tau = .TRUE.
./atom_xc.F:            rho_set%tau_a(ia, 1, 1) = tau(ia, 1)
./atom_xc.F:            rho_set%tau_b(ia, 1, 1) = tau(ia, 2)
./atom_xc.F:         rho_set%owns%tau_spin = .TRUE.
./atom_xc.F:         rho_set%has%tau_spin = .TRUE.
./atom_xc.F:      IF (needs%laplace_rho) THEN
./atom_xc.F:               rho_set%laplace_rho(ia, 1, 1) = lap(ia, 1)+lap(ia, 2)
./atom_xc.F:            rho_set%owns%laplace_rho = .TRUE.
./atom_xc.F:            rho_set%has%laplace_rho = .TRUE.
./atom_xc.F:               rho_set%laplace_rho(ia, 1, 1) = lap(ia, 1)
./atom_xc.F:            rho_set%owns%laplace_rho = .TRUE.
./atom_xc.F:            rho_set%has%laplace_rho = .TRUE.
./atom_xc.F:      IF (needs%laplace_rho_spin) THEN
./atom_xc.F:            rho_set%laplace_rhoa(ia, 1, 1) = lap(ia, 1)
./atom_xc.F:            rho_set%laplace_rhob(ia, 1, 1) = lap(ia, 2)
./atom_xc.F:         rho_set%owns%laplace_rho_spin = .TRUE.
./atom_xc.F:         rho_set%has%laplace_rho_spin = .TRUE.
./atom_xc.F:   END SUBROUTINE fill_rho_set
./atom_xc.F:!> \param rho ...
./atom_xc.F:   SUBROUTINE lda_pade(rho, exc, vxc)
./atom_xc.F:      REAL(dp), DIMENSION(:)                             :: rho, exc, vxc
./atom_xc.F:      n = SIZE(rho)
./atom_xc.F:         IF (rho(i) > 1.e-20_dp) THEN
./atom_xc.F:            rs = rsfac*rho(i)**(-f13)
./atom_xc.F:            exc(i) = epade*rho(i)
./atom_xc.F:!> \param rhoa ...
./atom_xc.F:!> \param rhob ...
./atom_xc.F:   SUBROUTINE lsd_pade(rhoa, rhob, exc, vxca, vxcb)
./atom_xc.F:      REAL(dp), DIMENSION(:)                             :: rhoa, rhob, exc, vxca, vxcb
./atom_xc.F:                                                            rhoab, rs, x, xp, xq
./atom_xc.F:      n = SIZE(rhoa)
./atom_xc.F:         rhoab = rhoa(i)+rhob(i)
./atom_xc.F:         IF (rhoab > 1.e-20_dp) THEN
./atom_xc.F:            rs = rsfac*rhoab**(-f13)
./atom_xc.F:            x = (rhoa(i)-rhob(i))/rhoab
./atom_xc.F:            dx = 2.0_dp*(xp*q-p*xq)/(q*q)*fx2/rhoab
./atom_xc.F:            exc(i) = -p/q*rhoab
./atom_xc.F:            vxca(i) = dc-dx*rhob(i)
./atom_xc.F:            vxcb(i) = dc+dx*rhoa(i)
./hfx_libint_interface.F:         R = potential_parameter%cutoff_radius*SQRT(rho)
./hfx_libint_interface.F:         R = potential_parameter%cutoff_radius*SQRT(rho)
./hfx_libint_interface.F:         R = potential_parameter%cutoff_radius*SQRT(rho)
./qs_loc_methods.F:         IF (.NOT. cell%orthorhombic) THEN
./qs_loc_methods.F:            CPABORT("Non-orthorhombic cell with the selected method NYI")
./qs_environment.F:   USE qs_rho0_ggrid,                   ONLY: rho0_s_grid_create
./qs_environment.F:   USE qs_rho0_methods,                 ONLY: init_rho0
./qs_environment.F:   USE qs_rho0_types,                   ONLY: rho0_mpole_type
./qs_environment.F:   USE qs_rho_atom_methods,             ONLY: init_rho_atom
./qs_environment.F:      TYPE(rho0_mpole_type), POINTER                     :: rho0_mpole
./qs_environment.F:         CALL init_rho_atom(qs_env, gapw_control)
./qs_environment.F:            !       *** Allocate and initialize the compensation density rho0 ***
./qs_environment.F:            CALL init_rho0(qs_env, gapw_control)
./qs_environment.F:      ! Allocate and Initialie rho0 soft on the global grid
./qs_environment.F:         CALL get_qs_env(qs_env=qs_env, rho0_mpole=rho0_mpole)
./qs_environment.F:         CALL rho0_s_grid_create(qs_env, rho0_mpole)
./qs_oce_methods.F:!>      densities rho1_hard and rho1_soft in terms of primitive spherical gaussians.
./manybody_eam.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: rho
./manybody_eam.F:            eam_data(i)%rho = 0.0_dp
./manybody_eam.F:         ALLOCATE (rho(nparticle))
./manybody_eam.F:         rho = 0._dp
./manybody_eam.F:                     CALL get_rho_eam(eam_a, eam_b, rab2, atom_a, atom_b, rho, fac)
./manybody_eam.F:         CALL mp_sum(rho, para_env%group)
./manybody_eam.F:            eam_data(iparticle)%rho = rho(iparticle)
./manybody_eam.F:         DEALLOCATE (rho)
./manybody_eam.F:!> \param rho ...
./manybody_eam.F:   SUBROUTINE get_rho_eam(eam_a, eam_b, rab2, atom_a, atom_b, rho, fac)
./manybody_eam.F:      REAL(dp), INTENT(INOUT)                            :: rho(:)
./manybody_eam.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'get_rho_eam', routineP = moduleN//':'//routineN
./manybody_eam.F:      REAL(dp)                                           :: qq, rab, rhoi, rhoj
./manybody_eam.F:      rhoi = eam_b%rho(index)+qq*eam_b%rhop(index)
./manybody_eam.F:      rhoj = eam_a%rho(index)+qq*eam_a%rhop(index)
./manybody_eam.F:      rho(atom_a) = rho(atom_a)+rhoi*fac
./manybody_eam.F:      rho(atom_b) = rho(atom_b)+rhoj*fac
./manybody_eam.F:   END SUBROUTINE get_rho_eam
./manybody_eam.F:         denspi = eam_a%rhop(index)+qq*(eam_a%rhop(index)-eam_a%rhop(index-1))/eam_a%drar
./manybody_eam.F:         denspi = eam_a%rhop(index)+qq*(eam_a%rhop(index+1)-eam_a%rhop(index))/eam_a%drar
./manybody_eam.F:         denspj = eam_b%rhop(index)+qq*(eam_b%rhop(index)-eam_b%rhop(index-1))/eam_b%drar
./manybody_eam.F:         denspj = eam_b%rhop(index)+qq*(eam_b%rhop(index+1)-eam_b%rhop(index))/eam_b%drar
./qs_ks_atom.F:   USE qs_rho_atom_types,               ONLY: get_rho_atom,&
./qs_ks_atom.F:                                              rho_atom_coeff,&
./qs_ks_atom.F:                                              rho_atom_type
./qs_ks_atom.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_ks_atom.F:      TYPE(rho_atom_type), POINTER                       :: rho_at
./qs_ks_atom.F:      NULLIFY (qs_kind_set, atomic_kind_set, force, oce, para_env, rho_atom, sab_orb)
./qs_ks_atom.F:                      rho_atom_set=rho_atom, &
./qs_ks_atom.F:         rho_atom => p_env%local_rho_set%rho_atom_set
./qs_ks_atom.F:                  CALL prj_gather(rho_atom(iatom)%ga_Vlocal_gb_h(ispin)%r_coef, &
./qs_ks_atom.F:                                  rho_atom(iatom)%cpc_h(ispin)%r_coef, qs_kind_set(ikind))
./qs_ks_atom.F:                  CALL prj_gather(rho_atom(iatom)%ga_Vlocal_gb_s(ispin)%r_coef, &
./qs_ks_atom.F:                                  rho_atom(iatom)%cpc_s(ispin)%r_coef, qs_kind_set(ikind))
./qs_ks_atom.F:                     CALL mp_bcast(rho_atom(iatom)%cpc_h(ispin)%r_coef, ip, para_env%group)
./qs_ks_atom.F:                     CALL mp_bcast(rho_atom(iatom)%cpc_s(ispin)%r_coef, ip, para_env%group)
./qs_ks_atom.F:!$OMP                 , rho_atom, factor, use_virial, atom_of_kind   &
./qs_ks_atom.F:!$OMP                 , katom, rho_at, nsoctot                       &
./qs_ks_atom.F:                           rho_at => rho_atom(katom)
./qs_ks_atom.F:                                                rho_at, nspins, iatom, jatom, nsoctot, factor, &
./qs_ks_atom.F:                              rho_at => rho_atom(katom)
./qs_ks_atom.F:                                                       rho_at, force_tmp, nspins, iatom, jatom, nsoctot, &
./qs_ks_atom.F:                                                       rho_at, force_tmp, nspins, jatom, iatom, nsoctot, &
./qs_ks_atom.F:!> \param rho_atom ...
./qs_ks_atom.F:                              rho_atom, nspins, ia, ja, nsp, factor, lista, nconta, listb, ncontb, &
./qs_ks_atom.F:      TYPE(rho_atom_type), INTENT(IN), POINTER           :: rho_atom
./qs_ks_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_local_h, int_local_s
./qs_ks_atom.F:      CALL get_rho_atom(rho_atom=rho_atom, cpc_h=int_local_h, cpc_s=int_local_s)
./qs_ks_atom.F:!> \param rho_atom ...
./qs_ks_atom.F:                               rho_atom, force, nspins, ia, ja, nsp, lista, nconta, listb, ncontb, &
./qs_ks_atom.F:      TYPE(rho_atom_type), INTENT(IN), POINTER           :: rho_atom
./qs_ks_atom.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: int_local_h, int_local_s
./qs_ks_atom.F:      CALL get_rho_atom(rho_atom=rho_atom, cpc_h=int_local_h, cpc_s=int_local_s)
./qs_linres_epr_utils.F:   USE qs_rho_atom_types,               ONLY: deallocate_rho_atom_set
./qs_linres_epr_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_clear,&
./qs_linres_epr_utils.F:                                              qs_rho_create,&
./qs_linres_epr_utils.F:                                              qs_rho_set
./qs_linres_epr_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./qs_linres_epr_utils.F:            NULLIFY (epr_env%bind_set(idir, i_B)%rho, rho_r, rho_g)
./qs_linres_epr_utils.F:            CALL qs_rho_create(epr_env%bind_set(idir, i_B)%rho)
./qs_linres_epr_utils.F:            ALLOCATE (rho_r(1), rho_g(1))
./qs_linres_epr_utils.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r(1)%pw, &
./qs_linres_epr_utils.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_g(1)%pw, &
./qs_linres_epr_utils.F:            CALL qs_rho_set(epr_env%bind_set(idir, i_B)%rho, rho_r=rho_r, rho_g=rho_g)
./qs_linres_epr_utils.F:            NULLIFY (epr_env%nablavks_set(idir, ispin)%rho, rho_r, rho_g)
./qs_linres_epr_utils.F:            CALL qs_rho_create(epr_env%nablavks_set(idir, ispin)%rho)
./qs_linres_epr_utils.F:            ALLOCATE (rho_r(1), rho_g(1))
./qs_linres_epr_utils.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r(1)%pw, &
./qs_linres_epr_utils.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_g(1)%pw, &
./qs_linres_epr_utils.F:            CALL qs_rho_set(epr_env%nablavks_set(idir, ispin)%rho, &
./qs_linres_epr_utils.F:                            rho_r=rho_r, rho_g=rho_g)
./qs_linres_epr_utils.F:               CALL qs_rho_clear(epr_env%nablavks_set(idir, ispin)%rho)
./qs_linres_epr_utils.F:               DEALLOCATE (epr_env%nablavks_set(idir, ispin)%rho)
./qs_linres_epr_utils.F:            CALL deallocate_rho_atom_set(epr_env%vks_atom_set)
./qs_linres_epr_utils.F:               CALL qs_rho_clear(epr_env%bind_set(idir, i_B)%rho)
./qs_linres_epr_utils.F:               DEALLOCATE (epr_env%bind_set(idir, i_B)%rho)
./qmmm_init.F:                                       hmat=qm_cell_small%hmat, is_ortho=qm_cell_small%orthorhombic, &
./subsys/cell_types.F:                                               cell_sym_orthorhombic = 4, &
./subsys/cell_types.F:                                               cell_sym_rhombohedral = 8, &
./subsys/cell_types.F:      LOGICAL                           :: orthorhombic ! actually means a diagonal hmat
./subsys/cell_types.F:      cell_out%orthorhombic = cell_in%orthorhombic
./subsys/cell_types.F:      cell_out%orthorhombic = cell_in%orthorhombic
./subsys/cell_types.F:!> \param orthorhombic ...
./subsys/cell_types.F:   SUBROUTINE get_cell(cell, alpha, beta, gamma, deth, orthorhombic, abc, periodic, &
./subsys/cell_types.F:      LOGICAL, INTENT(OUT), OPTIONAL                     :: orthorhombic
./subsys/cell_types.F:      IF (PRESENT(orthorhombic)) orthorhombic = cell%orthorhombic
./subsys/cell_types.F:            cell_sym_orthorhombic)
./subsys/cell_types.F:      CASE (cell_sym_rhombohedral)
./subsys/cell_types.F:      ! Do we have an (almost) orthorhombic cell?
./subsys/cell_types.F:         cell%orthorhombic = .TRUE.
./subsys/cell_types.F:         cell%orthorhombic = .FALSE.
./subsys/cell_types.F:      ! Retain an exact orthorhombic cell
./subsys/cell_types.F:      IF (cell%orthorhombic) THEN
./subsys/cell_types.F:      IF ((dim == 1) .AND. (.NOT. cell%orthorhombic)) THEN
./subsys/cell_types.F:         CPABORT("Non-orthorhombic and not periodic")
./subsys/cell_types.F:      IF (cell%orthorhombic) THEN
./subsys/cell_types.F:      IF (cell%orthorhombic) THEN
./subsys/cell_types.F:      IF (cell%orthorhombic) THEN
./subsys/cell_types.F:         IF (cell%orthorhombic) THEN
./subsys/cell_types.F:      IF (cell%orthorhombic) THEN
./subsys/cell_types.F:      IF (cell%orthorhombic) THEN
./subsys/cell_types.F:      cell%orthorhombic = .FALSE.
./kpoint_methods.F:!> \brief Calculate kpoint density matrices (rho(k), owned by kpoint groups)
./xc_adiabatic_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./xc_adiabatic_utils.F:                                              qs_rho_type
./xc_adiabatic_utils.F:!> \param rho ...
./xc_adiabatic_utils.F:   SUBROUTINE rescale_xc_potential(qs_env, ks_matrix, rho, energy, v_rspace_new, v_tau_rspace, &
./xc_adiabatic_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./xc_adiabatic_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao
./xc_adiabatic_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho_xc
./xc_adiabatic_utils.F:               input, xc_section, rho_xc, ks_env, rho_ao)
./xc_adiabatic_utils.F:                      rho_xc=rho_xc, &
./xc_adiabatic_utils.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao)
./xc_adiabatic_utils.F:               CALL derivatives_four_center(qs_env, rho_ao, hfx_sections, para_env, 1, use_virial, &
./xc_adiabatic_utils.F:               CALL derivatives_four_center(qs_env, rho_ao, hfx_sections, para_env, 2, use_virial, &
./xc_adiabatic_utils.F:               CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho_xc, xc_section=xc_section, &
./xc_adiabatic_utils.F:                                  vxc_rho=v_rspace_new, vxc_tau=v_tau_rspace, exc=energy%exc, &
./xc_adiabatic_utils.F:               CALL qs_vxc_create(ks_env=ks_env, rho_struct=rho, xc_section=xc_section, &
./xc_adiabatic_utils.F:                                  vxc_rho=v_rspace_new, vxc_tau=v_tau_rspace, exc=energy%exc, &
./qs_dftb_coulomb.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_dftb_coulomb.F:                                              qs_rho_type
./qs_dftb_coulomb.F:!> \param rho ...
./qs_dftb_coulomb.F:   SUBROUTINE build_dftb_coulomb(qs_env, ks_matrix, rho, mcharge, energy, &
./qs_dftb_coulomb.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_coulomb.F:            force(ikind)%rho_elec(1, atom_i) = force(ikind)%rho_elec(1, atom_i)-gmcharge(iatom, 2)
./qs_dftb_coulomb.F:            force(ikind)%rho_elec(2, atom_i) = force(ikind)%rho_elec(2, atom_i)-gmcharge(iatom, 3)
./qs_dftb_coulomb.F:            force(ikind)%rho_elec(3, atom_i) = force(ikind)%rho_elec(3, atom_i)-gmcharge(iatom, 4)
./qs_dftb_coulomb.F:         CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_dftb_coulomb.F:                  force(ikind)%rho_elec(i, atom_i) = force(ikind)%rho_elec(i, atom_i)+fi
./qs_dftb_coulomb.F:                  force(jkind)%rho_elec(i, atom_j) = force(jkind)%rho_elec(i, atom_j)-fi
./qs_dftb_coulomb.F:         CALL build_dftb3_diagonal(qs_env, ks_matrix, rho, mcharge, energy, &
./qs_dftb_coulomb.F:         CALL build_dftb_coulomb_qmqm(qs_env, ks_matrix, rho, mcharge, energy, &
./qs_dftb_coulomb.F:!> \param rho ...
./qs_dftb_coulomb.F:   SUBROUTINE build_dftb_coulomb_qmqm(qs_env, ks_matrix, rho, mcharge, energy, &
./qs_dftb_coulomb.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb_coulomb.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_dftb_coulomb.F:                  force(ikind)%rho_elec(i, atom_i) = force(ikind)%rho_elec(i, atom_i)+fi
./qs_dftb_coulomb.F:                  force(jkind)%rho_elec(i, atom_j) = force(jkind)%rho_elec(i, atom_j)-fi
./qs_dftb_coulomb.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :, :)     :: rhos
./qs_dftb_coulomb.F:      TYPE(pw_type), POINTER                             :: phi_g, phib_g, rhob_g, rhob_r
./qs_dftb_coulomb.F:      ALLOCATE (rhos(n, n, n))
./qs_dftb_coulomb.F:         CALL get_patch(particle_set, box, green, npts, p1, rhos, is_core=.FALSE., &
./qs_dftb_coulomb.F:         rhos(:, :, :) = rhos(:, :, :)*mcharge(p1)
./qs_dftb_coulomb.F:         CALL dg_sum_patch(rden, rhos, center(:, p1))
./qs_dftb_coulomb.F:      CALL pw_pool_create_pw(pw_pool, rhob_r, use_data=REALDATA3D, &
./qs_dftb_coulomb.F:      CALL rs_pw_transfer(rden, rhob_r, rs2pw)
./qs_dftb_coulomb.F:      CALL pw_pool_create_pw(pw_pool, rhob_g, use_data=COMPLEXDATA1D, &
./qs_dftb_coulomb.F:      CALL pw_transfer(rhob_r, rhob_g)
./qs_dftb_coulomb.F:      rhob_g%cc = rhob_g%cc*green%p3m_charge%cr
./qs_dftb_coulomb.F:         CALL pw_poisson_solve(poisson_env, rhob_g, vgc, phi_g, dphi_g, h_stress=h_stress)
./qs_dftb_coulomb.F:         CALL pw_poisson_solve(poisson_env, rhob_g, vgc, phi_g, dphi_g)
./qs_dftb_coulomb.F:         rhob_g%cc = phi_g%cc*green%p3m_charge%cr
./qs_dftb_coulomb.F:         CALL pw_transfer(rhob_g, rhob_r)
./qs_dftb_coulomb.F:         CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./qs_dftb_coulomb.F:            CALL get_patch(particle_set, box, green, npts, p1, rhos, is_core=.FALSE., &
./qs_dftb_coulomb.F:            CALL dg_sum_patch_force_1d(rpot, rhos, center(:, p1), fint)
./qs_dftb_coulomb.F:               CALL pw_copy(phib_g, rhob_g)
./qs_dftb_coulomb.F:               CALL pw_derive(rhob_g, nd)
./qs_dftb_coulomb.F:               rhob_g%cc = rhob_g%cc*green%p3m_charge%cr
./qs_dftb_coulomb.F:               CALL pw_transfer(rhob_g, rhob_r)
./qs_dftb_coulomb.F:               CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./qs_dftb_coulomb.F:                  CALL get_patch(particle_set, box, green, npts, p1, rhos, &
./qs_dftb_coulomb.F:                  CALL dg_sum_patch_force_1d(rpot, rhos, center(:, p1), fint)
./qs_dftb_coulomb.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_g)
./qs_dftb_coulomb.F:      CALL pw_transfer(phi_g, rhob_r)
./qs_dftb_coulomb.F:      CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./qs_dftb_coulomb.F:            CALL pw_transfer(dphi_g(i)%pw, rhob_r)
./qs_dftb_coulomb.F:            CALL rs_pw_transfer(drpot(i)%rs_grid, rhob_r, pw2rs)
./qs_dftb_coulomb.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_r)
./qs_dftb_coulomb.F:         CALL get_patch(particle_set, box, green, npts, p1, rhos, is_core=.FALSE., &
./qs_dftb_coulomb.F:         CALL dg_sum_patch_force_1d(rpot, rhos, center(:, p1), fint)
./qs_dftb_coulomb.F:            CALL dg_sum_patch_force_3d(drpot, rhos, center(:, p1), fat)
./qs_dftb_coulomb.F:      DEALLOCATE (rhos)
./emd/rt_propagator_init.F:             rt_initialize_rho_from_mos
./emd/rt_propagator_init.F:                                                            rho_old, s_mat
./emd/rt_propagator_init.F:         CALL get_rtp(rtp=rtp, rho_old=rho_old)
./emd/rt_propagator_init.F:      CALL put_data_to_history(rtp, mos=mos_old, s_mat=s_mat, ihist=1, rho=rho_old)
./emd/rt_propagator_init.F:   SUBROUTINE rt_initialize_rho_from_mos(rtp, mos)
./emd/rt_propagator_init.F:      CHARACTER(len=*), PARAMETER :: routineN = 'rt_initialize_rho_from_mos', &
./emd/rt_propagator_init.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_new, rho_old
./emd/rt_propagator_init.F:      CALL get_rtp(rtp=rtp, rho_old=rho_old, rho_new=rho_new)
./emd/rt_propagator_init.F:         CALL dbcsr_set(rho_old(re)%matrix, 0.0_dp)
./emd/rt_propagator_init.F:         CALL cp_dbcsr_plus_fm_fm_t(sparse_matrix=rho_old(re)%matrix, &
./emd/rt_propagator_init.F:         CALL dbcsr_filter(rho_old(re)%matrix, eps=rtp%filter_eps)
./emd/rt_propagator_init.F:         CALL dbcsr_copy(rho_new(re)%matrix, rho_old(re)%matrix)
./emd/rt_propagator_init.F:   END SUBROUTINE rt_initialize_rho_from_mos
./emd/rt_propagation_output.F:   USE qs_linres_current,               ONLY: calculate_jrho_resp
./emd/rt_propagation_output.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./emd/rt_propagation_output.F:                                              qs_rho_type
./emd/rt_propagation_output.F:      REAL(dp)                                           :: orthonormality, tot_rho_r
./emd/rt_propagation_output.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: qs_tot_rho_r
./emd/rt_propagation_output.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, P_im, rho_new
./emd/rt_propagation_output.F:      TYPE(qs_rho_type), POINTER                         :: rho
./emd/rt_propagation_output.F:                      rho=rho, &
./emd/rt_propagation_output.F:      CALL qs_rho_get(rho_struct=rho, tot_rho_r=qs_tot_rho_r)
./emd/rt_propagation_output.F:      tot_rho_r = accurate_sum(qs_tot_rho_r)
./emd/rt_propagation_output.F:            tot_rho_r, &
./emd/rt_propagation_output.F:            tot_rho_r+ &
./emd/rt_propagation_output.F:            CALL get_rtp(rtp=rtp, rho_new=rho_new)
./emd/rt_propagation_output.F:               CALL write_rt_p_to_restart(rho_new, .FALSE.)
./emd/rt_propagation_output.F:               CALL write_rt_p_to_restart(rho_new, .TRUE.)
./emd/rt_propagation_output.F:                  DO spin = 1, SIZE(rho_new)/2
./emd/rt_propagation_output.F:                     CALL rt_current(qs_env, rho_new(2*spin)%matrix, dft_section, spin, SIZE(rho_new)/2)
./emd/rt_propagation_output.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_new
./emd/rt_propagation_output.F:      CALL get_rtp(rtp=rtp, rho_new=rho_new)
./emd/rt_propagation_output.F:      DO i = 1, SIZE(rho_new)
./emd/rt_propagation_output.F:         CALL dbcsr_add(delta_P(i)%matrix, rho_new(i)%matrix, one, -one)
./emd/rt_propagation_output.F:!> \param rho ...
./emd/rt_propagation_output.F:   SUBROUTINE report_density_occupation(filter_eps, rho)
./emd/rt_propagation_output.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho
./emd/rt_propagation_output.F:      CALL dbcsr_allocate_matrix_set(tmp, SIZE(rho))
./emd/rt_propagation_output.F:      DO i = 1, SIZE(rho)
./emd/rt_propagation_output.F:         CALL dbcsr_create(tmp(i)%matrix, template=rho(i)%matrix)
./emd/rt_propagation_output.F:         CALL dbcsr_copy(tmp(i)%matrix, rho(i)%matrix)
./emd/rt_propagation_output.F:      DO ispin = 1, SIZE(rho)/2
./emd/rt_propagation_output.F:            IF (unit_nr > 0) WRITE (unit_nr, FMT="((T3,A,I1,A,F15.12,A,T61,F20.10))") "Occupation of rho spin ", &
./emd/rt_propagation_output.F:            IF (unit_nr > 0) WRITE (unit_nr, FMT="((T3,A,I1,A,F15.12,A,T61,F20.10))") "Occupation of rho spin ", &
./emd/rt_propagation_output.F:!> \param rho_new ...
./emd/rt_propagation_output.F:   SUBROUTINE write_rt_p_to_restart(rho_new, history)
./emd/rt_propagation_output.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_new
./emd/rt_propagation_output.F:      DO ispin = 1, SIZE(rho_new)/2
./emd/rt_propagation_output.F:         cs_pos = dbcsr_checksum(rho_new(re)%matrix, pos=.TRUE.)
./emd/rt_propagation_output.F:         CALL dbcsr_binary_write(rho_new(re)%matrix, file_name)
./emd/rt_propagation_output.F:         cs_pos = dbcsr_checksum(rho_new(im)%matrix, pos=.TRUE.)
./emd/rt_propagation_output.F:         CALL dbcsr_binary_write(rho_new(im)%matrix, file_name)
./emd/rt_propagation_output.F:         CALL calculate_jrho_resp(zero, tmp, zero, zero, dir, dir, rs, gs, qs_env, current_env, retain_rsgrid=.TRUE.)
./emd/rt_propagation_utils.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./emd/rt_propagation_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./emd/rt_propagation_utils.F:                                              qs_rho_set,&
./emd/rt_propagation_utils.F:                                              qs_rho_type
./emd/rt_propagation_utils.F:             calc_update_rho, &
./emd/rt_propagation_utils.F:             calc_update_rho_sparse, &
./emd/rt_propagation_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: p_rmpv, rho_new, rho_old
./emd/rt_propagation_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./emd/rt_propagation_utils.F:      NULLIFY (atomic_kind_set, qs_kind_set, mo_array, particle_set, rho_struct, para_env)
./emd/rt_propagation_utils.F:                      rho=rho_struct, &
./emd/rt_propagation_utils.F:      CALL qs_rho_get(rho_struct, rho_ao=p_rmpv)
./emd/rt_propagation_utils.F:            CALL get_rtp(rtp=rtp, rho_old=rho_old, rho_new=rho_new)
./emd/rt_propagation_utils.F:                  sparse_matrix=rho_old(re)%matrix, &
./emd/rt_propagation_utils.F:               CALL dbcsr_copy(rho_new(i)%matrix, rho_old(i)%matrix)
./emd/rt_propagation_utils.F:            CALL calc_update_rho_sparse(qs_env)
./emd/rt_propagation_utils.F:            CALL get_rtp(rtp=rtp, rho_old=rho_old, rho_new=rho_new)
./emd/rt_propagation_utils.F:               CALL dbcsr_get_info(rho_old(re)%matrix, distribution=dist)
./emd/rt_propagation_utils.F:               CALL dbcsr_binary_read(file_name, distribution=dist, matrix_new=rho_old(re)%matrix)
./emd/rt_propagation_utils.F:               cs_pos = dbcsr_checksum(rho_old(re)%matrix, pos=.TRUE.)
./emd/rt_propagation_utils.F:               CALL dbcsr_get_info(rho_old(im)%matrix, distribution=dist)
./emd/rt_propagation_utils.F:               CALL dbcsr_binary_read(file_name, distribution=dist, matrix_new=rho_old(im)%matrix)
./emd/rt_propagation_utils.F:               cs_pos = dbcsr_checksum(rho_old(im)%matrix, pos=.TRUE.)
./emd/rt_propagation_utils.F:            DO i = 1, SIZE(rho_new)
./emd/rt_propagation_utils.F:               CALL dbcsr_copy(rho_new(i)%matrix, rho_old(i)%matrix)
./emd/rt_propagation_utils.F:            CALL calc_update_rho_sparse(qs_env)
./emd/rt_propagation_utils.F:   SUBROUTINE calc_update_rho(qs_env)
./emd/rt_propagation_utils.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calc_update_rho', &
./emd/rt_propagation_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao, rho_ao_im
./emd/rt_propagation_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./emd/rt_propagation_utils.F:      NULLIFY (rho, ks_env, mos_new, rtp)
./emd/rt_propagation_utils.F:                      rho=rho, &
./emd/rt_propagation_utils.F:      CALL qs_rho_get(rho_struct=rho, rho_ao=rho_ao)
./emd/rt_propagation_utils.F:         CALL dbcsr_set(rho_ao(i)%matrix, zero)
./emd/rt_propagation_utils.F:         CALL cp_dbcsr_plus_fm_fm_t(sparse_matrix=rho_ao(i)%matrix, &
./emd/rt_propagation_utils.F:         CALL cp_dbcsr_plus_fm_fm_t(sparse_matrix=rho_ao(i)%matrix, &
./emd/rt_propagation_utils.F:      CALL qs_rho_update_rho(rho, qs_env)
./emd/rt_propagation_utils.F:         CALL qs_rho_get(rho_struct=rho, rho_ao_im=rho_ao_im)
./emd/rt_propagation_utils.F:         CALL calculate_P_imaginary(qs_env, rtp, rho_ao_im, keep_sparsity=.TRUE.)
./emd/rt_propagation_utils.F:         CALL qs_rho_set(rho, rho_ao_im=rho_ao_im)
./emd/rt_propagation_utils.F:      CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./emd/rt_propagation_utils.F:   END SUBROUTINE calc_update_rho
./emd/rt_propagation_utils.F:!> \brief Copies the density matrix back into the qs_env%rho%rho_ao
./emd/rt_propagation_utils.F:   SUBROUTINE calc_update_rho_sparse(qs_env)
./emd/rt_propagation_utils.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calc_update_rho_sparse', &
./emd/rt_propagation_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao, rho_ao_im, rho_new
./emd/rt_propagation_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./emd/rt_propagation_utils.F:      NULLIFY (rho, ks_env, rtp, dft_control)
./emd/rt_propagation_utils.F:                      rho=rho, &
./emd/rt_propagation_utils.F:      CALL get_rtp(rtp=rtp, rho_new=rho_new)
./emd/rt_propagation_utils.F:      CALL qs_rho_get(rho_struct=rho, rho_ao=rho_ao)
./emd/rt_propagation_utils.F:      IF (rtp%do_hfx) CALL qs_rho_get(rho_struct=rho, rho_ao_im=rho_ao_im)
./emd/rt_propagation_utils.F:      DO ispin = 1, SIZE(rho_ao)
./emd/rt_propagation_utils.F:         CALL dbcsr_set(rho_ao(ispin)%matrix, zero)
./emd/rt_propagation_utils.F:         CALL dbcsr_copy_into_existing(rho_ao(ispin)%matrix, rho_new(ispin*2-1)%matrix)
./emd/rt_propagation_utils.F:         IF (rtp%do_hfx) CALL dbcsr_copy_into_existing(rho_ao_im(ispin)%matrix, rho_new(ispin*2)%matrix)
./emd/rt_propagation_utils.F:      CALL qs_rho_update_rho(rho, qs_env)
./emd/rt_propagation_utils.F:      CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./emd/rt_propagation_utils.F:   END SUBROUTINE calc_update_rho_sparse
./emd/rt_hfx_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./emd/rt_hfx_utils.F:                                              qs_rho_set,&
./emd/rt_hfx_utils.F:                                              qs_rho_type
./emd/rt_hfx_utils.F:                                                            matrix_s, matrix_s_aux, rho_ao_im, &
./emd/rt_hfx_utils.F:                                                            rho_aux_ao_im
./emd/rt_hfx_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux
./emd/rt_hfx_utils.F:      NULLIFY (ks_env, matrix_s, matrix_ks_im, dft_control, sab_orb, rtp, rho, rho_ao_im)
./emd/rt_hfx_utils.F:      NULLIFY (sab_aux, rho_aux, rho_aux_ao_im, matrix_ks_aux_im, matrix_s_aux)
./emd/rt_hfx_utils.F:                      rho=rho, &
./emd/rt_hfx_utils.F:      CALL qs_rho_get(rho, rho_ao_im=rho_ao_im)
./emd/rt_hfx_utils.F:      CALL rebuild_matrices(rho_ao_im, matrix_ks_im, sab_orb, matrix_s, &
./emd/rt_hfx_utils.F:      CALL qs_rho_set(rho, rho_ao_im=rho_ao_im)
./emd/rt_hfx_utils.F:                         rho_aux_fit=rho_aux, &
./emd/rt_hfx_utils.F:         CALL qs_rho_get(rho_aux, rho_ao_im=rho_aux_ao_im)
./emd/rt_hfx_utils.F:         CALL rebuild_matrices(rho_aux_ao_im, matrix_ks_aux_im, sab_aux, matrix_s_aux, &
./emd/rt_hfx_utils.F:         CALL qs_rho_set(rho_aux, rho_ao_im=rho_aux_ao_im)
./emd/rt_make_propagators.F:                                                            rho_new, rho_next, rho_old
./emd/rt_make_propagators.F:                   exp_H_old=exp_H_old, rho_old=rho_old, rho_new=rho_new, rho_next=rho_next)
./emd/rt_make_propagators.F:                                            rho_old(re)%matrix, rho_old(im)%matrix, zero, tmp_re, tmp_im, filter_eps=rtp%filter_eps)
./emd/rt_make_propagators.F:                                            zero, rho_next(re)%matrix, rho_next(im)%matrix, filter_eps=rtp%filter_eps)
./emd/rt_make_propagators.F:               CALL dbcsr_copy(rho_next(re)%matrix, rho_old(re)%matrix)
./emd/rt_make_propagators.F:               CALL dbcsr_copy(rho_next(im)%matrix, rho_old(im)%matrix)
./emd/rt_make_propagators.F:                                      rho_next(re)%matrix, rho_next(im)%matrix, zero, tmp_re, tmp_im, filter_eps=rtp%filter_eps)
./emd/rt_make_propagators.F:                                      zero, rho_new(re)%matrix, rho_new(im)%matrix, filter_eps=rtp%filter_eps)
./emd/rt_make_propagators.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: exp_H_old, propagator_matrix, rho_new, &
./emd/rt_make_propagators.F:                                                            rho_next, rho_old
./emd/rt_make_propagators.F:      CALL get_rtp(rtp=rtp, propagator_matrix=propagator_matrix, rho_old=rho_old, rho_new=rho_new, &
./emd/rt_make_propagators.F:                   rho_next=rho_next)
./emd/rt_make_propagators.F:            ! For EM I have to copy rho_old onto rho_next and for ETRS,
./emd/rt_make_propagators.F:            ! this is the first term of the series of commutators that result in rho_next
./emd/rt_make_propagators.F:            CALL dbcsr_copy(rho_next(re)%matrix, rho_old(re)%matrix)
./emd/rt_make_propagators.F:            CALL dbcsr_copy(rho_next(im)%matrix, rho_old(im)%matrix)
./emd/rt_make_propagators.F:                     exp_H_old(im)%matrix, rho_next(re)%matrix, rho_next(im)%matrix, &
./emd/rt_make_propagators.F:                     exp_H_old(re)%matrix, exp_H_old(im)%matrix, rho_next(re)%matrix, rho_next(im)%matrix, &
./emd/rt_make_propagators.F:         CALL dbcsr_copy(rho_new(re)%matrix, rho_next(re)%matrix)
./emd/rt_make_propagators.F:         CALL dbcsr_copy(rho_new(im)%matrix, rho_next(im)%matrix)
./emd/rt_make_propagators.F:               propagator_matrix(im)%matrix, rho_new(re)%matrix, rho_new(im)%matrix, &
./emd/rt_make_propagators.F:               propagator_matrix(re)%matrix, propagator_matrix(im)%matrix, rho_new(re)%matrix, rho_new(im)%matrix, &
./emd/rt_propagation_methods.F:                                              calc_update_rho,&
./emd/rt_propagation_methods.F:                                              calc_update_rho_sparse
./emd/rt_propagation_methods.F:                                                            rho_new
./emd/rt_propagation_methods.F:      NULLIFY (delta_P, rho_new, delta_mos, mos_new)
./emd/rt_propagation_methods.F:            CALL calc_update_rho_sparse(qs_env)
./emd/rt_propagation_methods.F:            CALL calc_update_rho(qs_env)
./emd/rt_propagation_methods.F:         CALL get_rtp(rtp=rtp, rho_new=rho_new)
./emd/rt_propagation_methods.F:         CALL dbcsr_allocate_matrix_set(delta_P, SIZE(rho_new))
./emd/rt_propagation_methods.F:         DO i = 1, SIZE(rho_new)
./emd/rt_propagation_methods.F:            CALL dbcsr_create(delta_P(i)%matrix, template=rho_new(i)%matrix)
./emd/rt_propagation_methods.F:            CALL dbcsr_copy(delta_P(i)%matrix, rho_new(i)%matrix)
./emd/rt_propagation_methods.F:            CALL calc_update_rho_sparse(qs_env)
./emd/rt_propagation_methods.F:            CALL calc_update_rho(qs_env)
./emd/rt_propagation_methods.F:         CALL calc_update_rho(qs_env)
./emd/rt_propagation_methods.F:         CALL calc_update_rho_sparse(qs_env)
./emd/rt_propagation_methods.F:                                                            matrix_ks_im, rho_new, rho_old, s_mat
./emd/rt_propagation_methods.F:            CALL get_rtp(rtp=rtp, rho_old=rho_old, rho_new=rho_new)
./emd/rt_propagation_methods.F:            CALL purify_mcweeny_complex_nonorth(rho_new, s_mat, rtp%filter_eps, rtp%filter_eps_small, &
./emd/rt_propagation_methods.F:            IF (rtp_control%mcweeny_max_iter > 0) CALL calc_update_rho_sparse(qs_env)
./emd/rt_propagation_methods.F:            CALL report_density_occupation(rtp%filter_eps, rho_new)
./emd/rt_propagation_methods.F:            DO i = 1, SIZE(rho_new)
./emd/rt_propagation_methods.F:               CALL dbcsr_copy(rho_old(i)%matrix, rho_new(i)%matrix)
./emd/rt_propagation_methods.F:            CALL put_data_to_history(rtp, rho=rho_new, mos=mos_new, ihist=ihist)
./emd/rt_propagation_methods.F:            CALL put_data_to_history(rtp, rho=rho_new, mos=mos_new, s_mat=s_mat, ihist=ihist)
./emd/rt_propagation_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_new, s_hist
./emd/rt_propagation_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_hist
./emd/rt_propagation_methods.F:      NULLIFY (rho_hist)
./emd/rt_propagation_methods.F:         CALL get_rtp(rtp=rtp, rho_new=rho_new)
./emd/rt_propagation_methods.F:         nmat = SIZE(rho_new)
./emd/rt_propagation_methods.F:         rho_hist => rtp%history%rho_history
./emd/rt_propagation_methods.F:                  CALL dbcsr_add(rho_new(imat)%matrix, rho_hist(imat, ihist)%matrix, zero, alpha)
./emd/rt_propagation_methods.F:                  CALL dbcsr_add(rho_new(imat)%matrix, rho_hist(imat, ihist)%matrix, one, alpha)
./emd/rt_propagation_methods.F:!> \param rho ...
./emd/rt_propagation_methods.F:   SUBROUTINE put_data_to_history(rtp, mos, rho, s_mat, ihist)
./emd/rt_propagation_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho
./emd/rt_propagation_methods.F:         DO i = 1, SIZE(rho)
./emd/rt_propagation_methods.F:            CALL dbcsr_copy(rtp%history%rho_history(i, ihist)%matrix, rho(i)%matrix)
./input_cp2k_xc.F:        xc_old_f_routine, xc_pbe_orig, xc_pbe_rev, xc_pbe_sol, xc_rho_nn10, xc_rho_nn50, &
./input_cp2k_xc.F:        xc_rho_no_smooth, xc_rho_spline2_smooth, xc_rho_spline3_smooth, xc_test_lsd_f_routine, &
./input_cp2k_xc.F:                                        "Uses the 1996 functional of Perdew, Burke and Ernzerhof"), &
./input_cp2k_xc.F:                          description="Value of the K_rho parameter (default = 0.42).", &
./input_cp2k_xc.F:      CALL keyword_create(keyword, name="xc_smooth_rho", &
./input_cp2k_xc.F:                          usage="xc_smooth_rho nn10", default_i_val=xc_rho_no_smooth, &
./input_cp2k_xc.F:                          enum_i_vals=(/xc_rho_no_smooth, xc_rho_nn50, xc_rho_nn10, &
./input_cp2k_xc.F:                                        xc_rho_spline2_smooth, xc_rho_spline2_smooth, xc_rho_spline3_smooth, &
./input_cp2k_xc.F:                                        xc_rho_spline3_smooth/))
./optbas_fenv_manipulation.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./optbas_fenv_manipulation.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./optbas_fenv_manipulation.F:                                              qs_rho_type
./optbas_fenv_manipulation.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./optbas_fenv_manipulation.F:      TYPE(qs_rho_type), POINTER                         :: rho
./optbas_fenv_manipulation.F:      NULLIFY (rho, dft_control, rho_ao)
./optbas_fenv_manipulation.F:      CALL get_qs_env(qs_env, rho=rho, dft_control=dft_control)
./optbas_fenv_manipulation.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./optbas_fenv_manipulation.F:         CALL calculate_density_matrix(qs_env%mos(ispin)%mo_set, rho_ao(ispin)%matrix)
./optbas_fenv_manipulation.F:      CALL qs_rho_update_rho(rho, qs_env)
./optbas_fenv_manipulation.F:      CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./lri_optimize_ri_basis.F:   USE lri_environment_types,           ONLY: allocate_lri_ints_rho,&
./lri_optimize_ri_basis.F:                                              deallocate_lri_ints_rho,&
./lri_optimize_ri_basis.F:                                              lri_int_rho_type,&
./lri_optimize_ri_basis.F:                                              lri_rhoab_type
./lri_optimize_ri_basis.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./lri_optimize_ri_basis.F:                                              qs_rho_type
./lri_optimize_ri_basis.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./lri_optimize_ri_basis.F:               lri_opt, lri_optbas_section, rho_struct)
./lri_optimize_ri_basis.F:                      para_env=para_env, rho=rho_struct)
./lri_optimize_ri_basis.F:      CALL qs_rho_get(rho_struct, rho_ao_kp=pmatrix)
./lri_optimize_ri_basis.F:      TYPE(lri_int_rho_type), POINTER                    :: lriir
./lri_optimize_ri_basis.F:      TYPE(lri_list_type), POINTER                       :: lri_ints_rho
./lri_optimize_ri_basis.F:      NULLIFY (cell, lriir, lri_ints_rho, nl_iterator, obasa, obasb, &
./lri_optimize_ri_basis.F:         IF (ASSOCIATED(lri_env%lri_ints_rho)) THEN
./lri_optimize_ri_basis.F:            CALL deallocate_lri_ints_rho(lri_env%lri_ints_rho)
./lri_optimize_ri_basis.F:         CALL allocate_lri_ints_rho(lri_env, lri_env%lri_ints_rho, nkind)
./lri_optimize_ri_basis.F:         lri_ints_rho => lri_env%lri_ints_rho
./lri_optimize_ri_basis.F:            lriir => lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho(jneighbor)
./lri_optimize_ri_basis.F:         WRITE (iunit, '(/," POWELL| Accuracy",T69,ES12.5)') opt_state%rhoend
./lri_optimize_ri_basis.F:         WRITE (iunit, '(" POWELL| Initial step size",T69,ES12.5)') opt_state%rhobeg
./lri_optimize_ri_basis.F:                                r_val=opt_state%rhoend)
./lri_optimize_ri_basis.F:                                r_val=opt_state%rhobeg)
./lri_optimize_ri_basis.F:!>        of rhoexact - rhofit, i.e. integral[(rhoexact-rhofit)**2]
./lri_optimize_ri_basis.F:!>        rhoexact is the exact pair density and rhofit the lri pair density
./lri_optimize_ri_basis.F:      REAL(KIND=dp)                                      :: obj_ab, rhoexact_sq, rhofit_sq, rhomix
./lri_optimize_ri_basis.F:      TYPE(lri_int_rho_type), POINTER                    :: lriir
./lri_optimize_ri_basis.F:      TYPE(lri_list_type), POINTER                       :: lri_rho
./lri_optimize_ri_basis.F:      TYPE(lri_rhoab_type), POINTER                      :: lrho
./lri_optimize_ri_basis.F:      NULLIFY (lrii, lriir, lri_rho, lrho, nl_iterator, pmat, soo_list)
./lri_optimize_ri_basis.F:         lri_opt%rho_diff = 0._dp
./lri_optimize_ri_basis.F:            lri_rho => lri_density%lri_rhos(ispin)%lri_list
./lri_optimize_ri_basis.F:!$OMP SHARED (nthread,nl_iterator,pmat,nkind,fobj,lri_env,lri_opt,lri_rho)&
./lri_optimize_ri_basis.F:!$OMP          iac,lrii,lriir,lrho,nfa,nfb,nba,nbb,nn,rhoexact_sq,rhomix,rhofit_sq,&
./lri_optimize_ri_basis.F:               lriir => lri_env%lri_ints_rho%lri_atom(iac)%lri_node(ilist)%lri_int_rho(jneighbor)
./lri_optimize_ri_basis.F:               lrho => lri_rho%lri_atom(iac)%lri_node(ilist)%lri_rhoab(jneighbor)
./lri_optimize_ri_basis.F:               rhoexact_sq = 0._dp
./lri_optimize_ri_basis.F:               rhomix = 0._dp
./lri_optimize_ri_basis.F:               rhofit_sq = 0._dp
./lri_optimize_ri_basis.F:               ! *** calculate integral of the square of exact density rhoexact_sq
./lri_optimize_ri_basis.F:                              rhoexact_sq = rhoexact_sq+pbij(ksgfb, isgfa)*pbij(lsgfb, jsgfa) &
./lri_optimize_ri_basis.F:                              rhoexact_sq = rhoexact_sq+pbij(isgfa, ksgfb)*pbij(jsgfa, lsgfb) &
./lri_optimize_ri_basis.F:               ! *** calculate integral of the square of the fitted density rhofit_sq
./lri_optimize_ri_basis.F:                     rhofit_sq = rhofit_sq+lrho%avec(isgfa)*lrho%avec(jsgfa) &
./lri_optimize_ri_basis.F:                        rhofit_sq = rhofit_sq+lrho%avec(nfa+ksgfb)*lrho%avec(nfa+lsgfb) &
./lri_optimize_ri_basis.F:                        rhofit_sq = rhofit_sq+2._dp*lrho%avec(isgfa)*lrho%avec(nfa+ksgfb) &
./lri_optimize_ri_basis.F:               ! *** and integral of the product of exact and fitted density rhomix
./lri_optimize_ri_basis.F:                  rhomix = SUM(lrho%avec(1:nfa)*lrho%tvec(1:nfa))
./lri_optimize_ri_basis.F:                  rhomix = SUM(lrho%avec(1:nn)*lrho%tvec(1:nn))
./lri_optimize_ri_basis.F:                  obj_ab = rhoexact_sq-2._dp*rhomix+rhofit_sq
./lri_optimize_ri_basis.F:                  obj_ab = 2.0_dp*(rhoexact_sq-2._dp*rhomix+rhofit_sq)
./lri_optimize_ri_basis.F:                  lri_opt%rho_diff = lri_opt%rho_diff+obj_ab
./lri_optimize_ri_basis.F:               lri_opt%rho_diff
./atom_grb.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:)           :: ale, alp, rho
./atom_grb.F:      ALLOCATE (rho(basis%grid%nr))
./atom_grb.F:      CALL atom_density(rho(:), atom%orbitals%pmat, atom%basis, maxl, typ="RHO")
./atom_grb.F:      n = SUM(MAXLOC(rho(:)))
./atom_grb.F:      DEALLOCATE (rho)
./atom_grb.F:      ALLOCATE (rho(num_gto))
./atom_grb.F:         CALL hydrogenic(zval, rconf, l, alp, num_gto, rho, pbasis(:, :, l))
./atom_grb.F:      DEALLOCATE (rho)
./atom_grb.F:      ALLOCATE (rho(n))
./atom_grb.F:         CALL hydrogenic(zval, rconf, l, ale, n, rho, ebasis(:, :, l))
./atom_grb.F:      DEALLOCATE (rho)
./atom_grb.F:      CALL section_vals_val_get(powell_section, "ACCURACY", r_val=ostate%rhoend)
./atom_grb.F:      CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=ostate%rhobeg)
./atom_grb.F:      CALL section_vals_val_get(powell_section, "ACCURACY", r_val=ostate%rhoend)
./atom_grb.F:      CALL section_vals_val_get(powell_section, "STEP_SIZE", r_val=ostate%rhobeg)
./atom_electronic_structure.F:      TYPE(opgrid_type), POINTER                         :: cpot, density, rhoa, rhob
./atom_electronic_structure.F:      NULLIFY (density, rhoa, rhob, cpot)
./atom_electronic_structure.F:      CALL create_opgrid(rhoa, atom%basis%grid)
./atom_electronic_structure.F:      CALL create_opgrid(rhob, atom%basis%grid)
./atom_electronic_structure.F:         CALL slater_density(rhoa%op, rhob%op, atom%z, atom%state, atom%basis%grid)
./atom_electronic_structure.F:         density%op = rhoa%op+rhob%op
./atom_electronic_structure.F:         density%op = 2._dp*rhoa%op
./atom_electronic_structure.F:         density%op = 2._dp*rhob%op
./atom_electronic_structure.F:      CALL release_opgrid(rhoa)
./atom_electronic_structure.F:      CALL release_opgrid(rhob)
./qs_wf_history_methods.F:        wfi_use_prev_p_method_nr, wfi_use_prev_rho_r_method_nr, wfi_use_prev_wf_method_nr
./qs_wf_history_methods.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_wf_history_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_wf_history_methods.F:                                              qs_rho_set,&
./qs_wf_history_methods.F:                                              qs_rho_type
./qs_wf_history_methods.F:      NULLIFY (snapshot%wf, snapshot%rho_r, &
./qs_wf_history_methods.F:               snapshot%rho_g, snapshot%rho_ao, snapshot%rho_ao_kp, &
./qs_wf_history_methods.F:               snapshot%overlap, snapshot%rho_frozen)
./qs_wf_history_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, rho_ao
./qs_wf_history_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_wf_history_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./qs_wf_history_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_wf_history_methods.F:               rho, rho_r, rho_g, rho_ao, matrix_s)
./qs_wf_history_methods.F:                      dft_control=dft_control, rho=rho)
./qs_wf_history_methods.F:      IF (wf_history%store_rho_r) THEN
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_r=rho_r)
./qs_wf_history_methods.F:         CPASSERT(ASSOCIATED(rho_r))
./qs_wf_history_methods.F:         IF (.NOT. ASSOCIATED(snapshot%rho_r)) THEN
./qs_wf_history_methods.F:            ALLOCATE (snapshot%rho_r(nspins))
./qs_wf_history_methods.F:               NULLIFY (snapshot%rho_r(ispin)%pw)
./qs_wf_history_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, snapshot%rho_r(ispin)%pw, &
./qs_wf_history_methods.F:            CALL pw_copy(rho_r(ispin)%pw, snapshot%rho_r(ispin)%pw)
./qs_wf_history_methods.F:      ELSE IF (ASSOCIATED(snapshot%rho_r)) THEN
./qs_wf_history_methods.F:         DO ispin = 1, SIZE(snapshot%rho_r)
./qs_wf_history_methods.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, snapshot%rho_r(ispin)%pw)
./qs_wf_history_methods.F:         DEALLOCATE (snapshot%rho_r)
./qs_wf_history_methods.F:      IF (wf_history%store_rho_g) THEN
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_g=rho_g)
./qs_wf_history_methods.F:         CPASSERT(ASSOCIATED(rho_g))
./qs_wf_history_methods.F:         IF (.NOT. ASSOCIATED(snapshot%rho_g)) THEN
./qs_wf_history_methods.F:            ALLOCATE (snapshot%rho_g(nspins))
./qs_wf_history_methods.F:               NULLIFY (snapshot%rho_g(ispin)%pw)
./qs_wf_history_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, snapshot%rho_g(ispin)%pw, &
./qs_wf_history_methods.F:            CALL pw_copy(rho_g(ispin)%pw, snapshot%rho_g(ispin)%pw)
./qs_wf_history_methods.F:      ELSE IF (ASSOCIATED(snapshot%rho_g)) THEN
./qs_wf_history_methods.F:         DO ispin = 1, SIZE(snapshot%rho_g)
./qs_wf_history_methods.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, snapshot%rho_g(ispin)%pw)
./qs_wf_history_methods.F:         DEALLOCATE (snapshot%rho_g)
./qs_wf_history_methods.F:      IF (ASSOCIATED(snapshot%rho_ao)) THEN ! the sparsity might be different
./qs_wf_history_methods.F:         CALL dbcsr_deallocate_matrix_set(snapshot%rho_ao)
./qs_wf_history_methods.F:      IF (wf_history%store_rho_ao) THEN
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:         CPASSERT(ASSOCIATED(rho_ao))
./qs_wf_history_methods.F:         CALL dbcsr_allocate_matrix_set(snapshot%rho_ao, nspins)
./qs_wf_history_methods.F:            ALLOCATE (snapshot%rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:            CALL dbcsr_copy(snapshot%rho_ao(ispin)%matrix, rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:      IF (ASSOCIATED(snapshot%rho_ao_kp)) THEN ! the sparsity might be different
./qs_wf_history_methods.F:         CALL dbcsr_deallocate_matrix_set(snapshot%rho_ao_kp)
./qs_wf_history_methods.F:      IF (wf_history%store_rho_ao_kp) THEN
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_wf_history_methods.F:         CPASSERT(ASSOCIATED(rho_ao_kp))
./qs_wf_history_methods.F:         CALL dbcsr_allocate_matrix_set(snapshot%rho_ao_kp, nspins, nimg)
./qs_wf_history_methods.F:               ALLOCATE (snapshot%rho_ao_kp(ispin, img)%matrix)
./qs_wf_history_methods.F:               CALL dbcsr_copy(snapshot%rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:                               rho_ao_kp(ispin, img)%matrix)
./qs_wf_history_methods.F:         ! CALL deallocate_matrix_set(snapshot%rho_frozen%rho_ao)
./qs_wf_history_methods.F:      wf_history%store_rho_r = .FALSE.
./qs_wf_history_methods.F:      wf_history%store_rho_g = .FALSE.
./qs_wf_history_methods.F:      wf_history%store_rho_ao = .FALSE.
./qs_wf_history_methods.F:      wf_history%store_rho_ao_kp = .FALSE.
./qs_wf_history_methods.F:         wf_history%store_rho_ao = .TRUE.
./qs_wf_history_methods.F:      CASE (wfi_use_prev_rho_r_method_nr)
./qs_wf_history_methods.F:         wf_history%store_rho_ao = .TRUE.
./qs_wf_history_methods.F:         wf_history%store_rho_ao = .TRUE.
./qs_wf_history_methods.F:         wf_history%interpolation_method_nr = wfi_use_prev_rho_r_method_nr
./qs_wf_history_methods.F:      IF (wf_history%store_rho_ao) THEN
./qs_wf_history_methods.F:         wf_history%store_rho_ao_kp = .TRUE.
./qs_wf_history_methods.F:         wf_history%store_rho_ao = .FALSE.
./qs_wf_history_methods.F:      CASE (wfi_use_prev_rho_r_method_nr)
./qs_wf_history_methods.F:         res = "previous_rho_r"
./qs_wf_history_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao, rho_frozen_ao
./qs_wf_history_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_wf_history_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_wf_history_methods.F:               rho, rho_ao, rho_frozen_ao)
./qs_wf_history_methods.F:      CALL get_qs_env(qs_env, mos=mos, rho=rho, do_kpoints=do_kpoints)
./qs_wf_history_methods.F:         CPASSERT(ASSOCIATED(t0_state%rho_frozen))
./qs_wf_history_methods.F:         CALL qs_rho_get(t0_state%rho_frozen, rho_ao=rho_frozen_ao)
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:         DO ispin = 1, SIZE(rho_frozen_ao)
./qs_wf_history_methods.F:            CALL dbcsr_copy(rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:                            rho_frozen_ao(ispin)%matrix, &
./qs_wf_history_methods.F:         !FM updating rho_ao directly with t0_state%rho_ao would have the
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:      CASE (wfi_use_prev_rho_r_method_nr)
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t0_state%rho_ao_kp))
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_wf_history_methods.F:            DO ispin = 1, SIZE(t0_state%rho_ao_kp, 1)
./qs_wf_history_methods.F:               DO img = 1, SIZE(t0_state%rho_ao_kp, 2)
./qs_wf_history_methods.F:                  CALL dbcsr_copy(rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:                                  t0_state%rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t0_state%rho_ao))
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:            DO ispin = 1, SIZE(t0_state%rho_ao)
./qs_wf_history_methods.F:               CALL dbcsr_copy(rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:                               t0_state%rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:         ! Why is rho_g valid at this point ?
./qs_wf_history_methods.F:         CALL qs_rho_set(rho, rho_g_valid=.TRUE.)
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:                                          density_matrix=rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t0_state%rho_ao_kp))
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_wf_history_methods.F:            DO ispin = 1, SIZE(t0_state%rho_ao_kp, 1)
./qs_wf_history_methods.F:               DO img = 1, SIZE(t0_state%rho_ao_kp, 2)
./qs_wf_history_methods.F:                  CALL dbcsr_copy(rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:                                  t0_state%rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t0_state%rho_ao))
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:            DO ispin = 1, SIZE(t0_state%rho_ao)
./qs_wf_history_methods.F:               CALL dbcsr_copy(rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:                               t0_state%rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:         !FM updating rho_ao directly with t0_state%rho_ao would have the
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:                                          density_matrix=rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:                               rho_changed=.TRUE.)
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t0_state%rho_ao_kp))
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t1_state%rho_ao_kp))
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t0_state%rho_ao))
./qs_wf_history_methods.F:            CPASSERT(ASSOCIATED(t1_state%rho_ao))
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_wf_history_methods.F:            DO ispin = 1, SIZE(rho_ao_kp, 1)
./qs_wf_history_methods.F:               DO img = 1, SIZE(rho_ao_kp, 2)
./qs_wf_history_methods.F:                  CALL dbcsr_add(rho_ao_kp(ispin, img)%matrix, t1_state%rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:                  CALL dbcsr_add(rho_ao_kp(ispin, img)%matrix, t0_state%rho_ao_kp(ispin, img)%matrix, &
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:            DO ispin = 1, SIZE(rho_ao)
./qs_wf_history_methods.F:               CALL dbcsr_add(rho_ao(ispin)%matrix, t1_state%rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:               CALL dbcsr_add(rho_ao(ispin)%matrix, t0_state%rho_ao(ispin)%matrix, &
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:                                          density_matrix=rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:            CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:                                          density_matrix=rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:         CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_wf_history_methods.F:                                          density_matrix=rho_ao(ispin)%matrix)
./qs_wf_history_methods.F:         CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_wf_history_methods.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./qs_wf_history_methods.F:            wfi_use_prev_p_method_nr, wfi_use_prev_rho_r_method_nr, &
./se_core_matrix.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./se_core_matrix.F:                                              qs_rho_type
./se_core_matrix.F:      TYPE(qs_rho_type), POINTER                         :: rho
./se_core_matrix.F:      NULLIFY (rho, force, atomic_kind_set, qs_kind_set, sab_orb, &
./se_core_matrix.F:                      rho=rho, &
./se_core_matrix.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./lri_optimize_ri_basis_types.F:      REAL(KIND=dp)                                      :: rho_diff
./qs_scf_post_se.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf_post_se.F:                                              qs_rho_type
./qs_scf_post_se.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_se.F:      NULLIFY (dft_control, mos, rho, &
./qs_scf_post_se.F:                      rho=rho, &
./qs_scf_post_se.F:      CALL qs_scf_post_charges(input, logger, qs_env, rho, para_env)
./qs_scf_post_se.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_se.F:                         rho=rho, &
./qs_scf_post_se.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_scf_post_se.F:!> \param rho ...
./qs_scf_post_se.F:   SUBROUTINE qs_scf_post_charges(input, logger, qs_env, rho, &
./qs_scf_post_se.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_se.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./qs_scf_post_se.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: ks_rmpv, rho_ao
./qs_scf_post_se.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_post_se.F:      NULLIFY (cell, dft_control, mos, atomic_kind_set, particle_set, rho, &
./qs_scf_post_se.F:               particles, subsys, para_env, rho_ao)
./qs_scf_post_se.F:                      rho=rho, &
./qs_scf_post_se.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_scf_post_se.F:            CALL cp_dbcsr_write_sparse_matrix(rho_ao(ispin)%matrix, 4, after, qs_env, &
./qs_scf_post_se.F:         CALL qs_ks_did_change(qs_env%ks_env, rho_changed=.TRUE.)
./mixed_cdft_methods.F:                                                       mixed_cdft%eps_rho_rspace, ga_gb_function=FUNC_AB, &
./qs_vxc.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_vxc.F:                                              qs_rho_type
./qs_vxc.F:!>      the dependence on rho and the one on tau
./qs_vxc.F:!> \param rho_struct density for which v_xc is calculated
./qs_vxc.F:!> \param vxc_rho will contain the v_xc part that depend on rho
./qs_vxc.F:   SUBROUTINE qs_vxc_create(ks_env, rho_struct, xc_section, vxc_rho, vxc_tau, exc, &
./qs_vxc.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_vxc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: vxc_rho, vxc_tau
./qs_vxc.F:      LOGICAL :: compute_virial, do_adiabatic_rescaling, my_just_energy, rho_g_valid, &
./qs_vxc.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: my_vxc_rho, my_vxc_tau, rho_g, &
./qs_vxc.F:                                                            rho_m_gspace, rho_m_rspace, rho_r, &
./qs_vxc.F:                                                            rho_struct_g, rho_struct_r, tau, &
./qs_vxc.F:      TYPE(pw_p_type), POINTER                           :: rho_nlcc, rho_nlcc_g
./qs_vxc.F:      CPASSERT(.NOT. ASSOCIATED(vxc_rho))
./qs_vxc.F:      NULLIFY (dft_control, pw_env, auxbas_pw_pool, xc_pw_pool, vdw_pw_pool, cell, my_vxc_rho, &
./qs_vxc.F:               tmp_pw, tmp_g, tmp_g2, my_vxc_tau, rho_g, rho_r, tau, rho_m_rspace, &
./qs_vxc.F:               rho_m_gspace, rho_nlcc, rho_nlcc_g, rho_struct_r, rho_struct_g, tau_struct_r)
./qs_vxc.F:                      rho_nlcc=rho_nlcc, &
./qs_vxc.F:                      rho_nlcc_g=rho_nlcc_g)
./qs_vxc.F:      CALL qs_rho_get(rho_struct, &
./qs_vxc.F:                      rho_g_valid=rho_g_valid, &
./qs_vxc.F:                      rho_r=rho_struct_r, &
./qs_vxc.F:                      rho_g=rho_struct_g, &
./qs_vxc.F:         CPASSERT(ASSOCIATED(rho_struct))
./qs_vxc.F:         ! Normal DFT computes E(rho_alpha,rho_beta) (or its variant E(2*rho_alpha) for non-LSD)
./qs_vxc.F:         ! SIC can             E(rho_alpha,rho_beta)-b*(E(rho_alpha,rho_beta)-E(rho_beta,rho_beta))
./qs_vxc.F:         ! or compute          E(rho_alpha,rho_beta)-b*E(rho_alpha-rho_beta,0)
./qs_vxc.F:         ! my_scaling is the scaling needed of the standard E(rho_alpha,rho_beta) term
./qs_vxc.F:         ALLOCATE (rho_r(dft_control%nspins))
./qs_vxc.F:               rho_r(ispin)%pw => rho_struct_r(ispin)%pw
./qs_vxc.F:            IF (rho_g_valid) THEN
./qs_vxc.F:               ALLOCATE (rho_g(dft_control%nspins))
./qs_vxc.F:                  rho_g(ispin)%pw => rho_struct_g(ispin)%pw
./qs_vxc.F:            CPASSERT(rho_g_valid)
./qs_vxc.F:            ALLOCATE (rho_g(dft_control%nspins))
./qs_vxc.F:               CALL pw_pool_create_pw(xc_pw_pool, rho_g(ispin)%pw, &
./qs_vxc.F:               CALL pw_transfer(rho_struct_g(ispin)%pw, rho_g(ispin)%pw)
./qs_vxc.F:               CALL pw_pool_create_pw(xc_pw_pool, rho_r(ispin)%pw, &
./qs_vxc.F:               CALL pw_transfer(rho_g(ispin)%pw, rho_r(ispin)%pw)
./qs_vxc.F:         IF (ASSOCIATED(rho_nlcc)) THEN
./qs_vxc.F:               CALL pw_axpy(rho_nlcc%pw, rho_r(ispin)%pw, factor)
./qs_vxc.F:               CALL pw_axpy(rho_nlcc_g%pw, rho_g(ispin)%pw, factor)
./qs_vxc.F:         ! here the rho_r, rho_g, tau is what it should be
./qs_vxc.F:         ! we get back the right my_vxc_rho and my_vxc_tau as required
./qs_vxc.F:            exc = xc_exc_calc(rho_r=rho_r, tau=tau, &
./qs_vxc.F:                              rho_g=rho_g, xc_section=xc_section, &
./qs_vxc.F:            CALL xc_vxc_pw_create1(vxc_rho=my_vxc_rho, vxc_tau=my_vxc_tau, rho_r=rho_r, &
./qs_vxc.F:                                   rho_g=rho_g, tau=tau, exc=exc, &
./qs_vxc.F:         IF (ASSOCIATED(rho_nlcc)) THEN
./qs_vxc.F:               CALL pw_axpy(rho_nlcc%pw, rho_r(ispin)%pw, factor)
./qs_vxc.F:               CALL pw_axpy(rho_nlcc_g%pw, rho_g(ispin)%pw, factor)
./qs_vxc.F:               CALL calculate_dispersion_nonloc(my_vxc_rho, rho_r, rho_g, edisp, dispersion_env, &
./qs_vxc.F:               CALL calculate_dispersion_nonloc(my_vxc_rho, rho_r, rho_g, edisp, dispersion_env, &
./qs_vxc.F:               IF (ASSOCIATED(my_vxc_rho)) THEN
./qs_vxc.F:                  DO ispin = 1, SIZE(my_vxc_rho)
./qs_vxc.F:                     my_vxc_rho(ispin)%pw%cr3d = my_vxc_rho(ispin)%pw%cr3d*my_adiabatic_rescale_factor
./qs_vxc.F:            IF (ASSOCIATED(my_vxc_rho)) THEN
./qs_vxc.F:               DO ispin = 1, SIZE(my_vxc_rho)
./qs_vxc.F:                  my_vxc_rho(ispin)%pw%cr3d = my_vxc_rho(ispin)%pw%cr3d*my_scaling
./qs_vxc.F:         IF (ASSOCIATED(my_vxc_rho)) THEN
./qs_vxc.F:            ALLOCATE (vxc_rho(dft_control%nspins))
./qs_vxc.F:               vxc_rho(ispin)%pw => my_vxc_rho(ispin)%pw
./qs_vxc.F:            DEALLOCATE (my_vxc_rho)
./qs_vxc.F:            ALLOCATE (rho_m_rspace(2), rho_m_gspace(2))
./qs_vxc.F:            CALL pw_pool_create_pw(xc_pw_pool, rho_m_gspace(1)%pw, &
./qs_vxc.F:            CALL pw_pool_create_pw(xc_pw_pool, rho_m_rspace(1)%pw, &
./qs_vxc.F:            CALL pw_copy(rho_struct_r(1)%pw, rho_m_rspace(1)%pw)
./qs_vxc.F:            CALL pw_axpy(rho_struct_r(2)%pw, rho_m_rspace(1)%pw, alpha=-1._dp)
./qs_vxc.F:            CALL pw_copy(rho_struct_g(1)%pw, rho_m_gspace(1)%pw)
./qs_vxc.F:            CALL pw_axpy(rho_struct_g(2)%pw, rho_m_gspace(1)%pw, alpha=-1._dp)
./qs_vxc.F:            CALL pw_pool_create_pw(xc_pw_pool, rho_m_gspace(2)%pw, &
./qs_vxc.F:            CALL pw_pool_create_pw(xc_pw_pool, rho_m_rspace(2)%pw, &
./qs_vxc.F:            CALL pw_zero(rho_m_rspace(2)%pw)
./qs_vxc.F:            CALL pw_zero(rho_m_gspace(2)%pw)
./qs_vxc.F:            rho_g(1)%pw => rho_m_gspace(1)%pw
./qs_vxc.F:            rho_g(2)%pw => rho_m_gspace(2)%pw
./qs_vxc.F:            rho_r(1)%pw => rho_m_rspace(1)%pw
./qs_vxc.F:            rho_r(2)%pw => rho_m_rspace(2)%pw
./qs_vxc.F:               exc_m = xc_exc_calc(rho_r=rho_r, tau=tau, &
./qs_vxc.F:                                   rho_g=rho_g, xc_section=xc_section, &
./qs_vxc.F:               CALL xc_vxc_pw_create1(vxc_rho=my_vxc_rho, vxc_tau=my_vxc_tau, rho_r=rho_r, &
./qs_vxc.F:                                      rho_g=rho_g, tau=tau, exc=exc_m, &
./qs_vxc.F:            ! and take care of the potential only vxc_rho is taken into account
./qs_vxc.F:               vxc_rho(1)%pw%cr3d = vxc_rho(1)%pw%cr3d-dft_control%sic_scaling_b* &
./qs_vxc.F:                                    my_vxc_rho(1)%pw%cr3d
./qs_vxc.F:               vxc_rho(2)%pw%cr3d = vxc_rho(2)%pw%cr3d+dft_control%sic_scaling_b* &
./qs_vxc.F:                                    my_vxc_rho(1)%pw%cr3d ! 1=m
./qs_vxc.F:               CALL pw_release(my_vxc_rho(1)%pw)
./qs_vxc.F:               CALL pw_release(my_vxc_rho(2)%pw)
./qs_vxc.F:               DEALLOCATE (my_vxc_rho)
./qs_vxc.F:               CALL pw_pool_give_back_pw(xc_pw_pool, rho_m_rspace(ispin)%pw)
./qs_vxc.F:               CALL pw_pool_give_back_pw(xc_pw_pool, rho_m_gspace(ispin)%pw)
./qs_vxc.F:            DEALLOCATE (rho_m_rspace)
./qs_vxc.F:            DEALLOCATE (rho_m_gspace)
./qs_vxc.F:         ! now we have - sum_s N_s * Exc(rho_s/N_s,0)
./qs_vxc.F:            ALLOCATE (rho_m_rspace(2), rho_m_gspace(2))
./qs_vxc.F:               CALL pw_pool_create_pw(xc_pw_pool, rho_m_gspace(ispin)%pw, &
./qs_vxc.F:               CALL pw_pool_create_pw(xc_pw_pool, rho_m_rspace(ispin)%pw, &
./qs_vxc.F:            rho_g(1)%pw => rho_m_gspace(1)%pw
./qs_vxc.F:            rho_g(2)%pw => rho_m_gspace(2)%pw
./qs_vxc.F:            rho_r(1)%pw => rho_m_rspace(1)%pw
./qs_vxc.F:            rho_r(2)%pw => rho_m_rspace(2)%pw
./qs_vxc.F:               CALL pw_copy(rho_struct_r(ispin)%pw, rho_m_rspace(1)%pw)
./qs_vxc.F:               CALL pw_copy(rho_struct_g(ispin)%pw, rho_m_gspace(1)%pw)
./qs_vxc.F:               CALL pw_scale(rho_m_rspace(1)%pw, nelec_s_inv)
./qs_vxc.F:               CALL pw_scale(rho_m_gspace(1)%pw, nelec_s_inv)
./qs_vxc.F:               CALL pw_zero(rho_m_rspace(2)%pw)
./qs_vxc.F:               CALL pw_zero(rho_m_gspace(2)%pw)
./qs_vxc.F:                  exc_m = xc_exc_calc(rho_r=rho_r, tau=tau, &
./qs_vxc.F:                                      rho_g=rho_g, xc_section=xc_section, &
./qs_vxc.F:                  CALL xc_vxc_pw_create1(vxc_rho=my_vxc_rho, vxc_tau=my_vxc_tau, rho_r=rho_r, &
./qs_vxc.F:                                         rho_g=rho_g, tau=tau, exc=exc_m, &
./qs_vxc.F:               ! and take care of the potential only vxc_rho is taken into account
./qs_vxc.F:                  vxc_rho(ispin)%pw%cr3d = vxc_rho(ispin)%pw%cr3d-dft_control%sic_scaling_b* &
./qs_vxc.F:                                           my_vxc_rho(1)%pw%cr3d
./qs_vxc.F:                  CALL pw_release(my_vxc_rho(1)%pw)
./qs_vxc.F:                  CALL pw_release(my_vxc_rho(2)%pw)
./qs_vxc.F:                  DEALLOCATE (my_vxc_rho)
./qs_vxc.F:               CALL pw_pool_give_back_pw(xc_pw_pool, rho_m_rspace(ispin)%pw)
./qs_vxc.F:               CALL pw_pool_give_back_pw(xc_pw_pool, rho_m_gspace(ispin)%pw)
./qs_vxc.F:            DEALLOCATE (rho_m_rspace)
./qs_vxc.F:            DEALLOCATE (rho_m_gspace)
./qs_vxc.F:            rho_r(1)%pw => rho_struct_r(2)%pw
./qs_vxc.F:            rho_r(2)%pw => rho_struct_r(2)%pw
./qs_vxc.F:            IF (rho_g_valid) THEN
./qs_vxc.F:               rho_g(1)%pw => rho_struct_g(2)%pw
./qs_vxc.F:               rho_g(2)%pw => rho_struct_g(2)%pw
./qs_vxc.F:               exc_m = xc_exc_calc(rho_r=rho_r, tau=tau, &
./qs_vxc.F:                                   rho_g=rho_g, xc_section=xc_section, &
./qs_vxc.F:               CALL xc_vxc_pw_create1(vxc_rho=my_vxc_rho, vxc_tau=my_vxc_tau, rho_r=rho_r, &
./qs_vxc.F:                                      rho_g=rho_g, tau=tau, exc=exc_m, &
./qs_vxc.F:               vxc_rho(2)%pw%cr3d = vxc_rho(2)%pw%cr3d+ &
./qs_vxc.F:                                    2.0_dp*dft_control%sic_scaling_b*my_vxc_rho(1)%pw%cr3d
./qs_vxc.F:               CALL pw_release(my_vxc_rho(1)%pw)
./qs_vxc.F:               CALL pw_release(my_vxc_rho(2)%pw)
./qs_vxc.F:               DEALLOCATE (my_vxc_rho)
./qs_vxc.F:            DO ispin = 1, SIZE(rho_r)
./qs_vxc.F:               CALL pw_pool_give_back_pw(xc_pw_pool, rho_r(ispin)%pw)
./qs_vxc.F:            IF (ASSOCIATED(vxc_rho)) THEN
./qs_vxc.F:               DO ispin = 1, SIZE(vxc_rho)
./qs_vxc.F:                  CALL pw_transfer(vxc_rho(ispin)%pw, tmp_g)
./qs_vxc.F:                  !FM              CALL pw_restrict_s3(vxc_rho(ispin)%pw,tmp_pw,&
./qs_vxc.F:                  CALL pw_pool_give_back_pw(xc_pw_pool, vxc_rho(ispin)%pw)
./qs_vxc.F:                  vxc_rho(ispin)%pw => tmp_pw
./qs_vxc.F:                  !FM              CALL pw_restrict_s3(vxc_rho(ispin)%pw,tmp_pw,&
./qs_vxc.F:         DEALLOCATE (rho_r)
./qs_vxc.F:         IF (ASSOCIATED(rho_g)) THEN
./qs_vxc.F:               DO ispin = 1, SIZE(rho_g)
./qs_vxc.F:                  CALL pw_pool_give_back_pw(xc_pw_pool, rho_g(ispin)%pw)
./qs_vxc.F:            DEALLOCATE (rho_g)
./qs_tddfpt_module.F:   USE qs_rho_types,                    ONLY: qs_rho_type
./qs_tddfpt_module.F:      CALL set_ks_env(ks_env, rho_changed=.FALSE.)
./qs_tddfpt_module.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_tddfpt_module.F:      NULLIFY (logger, scf_env, input, energy, matrix_ks, rho)
./qs_tddfpt_module.F:                      rho=rho)
./qs_core_hamiltonian.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_core_hamiltonian.F:                                              qs_rho_type
./qs_core_hamiltonian.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_core_hamiltonian.F:      NULLIFY (rho, force, matrix_p, matrix_w)
./qs_core_hamiltonian.F:         CALL get_qs_env(qs_env=qs_env, rho=rho)
./qs_core_hamiltonian.F:         CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_linres_types.F:   USE qs_rho_atom_types,               ONLY: rho_atom_coeff,&
./qs_linres_types.F:                                              rho_atom_type
./qs_linres_types.F:   USE qs_rho_types,                    ONLY: qs_rho_p_type,&
./qs_linres_types.F:                                              qs_rho_release
./qs_linres_types.F:!> \param do_kernel the kernel is zero if the rho1 is zero as for the magnetic field perturbation
./qs_linres_types.F:!> \param jrho 1_set   : current density on the global grid, if gapw this is only the soft part
./qs_linres_types.F:!> \param jrho 1_atom_set : current density on the local atomic grids (only if gapw)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER :: jrho1_atom_set
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:), POINTER :: jrho1_set
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), POINTER :: nablavks_set
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), POINTER :: bind_set
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), POINTER :: bind_atom_set
./qs_linres_types.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER :: vks_atom_set
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), &
./qs_linres_types.F:   TYPE jrho_atom_p_type
./qs_linres_types.F:      TYPE(jrho_atom_type), POINTER       :: jrho_atom
./qs_linres_types.F:   END TYPE jrho_atom_p_type
./qs_linres_types.F:   TYPE jrho_atom_type
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), &
./qs_linres_types.F:         POINTER      :: jrho_vec_rad_h, &
./qs_linres_types.F:                         jrho_vec_rad_s
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_h, jrho_s
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_a_h, jrho_a_s
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_b_h, jrho_b_s
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_a_h_ii, jrho_a_s_ii
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_b_h_ii, jrho_b_s_ii
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_a_h_iii, jrho_a_s_iii
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), &
./qs_linres_types.F:         POINTER                               :: jrho_b_h_iii, jrho_b_s_iii
./qs_linres_types.F:   END TYPE jrho_atom_type
./qs_linres_types.F:             nmr_env_type, issc_env_type, jrho_atom_type, &
./qs_linres_types.F:   PUBLIC :: allocate_jrho_atom_rad, deallocate_jrho_atom_set, get_nmr_env, &
./qs_linres_types.F:             get_current_env, allocate_jrho_coeff, &
./qs_linres_types.F:             init_jrho_atom_set, init_nablavks_atom_set, linres_control_create, &
./qs_linres_types.F:             set2zero_jrho_atom_rad, get_epr_env, &
./qs_linres_types.F:      NULLIFY (current_env%jrho1_atom_set)
./qs_linres_types.F:      NULLIFY (current_env%jrho1_set)
./qs_linres_types.F:!> \param jrho1_atom_set ...
./qs_linres_types.F:!> \param jrho1_set ...
./qs_linres_types.F:                              rxp_psi0, jrho1_atom_set, jrho1_set, chi_tensor, &
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_linres_types.F:         POINTER                                         :: jrho1_atom_set
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:), OPTIONAL, &
./qs_linres_types.F:         POINTER                                         :: jrho1_set
./qs_linres_types.F:      IF (PRESENT(jrho1_atom_set)) jrho1_atom_set => current_env%jrho1_atom_set
./qs_linres_types.F:      IF (PRESENT(jrho1_set)) jrho1_set => current_env%jrho1_set
./qs_linres_types.F:!> \param jrho1_atom_set ...
./qs_linres_types.F:!> \param jrho1_set ...
./qs_linres_types.F:   SUBROUTINE set_current_env(current_env, jrho1_atom_set, jrho1_set)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_linres_types.F:         POINTER                                         :: jrho1_atom_set
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:), OPTIONAL, &
./qs_linres_types.F:         POINTER                                         :: jrho1_set
./qs_linres_types.F:      IF (PRESENT(jrho1_atom_set)) THEN
./qs_linres_types.F:         IF (ASSOCIATED(current_env%jrho1_atom_set)) THEN
./qs_linres_types.F:            CALL deallocate_jrho_atom_set(current_env%jrho1_atom_set)
./qs_linres_types.F:         current_env%jrho1_atom_set => jrho1_atom_set
./qs_linres_types.F:      IF (PRESENT(jrho1_set)) THEN
./qs_linres_types.F:         IF (ASSOCIATED(current_env%jrho1_set)) THEN
./qs_linres_types.F:               CALL qs_rho_release(current_env%jrho1_set(idir)%rho)
./qs_linres_types.F:         current_env%jrho1_set => jrho1_set
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), OPTIONAL, &
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), OPTIONAL, &
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), OPTIONAL, &
./qs_linres_types.F:      TYPE(qs_rho_p_type), DIMENSION(:, :), OPTIONAL, &
./qs_linres_types.F:                  CALL qs_rho_release(epr_env%nablavks_set(idir, ispin)%rho)
./qs_linres_types.F:!> \param jrho_atom_set ...
./qs_linres_types.F:   SUBROUTINE allocate_jrho_atom_set(jrho_atom_set, natom)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho_atom_set
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_jrho_atom_set', &
./qs_linres_types.F:      ALLOCATE (jrho_atom_set(natom))
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc0_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc0_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc_ii_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc_ii_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc_iii_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%cjc_iii_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_vec_rad_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_vec_rad_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_a_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_a_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_b_h)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_b_s)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_a_h_ii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_a_s_ii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_b_h_ii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_b_s_ii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_a_h_iii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_a_s_iii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_b_h_iii)
./qs_linres_types.F:         NULLIFY (jrho_atom_set(iat)%jrho_b_s_iii)
./qs_linres_types.F:   END SUBROUTINE allocate_jrho_atom_set
./qs_linres_types.F:!> \param jrho_atom_set ...
./qs_linres_types.F:   SUBROUTINE deallocate_jrho_atom_set(jrho_atom_set)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho_atom_set
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_jrho_atom_set', &
./qs_linres_types.F:      CPASSERT(ASSOCIATED(jrho_atom_set))
./qs_linres_types.F:      natom = SIZE(jrho_atom_set)
./qs_linres_types.F:         IF (ASSOCIATED(jrho_atom_set(iat)%cjc_h)) THEN
./qs_linres_types.F:            IF (ASSOCIATED(jrho_atom_set(iat)%cjc_h(1)%r_coef)) THEN
./qs_linres_types.F:               n = SIZE(jrho_atom_set(iat)%cjc_h)
./qs_linres_types.F:                  DEALLOCATE (jrho_atom_set(iat)%cjc0_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc0_s(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc_s(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc_ii_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc_ii_s(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc_iii_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%cjc_iii_s(i)%r_coef)
./qs_linres_types.F:            DEALLOCATE (jrho_atom_set(iat)%cjc0_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc0_s, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc_s, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc_ii_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc_ii_s, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc_iii_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%cjc_iii_s)
./qs_linres_types.F:         IF (ASSOCIATED(jrho_atom_set(iat)%jrho_a_h)) THEN
./qs_linres_types.F:            IF (ASSOCIATED(jrho_atom_set(iat)%jrho_a_h(1)%r_coef)) THEN
./qs_linres_types.F:               n = SIZE(jrho_atom_set(iat)%jrho_a_h)
./qs_linres_types.F:                  DEALLOCATE (jrho_atom_set(iat)%jrho_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_s(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_a_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_a_s(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_b_h(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_b_s(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_a_h_ii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_a_s_ii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_b_h_ii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_b_s_ii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_a_h_iii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_a_s_iii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_b_h_iii(i)%r_coef, &
./qs_linres_types.F:                              jrho_atom_set(iat)%jrho_b_s_iii(i)%r_coef)
./qs_linres_types.F:            DEALLOCATE (jrho_atom_set(iat)%jrho_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_s, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_a_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_a_s, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_b_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_b_s, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_a_h_ii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_a_s_ii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_b_h_ii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_b_s_ii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_a_h_iii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_a_s_iii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_b_h_iii, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_b_s_iii)
./qs_linres_types.F:         IF (ASSOCIATED(jrho_atom_set(iat)%jrho_vec_rad_h)) THEN
./qs_linres_types.F:            IF (ASSOCIATED(jrho_atom_set(iat)%jrho_vec_rad_h(1, 1)%r_coef)) THEN
./qs_linres_types.F:               n = SIZE(jrho_atom_set(iat)%jrho_vec_rad_h, 2)
./qs_linres_types.F:                     DEALLOCATE (jrho_atom_set(iat)%jrho_vec_rad_h(idir, i)%r_coef, &
./qs_linres_types.F:                                 jrho_atom_set(iat)%jrho_vec_rad_s(idir, i)%r_coef)
./qs_linres_types.F:            DEALLOCATE (jrho_atom_set(iat)%jrho_vec_rad_h, &
./qs_linres_types.F:                        jrho_atom_set(iat)%jrho_vec_rad_s)
./qs_linres_types.F:      DEALLOCATE (jrho_atom_set)
./qs_linres_types.F:   END SUBROUTINE deallocate_jrho_atom_set
./qs_linres_types.F:!> \param jrho1_atom ...
./qs_linres_types.F:   SUBROUTINE allocate_jrho_atom_rad(jrho1_atom, ispin, nr, na, max_iso_not0)
./qs_linres_types.F:      TYPE(jrho_atom_type), POINTER                      :: jrho1_atom
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_jrho_atom_rad', &
./qs_linres_types.F:      CPASSERT(ASSOCIATED(jrho1_atom))
./qs_linres_types.F:         ALLOCATE (jrho1_atom%jrho_vec_rad_h(idir, ispin)%r_coef(nr, na), &
./qs_linres_types.F:                   jrho1_atom%jrho_vec_rad_s(idir, ispin)%r_coef(nr, na))
./qs_linres_types.F:         jrho1_atom%jrho_vec_rad_h(idir, ispin)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom%jrho_vec_rad_s(idir, ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      ALLOCATE (jrho1_atom%jrho_h(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_s(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_a_h(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_a_s(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_b_h(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_b_s(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_a_h_ii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_a_s_ii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_b_h_ii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_b_s_ii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_a_h_iii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_a_s_iii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_b_h_iii(ispin)%r_coef(nr, max_iso_not0), &
./qs_linres_types.F:                jrho1_atom%jrho_b_s_iii(ispin)%r_coef(nr, max_iso_not0))
./qs_linres_types.F:      jrho1_atom%jrho_h(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_s(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_h(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_s(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_h(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_s(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_h_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_s_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_h_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_s_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_h_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_s_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_h_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_s_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:   END SUBROUTINE allocate_jrho_atom_rad
./qs_linres_types.F:!> \param jrho1_atom ...
./qs_linres_types.F:   SUBROUTINE set2zero_jrho_atom_rad(jrho1_atom, ispin)
./qs_linres_types.F:      TYPE(jrho_atom_type), POINTER                      :: jrho1_atom
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'set2zero_jrho_atom_rad', &
./qs_linres_types.F:      CPASSERT(ASSOCIATED(jrho1_atom))
./qs_linres_types.F:      jrho1_atom%jrho_h(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_s(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_h(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_s(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_h(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_s(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_h_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_s_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_h_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_s_ii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_h_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_a_s_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_h_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:      jrho1_atom%jrho_b_s_iii(ispin)%r_coef = 0.0_dp
./qs_linres_types.F:   END SUBROUTINE set2zero_jrho_atom_rad
./qs_linres_types.F:!> \param jrho1_atom_set ...
./qs_linres_types.F:   SUBROUTINE allocate_jrho_coeff(jrho1_atom_set, iatom, nsotot)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_jrho_coeff', &
./qs_linres_types.F:      CPASSERT(ASSOCIATED(jrho1_atom_set))
./qs_linres_types.F:      DO i = 1, SIZE(jrho1_atom_set(iatom)%cjc0_h, 1)
./qs_linres_types.F:         ALLOCATE (jrho1_atom_set(iatom)%cjc0_h(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc0_s(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc_h(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc_s(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc_ii_h(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc_ii_s(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc_iii_h(i)%r_coef(nsotot, nsotot), &
./qs_linres_types.F:                   jrho1_atom_set(iatom)%cjc_iii_s(i)%r_coef(nsotot, nsotot))
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc0_h(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc0_s(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc_h(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc_s(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc_ii_h(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc_ii_s(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc_iii_h(i)%r_coef = 0.0_dp
./qs_linres_types.F:         jrho1_atom_set(iatom)%cjc_iii_s(i)%r_coef = 0.0_dp
./qs_linres_types.F:   END SUBROUTINE allocate_jrho_coeff
./qs_linres_types.F:!> \param jrho1_atom_set ...
./qs_linres_types.F:   SUBROUTINE deallocate_jrho_coeff(jrho1_atom_set, iatom)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'deallocate_jrho_coeff', &
./qs_linres_types.F:      CPASSERT(ASSOCIATED(jrho1_atom_set))
./qs_linres_types.F:      DO i = 1, SIZE(jrho1_atom_set(iatom)%cjc0_h, 1)
./qs_linres_types.F:         DEALLOCATE (jrho1_atom_set(iatom)%cjc0_h(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc0_s(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc_h(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc_s(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc_ii_h(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc_ii_s(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc_iii_h(i)%r_coef, &
./qs_linres_types.F:                     jrho1_atom_set(iatom)%cjc_iii_s(i)%r_coef)
./qs_linres_types.F:   END SUBROUTINE deallocate_jrho_coeff
./qs_linres_types.F:!> \param jrho1_atom_set ...
./qs_linres_types.F:!> \param jrho_vec_rad_h ...
./qs_linres_types.F:!> \param jrho_vec_rad_s ...
./qs_linres_types.F:   SUBROUTINE get_jrho_atom(jrho1_atom_set, iatom, cjc_h, cjc_s, cjc_ii_h, cjc_ii_s, &
./qs_linres_types.F:                            cjc_iii_h, cjc_iii_s, jrho_vec_rad_h, jrho_vec_rad_s)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:), OPTIONAL, &
./qs_linres_types.F:      TYPE(rho_atom_coeff), DIMENSION(:, :), OPTIONAL, &
./qs_linres_types.F:         POINTER                                         :: jrho_vec_rad_h, jrho_vec_rad_s
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'get_jrho_atom', routineP = moduleN//':'//routineN
./qs_linres_types.F:      CPASSERT(ASSOCIATED(jrho1_atom_set))
./qs_linres_types.F:      IF (PRESENT(cjc_h)) cjc_h => jrho1_atom_set(iatom)%cjc_h
./qs_linres_types.F:      IF (PRESENT(cjc_s)) cjc_s => jrho1_atom_set(iatom)%cjc_s
./qs_linres_types.F:      IF (PRESENT(cjc_ii_h)) cjc_ii_h => jrho1_atom_set(iatom)%cjc_ii_h
./qs_linres_types.F:      IF (PRESENT(cjc_ii_s)) cjc_ii_s => jrho1_atom_set(iatom)%cjc_ii_s
./qs_linres_types.F:      IF (PRESENT(cjc_iii_h)) cjc_iii_h => jrho1_atom_set(iatom)%cjc_iii_h
./qs_linres_types.F:      IF (PRESENT(cjc_iii_s)) cjc_iii_s => jrho1_atom_set(iatom)%cjc_iii_s
./qs_linres_types.F:      IF (PRESENT(jrho_vec_rad_h)) jrho_vec_rad_h => jrho1_atom_set(iatom)%jrho_vec_rad_h
./qs_linres_types.F:      IF (PRESENT(jrho_vec_rad_s)) jrho_vec_rad_s => jrho1_atom_set(iatom)%jrho_vec_rad_s
./qs_linres_types.F:   END SUBROUTINE get_jrho_atom
./qs_linres_types.F:!> \param jrho1_atom_set ...
./qs_linres_types.F:   SUBROUTINE init_jrho_atom_set(jrho1_atom_set, atomic_kind_set, nspins)
./qs_linres_types.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'init_jrho_atom_set', &
./qs_linres_types.F:      IF (ASSOCIATED(jrho1_atom_set)) THEN
./qs_linres_types.F:         CALL deallocate_jrho_atom_set(jrho1_atom_set)
./qs_linres_types.F:      CALL allocate_jrho_atom_set(jrho1_atom_set, natom)
./qs_linres_types.F:            ALLOCATE (jrho1_atom_set(iatom)%jrho_vec_rad_h(3, nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_vec_rad_s(3, nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_s(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_a_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_a_s(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_b_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_b_s(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_a_h_ii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_a_s_ii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_b_s_ii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_b_h_ii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_a_h_iii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_a_s_iii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_b_s_iii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%jrho_b_h_iii(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc0_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc0_s(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc_s(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc_ii_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc_ii_s(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc_iii_h(nspins), &
./qs_linres_types.F:                      jrho1_atom_set(iatom)%cjc_iii_s(nspins))
./qs_linres_types.F:                  NULLIFY (jrho1_atom_set(iatom)%jrho_vec_rad_h(idir, ispin)%r_coef)
./qs_linres_types.F:                  NULLIFY (jrho1_atom_set(iatom)%jrho_vec_rad_s(idir, ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_s(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_a_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_a_s(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_b_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_b_s(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_a_h_ii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_a_s_ii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_b_h_ii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_b_s_ii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_a_h_iii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_a_s_iii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_b_h_iii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%jrho_b_s_iii(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc0_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc0_s(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc_s(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc_ii_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc_ii_s(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc_iii_h(ispin)%r_coef)
./qs_linres_types.F:               NULLIFY (jrho1_atom_set(iatom)%cjc_iii_s(ispin)%r_coef)
./qs_linres_types.F:   END SUBROUTINE init_jrho_atom_set
./spme.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :, :)     :: rhos
./spme.F:      TYPE(pw_type), POINTER                             :: phi_g, rhob_g, rhob_r
./spme.F:      NULLIFY (drpot, grid_spme, green, poisson_env, phi_g, rhob_g, rhob_r, pw_pool, rden, rpot)
./spme.F:      ALLOCATE (rhos(n, n, n))
./spme.F:         CALL get_patch(particle_set, box, green, npts, p1, rhos, is_core=.FALSE., &
./spme.F:         CALL dg_sum_patch(rden, rhos, center(:, p1))
./spme.F:            CALL get_patch(shell_particle_set, box, green, npts, p1_shell, rhos, &
./spme.F:            CALL dg_sum_patch(rden, rhos, shell_center(:, p1_shell))
./spme.F:            CALL get_patch(core_particle_set, box, green, npts, p1_shell, rhos, &
./spme.F:            CALL dg_sum_patch(rden, rhos, core_center(:, p1_shell))
./spme.F:      CALL pw_pool_create_pw(pw_pool, rhob_r, use_data=REALDATA3D, &
./spme.F:      CALL rs_pw_transfer(rden, rhob_r, rs2pw)
./spme.F:      CALL pw_pool_create_pw(pw_pool, rhob_g, &
./spme.F:      CALL pw_transfer(rhob_r, rhob_g)
./spme.F:      rhob_g%cc = rhob_g%cc*green%p3m_charge%cr
./spme.F:      CALL pw_poisson_solve(poisson_env, rhob_g, vg_coulomb, phi_g, dphi_g, &
./spme.F:         CALL pw_transfer(phi_g, rhob_r)
./spme.F:         CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./spme.F:            CALL get_patch(particle_set, box, green, grid_spme%npts, p1, rhos, is_core=.FALSE., &
./spme.F:            CALL dg_sum_patch_force_1d(rpot, rhos, center(:, p1), fat1)
./spme.F:               CALL get_patch(shell_particle_set, box, green, npts, p1_shell, rhos, &
./spme.F:               CALL dg_sum_patch_force_1d(rpot, rhos, shell_center(:, p1_shell), fat1)
./spme.F:               CALL get_patch(core_particle_set, box, green, npts, p1_shell, rhos, &
./spme.F:               CALL dg_sum_patch_force_1d(rpot, rhos, core_center(:, p1_shell), fat1)
./spme.F:                  CALL pw_copy(phi_g, rhob_g)
./spme.F:                  CALL pw_derive(rhob_g, nd)
./spme.F:                  rhob_g%cc = rhob_g%cc*green%p3m_charge%cr
./spme.F:                  CALL pw_transfer(rhob_g, rhob_r)
./spme.F:                  CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./spme.F:                     CALL get_patch(particle_set, box, green, grid_spme%npts, p1, rhos, &
./spme.F:                     CALL dg_sum_patch_force_1d(rpot, rhos, center(:, p1), fat1)
./spme.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_g)
./spme.F:         CALL pw_transfer(dphi_g(i)%pw, rhob_r)
./spme.F:         CALL rs_pw_transfer(drpot(i)%rs_grid, rhob_r, pw2rs)
./spme.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_r)
./spme.F:         CALL get_patch(particle_set, box, green, grid_spme%npts, p1, rhos, is_core=.FALSE., &
./spme.F:         CALL dg_sum_patch_force_3d(drpot, rhos, center(:, p1), fat)
./spme.F:                              p1_shell, rhos, is_core=.FALSE., is_shell=.TRUE., unit_charge=.FALSE.)
./spme.F:               CALL dg_sum_patch_force_3d(drpot, rhos, shell_center(:, p1_shell), fat)
./spme.F:                              p1_shell, rhos, is_core=.TRUE., is_shell=.FALSE., unit_charge=.FALSE.)
./spme.F:               CALL dg_sum_patch_force_3d(drpot, rhos, core_center(:, p1_shell), fat)
./spme.F:      DEALLOCATE (rhos)
./spme.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :, :)     :: rhos
./spme.F:      TYPE(pw_type), POINTER                             :: phi_g, rhob_g, rhob_r
./spme.F:      NULLIFY (grid_spme, green, poisson_env, phi_g, rhob_g, rhob_r, pw_pool, &
./spme.F:      ALLOCATE (rhos(n, n, n))
./spme.F:         CALL get_patch(particle_set_a, box, green, npts, p1, rhos, charges_a)
./spme.F:         CALL dg_sum_patch(rden, rhos, center(:, p1))
./spme.F:      CALL pw_pool_create_pw(pw_pool, rhob_r, use_data=REALDATA3D, &
./spme.F:      CALL rs_pw_transfer(rden, rhob_r, rs2pw)
./spme.F:      CALL pw_pool_create_pw(pw_pool, rhob_g, &
./spme.F:      CALL pw_transfer(rhob_r, rhob_g)
./spme.F:      rhob_g%cc = rhob_g%cc*green%p3m_charge%cr
./spme.F:      CALL pw_poisson_solve(poisson_env, density=rhob_g, vhartree=phi_g)
./spme.F:      CALL pw_transfer(phi_g, rhob_r)
./spme.F:      CALL rs_pw_transfer(rpot, rhob_r, pw2rs)
./spme.F:         CALL get_patch(particle_set_b, box, green, grid_spme%npts, p1, rhos, &
./spme.F:         CALL dg_sum_patch_force_1d(rpot, rhos, center(:, p1), fat1)
./spme.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_g)
./spme.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_r)
./spme.F:      DEALLOCATE (rhos)
./spme.F:      REAL(KIND=dp), ALLOCATABLE, DIMENSION(:, :, :)     :: rhos
./spme.F:      TYPE(pw_type), POINTER                             :: phi_g, rhob_g, rhob_r
./spme.F:      NULLIFY (drpot, grid_spme, green, poisson_env, phi_g, rhob_g, rhob_r, &
./spme.F:      ALLOCATE (rhos(n, n, n))
./spme.F:         CALL get_patch(particle_set_a, box, green, npts, p1, rhos, charges_a)
./spme.F:         CALL dg_sum_patch(rden, rhos, center(:, p1))
./spme.F:      CALL pw_pool_create_pw(pw_pool, rhob_r, use_data=REALDATA3D, &
./spme.F:      CALL rs_pw_transfer(rden, rhob_r, rs2pw)
./spme.F:      CALL pw_pool_create_pw(pw_pool, rhob_g, &
./spme.F:      CALL pw_transfer(rhob_r, rhob_g)
./spme.F:      rhob_g%cc = rhob_g%cc*green%p3m_charge%cr
./spme.F:      CALL pw_poisson_solve(poisson_env, density=rhob_g, vhartree=phi_g, &
./spme.F:         CALL pw_transfer(dphi_g(i)%pw, rhob_r)
./spme.F:         CALL rs_pw_transfer(drpot(i)%rs_grid, rhob_r, pw2rs)
./spme.F:         CALL get_patch(particle_set_b, box, green, grid_spme%npts, p1, rhos, &
./spme.F:         CALL dg_sum_patch_force_3d(drpot, rhos, center(:, p1), fat)
./spme.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_g)
./spme.F:      CALL pw_pool_give_back_pw(pw_pool, rhob_r)
./spme.F:      DEALLOCATE (rhos)
./spme.F:!> \param rhos ...
./spme.F:   SUBROUTINE get_patch_a(part, box, green, npts, p, rhos, is_core, is_shell, &
./spme.F:      REAL(KIND=dp), DIMENSION(:, :, :), INTENT(OUT)     :: rhos
./spme.F:      nbox = SIZE(rhos, 1)
./spme.F:      CALL spme_get_patch(rhos, nbox, delta, q, green%p3m_coeff)
./spme.F:!> \param rhos ...
./spme.F:   SUBROUTINE get_patch_b(part, box, green, npts, p, rhos, charges)
./spme.F:      REAL(KIND=dp), DIMENSION(:, :, :), INTENT(OUT)     :: rhos
./spme.F:      nbox = SIZE(rhos, 1)
./spme.F:      CALL spme_get_patch(rhos, nbox, delta, q, green%p3m_coeff)
./spme.F:!> \param rhos ...
./spme.F:   SUBROUTINE spme_get_patch(rhos, n, delta, q, coeff)
./spme.F:      REAL(KIND=dp), DIMENSION(:, :, :), INTENT(OUT)     :: rhos
./spme.F:               rhos(i1, i2, i3) = r2*f_assign(1, i1)
./eri_mme/eri_mme_lattice_summation.F:!> \brief As pgf_sum_2c_gspace_1d but 3d sum required for non-orthorhombic cells
./eri_mme/eri_mme_lattice_summation.F:!> \note  MMME Method is not very efficient for non-orthorhombic cells
./eri_mme/eri_mme_lattice_summation.F:!> \brief As pgf_sum_2c_rspace_1d but 3d sum required for non-orthorhombic cells
./eri_mme/eri_mme_lattice_summation.F:!> \note  MMME Method is not very efficient for non-orthorhombic cells
./eri_mme/eri_mme_lattice_summation.F:!> \brief As pgf_sum_3c_1d but 3d sum required for non-orthorhombic cells
./eri_mme/eri_mme_integrate.F:            IF (is_ortho) THEN ! orthorhombic cell
./eri_mme/eri_mme_types.F:      ! Cutoff calibration and error estimate for orthorhombic cell
./eri_mme/eri_mme_util.F:!>        orthorhombic) cell.
./eri_mme/eri_mme_util.F:!>        orthorhombic) cell.
./semi_empirical_int_gks.F:   USE dg_rho0_types,                   ONLY: dg_rho0_type
./semi_empirical_int_gks.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: rho0
./semi_empirical_int_gks.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./semi_empirical_int_gks.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./semi_empirical_int_gks.F:      rho0 => dg_rho0%density%pw%cr3d
./semi_empirical_int_gks.F:         ff = 2.0_dp*fourpi*rho0(lp, mp, np)**2*pw_grid%vol/pw_grid%gsq(gpt)
./semi_empirical_int_gks.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: rho0
./semi_empirical_int_gks.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./semi_empirical_int_gks.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./semi_empirical_int_gks.F:      rho0 => dg_rho0%density%pw%cr3d
./semi_empirical_int_gks.F:         ff = 2.0_dp*fourpi*rho0(lp, mp, np)**2*pw_grid%vol/pw_grid%gsq(gpt)
./semi_empirical_int_gks.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: rho0
./semi_empirical_int_gks.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./semi_empirical_int_gks.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./semi_empirical_int_gks.F:      rho0 => dg_rho0%density%pw%cr3d
./semi_empirical_int_gks.F:         ff = 2.0_dp*fourpi*rho0(lp, mp, np)**2*pw_grid%vol/pw_grid%gsq(gpt)
./cp_ddapc_util.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./cp_ddapc_util.F:                                              qs_rho_type
./cp_ddapc_util.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core
./cp_ddapc_util.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_util.F:      TYPE(qs_rho_type), POINTER                         :: rho
./cp_ddapc_util.F:      NULLIFY (dft_control, rho, rho_tot_g, rho_core, rho0_s_gs, pw_env, &
./cp_ddapc_util.F:                         rho=rho, &
./cp_ddapc_util.F:                         rho_core=rho_core, &
./cp_ddapc_util.F:                         rho0_s_gs=rho0_s_gs, &
./cp_ddapc_util.F:         CALL pw_pool_create_pw(auxbas_pool, rho_tot_g, in_space=RECIPROCALSPACE, &
./cp_ddapc_util.F:         Vol = rho_tot_g%pw_grid%vol
./cp_ddapc_util.F:                              rho_tot_g, &
./cp_ddapc_util.F:         CALL pw_pool_give_back_pw(auxbas_pool, rho_tot_g, &
./cp_ddapc_util.F:!> \param ext_rho_tot_g ...
./cp_ddapc_util.F:                                  density_type, qout1, qout2, out_radii, dq_out, ext_rho_tot_g, &
./cp_ddapc_util.F:      TYPE(pw_type), OPTIONAL, POINTER                   :: ext_rho_tot_g
./cp_ddapc_util.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./cp_ddapc_util.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core
./cp_ddapc_util.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_util.F:      TYPE(qs_rho_type), POINTER                         :: rho
./cp_ddapc_util.F:      NULLIFY (dft_control, rho, rho_tot_g, rho_core, rho0_s_gs, pw_env, rho_g, rho_r, &
./cp_ddapc_util.F:                      rho=rho, &
./cp_ddapc_util.F:                      rho_core=rho_core, &
./cp_ddapc_util.F:                      rho0_s_gs=rho0_s_gs, &
./cp_ddapc_util.F:      CALL qs_rho_get(rho, rho_r=rho_r, rho_g=rho_g)
./cp_ddapc_util.F:      CALL pw_pool_create_pw(auxbas_pool, rho_tot_g, in_space=RECIPROCALSPACE, &
./cp_ddapc_util.F:      IF (PRESENT(ext_rho_tot_g)) THEN
./cp_ddapc_util.F:         CALL pw_transfer(ext_rho_tot_g, rho_tot_g)
./cp_ddapc_util.F:               CALL pw_transfer(rho0_s_gs%pw, rho_tot_g)
./cp_ddapc_util.F:               CALL pw_transfer(rho_core%pw, rho_tot_g)
./cp_ddapc_util.F:            DO ispin = 1, SIZE(rho_g)
./cp_ddapc_util.F:               CALL pw_axpy(rho_g(ispin)%pw, rho_tot_g)
./cp_ddapc_util.F:            CALL pw_copy(rho_g(1)%pw, rho_tot_g)
./cp_ddapc_util.F:            CALL pw_axpy(rho_g(2)%pw, rho_tot_g, alpha=-1._dp)
./cp_ddapc_util.F:      Vol = rho_r(1)%pw%pw_grid%vol
./cp_ddapc_util.F:      IF (rho_tot_g%pw_grid%have_g0) ch_dens = REAL(rho_tot_g%cc(1), KIND=dp)
./cp_ddapc_util.F:                          particle_set, radii, rho_tot_g, gcut); bv(:) = bv(:)/Vol
./cp_ddapc_util.F:      CALL mp_sum(bv, rho_tot_g%pw_grid%para%group)
./cp_ddapc_util.F:         CALL prep_g_dot_rvec_sin_cos(rho_tot_g, particle_set, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_util.F:                                         particle_set, radii, rho_tot_g, gcut, iparticle0, &
./cp_ddapc_util.F:               CALL debug_der_A_matrix(dAm, particle_set, radii, rho_tot_g, &
./cp_ddapc_util.F:                                    particle_set, radii, rho_tot_g, gcut, iparticle)
./cp_ddapc_util.F:               CALL debug_der_b_vector(dbv, particle_set, radii, rho_tot_g, &
./cp_ddapc_util.F:                              particle_set, radii, rho_tot_g, type_of_density)
./cp_ddapc_util.F:      CALL pw_pool_give_back_pw(auxbas_pool, rho_tot_g, &
./cp_ddapc_util.F:!> \param rho_tot_g ...
./cp_ddapc_util.F:                                 rho_tot_g, gcut, iparticle, Vol, qs_env)
./cp_ddapc_util.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_util.F:                             particle_set, radii, rho_tot_g, gcut); bv1(:) = bv1(:)/Vol
./cp_ddapc_util.F:         CALL mp_sum(bv1, rho_tot_g%pw_grid%para%group)
./cp_ddapc_util.F:                             particle_set, radii, rho_tot_g, gcut); bv2(:) = bv2(:)/Vol
./cp_ddapc_util.F:         CALL mp_sum(bv2, rho_tot_g%pw_grid%para%group)
./cp_ddapc_util.F:!> \param rho_tot_g ...
./cp_ddapc_util.F:                                 rho_tot_g, gcut, iparticle, Vol, qs_env)
./cp_ddapc_util.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_util.F:      CALL prep_g_dot_rvec_sin_cos(rho_tot_g, particle_set, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_util.F:                             particle_set, radii, rho_tot_g, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_util.F:         CALL mp_sum(Am1, rho_tot_g%pw_grid%para%group)
./cp_ddapc_util.F:                             particle_set, radii, rho_tot_g, gcut, g_dot_rvec_sin, g_dot_rvec_cos)
./cp_ddapc_util.F:         CALL mp_sum(Am2, rho_tot_g%pw_grid%para%group)
./cp_ddapc_util.F:!> \param rho_tot_g ...
./cp_ddapc_util.F:                           particle_set, radii, rho_tot_g, type_of_density)
./cp_ddapc_util.F:      TYPE(pw_type), POINTER                             :: rho_tot_g
./cp_ddapc_util.F:                           ext_rho_tot_g=rho_tot_g, Itype_of_density=type_of_density)
./cp_ddapc_util.F:                           ext_rho_tot_g=rho_tot_g, Itype_of_density=type_of_density)
./tmc/tmc_moves.F:      CPASSERT(tmc_params%cell%orthorhombic)
./tmc/tmc_messages.F:      IF (tmc_params%cell%orthorhombic) m_send%task_int(counter+2) = 1
./tmc/tmc_messages.F:      tmc_params%cell%orthorhombic = .FALSE.
./tmc/tmc_messages.F:      IF (m_send%task_int(counter+2) .EQ. 1) tmc_params%cell%orthorhombic = .TRUE.
./tmc/tmc_messages.F:      IF (tmc_params%cell%orthorhombic) m_send%task_int(counter+2) = 1
./tmc/tmc_messages.F:      tmc_params%cell%orthorhombic = .FALSE.
./tmc/tmc_messages.F:      IF (m_send%task_int(counter+2) .EQ. 1) tmc_params%cell%orthorhombic = .TRUE.
./cp_ddapc_forces.F:      CPASSERT(cell%orthorhombic)
./qs_sccs.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_sccs.F:                                              qs_rho_type
./qs_sccs.F:!> \param rho_tot_gspace ...
./qs_sccs.F:   SUBROUTINE sccs(qs_env, rho_tot_gspace, v_hartree_gspace, v_sccs, h_stress)
./qs_sccs.F:      TYPE(pw_type), POINTER                             :: rho_tot_gspace, v_hartree_gspace, v_sccs
./qs_sccs.F:         norm_drho2, polarisation_charge, rho_delta, rho_delta_avg, rho_delta_max, rho_iter_new, &
./qs_sccs.F:         tot_rho_elec, tot_rho_solute
./qs_sccs.F:      TYPE(pw_p_type), DIMENSION(3)                      :: dln_eps_elec, dphi_tot, drho_elec
./qs_sccs.F:      TYPE(pw_p_type), DIMENSION(3, 3)                   :: d2rho_elec
./qs_sccs.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_sccs.F:      TYPE(pw_p_type), POINTER                           :: rho_r_sccs
./qs_sccs.F:      TYPE(pw_type), POINTER :: deps_elec, eps_elec, ln_eps_elec, norm_drho_elec, phi_pol, &
./qs_sccs.F:         phi_solute, rho_elec, rho_iter_old, rho_solute, rho_tot, rho_tot_zero, theta
./qs_sccs.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_sccs.F:      NULLIFY (norm_drho_elec)
./qs_sccs.F:      NULLIFY (rho)
./qs_sccs.F:      NULLIFY (rho_elec)
./qs_sccs.F:      NULLIFY (rho_iter_old)
./qs_sccs.F:      NULLIFY (rho_solute)
./qs_sccs.F:      NULLIFY (rho_tot)
./qs_sccs.F:      NULLIFY (rho_tot_zero)
./qs_sccs.F:                      rho=rho, &
./qs_sccs.F:      CPASSERT(ASSOCIATED(rho_tot_gspace))
./qs_sccs.F:                                     density=rho_tot_gspace, &
./qs_sccs.F:      rho_elec => work_r3d(1)%pw
./qs_sccs.F:      ngpts = rho_elec%pw_grid%ngpts
./qs_sccs.F:      dvol = rho_elec%pw_grid%dvol
./qs_sccs.F:      cell_volume = rho_elec%pw_grid%vol
./qs_sccs.F:      abc(1:3) = REAL(rho_elec%pw_grid%npts(1:3), KIND=dp)*rho_elec%pw_grid%dr(1:3)
./qs_sccs.F:      lb(1:3) = rho_elec%pw_grid%bounds_local(1, 1:3)
./qs_sccs.F:      ub(1:3) = rho_elec%pw_grid%bounds_local(2, 1:3)
./qs_sccs.F:      ! Get rho
./qs_sccs.F:      CALL qs_rho_get(rho_struct=rho, &
./qs_sccs.F:                      rho_r=rho_r, &
./qs_sccs.F:                      rho_r_sccs=rho_r_sccs)
./qs_sccs.F:      ! Retrieve the last rho_iter from the previous SCCS cycle if available
./qs_sccs.F:      CPASSERT(ASSOCIATED(rho_r_sccs))
./qs_sccs.F:      rho_iter_old => rho_r_sccs%pw
./qs_sccs.F:      CALL pw_copy(rho_r(1)%pw, rho_elec)
./qs_sccs.F:         CALL pw_axpy(rho_r(ispin)%pw, rho_elec)
./qs_sccs.F:      tot_rho_elec = accurate_sum(rho_elec%cr3d)*dvol
./qs_sccs.F:      CALL mp_sum(tot_rho_elec, para_env%group)
./qs_sccs.F:      ! Calculate the dielectric (smoothed) function of rho_elec in r-space
./qs_sccs.F:         CALL andreussi(rho_elec, eps_elec, deps_elec, eps0, sccs_control%rho_max, &
./qs_sccs.F:                        sccs_control%rho_min)
./qs_sccs.F:         CALL fattebert_gygi(rho_elec, eps_elec, deps_elec, eps0, sccs_control%beta, &
./qs_sccs.F:                             sccs_control%rho_zero)
./qs_sccs.F:            NULLIFY (drho_elec(i)%pw)
./qs_sccs.F:                                   drho_elec(i)%pw, &
./qs_sccs.F:         CALL derive(rho_elec, drho_elec, sccs_derivative_fft, pw_env, input, para_env)
./qs_sccs.F:         norm_drho_elec => work_r3d(5)%pw
./qs_sccs.F:!$OMP                SHARED(drho_elec,lb,norm_drho_elec,ub)
./qs_sccs.F:                  norm_drho_elec%cr3d(i, j, k) = SQRT(drho_elec(1)%pw%cr3d(i, j, k)* &
./qs_sccs.F:                                                      drho_elec(1)%pw%cr3d(i, j, k)+ &
./qs_sccs.F:                                                      drho_elec(2)%pw%cr3d(i, j, k)* &
./qs_sccs.F:                                                      drho_elec(2)%pw%cr3d(i, j, k)+ &
./qs_sccs.F:                                                      drho_elec(3)%pw%cr3d(i, j, k)* &
./qs_sccs.F:                                                      drho_elec(3)%pw%cr3d(i, j, k))
./qs_sccs.F:            CALL cp_pw_to_cube(norm_drho_elec, cube_unit, TRIM(filename), particles=particles, &
./qs_sccs.F:            CALL surface_andreussi(rho_elec, norm_drho_elec, theta, eps0, &
./qs_sccs.F:                                   sccs_control%rho_max, sccs_control%rho_min, &
./qs_sccs.F:                                   sccs_control%delta_rho)
./qs_sccs.F:            CALL surface_fattebert_gygi(rho_elec, norm_drho_elec, theta, eps0, &
./qs_sccs.F:                                        sccs_control%beta, sccs_control%rho_zero, &
./qs_sccs.F:                                        sccs_control%delta_rho)
./qs_sccs.F:                  NULLIFY (d2rho_elec(dj, di)%pw)
./qs_sccs.F:                                         d2rho_elec(dj, di)%pw, &
./qs_sccs.F:               CALL derive(drho_elec(di)%pw, d2rho_elec(:, di), sccs_derivative_fft, pw_env, &
./qs_sccs.F:!$OMP                   PRIVATE(di,dj,i,j,k,norm_drho2) &
./qs_sccs.F:!$OMP                   SHARED(d2rho_elec,drho_elec,lb,norm_drho_elec,sccs_control) &
./qs_sccs.F:                     norm_drho2 = norm_drho_elec%cr3d(i, j, k)*norm_drho_elec%cr3d(i, j, k)
./qs_sccs.F:                                                  (drho_elec(di)%pw%cr3d(i, j, k)* &
./qs_sccs.F:                                                   drho_elec(dj)%pw%cr3d(i, j, k)* &
./qs_sccs.F:                                                   d2rho_elec(di, dj)%pw%cr3d(i, j, k)/norm_drho2- &
./qs_sccs.F:                                                   d2rho_elec(di, di)%pw%cr3d(i, j, k))/norm_drho2
./qs_sccs.F:                  CALL pw_pool_give_back_pw(auxbas_pw_pool, d2rho_elec(dj, di)%pw)
./qs_sccs.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, drho_elec(i)%pw)
./qs_sccs.F:      rho_solute => work_r3d(4)%pw
./qs_sccs.F:      CALL pw_zero(rho_solute)
./qs_sccs.F:      CALL pw_transfer(rho_tot_gspace, rho_solute)
./qs_sccs.F:      tot_rho_solute = accurate_sum(rho_solute%cr3d)*dvol
./qs_sccs.F:      CALL mp_sum(tot_rho_solute, para_env%group)
./qs_sccs.F:      ! Reassign work storage to rho_tot_zero, because rho_elec is no longer needed
./qs_sccs.F:      rho_tot_zero => rho_elec
./qs_sccs.F:      NULLIFY (rho_elec)
./qs_sccs.F:      ! Build the initial (rho_iter = 0) total charge density (solute plus polarisation) in r-space
./qs_sccs.F:!$OMP             SHARED(rho_solute,rho_tot_zero)
./qs_sccs.F:               rho_tot_zero%cr3d(i, j, k) = rho_solute%cr3d(i, j, k)/eps_elec%cr3d(i, j, k)
./qs_sccs.F:               "SCCS| Total electronic charge density ", -tot_rho_elec, &
./qs_sccs.F:               "SCCS| Total charge density (solute)   ", -tot_rho_solute
./qs_sccs.F:      ! Reassign work storage to rho_tot, because ln_eps_elec is no longer needed
./qs_sccs.F:      rho_tot => ln_eps_elec
./qs_sccs.F:      ! Initialise the total electronic density in r-space rho_tot with rho_tot_zero + rho_iter_zero
./qs_sccs.F:      CALL pw_copy(rho_tot_zero, rho_tot)
./qs_sccs.F:      CALL pw_axpy(rho_iter_old, rho_tot)
./qs_sccs.F:                               density=rho_tot, &
./qs_sccs.F:         rho_delta_avg = 0.0_dp
./qs_sccs.F:         rho_delta_max = 0.0_dp
./qs_sccs.F:!$OMP                PRIVATE(i,j,k,rho_delta,rho_iter_new) &
./qs_sccs.F:!$OMP                SHARED(dln_eps_elec,dphi_tot,f,lb,rho_iter_old,ub) &
./qs_sccs.F:!$OMP                SHARED(rho_tot,rho_tot_zero,sccs_control) &
./qs_sccs.F:!$OMP                REDUCTION(+:rho_delta_avg) &
./qs_sccs.F:!$OMP                REDUCTION(MAX:rho_delta_max)
./qs_sccs.F:                  rho_iter_new = (dln_eps_elec(1)%pw%cr3d(i, j, k)*dphi_tot(1)%pw%cr3d(i, j, k)+ &
./qs_sccs.F:                  rho_iter_new = rho_iter_old%cr3d(i, j, k)+ &
./qs_sccs.F:                                 sccs_control%mixing*(rho_iter_new-rho_iter_old%cr3d(i, j, k))
./qs_sccs.F:                  rho_delta = ABS(rho_iter_new-rho_iter_old%cr3d(i, j, k))
./qs_sccs.F:                  rho_delta_max = MAX(rho_delta, rho_delta_max)
./qs_sccs.F:                  rho_delta_avg = rho_delta_avg+rho_delta
./qs_sccs.F:                  rho_tot%cr3d(i, j, k) = rho_tot_zero%cr3d(i, j, k)+rho_iter_new
./qs_sccs.F:                  rho_iter_old%cr3d(i, j, k) = rho_iter_new
./qs_sccs.F:         CALL mp_sum(rho_delta_avg, para_env%group)
./qs_sccs.F:         rho_delta_avg = rho_delta_avg/REAL(ngpts, KIND=dp)
./qs_sccs.F:         CALL mp_max(rho_delta_max, para_env%group)
./qs_sccs.F:               IF ((ABS(rho_delta_avg) < 1.0E-8_dp) .OR. &
./qs_sccs.F:                   (ABS(rho_delta_avg) >= 1.0E5_dp)) THEN
./qs_sccs.F:                     "SCCS| ", iter, rho_delta_avg, rho_delta_max
./qs_sccs.F:                     "SCCS| ", iter, rho_delta_avg, rho_delta_max
./qs_sccs.F:         IF (rho_delta_max <= sccs_control%eps_sccs) THEN
./qs_sccs.F:      CALL pw_transfer(rho_tot, rho_tot_gspace)
./qs_sccs.F:                               density=rho_tot_gspace, &
./qs_sccs.F:                               density=rho_tot_gspace, &
./qs_sccs.F:      phi_solute => rho_tot_zero
./qs_sccs.F:      NULLIFY (rho_tot_zero)
./qs_sccs.F:                            density=rho_solute, &
./qs_sccs.F:      ! rho_pol = rho_tot - rho_solute
./qs_sccs.F:      CALL pw_axpy(rho_solute, rho_tot, alpha=-1.0_dp)
./qs_sccs.F:      polarisation_charge = accurate_sum(rho_tot%cr3d)*dvol
./qs_sccs.F:      energy%sccs_pol = 0.5_dp*pw_integral_ab(rho_solute, phi_pol)
./qs_sccs.F:      energy%sccs_mpc = -0.5_dp*2.8373_dp*tot_rho_solute**2/MINVAL(abc(1:3))
./qs_sccs.F:      NULLIFY (rho_tot)
./qs_sccs.F:      NULLIFY (rho_solute)
./qs_sccs.F:!> \param rho_elec ...
./qs_sccs.F:!> \param rho_max ...
./qs_sccs.F:!> \param rho_min ...
./qs_sccs.F:   SUBROUTINE andreussi(rho_elec, eps_elec, deps_elec, epsilon_solvent, rho_max, &
./qs_sccs.F:                        rho_min)
./qs_sccs.F:      TYPE(pw_type), POINTER                             :: rho_elec, eps_elec, deps_elec
./qs_sccs.F:      REAL(KIND=dp), INTENT(IN)                          :: epsilon_solvent, rho_max, rho_min
./qs_sccs.F:      REAL(KIND=dp)                                      :: diff, dq, dt, f, ln_rho_max, ln_rho_min, &
./qs_sccs.F:                                                            q, rho, t, x, y
./qs_sccs.F:      diff = rho_max-rho_min
./qs_sccs.F:         ln_rho_max = LOG(rho_max)
./qs_sccs.F:         ln_rho_min = LOG(rho_min)
./qs_sccs.F:         q = twopi/(ln_rho_max-ln_rho_min)
./qs_sccs.F:      lb(1:3) = rho_elec%pw_grid%bounds_local(1, 1:3)
./qs_sccs.F:      ub(1:3) = rho_elec%pw_grid%bounds_local(2, 1:3)
./qs_sccs.F:!$OMP             PRIVATE(dt,i,j,k,rho,t,x,y) &
./qs_sccs.F:!$OMP             SHARED(ln_rho_max,rho_elec,q,rho_max,rho_min)
./qs_sccs.F:               rho = rho_elec%cr3d(i, j, k)
./qs_sccs.F:               IF (rho < rho_min) THEN
./qs_sccs.F:               ELSE IF (rho <= rho_max) THEN
./qs_sccs.F:                     x = LOG(rho)
./qs_sccs.F:                     y = q*(ln_rho_max-x)
./qs_sccs.F:                     deps_elec%cr3d(i, j, k) = eps_elec%cr3d(i, j, k)*dt/rho
./qs_sccs.F:!> \param rho_elec ...
./qs_sccs.F:!> \param rho_zero ...
./qs_sccs.F:   SUBROUTINE fattebert_gygi(rho_elec, eps_elec, deps_elec, epsilon_solvent, beta, &
./qs_sccs.F:                             rho_zero)
./qs_sccs.F:      TYPE(pw_type), POINTER                             :: rho_elec, eps_elec, deps_elec
./qs_sccs.F:      REAL(KIND=dp), INTENT(IN)                          :: epsilon_solvent, beta, rho_zero
./qs_sccs.F:      REAL(KIND=dp)                                      :: df, f, p, q, rho, s, t, twobeta
./qs_sccs.F:      df = (1.0_dp-epsilon_solvent)/rho_zero
./qs_sccs.F:      q = 1.0_dp/rho_zero
./qs_sccs.F:      lb(1:3) = rho_elec%pw_grid%bounds_local(1, 1:3)
./qs_sccs.F:      ub(1:3) = rho_elec%pw_grid%bounds_local(2, 1:3)
./qs_sccs.F:!$OMP             PRIVATE(i,j,k,p,rho,s,t) &
./qs_sccs.F:!$OMP             SHARED(q,rho_elec,twobeta)
./qs_sccs.F:               rho = rho_elec%cr3d(i, j, k)
./qs_sccs.F:               IF (rho < tol) THEN
./qs_sccs.F:                  s = rho*q
./qs_sccs.F:!> \param rho_elec ...
./qs_sccs.F:!> \param norm_drho_elec ...
./qs_sccs.F:!> \param rho_max ...
./qs_sccs.F:!> \param rho_min ...
./qs_sccs.F:!> \param delta_rho ...
./qs_sccs.F:   SUBROUTINE surface_andreussi(rho_elec, norm_drho_elec, dtheta, &
./qs_sccs.F:                                epsilon_solvent, rho_max, rho_min, delta_rho)
./qs_sccs.F:      TYPE(pw_type), POINTER                             :: rho_elec, norm_drho_elec, dtheta
./qs_sccs.F:      REAL(KIND=dp), INTENT(IN)                          :: epsilon_solvent, rho_max, rho_min, &
./qs_sccs.F:                                                            delta_rho
./qs_sccs.F:      REAL(KIND=dp)                                      :: diff, e, eps_elec, f, ln_rho_max, &
./qs_sccs.F:                                                            ln_rho_min, q, rho, t, x, y
./qs_sccs.F:      diff = rho_max-rho_min
./qs_sccs.F:         ln_rho_max = LOG(rho_max)
./qs_sccs.F:         ln_rho_min = LOG(rho_min)
./qs_sccs.F:         q = twopi/(ln_rho_max-ln_rho_min)
./qs_sccs.F:      lb(1:3) = rho_elec%pw_grid%bounds_local(1, 1:3)
./qs_sccs.F:      ub(1:3) = rho_elec%pw_grid%bounds_local(2, 1:3)
./qs_sccs.F:!$OMP             PRIVATE(eps_elec,i,j,k,l,rho,t,theta,x,y) &
./qs_sccs.F:!$OMP             SHARED(delta_rho,diff,dtheta,e,epsilon_solvent,f,lb) &
./qs_sccs.F:!$OMP             SHARED(ln_rho_max,norm_drho_elec,rho_elec,q,rho_max,rho_min,ub)
./qs_sccs.F:                  rho = rho_elec%cr3d(i, j, k)+(REAL(l, KIND=dp)-1.5_dp)*delta_rho
./qs_sccs.F:                  IF (rho < rho_min) THEN
./qs_sccs.F:                  ELSE IF (rho <= rho_max) THEN
./qs_sccs.F:                        x = LOG(rho)
./qs_sccs.F:                        y = q*(ln_rho_max-x)
./qs_sccs.F:               dtheta%cr3d(i, j, k) = (theta(2)-theta(1))*norm_drho_elec%cr3d(i, j, k)/delta_rho
./qs_sccs.F:!> \param rho_elec ...
./qs_sccs.F:!> \param norm_drho_elec ...
./qs_sccs.F:!> \param rho_zero ...
./qs_sccs.F:!> \param delta_rho ...
./qs_sccs.F:   SUBROUTINE surface_fattebert_gygi(rho_elec, norm_drho_elec, dtheta, &
./qs_sccs.F:                                     epsilon_solvent, beta, rho_zero, delta_rho)
./qs_sccs.F:      TYPE(pw_type), POINTER                             :: rho_elec, norm_drho_elec, dtheta
./qs_sccs.F:      REAL(KIND=dp), INTENT(IN)                          :: epsilon_solvent, beta, rho_zero, &
./qs_sccs.F:                                                            delta_rho
./qs_sccs.F:      REAL(KIND=dp)                                      :: e, eps_elec, f, p, q, rho, s, t, twobeta
./qs_sccs.F:      q = 1.0_dp/rho_zero
./qs_sccs.F:      lb(1:3) = rho_elec%pw_grid%bounds_local(1, 1:3)
./qs_sccs.F:      ub(1:3) = rho_elec%pw_grid%bounds_local(2, 1:3)
./qs_sccs.F:!$OMP             PRIVATE(eps_elec,i,j,k,l,p,rho,s,t,theta) &
./qs_sccs.F:!$OMP             SHARED(delta_rho,dtheta,e,epsilon_solvent,f,lb) &
./qs_sccs.F:!$OMP             SHARED(norm_drho_elec,q,rho_elec,twobeta,ub)
./qs_sccs.F:                  rho = rho_elec%cr3d(i, j, k)+(REAL(l, KIND=dp)-1.5_dp)*delta_rho
./qs_sccs.F:                  IF (rho < tol) THEN
./qs_sccs.F:                     s = rho*q
./qs_sccs.F:               dtheta%cr3d(i, j, k) = (theta(2)-theta(1))*norm_drho_elec%cr3d(i, j, k)/delta_rho
./mp2_gpw.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./mp2_gpw.F:                                              qs_rho_type
./mp2_gpw.F:         Emp2_EX_BB, eps_gvg_rspace_old, eps_pgf_orb_old, eps_rho_rspace_old, progression_factor, &
./mp2_gpw.F:      TYPE(pw_p_type)                                    :: pot_g, rho_g, rho_r
./mp2_gpw.F:      CALL get_eps_old(dft_control, eps_pgf_orb_old, eps_rho_rspace_old, eps_gvg_rspace_old)
./mp2_gpw.F:         NULLIFY (rho_r%pw, rho_g%pw, pot_g%pw)
./mp2_gpw.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_r%pw, &
./mp2_gpw.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, &
./mp2_gpw.F:         rho_r%pw%cr3d = 0.0D0
./mp2_gpw.F:         CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_gpw.F:               atomic_kind_set, qs_kind_set, mo_coeff, fm_matrix_L_RI_metric, nmo, homo, rho_r, rho_g, pot_g, &
./mp2_gpw.F:                                       nmo, homo, rho_r, rho_g, pot_g, &
./mp2_gpw.F:               atomic_kind_set, qs_kind_set, mo_coeff, Eigenval, nmo, homo, rho_r, rho_g, pot_g, &
./mp2_gpw.F:               atomic_kind_set, qs_kind_set, mo_coeff_beta, Eigenval_beta, nmo, homo_beta, rho_r, rho_g, pot_g, &
./mp2_gpw.F:               atomic_kind_set, qs_kind_set, mo_coeff, Eigenval, nmo, homo, rho_r, rho_g, pot_g, &
./mp2_gpw.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r%pw)
./mp2_gpw.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./mp2_gpw.F:                  NULLIFY (rho_r%pw, rho_g%pw, pot_g%pw)
./mp2_gpw.F:                  CALL pw_pool_create_pw(auxbas_pw_pool, rho_r%pw, &
./mp2_gpw.F:                  CALL pw_pool_create_pw(auxbas_pw_pool, rho_g%pw, &
./mp2_gpw.F:                                          my_group_L_start, my_group_L_end, my_group_L_size, sab_orb_sub, rho_r, rho_g, pot_g, &
./mp2_gpw.F:                                          my_group_L_start, my_group_L_end, my_group_L_size, sab_orb_sub, rho_r, rho_g, pot_g, &
./mp2_gpw.F:                  CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r%pw)
./mp2_gpw.F:                  CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g%pw)
./mp2_gpw.F:      dft_control%qs_control%eps_rho_rspace = eps_rho_rspace_old
./mp2_gpw.F:!> \param rho_r ...
./mp2_gpw.F:!> \param rho_g ...
./mp2_gpw.F:                              rho_r, rho_g, pot_g, mat_munu, pw_env_sub, &
./mp2_gpw.F:      TYPE(pw_p_type)                                    :: rho_r, rho_g, pot_g
./mp2_gpw.F:      wfn_size = REAL(SIZE(rho_r%pw%cr3d), KIND=dp)
./mp2_gpw.F:         CALL calculate_wavefunction(mo_coeff, i, psi_i(i), rho_g, atomic_kind_set, &
./mp2_gpw.F:         CALL calculate_wavefunction(mo_coeff, a, psi_a, rho_g, atomic_kind_set, &
./mp2_gpw.F:            rho_r%pw%cr3d = psi_i(i)%pw%cr3d*psi_a%pw%cr3d
./mp2_gpw.F:            CALL pw_transfer(rho_r%pw, rho_g%pw)
./mp2_gpw.F:            CALL pw_poisson_solve(poisson_env, rho_g%pw, pair_energy, pot_g%pw)
./mp2_gpw.F:            CALL pw_transfer(pot_g%pw, rho_r%pw)
./mp2_gpw.F:            CALL pw_scale(rho_r%pw, rho_r%pw%pw_grid%dvol)
./mp2_gpw.F:            CALL integrate_v_rspace(rho_r, hmat=mat_munu, qs_env=qs_env, &
./mp2_gpw.F:      dft_control%qs_control%eps_rho_rspace = mp2_env%mp2_gpw%eps_grid
./mp2_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: dm_for_maos_virt, rho_ao_kp, &
./mp2_gpw.F:      TYPE(qs_rho_type), POINTER                         :: rho
./mp2_gpw.F:         CALL get_qs_env(qs_env, rho=rho)
./mp2_gpw.F:         NULLIFY (rho_ao_kp)
./mp2_gpw.F:         CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./mp2_gpw.F:            CALL build_scaled_dm_occ(scaled_dm_for_maos_occ, rho_ao_kp, mo_coeff, mo_coeff_beta, nspins, homo, homo_beta, nmo, &
./mp2_gpw.F:            scaled_dm_for_maos_occ => rho_ao_kp
./mp2_gpw.F:            dm_for_maos_virt => rho_ao_kp
./mp2_gpw.F:!> \param rho_ao_kp ...
./mp2_gpw.F:   SUBROUTINE build_scaled_dm_occ(scaled_dm_for_maos_occ, rho_ao_kp, mo_coeff, mo_coeff_beta, nspins, homo, homo_beta, nmo, &
./mp2_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: scaled_dm_for_maos_occ, rho_ao_kp
./mp2_gpw.F:                           template=rho_ao_kp(1, 1)%matrix)
./mp2_gpw.F:!> \param rho_ao_kp ...
./mp2_gpw.F:   SUBROUTINE allocate_and_set_identity_dbscr(id_mat, rho_ao_kp, nspin)
./mp2_gpw.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./mp2_gpw.F:                           template=rho_ao_kp(1, 1)%matrix)
./mp2_gpw.F:!> \param eps_rho_rspace_old ...
./mp2_gpw.F:   SUBROUTINE get_eps_old(dft_control, eps_pgf_orb_old, eps_rho_rspace_old, eps_gvg_rspace_old)
./mp2_gpw.F:      REAL(kind=dp)                                      :: eps_pgf_orb_old, eps_rho_rspace_old, &
./mp2_gpw.F:      eps_rho_rspace_old = dft_control%qs_control%eps_rho_rspace
./qs_linres_atom_current.F:   USE qs_linres_types,                 ONLY: allocate_jrho_atom_rad,&
./qs_linres_atom_current.F:                                              allocate_jrho_coeff,&
./qs_linres_atom_current.F:                                              jrho_atom_type,&
./qs_linres_atom_current.F:                                              set2zero_jrho_atom_rad
./qs_linres_atom_current.F:   USE qs_rho_atom_types,               ONLY: rho_atom_coeff
./qs_linres_atom_current.F:   PUBLIC :: calculate_jrho_atom_rad, calculate_jrho_atom, calculate_jrho_atom_coeff
./qs_linres_atom_current.F:   SUBROUTINE calculate_jrho_atom_coeff(qs_env, current_env, mat_d0, mat_jp, mat_jp_rii, &
./qs_linres_atom_current.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'calculate_jrho_atom_coeff', &
./qs_linres_atom_current.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_atom_current.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: a_block, b_block, c_block, d_block, &
./qs_linres_atom_current.F:      NULLIFY (atomic_kind_set, qs_kind_set, dft_control, sab_all, jrho1_atom_set, oce, &
./qs_linres_atom_current.F:      CALL get_current_env(current_env=current_env, jrho1_atom_set=jrho1_atom_set)
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom_set))
./qs_linres_atom_current.F:      natom = SIZE(jrho1_atom_set)
./qs_linres_atom_current.F:               IF (ASSOCIATED(jrho1_atom_set(iatom)%cjc0_h(1)%r_coef)) THEN
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc0_h(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc0_s(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc_h(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc_s(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc_ii_h(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc_ii_s(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc_iii_h(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom_set(iatom)%cjc_iii_s(ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:!$OMP                 , ii, iii, jrho1_atom_set                 &
./qs_linres_atom_current.F:                     IF (.NOT. ASSOCIATED(jrho1_atom_set(katom)%cjc0_h(1)%r_coef)) THEN
./qs_linres_atom_current.F:                        CALL allocate_jrho_coeff(jrho1_atom_set, katom, nsoctot)
./qs_linres_atom_current.F:                        r_coef_h => jrho1_atom_set(katom)%cjc0_h(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_s => jrho1_atom_set(katom)%cjc0_s(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_h => jrho1_atom_set(katom)%cjc_h(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_s => jrho1_atom_set(katom)%cjc_s(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_h => jrho1_atom_set(katom)%cjc_ii_h(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_s => jrho1_atom_set(katom)%cjc_ii_s(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_h => jrho1_atom_set(katom)%cjc_iii_h(ispin)%r_coef
./qs_linres_atom_current.F:                        r_coef_s => jrho1_atom_set(katom)%cjc_iii_s(ispin)%r_coef
./qs_linres_atom_current.F:            is_not_associated = .NOT. ASSOCIATED(jrho1_atom_set(iatom)%cjc0_h(1)%r_coef)
./qs_linres_atom_current.F:               CALL allocate_jrho_coeff(jrho1_atom_set, iatom, nsoctot)
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc0_h(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc0_s(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc_h(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc_s(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc_ii_h(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc_ii_s(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc_iii_h(ispin)%r_coef
./qs_linres_atom_current.F:               tmp_coeff => jrho1_atom_set(iatom)%cjc_iii_s(ispin)%r_coef
./qs_linres_atom_current.F:               IF (ASSOCIATED(jrho1_atom_set(iatom)%cjc0_h(ispin)%r_coef)) &
./qs_linres_atom_current.F:                  nbr_dbl = nbr_dbl+8.0_dp*REAL(SIZE(jrho1_atom_set(iatom)%cjc0_h(ispin)%r_coef), dp)
./qs_linres_atom_current.F:         WRITE (output_unit, '(A,E8.2)') 'calculate_jrho_atom_coeff: nbr_dbl=', nbr_dbl
./qs_linres_atom_current.F:   END SUBROUTINE calculate_jrho_atom_coeff
./qs_linres_atom_current.F:   SUBROUTINE calculate_jrho_atom_rad(qs_env, current_env, idir)
./qs_linres_atom_current.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_jrho_atom_rad', &
./qs_linres_atom_current.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_atom_current.F:      TYPE(jrho_atom_type), POINTER                      :: jrho1_atom
./qs_linres_atom_current.F:               Fr_b_s_ii, Fr_b_h_iii, Fr_b_s_iii, jrho1_atom_set, &
./qs_linres_atom_current.F:               jrho1_atom)
./qs_linres_atom_current.F:                           jrho1_atom_set=jrho1_atom_set)
./qs_linres_atom_current.F:      natom_tot = SIZE(jrho1_atom_set, 1)
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc0_h(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc0_s(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc_h(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc_s(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc_ii_h(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc_ii_s(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc_iii_h(ispin)%r_coef
./qs_linres_atom_current.F:                           coeff => jrho1_atom_set(iatom)%cjc_iii_s(ispin)%r_coef
./qs_linres_atom_current.F:                           jrho1_atom => jrho1_atom_set(iatom)
./qs_linres_atom_current.F:                           IF (.NOT. ASSOCIATED(jrho1_atom%jrho_a_h(ispin)%r_coef)) THEN
./qs_linres_atom_current.F:                              CALL allocate_jrho_atom_rad(jrho1_atom, ispin, nr, na, &
./qs_linres_atom_current.F:                                 CALL set2zero_jrho_atom_rad(jrho1_atom, ispin)
./qs_linres_atom_current.F:                           Fr_h => jrho1_atom%jrho_h(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_s => jrho1_atom%jrho_s(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_a_h => jrho1_atom%jrho_a_h(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_a_s => jrho1_atom%jrho_a_s(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_b_h => jrho1_atom%jrho_b_h(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_b_s => jrho1_atom%jrho_b_s(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_a_h_ii => jrho1_atom%jrho_a_h_ii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_a_s_ii => jrho1_atom%jrho_a_s_ii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_b_h_ii => jrho1_atom%jrho_b_h_ii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_b_s_ii => jrho1_atom%jrho_b_s_ii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_a_h_iii => jrho1_atom%jrho_a_h_iii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_a_s_iii => jrho1_atom%jrho_a_s_iii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_b_h_iii => jrho1_atom%jrho_b_h_iii(ispin)%r_coef
./qs_linres_atom_current.F:                           Fr_b_s_iii => jrho1_atom%jrho_b_s_iii(ispin)%r_coef
./qs_linres_atom_current.F:                                    WRITE (*, *) 'calculate_jrho_atom_rad: 1 l', l
./qs_linres_atom_current.F:                                    WRITE (*, *) 'calculate_jrho_atom_rad: 1 lmax_expansion', lmax_expansion
./qs_linres_atom_current.F:                                    WRITE (*, *) 'calculate_jrho_atom_rad: 1 l', l
./qs_linres_atom_current.F:                                    WRITE (*, *) 'calculate_jrho_atom_rad: 1 lmax_expansion', lmax_expansion
./qs_linres_atom_current.F:   END SUBROUTINE calculate_jrho_atom_rad
./qs_linres_atom_current.F:!> \param jrho1_atom ...
./qs_linres_atom_current.F:!> \param jrho_h ...
./qs_linres_atom_current.F:!> \param jrho_s ...
./qs_linres_atom_current.F:   SUBROUTINE calculate_jrho_atom_ang(jrho1_atom, jrho_h, jrho_s, grid_atom, &
./qs_linres_atom_current.F:      TYPE(jrho_atom_type), POINTER            :: jrho1_atom
./qs_linres_atom_current.F:      REAL(dp), DIMENSION(:, :), POINTER       :: jrho_h, jrho_s
./qs_linres_atom_current.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_jrho_atom_ang', &
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho_h))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho_s))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_h))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_s))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_h))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_s))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_h(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_s(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_h(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_s(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_h_ii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_s_ii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_h_ii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_s_ii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_h_ii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_s_ii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_h_ii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_s_ii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_h_iii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_s_iii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_h_iii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_s_iii))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_h_iii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_a_s_iii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_h_iii(ispin)%r_coef))
./qs_linres_atom_current.F:      CPASSERT(ASSOCIATED(jrho1_atom%jrho_b_s_iii(ispin)%r_coef))
./qs_linres_atom_current.F:      Fr_h => jrho1_atom%jrho_h(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_s => jrho1_atom%jrho_s(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_a_h => jrho1_atom%jrho_a_h(ispin)%r_coef !Rai
./qs_linres_atom_current.F:      Fr_a_s => jrho1_atom%jrho_a_s(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_b_h => jrho1_atom%jrho_b_h(ispin)%r_coef !Daij
./qs_linres_atom_current.F:      Fr_b_s => jrho1_atom%jrho_b_s(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_a_h_ii => jrho1_atom%jrho_a_h_ii(ispin)%r_coef !Rci
./qs_linres_atom_current.F:      Fr_a_s_ii => jrho1_atom%jrho_a_s_ii(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_b_h_ii => jrho1_atom%jrho_b_h_ii(ispin)%r_coef !Dcij
./qs_linres_atom_current.F:      Fr_b_s_ii => jrho1_atom%jrho_b_s_ii(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_a_h_iii => jrho1_atom%jrho_a_h_iii(ispin)%r_coef !Rbi
./qs_linres_atom_current.F:      Fr_a_s_iii => jrho1_atom%jrho_a_s_iii(ispin)%r_coef
./qs_linres_atom_current.F:      Fr_b_h_iii => jrho1_atom%jrho_b_h_iii(ispin)%r_coef !Dbij
./qs_linres_atom_current.F:      Fr_b_s_iii => jrho1_atom%jrho_b_s_iii(ispin)%r_coef
./qs_linres_atom_current.F:                  jrho_h(ir, ia) = jrho_h(ir, ia)+rad_part*slm(ia, iso)
./qs_linres_atom_current.F:                  jrho_s(ir, ia) = jrho_s(ir, ia)+rad_part*slm(ia, iso)
./qs_linres_atom_current.F:                  jrho_h(ir, ia) = jrho_h(ir, ia)+rad_part*slm(ia, iso)
./qs_linres_atom_current.F:                  jrho_s(ir, ia) = jrho_s(ir, ia)+rad_part*slm(ia, iso)
./qs_linres_atom_current.F:   END SUBROUTINE calculate_jrho_atom_ang
./qs_linres_atom_current.F:   SUBROUTINE calculate_jrho_atom(current_env, qs_env, iB, idir)
./qs_linres_atom_current.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'calculate_jrho_atom', &
./qs_linres_atom_current.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_atom_current.F:      TYPE(jrho_atom_type), POINTER                      :: jrho1_atom
./qs_linres_atom_current.F:      NULLIFY (jrho1_atom_set, grid_atom, harmonics)
./qs_linres_atom_current.F:                           jrho1_atom_set=jrho1_atom_set)
./qs_linres_atom_current.F:               NULLIFY (jrho1_atom)
./qs_linres_atom_current.F:               jrho1_atom => jrho1_atom_set(iatom)
./qs_linres_atom_current.F:                  jrho1_atom%jrho_vec_rad_h(idir, ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  jrho1_atom%jrho_vec_rad_s(idir, ispin)%r_coef = 0.0_dp
./qs_linres_atom_current.F:                  CALL calculate_jrho_atom_ang(jrho1_atom, &
./qs_linres_atom_current.F:                                               jrho1_atom%jrho_vec_rad_h(idir, ispin)%r_coef, &
./qs_linres_atom_current.F:                                               jrho1_atom%jrho_vec_rad_s(idir, ispin)%r_coef, &
./qs_linres_atom_current.F:   END SUBROUTINE calculate_jrho_atom
./input_cp2k_subsys.F:        cell_sym_none, cell_sym_orthorhombic, cell_sym_rhombohedral, cell_sym_tetragonal_ab, &
./input_cp2k_subsys.F:                          " defines the diagonal elements of h matrix for an orthorhombic cell."// &
./input_cp2k_subsys.F:                          " For non-orthorhombic cells it is possible either to specify the angles "// &
./input_cp2k_subsys.F:                       "Orthorhombic (a &ne; b &ne; c, &alpha; = &beta; = &gamma; = 90&deg;)", &
./input_cp2k_subsys.F:                       cell_sym_orthorhombic, cell_sym_tetragonal_ab, cell_sym_tetragonal_ac, cell_sym_tetragonal_bc, &
./input_cp2k_subsys.F:                       cell_sym_tetragonal_ab, cell_sym_rhombohedral, cell_sym_hexagonal, cell_sym_cubic/), &
./qs_kpp1_env_methods.F:!>      kpp1 = delta_rho|_P delta_rho|_P E drho(P1) drho
./qs_kpp1_env_methods.F:   USE qs_rho0_ggrid,                   ONLY: integrate_vhg0_rspace
./qs_kpp1_env_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_kpp1_env_methods.F:                                              qs_rho_type
./qs_kpp1_env_methods.F:   USE xc_rho_cflags_types,             ONLY: xc_rho_cflags_type
./qs_kpp1_env_methods.F:   USE xc_rho_set_types,                ONLY: xc_rho_set_create,&
./qs_kpp1_env_methods.F:                                              xc_rho_set_release,&
./qs_kpp1_env_methods.F:                                              xc_rho_set_type,&
./qs_kpp1_env_methods.F:                                              xc_rho_set_update
./qs_kpp1_env_methods.F:      NULLIFY (kpp1_env%v_rspace, kpp1_env%v_ao, kpp1_env%drho_r, &
./qs_kpp1_env_methods.F:               kpp1_env%rho_set, &
./qs_kpp1_env_methods.F:!> \param rho the density where to evaluate the derivatives (i.e. p along
./qs_kpp1_env_methods.F:!> \param rho1 the density that represent the first direction along which
./qs_kpp1_env_methods.F:!> \param rho1_xc ...
./qs_kpp1_env_methods.F:   SUBROUTINE kpp1_calc_k_p_p1(kpp1_env, p_env, qs_env, k_p_p1, rho, rho1, rho1_xc)
./qs_kpp1_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho1
./qs_kpp1_env_methods.F:      TYPE(qs_rho_type), OPTIONAL, POINTER               :: rho1_xc
./qs_kpp1_env_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./qs_kpp1_env_methods.F:      TYPE(pw_p_type)                                    :: rho1_tot_gspace, v_hartree_gspace, &
./qs_kpp1_env_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho1_g, rho1_g_pw, rho1_r, rho1_r_pw, &
./qs_kpp1_env_methods.F:      TYPE(xc_rho_cflags_type)                           :: needs
./qs_kpp1_env_methods.F:      TYPE(xc_rho_set_type), POINTER                     :: rho1_set
./qs_kpp1_env_methods.F:               rho1_r, rho1_g_pw, tau_pw, v_xc, rho1_set, &
./qs_kpp1_env_methods.F:               poisson_env, input, scf_section, rho1_g, rho_ao)
./qs_kpp1_env_methods.F:      CPASSERT(ASSOCIATED(rho))
./qs_kpp1_env_methods.F:      CPASSERT(ASSOCIATED(rho1))
./qs_kpp1_env_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_kpp1_env_methods.F:      CALL qs_rho_get(rho1, rho_g=rho1_g)
./qs_kpp1_env_methods.F:         CPASSERT(ASSOCIATED(rho1_xc))
./qs_kpp1_env_methods.F:         CALL prepare_gapw_den(qs_env, p_env%local_rho_set, do_rho0=(.NOT. gapw_xc))
./qs_kpp1_env_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho1_tot_gspace%pw, &
./qs_kpp1_env_methods.F:      CALL pw_copy(rho1_g(1)%pw, rho1_tot_gspace%pw)
./qs_kpp1_env_methods.F:         CALL pw_axpy(rho1_g(ispin)%pw, rho1_tot_gspace%pw)
./qs_kpp1_env_methods.F:         CALL pw_axpy(p_env%local_rho_set%rho0_mpole%rho0_s_gs%pw, rho1_tot_gspace%pw)
./qs_kpp1_env_methods.F:         CALL print_densities(rho1, rho1_tot_gspace, output_unit)
./qs_kpp1_env_methods.F:         CALL pw_poisson_solve(poisson_env, rho1_tot_gspace%pw, &
./qs_kpp1_env_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho1_tot_gspace%pw)
./qs_kpp1_env_methods.F:         CALL qs_rho_get(rho1_xc, rho_r=rho1_r)
./qs_kpp1_env_methods.F:         CALL qs_rho_get(rho1, rho_r=rho1_r)
./qs_kpp1_env_methods.F:         ALLOCATE (rho1_r_pw(2))
./qs_kpp1_env_methods.F:            NULLIFY (rho1_r_pw(ispin)%pw)
./qs_kpp1_env_methods.F:            CALL pw_create(rho1_r_pw(ispin)%pw, rho1_r(1)%pw%pw_grid, &
./qs_kpp1_env_methods.F:                           rho1_r(1)%pw%in_use, rho1_r(1)%pw%in_space)
./qs_kpp1_env_methods.F:            CALL pw_transfer(rho1_r(1)%pw, rho1_r_pw(ispin)%pw)
./qs_kpp1_env_methods.F:         ALLOCATE (rho1_r_pw(nspins))
./qs_kpp1_env_methods.F:            rho1_r_pw(ispin)%pw => rho1_r(ispin)%pw
./qs_kpp1_env_methods.F:            CALL pw_retain(rho1_r_pw(ispin)%pw)
./qs_kpp1_env_methods.F:      ! rho1 !
./qs_kpp1_env_methods.F:      bo = rho1_r(1)%pw%pw_grid%bounds_local
./qs_kpp1_env_methods.F:      CALL xc_rho_set_create(rho1_set, bo, &
./qs_kpp1_env_methods.F:                             rho_cutoff=section_get_rval(xc_section, "DENSITY_CUTOFF"), &
./qs_kpp1_env_methods.F:                             drho_cutoff=section_get_rval(xc_section, "GRADIENT_CUTOFF"), &
./qs_kpp1_env_methods.F:      CALL xc_rho_set_update(rho1_set, rho1_r_pw, rho1_g_pw, tau_pw, needs, &
./qs_kpp1_env_methods.F:      CALL xc_calc_2nd_deriv(v_xc, kpp1_env%deriv_set, kpp1_env%rho_set, &
./qs_kpp1_env_methods.F:                             rho1_set, auxbas_pw_pool, xc_section=xc_section, &
./qs_kpp1_env_methods.F:      CALL xc_rho_set_release(rho1_set)
./qs_kpp1_env_methods.F:      DO ispin = 1, SIZE(rho1_r_pw)
./qs_kpp1_env_methods.F:         CALL pw_release(rho1_r_pw(ispin)%pw)
./qs_kpp1_env_methods.F:      DEALLOCATE (rho1_r_pw)
./qs_kpp1_env_methods.F:                                       pmat=rho_ao(ispin), &
./qs_kpp1_env_methods.F:                                          pmat=rho_ao(ispin), &
./qs_kpp1_env_methods.F:                                       pmat=rho_ao(ispin), &
./qs_kpp1_env_methods.F:                                       pmat=rho_ao(ispin), &
./qs_kpp1_env_methods.F:                                    pmat=rho_ao(ispin), &
./qs_kpp1_env_methods.F:         ns = SIZE(rho_ao)
./qs_kpp1_env_methods.F:         psmat(1:ns, 1:1) => rho_ao(1:ns)
./qs_kpp1_env_methods.F:!> \param rho the density where to evaluate the derivatives (i.e. p along
./qs_kpp1_env_methods.F:!> \param rho1 the density that represent the first direction along which
./qs_kpp1_env_methods.F:!>      rescale my_diff depending on the norm of rho1?
./qs_kpp1_env_methods.F:   SUBROUTINE kpp1_calc_k_p_p1_fdiff(qs_env, k_p_p1, rho, rho1, &
./qs_kpp1_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho1
./qs_kpp1_env_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: ks_2, matrix_s, rho1_ao, rho_ao
./qs_kpp1_env_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho1_g, rho1_r, rho_g, rho_r
./qs_kpp1_env_methods.F:      NULLIFY (ks_2, matrix_s, qs_energy, rho_ao, rho1_ao, rho_r, rho1_r, rho_g, rho1_g)
./qs_kpp1_env_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao, rho_r=rho_r, rho_g=rho_g)
./qs_kpp1_env_methods.F:      CALL qs_rho_get(rho1, rho_ao=rho1_ao, rho_r=rho1_r, rho_g=rho1_g)
./qs_kpp1_env_methods.F:      ! rho = rho0+h/2*rho1
./qs_kpp1_env_methods.F:         CALL dbcsr_add(rho_ao(ispin)%matrix, rho1_ao(ispin)%matrix, &
./qs_kpp1_env_methods.F:         rho_r(ispin)%pw%cr3d = rho_r(ispin)%pw%cr3d+my_diff*rho1_r(ispin)%pw%cr3d
./qs_kpp1_env_methods.F:         rho_g(ispin)%pw%cc = rho_g(ispin)%pw%cc+my_diff*rho1_g(ispin)%pw%cc
./qs_kpp1_env_methods.F:      ! rho = rho0-h/2*rho1
./qs_kpp1_env_methods.F:         CALL dbcsr_add(rho_ao(ispin)%matrix, rho1_ao(ispin)%matrix, &
./qs_kpp1_env_methods.F:         rho_r(ispin)%pw%cr3d = rho_r(ispin)%pw%cr3d+my_diff*rho1_r(ispin)%pw%cr3d
./qs_kpp1_env_methods.F:         rho_g(ispin)%pw%cc = rho_g(ispin)%pw%cc+my_diff*rho1_g(ispin)%pw%cc
./qs_kpp1_env_methods.F:      ! rho = rho0
./qs_kpp1_env_methods.F:         CALL dbcsr_add(rho_ao(ispin)%matrix, rho1_ao(ispin)%matrix, &
./qs_kpp1_env_methods.F:         rho_r(ispin)%pw%cr3d = rho_r(ispin)%pw%cr3d+my_diff*rho1_r(ispin)%pw%cr3d
./qs_kpp1_env_methods.F:         rho_g(ispin)%pw%cc = rho_g(ispin)%pw%cc+my_diff*rho1_g(ispin)%pw%cc
./qs_kpp1_env_methods.F:      ! k_p_p1=(H(rho0+h/2 rho1)-H(rho0-h/2 rho1))/h
./qs_kpp1_env_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: my_rho_r, rho_r
./qs_kpp1_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_kpp1_env_methods.F:      NULLIFY (pw_env, auxbas_pw_pool, matrix_s, rho, rho_r, input)
./qs_kpp1_env_methods.F:                      matrix_s=matrix_s, input=input, rho=rho)
./qs_kpp1_env_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_kpp1_env_methods.F:      nspins = SIZE(rho_r)
./qs_kpp1_env_methods.F:            ALLOCATE (my_rho_r(2))
./qs_kpp1_env_methods.F:               CALL pw_pool_create_pw(auxbas_pw_pool, my_rho_r(ispin)%pw, &
./qs_kpp1_env_methods.F:                                      use_data=rho_r(1)%pw%in_use, in_space=rho_r(1)%pw%in_space)
./qs_kpp1_env_methods.F:               my_rho_r(ispin)%pw%cr3d = 0.5_dp*rho_r(1)%pw%cr3d
./qs_kpp1_env_methods.F:            ALLOCATE (my_rho_r(SIZE(rho_r)))
./qs_kpp1_env_methods.F:            DO ispin = 1, SIZE(rho_r)
./qs_kpp1_env_methods.F:               my_rho_r(ispin)%pw => rho_r(ispin)%pw
./qs_kpp1_env_methods.F:               CALL pw_retain(my_rho_r(ispin)%pw)
./qs_kpp1_env_methods.F:         CALL xc_prep_2nd_deriv(kpp1_env%deriv_set, kpp1_env%rho_set, &
./qs_kpp1_env_methods.F:                                my_rho_r, auxbas_pw_pool, &
./qs_kpp1_env_methods.F:         DO ispin = 1, SIZE(my_rho_r)
./qs_kpp1_env_methods.F:            CALL pw_release(my_rho_r(ispin)%pw)
./qs_kpp1_env_methods.F:         DEALLOCATE (my_rho_r)
./qs_kpp1_env_methods.F:!> \param psi0_changed true if the value of psi0 (qs_env%rho) has changed
./qs_kpp1_env_methods.F:         IF (ASSOCIATED(kpp1_env%drho_r)) THEN
./qs_kpp1_env_methods.F:            DEALLOCATE (kpp1_env%drho_r)
./qs_kpp1_env_methods.F:         CALL xc_rho_set_release(kpp1_env%rho_set) ! it would be better to pass a pw pool
./qs_kpp1_env_methods.F:!> \param rho1 ...
./qs_kpp1_env_methods.F:!> \param rho1_tot_gspace ...
./qs_kpp1_env_methods.F:   SUBROUTINE print_densities(rho1, rho1_tot_gspace, output_unit)
./qs_kpp1_env_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho1
./qs_kpp1_env_methods.F:      TYPE(pw_p_type), INTENT(IN)                        :: rho1_tot_gspace
./qs_kpp1_env_methods.F:      REAL(KIND=dp)                                      :: total_rho_gspace
./qs_kpp1_env_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho1_r
./qs_kpp1_env_methods.F:      NULLIFY (tot_rho1_r)
./qs_kpp1_env_methods.F:      total_rho_gspace = pw_integrate_function(rho1_tot_gspace%pw, isign=-1)
./qs_kpp1_env_methods.F:         CALL qs_rho_get(rho1, tot_rho_r=tot_rho1_r)
./qs_kpp1_env_methods.F:            accurate_sum(tot_rho1_r), &
./qs_kpp1_env_methods.F:            total_rho_gspace
./surface_dipole.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./surface_dipole.F:                                              qs_rho_type
./surface_dipole.F:                                                            ilow, irho, ispin, isurf, iup, jsurf
./surface_dipole.F:                                                            height_min, hh, rhoav_min, surfarea, &
./surface_dipole.F:      REAL(dp), ALLOCATABLE, DIMENSION(:)                :: rhoavsurf
./surface_dipole.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./surface_dipole.F:      TYPE(pw_p_type), POINTER                           :: rho0_s_gs, rho_core
./surface_dipole.F:      TYPE(qs_rho_type), POINTER                         :: rho
./surface_dipole.F:      NULLIFY (cell, dft_control, rho, pw_env, rho_core, rho0_s_gs, auxbas_pw_pool, &
./surface_dipole.F:               pw_pools, subsys, v_hartree_rspace, rho_r)
./surface_dipole.F:                      rho=rho, &
./surface_dipole.F:                      rho_core=rho_core, &
./surface_dipole.F:                      rho0_s_gs=rho0_s_gs, &
./surface_dipole.F:         CALL pw_transfer(rho0_s_gs%pw, wf_r%pw)
./surface_dipole.F:            CALL pw_axpy(rho_core%pw, wf_r%pw)
./surface_dipole.F:         CALL pw_transfer(rho_core%pw, wf_r%pw)
./surface_dipole.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./surface_dipole.F:         CALL pw_axpy(rho_r(ispin)%pw, wf_r%pw)
./surface_dipole.F:!  in the ortorhombic cell, but in principle it does not need to be this way, importan
./surface_dipole.F:      ALLOCATE (rhoavsurf(ilow:iup))
./surface_dipole.F:      rhoavsurf = 0.0_dp
./surface_dipole.F:            rhoavsurf(i) = accurate_sum(wf_r%pw%cr3d(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), i))
./surface_dipole.F:            rhoavsurf(i) = accurate_sum(wf_r%pw%cr3d(bo(1, 1):bo(2, 1), i, bo(1, 3):bo(2, 3)))
./surface_dipole.F:            rhoavsurf(i) = accurate_sum(wf_r%pw%cr3d(i, bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)))
./surface_dipole.F:         CALL mp_sum(rhoavsurf, wf_r%pw%pw_grid%para%group)
./surface_dipole.F:      rhoavsurf(ilow:iup) = dsurf*rhoavsurf(ilow:iup)
./surface_dipole.F:      rhoavsurf(ilow:iup) = rhoavsurf(ilow:iup)/surfarea
./surface_dipole.F:      ilayer_min = ilow-1+MINLOC(ABS(rhoavsurf(ilow:iup)), 1)
./surface_dipole.F:      rhoav_min = ABS(rhoavsurf(ilayer_min))
./surface_dipole.F:      IF (rhoav_min >= 1.E-5_dp) &
./surface_dipole.F:!   surface dipole form average rhoavsurf
./surface_dipole.F:!   \sum_i NjdjNkdkdi rhoav_i (i-imin)di
./surface_dipole.F:            irho = i-ngrid(idir_surfdip)
./surface_dipole.F:            irho = i
./surface_dipole.F:         dip_hh = dip_hh+rhoavsurf(irho)*hh*dip_fac
./surface_dipole.F:      DEALLOCATE (rhoavsurf)
./surface_dipole.F:            irho = i-ngrid(idir_surfdip)
./surface_dipole.F:            irho = i
./surface_dipole.F:            vdip_r%pw%cr3d(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), irho) = &
./surface_dipole.F:               vdip_r%pw%cr3d(bo(1, 1):bo(2, 1), bo(1, 2):bo(2, 2), irho)+vdip
./surface_dipole.F:            IF (irho >= bo(1, 2) .AND. irho <= bo(2, 2)) THEN
./surface_dipole.F:               vdip_r%pw%cr3d(bo(1, 1):bo(2, 1), irho, bo(1, 3):bo(2, 3)) = &
./surface_dipole.F:                  vdip_r%pw%cr3d(bo(1, 1):bo(2, 1), irho, bo(1, 3):bo(2, 3))+vdip
./surface_dipole.F:            IF (irho >= bo(1, 1) .AND. irho <= bo(2, 1)) THEN
./surface_dipole.F:               vdip_r%pw%cr3d(irho, bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3)) = &
./surface_dipole.F:                  vdip_r%pw%cr3d(irho, bo(1, 2):bo(2, 2), bo(1, 3):bo(2, 3))+vdip
./qs_cdft_types.F:      ! Result of integration dw/dR * rho_r dr where dw/dR is the weight function gradient
./hirshfeld_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./hirshfeld_methods.F:                                              qs_rho_type
./hirshfeld_methods.F:      LOGICAL                                            :: rho_r_valid
./hirshfeld_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./hirshfeld_methods.F:      TYPE(pw_p_type), POINTER                           :: rhonorm
./hirshfeld_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./hirshfeld_methods.F:      NULLIFY (rho_r)
./hirshfeld_methods.F:      ALLOCATE (rhonorm)
./hirshfeld_methods.F:      CALL get_qs_env(qs_env=qs_env, pw_env=pw_env, rho=rho)
./hirshfeld_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r, rho_r_valid=rho_r_valid)
./hirshfeld_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhonorm%pw, use_data=REALDATA3D)
./hirshfeld_methods.F:      DO is = 1, SIZE(rho_r)
./hirshfeld_methods.F:         IF (rho_r_valid) THEN
./hirshfeld_methods.F:            CALL hfun_scale(rhonorm%pw%cr3d, rho_r(is)%pw%cr3d, &
./hirshfeld_methods.F:            CPABORT("We need rho in real space")
./hirshfeld_methods.F:         CALL hirshfeld_integration(qs_env, hirshfeld_env, rhonorm, charges(:, is))
./hirshfeld_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhonorm%pw)
./hirshfeld_methods.F:      DEALLOCATE (rhonorm)
./hirshfeld_methods.F:      LOGICAL                                            :: rho_r_valid
./hirshfeld_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./hirshfeld_methods.F:      TYPE(pw_p_type), POINTER                           :: rhonorm
./hirshfeld_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./hirshfeld_methods.F:      NULLIFY (rho_r)
./hirshfeld_methods.F:      ALLOCATE (rhonorm)
./hirshfeld_methods.F:      CALL get_qs_env(qs_env=qs_env, pw_env=pw_env, rho=rho)
./hirshfeld_methods.F:      CALL qs_rho_get(rho, rho_r=rho_r, rho_r_valid=rho_r_valid)
./hirshfeld_methods.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rhonorm%pw, use_data=REALDATA3D)
./hirshfeld_methods.F:         DO is = 1, SIZE(rho_r)
./hirshfeld_methods.F:            IF (rho_r_valid) THEN
./hirshfeld_methods.F:               CALL hfun_scale(rhonorm%pw%cr3d, rho_r(is)%pw%cr3d, &
./hirshfeld_methods.F:               CPABORT("We need rho in real space")
./hirshfeld_methods.F:            CALL hirshfeld_integration(qs_env, hirshfeld_env, rhonorm, charges(:, is))
./hirshfeld_methods.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rhonorm%pw)
./hirshfeld_methods.F:      DEALLOCATE (rhonorm)
./hirshfeld_methods.F:      REAL(KIND=dp)                                      :: alpha, coef, eps_rho_rspace
./hirshfeld_methods.F:      TYPE(realspace_grid_type), POINTER                 :: rs_rho
./hirshfeld_methods.F:      CALL pw_env_get(pw_env, auxbas_rs_desc=auxbas_rs_desc, auxbas_rs_grid=rs_rho, &
./hirshfeld_methods.F:      CALL rs_grid_retain(rs_rho)
./hirshfeld_methods.F:      CALL rs_grid_zero(rs_rho)
./hirshfeld_methods.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./hirshfeld_methods.F:               IF (rs_rho%desc%parallel .AND. .NOT. rs_rho%desc%distributed) THEN
./hirshfeld_methods.F:                  IF (MODULO(iatom, rs_rho%desc%group_size) == rs_rho%desc%my_pos) THEN
./hirshfeld_methods.F:                                                 (/0.0_dp, 0.0_dp, 0.0_dp/), 0.0_dp, 1.0_dp, pab, 0, 0, rs_rho, &
./hirshfeld_methods.F:                                                 cell, cube_info, eps_rho_rspace, ga_gb_function=FUNC_AB, &
./hirshfeld_methods.F:      CALL rs_pw_transfer(rs_rho, fnorm%pw, rs2pw)
./hirshfeld_methods.F:      CALL rs_grid_release(rs_rho)
./hirshfeld_methods.F:      REAL(KIND=dp)                                      :: alpha, coef, dvol, eps_rho_rspace
./hirshfeld_methods.F:      eps_rho_rspace = dft_control%qs_control%eps_rho_rspace
./hirshfeld_methods.F:                                                 eps_gvg_rspace=eps_rho_rspace, calculate_forces=do_force, &
./qs_gspace_mixing.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_gspace_mixing.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_gspace_mixing.F:                                              qs_rho_type
./qs_gspace_mixing.F:!> \param rho_ao ...
./qs_gspace_mixing.F:   SUBROUTINE self_consistency_check(rho_ao, p_delta, para_env, p_out, delta)
./qs_gspace_mixing.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao, p_delta
./qs_gspace_mixing.F:      p_in => rho_ao
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:   SUBROUTINE gspace_mixing(qs_env, mixing_method, mixing_store, rho, para_env, iter_count)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r
./qs_gspace_mixing.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_gspace_mixing.F:      TYPE(pw_p_type)                                    :: rho_tmp
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./qs_gspace_mixing.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_gspace_mixing.F:      NULLIFY (auxbas_pw_pool, dft_control, pw_env, rho_ao_kp, rho_atom, rho_g, rho_r, tot_rho_r)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp, rho_g=rho_g, rho_r=rho_r, tot_rho_r=tot_rho_r)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g, 1)
./qs_gspace_mixing.F:      ng = SIZE(rho_g(1)%pw%pw_grid%gsq)
./qs_gspace_mixing.F:      CPASSERT((ng == SIZE(mixing_store%rhoin(1)%cc)))
./qs_gspace_mixing.F:                                rho_tmp%pw, &
./qs_gspace_mixing.F:         CALL pw_zero(rho_tmp%pw)
./qs_gspace_mixing.F:         CALL pw_copy(rho_g(1)%pw, rho_tmp%pw)
./qs_gspace_mixing.F:         CALL pw_axpy(rho_g(2)%pw, rho_g(1)%pw, 1.0_dp)
./qs_gspace_mixing.F:         CALL pw_axpy(rho_tmp%pw, rho_g(2)%pw, -1.0_dp)
./qs_gspace_mixing.F:         CALL pw_scale(rho_g(2)%pw, -1.0_dp)
./qs_gspace_mixing.F:               mixing_store%rhoin(ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in(ispin, i)%matrix, rho_ao_kp(ispin, i)%matrix)
./qs_gspace_mixing.F:            CALL get_qs_env(qs_env=qs_env, rho_atom_set=rho_atom)
./qs_gspace_mixing.F:            natom = SIZE(rho_atom)
./qs_gspace_mixing.F:                     mixing_store%cpc_h_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                     mixing_store%cpc_s_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:            CALL pw_axpy(rho_g(2)%pw, rho_g(1)%pw, 1.0_dp)
./qs_gspace_mixing.F:            CALL pw_scale(rho_g(1)%pw, 0.5_dp)
./qs_gspace_mixing.F:            CALL pw_axpy(rho_g(1)%pw, rho_g(2)%pw, -1.0_dp)
./qs_gspace_mixing.F:            CALL pw_scale(rho_g(2)%pw, -1.0_dp)
./qs_gspace_mixing.F:            CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tmp%pw)
./qs_gspace_mixing.F:         CALL gmix_potential_only(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:            CALL gmix_potential_only(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:            CALL pulay_mixing(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:            CALL broyden_mixing(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:            CALL broyden_mixing_new(mixing_store, rho, para_env)
./qs_gspace_mixing.F:            CALL multisecant_mixing(mixing_store, rho, para_env)
./qs_gspace_mixing.F:         CALL pw_axpy(rho_g(2)%pw, rho_g(1)%pw, 1.0_dp)
./qs_gspace_mixing.F:         CALL pw_scale(rho_g(1)%pw, 0.5_dp)
./qs_gspace_mixing.F:         CALL pw_axpy(rho_g(1)%pw, rho_g(2)%pw, -1.0_dp)
./qs_gspace_mixing.F:         CALL pw_scale(rho_g(2)%pw, -1.0_dp)
./qs_gspace_mixing.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tmp%pw)
./qs_gspace_mixing.F:         CALL pw_transfer(rho_g(ispin)%pw, rho_r(ispin)%pw)
./qs_gspace_mixing.F:         tot_rho_r(ispin) = pw_integrate_function(rho_r(ispin)%pw, isign=-1)
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:   SUBROUTINE gmix_potential_only(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_s, rho_ao_kp
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_gspace_mixing.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_gspace_mixing.F:      CPASSERT(ASSOCIATED(mixing_store%rhoin))
./qs_gspace_mixing.F:      NULLIFY (cc_new, dft_control, rho_ao_kp, rho_atom, rho_g)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp, rho_g=rho_g)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g, 1)
./qs_gspace_mixing.F:      ng = SIZE(rho_g(1)%pw%pw_grid%gsq)
./qs_gspace_mixing.F:         cc_new => rho_g(ispin)%pw%cc
./qs_gspace_mixing.F:            cc_new(ig) = (1.0_dp-f_mix)*mixing_store%rhoin(ispin)%cc(ig)+f_mix*cc_new(ig)
./qs_gspace_mixing.F:            mixing_store%rhoin(ispin)%cc(ig) = cc_new(ig)
./qs_gspace_mixing.F:            cc_new(ig) = (1.0_dp-f_mix)*mixing_store%rhoin(ispin)%cc(ig)+f_mix*cc_new(ig)
./qs_gspace_mixing.F:            mixing_store%rhoin(ispin)%cc(ig) = cc_new(ig)
./qs_gspace_mixing.F:            DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_gspace_mixing.F:               CALL cp_sm_mix(m1=rho_ao_kp(ispin, ic)%matrix, &
./qs_gspace_mixing.F:                              m2=mixing_store%rho_ao_in(ispin, ic)%matrix, &
./qs_gspace_mixing.F:               CALL dbcsr_copy(mixing_store%rho_ao_in(ispin, ic)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                         rho_atom_set=rho_atom)
./qs_gspace_mixing.F:         natom = SIZE(rho_atom)
./qs_gspace_mixing.F:                  rho_atom(iatom)%cpc_h(ispin)%r_coef = alpha*rho_atom(iatom)%cpc_h(ispin)%r_coef+ &
./qs_gspace_mixing.F:                  rho_atom(iatom)%cpc_s(ispin)%r_coef = alpha*rho_atom(iatom)%cpc_s(ispin)%r_coef+ &
./qs_gspace_mixing.F:                  mixing_store%cpc_h_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                  mixing_store%cpc_s_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:   SUBROUTINE pulay_mixing(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_gspace_mixing.F:      TYPE(dbcsr_type), POINTER                          :: rho_ao_mix
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_gspace_mixing.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_gspace_mixing.F:      CPASSERT(ASSOCIATED(mixing_store%rhoin_buffer))
./qs_gspace_mixing.F:      NULLIFY (dft_control, rho_ao_mix, rho_ao_kp, rho_atom, rho_g)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp, rho_g=rho_g)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g, 1)
./qs_gspace_mixing.F:      vol = rho_g(1)%pw%pw_grid%vol
./qs_gspace_mixing.F:         CALL get_qs_env(qs_env=qs_env, rho_atom_set=rho_atom)
./qs_gspace_mixing.F:         natom = SIZE(rho_atom)
./qs_gspace_mixing.F:         IF (nb == 1) mixing_store%rhoin_buffer(1, ispin)%cc = mixing_store%rhoin(ispin)%cc
./qs_gspace_mixing.F:            mixing_store%res_buffer(ib, ispin)%cc(ig) = f_mix*(rho_g(ispin)%pw%cc(ig)- &
./qs_gspace_mixing.F:                                                               mixing_store%rhoin_buffer(ib, ispin)%cc(ig))
./qs_gspace_mixing.F:               cc_mix(ig) = rho_g(ispin)%pw%cc(ig)- &
./qs_gspace_mixing.F:                            mixing_store%rhoin_buffer(ib, ispin)%cc(ig)
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(ig) = f_mix*cc_mix(ig)+ &
./qs_gspace_mixing.F:                                        mixing_store%rhoin_buffer(ib, ispin)%cc(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin_buffer(ibb, ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:               DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_res_buffer(ispin, ic, ib)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=mixing_store%rho_ao_res_buffer(ispin, ic, ib)%matrix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, beta_scalar=-1.0_dp)
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=rho_ao_kp(ispin, ic)%matrix, alpha_scalar=alpha_kerker, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, &
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in_buffer(ispin, ic, ib)%matrix, mixing_store%rho_ao_in(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in_buffer(ispin, ic, ibb)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                        mixing_store%cpc_h_res_buffer(ib, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef- &
./qs_gspace_mixing.F:                        mixing_store%cpc_s_res_buffer(ib, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef- &
./qs_gspace_mixing.F:                        rho_atom(iatom)%cpc_h(ispin)%r_coef = alpha_kerker*rho_atom(iatom)%cpc_h(ispin)%r_coef+ &
./qs_gspace_mixing.F:                        rho_atom(iatom)%cpc_s(ispin)%r_coef = alpha_kerker*rho_atom(iatom)%cpc_s(ispin)%r_coef+ &
./qs_gspace_mixing.F:                        mixing_store%cpc_h_in_buffer(ibb, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                        mixing_store%cpc_s_in_buffer(ibb, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:                               alpha_c(jb)*(mixing_store%rhoin_buffer(jb, ispin)%cc(ig)+ &
./qs_gspace_mixing.F:            mixing_store%rhoin_buffer(ibb, ispin)%cc = CMPLX(0._dp, 0._dp, KIND=dp)
./qs_gspace_mixing.F:                  rho_g(ispin)%pw%cc(ig) = f_mix*rho_g(ispin)%pw%cc(ig)+ &
./qs_gspace_mixing.F:                  mixing_store%rhoin_buffer(ibb, ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:                  rho_g(ispin)%pw%cc(ig) = cc_mix(ig)
./qs_gspace_mixing.F:                  mixing_store%rhoin_buffer(ibb, ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:               CALL dbcsr_set(mixing_store%rho_ao_mix, 0.0_dp)
./qs_gspace_mixing.F:               rho_ao_mix => mixing_store%rho_ao_mix
./qs_gspace_mixing.F:               DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_res_buffer(ispin, ic, ib)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=mixing_store%rho_ao_res_buffer(ispin, ic, ib)%matrix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in_buffer(ispin, ic, ib)%matrix, beta_scalar=-1.0_dp)
./qs_gspace_mixing.F:                     CALL dbcsr_add(matrix_a=rho_ao_mix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                    matrix_b=mixing_store%rho_ao_in_buffer(ispin, ic, jb)%matrix, &
./qs_gspace_mixing.F:                     CALL dbcsr_add(matrix_a=rho_ao_mix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                    matrix_b=mixing_store%rho_ao_res_buffer(ispin, ic, jb)%matrix, &
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=rho_ao_kp(ispin, ic)%matrix, alpha_scalar=alpha_pulay, &
./qs_gspace_mixing.F:                                 matrix_b=rho_ao_mix, beta_scalar=(1.0_dp-alpha_pulay))
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in_buffer(ispin, ic, ibb)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:               CALL get_qs_env(qs_env=qs_env, rho_atom_set=rho_atom)
./qs_gspace_mixing.F:                     n1 = SIZE(rho_atom(iatom)%cpc_h(ispin)%r_coef, 1)
./qs_gspace_mixing.F:                     n2 = SIZE(rho_atom(iatom)%cpc_h(ispin)%r_coef, 2)
./qs_gspace_mixing.F:                     mixing_store%cpc_h_res_buffer(ib, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef- &
./qs_gspace_mixing.F:                     mixing_store%cpc_s_res_buffer(ib, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef- &
./qs_gspace_mixing.F:                     rho_atom(iatom)%cpc_h(ispin)%r_coef = alpha_pulay*rho_atom(iatom)%cpc_h(ispin)%r_coef+ &
./qs_gspace_mixing.F:                     rho_atom(iatom)%cpc_s(ispin)%r_coef = alpha_pulay*rho_atom(iatom)%cpc_s(ispin)%r_coef+ &
./qs_gspace_mixing.F:                     mixing_store%cpc_h_in_buffer(ibb, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                     mixing_store%cpc_s_in_buffer(ibb, iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:   SUBROUTINE broyden_mixing(qs_env, mixing_store, rho, para_env)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      COMPLEX(dp), ALLOCATABLE, DIMENSION(:)             :: res_rho
./qs_gspace_mixing.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_gspace_mixing.F:      TYPE(dbcsr_type), POINTER                          :: rho_ao_mix, rho_ao_res
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_gspace_mixing.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_gspace_mixing.F:      CPASSERT(ASSOCIATED(mixing_store%rhoin))
./qs_gspace_mixing.F:      CPASSERT(ASSOCIATED(mixing_store%rhoin_old))
./qs_gspace_mixing.F:      CPASSERT(ASSOCIATED(mixing_store%drho_buffer))
./qs_gspace_mixing.F:      NULLIFY (dft_control, rho_ao_kp, rho_ao_mix, rho_ao_res, rho_atom, rho_g)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp, rho_g=rho_g)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g, 1)
./qs_gspace_mixing.F:      ALLOCATE (res_rho(ng))
./qs_gspace_mixing.F:         CALL get_qs_env(qs_env=qs_env, rho_atom_set=rho_atom)
./qs_gspace_mixing.F:         natom = SIZE(rho_atom)
./qs_gspace_mixing.F:         res_rho = CMPLX(0.0_dp, 0.0_dp, KIND=dp)
./qs_gspace_mixing.F:            res_rho(ig) = rho_g(ispin)%pw%cc(ig)-mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:               mixing_store%last_res(ispin)%cc(ig) = res_rho(ig)
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)+f_mix*res_rho(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin_old(ispin)%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin(ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:               DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_lastres(ispin, ic)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=mixing_store%rho_ao_lastres(ispin, ic)%matrix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, beta_scalar=-1.0_dp)
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=rho_ao_kp(ispin, ic)%matrix, alpha_scalar=alpha, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, &
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in_old(ispin, ic)%matrix, mixing_store%rho_ao_in(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in(ispin, ic)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                        mixing_store%cpc_h_lastres(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef- &
./qs_gspace_mixing.F:                        mixing_store%cpc_s_lastres(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef- &
./qs_gspace_mixing.F:                        rho_atom(iatom)%cpc_h(ispin)%r_coef = alpha*rho_atom(iatom)%cpc_h(ispin)%r_coef+ &
./qs_gspace_mixing.F:                        rho_atom(iatom)%cpc_s(ispin)%r_coef = alpha*rho_atom(iatom)%cpc_s(ispin)%r_coef+ &
./qs_gspace_mixing.F:                        mixing_store%cpc_h_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                        mixing_store%cpc_s_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:               mixing_store%res_buffer(ib, ispin)%cc(ig) = res_rho(ig)-mixing_store%last_res(ispin)%cc(ig)
./qs_gspace_mixing.F:               mixing_store%last_res(ispin)%cc(ig) = res_rho(ig)
./qs_gspace_mixing.F:                          REAL(res_rho(ig), dp)*REAL(res_rho(ig), dp)+ &
./qs_gspace_mixing.F:                          AIMAG(res_rho(ig))*AIMAG(res_rho(ig))
./qs_gspace_mixing.F:               mixing_store%drho_buffer(ib, ispin)%cc(ig) = &
./qs_gspace_mixing.F:                  mixing_store%rhoin(ispin)%cc(ig)- &
./qs_gspace_mixing.F:                  mixing_store%rhoin_old(ispin)%cc(ig)
./qs_gspace_mixing.F:            mixing_store%drho_buffer(ib, ispin)%cc(:) = mixing_store%drho_buffer(ib, ispin)%cc(:)/delta_norm
./qs_gspace_mixing.F:                           dcpc_h_res = ((rho_atom(iatom)%cpc_h(ispin)%r_coef(j, i)- &
./qs_gspace_mixing.F:                           mixing_store%cpc_h_lastres(iatom, ispin)%r_coef(j, i) = rho_atom(iatom)%cpc_h(ispin)%r_coef(j, i)- &
./qs_gspace_mixing.F:                           dcpc_s_res = ((rho_atom(iatom)%cpc_s(ispin)%r_coef(j, i)- &
./qs_gspace_mixing.F:                           mixing_store%cpc_s_lastres(iatom, ispin)%r_coef(j, i) = rho_atom(iatom)%cpc_s(ispin)%r_coef(j, i)- &
./qs_gspace_mixing.F:               mixing_store%drho_buffer(ib, ispin)%cc(ig) = &
./qs_gspace_mixing.F:                  mixing_store%drho_buffer(ib, ispin)%cc(ig)
./qs_gspace_mixing.F:                          REAL(mixing_store%res_buffer(jb, ispin)%cc(ig), dp)*REAL(res_rho(ig), dp)+ &
./qs_gspace_mixing.F:                          AIMAG(mixing_store%res_buffer(jb, ispin)%cc(ig))*AIMAG(res_rho(ig)))
./qs_gspace_mixing.F:                  cc_mix = cc_mix-G(jb)*mixing_store%drho_buffer(jb, ispin)%cc(ig)
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)+ &
./qs_gspace_mixing.F:                                        f_mix*res_rho(ig)+cc_mix
./qs_gspace_mixing.F:               mixing_store%rhoin_old(ispin)%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin(ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:               rho_ao_mix => mixing_store%rho_ao_mix
./qs_gspace_mixing.F:               rho_ao_res => mixing_store%rho_ao_res
./qs_gspace_mixing.F:               DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(rho_ao_res, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_add(rho_ao_res, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, beta_scalar=-1.0_dp)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(rho_ao_mix, mixing_store%rho_ao_lastres(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_lastres(ispin, ic)%matrix, rho_ao_res)
./qs_gspace_mixing.F:                  CALL dbcsr_add(rho_ao_res, alpha_scalar=f_mix, &
./qs_gspace_mixing.F:                                 matrix_b=rho_ao_mix, beta_scalar=-f_mix)
./qs_gspace_mixing.F:                  CALL dbcsr_add(rho_ao_res, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, beta_scalar=norm)
./qs_gspace_mixing.F:                  CALL dbcsr_add(rho_ao_res, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in_old(ispin, ic)%matrix, beta_scalar=-norm)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_res_buffer(ispin, ic, ib)%matrix, rho_ao_res)
./qs_gspace_mixing.F:                  CALL dbcsr_set(mixing_store%rho_ao_mix, 0.0_dp)
./qs_gspace_mixing.F:                     CALL dbcsr_add(matrix_a=rho_ao_mix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                    matrix_b=mixing_store%rho_ao_res_buffer(ispin, ic, jb)%matrix, &
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=rho_ao_kp(ispin, ic)%matrix, alpha_scalar=alpha, &
./qs_gspace_mixing.F:                                 matrix_b=mixing_store%rho_ao_in(ispin, ic)%matrix, &
./qs_gspace_mixing.F:                  CALL dbcsr_add(matrix_a=rho_ao_kp(ispin, ic)%matrix, alpha_scalar=1.0_dp, &
./qs_gspace_mixing.F:                                 matrix_b=rho_ao_mix, beta_scalar=-1.0_dp)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in_old(ispin, ic)%matrix, mixing_store%rho_ao_in(ispin, ic)%matrix)
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in(ispin, ic)%matrix, rho_ao_kp(ispin, ic)%matrix)
./qs_gspace_mixing.F:                              rho_atom(iatom)%cpc_h(ispin)%r_coef(j, i) = &
./qs_gspace_mixing.F:                                 alpha*rho_atom(iatom)%cpc_h(ispin)%r_coef(j, i)+ &
./qs_gspace_mixing.F:                              rho_atom(iatom)%cpc_s(ispin)%r_coef(j, i) = &
./qs_gspace_mixing.F:                                 alpha*rho_atom(iatom)%cpc_s(ispin)%r_coef(j, i)+ &
./qs_gspace_mixing.F:                        mixing_store%cpc_h_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                        mixing_store%cpc_s_in(iatom, ispin)%r_coef = rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:      DEALLOCATE (res_rho)
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:   SUBROUTINE broyden_mixing_new(mixing_store, rho, para_env)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      COMPLEX(dp), ALLOCATABLE, DIMENSION(:)             :: delta_res_p, res_rho, res_rho_p, tmp
./qs_gspace_mixing.F:      REAL(dp) :: alpha, beta, delta, delta_p, delta_rhog, delta_rhog_p, f_mix, imp, imp_j, &
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_gspace_mixing.F:      CPASSERT(ASSOCIATED(mixing_store%rhoin_buffer))
./qs_gspace_mixing.F:      NULLIFY (fmat, rho_g)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_g=rho_g)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g, 1)
./qs_gspace_mixing.F:      ng = SIZE(mixing_store%rhoin_buffer(1, 1)%cc)
./qs_gspace_mixing.F:      vol = rho_g(1)%pw%pw_grid%vol
./qs_gspace_mixing.F:      ALLOCATE (res_rho(ng))
./qs_gspace_mixing.F:      ALLOCATE (res_rho_p(ng))
./qs_gspace_mixing.F:      delta_rhog = 0.0_dp
./qs_gspace_mixing.F:      delta_rhog_p = 0.0_dp
./qs_gspace_mixing.F:         ! Residual at this step R_i(G) (rho_out(G)-rho_in(G))
./qs_gspace_mixing.F:         ! Residual multiplied by the metrics RP_i(G) = (rho_out(G)-rho_in(G)) * P(G)
./qs_gspace_mixing.F:            res_rho(ig) = rho_g(ispin)%pw%cc(ig)-mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:!            mixing_store%rhoin_buffer(ib, ispin)%cc(ig)=mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:            res_rho_p(ig) = res_rho(ig)*p_metric(ig) !*sqt_uvol
./qs_gspace_mixing.F:            norm_ig = REAL(res_rho(ig), dp)*REAL(res_rho(ig), dp)+AIMAG(res_rho(ig))*AIMAG(res_rho(ig))
./qs_gspace_mixing.F:         delta_rhog = delta_rhog+delta
./qs_gspace_mixing.F:         delta_rhog_p = delta_rhog_p+delta_p
./qs_gspace_mixing.F:            ! Simple Kerker damping : linear mixing rho(G) = rho_in(G) - alpha k(G)*(rho_out(G)-rho_in(G))
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)+f_mix*res_rho(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin_old(ispin)%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin(ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:               mixing_store%last_res(ispin)%cc(ig) = res_rho(ig)
./qs_gspace_mixing.F:               delta_res(ib, ispin)%cc(ig) = res_rho(ig)-mixing_store%last_res(ispin)%cc(ig)
./qs_gspace_mixing.F:            ! Vector U_{i-1}(G) =  Drho_{i-1} + k(G)  * DR_{i-1}(G)
./qs_gspace_mixing.F:               tmp(ig) = (mixing_store%rhoin(ispin)%cc(ig)- &
./qs_gspace_mixing.F:                          mixing_store%rhoin_old(ispin)%cc(ig))*norm
./qs_gspace_mixing.F:            rho_g(ispin)%pw%cc(:) = CMPLX(0.0_dp, 0.0_dp, KIND=dp)
./qs_gspace_mixing.F:                  rep = REAL(res_rho_p(ig), dp)
./qs_gspace_mixing.F:                  imp = AIMAG(res_rho_p(ig))
./qs_gspace_mixing.F:                  rho_g(ispin)%pw%cc(ig) = rho_g(ispin)%pw%cc(ig)-norm*z_vec(jb, ispin)%cc(ig)*sqt_vol
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(ig) = rho_g(ispin)%pw%cc(ig)+ &
./qs_gspace_mixing.F:                                        mixing_store%rhoin_buffer(ib, ispin)%cc(ig)+f_mix*res_rho(ig)
./qs_gspace_mixing.F:               mixing_store%rhoin_buffer(ibb, ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:!          rho_g(ispin)%pw%cc(ig) = rho_g(ispin)%pw%cc(ig)*sqt_vol
./qs_gspace_mixing.F:            mixing_store%rhoin_old(ispin)%cc(ig) = mixing_store%rhoin(ispin)%cc(ig)
./qs_gspace_mixing.F:            mixing_store%rhoin(ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:            mixing_store%last_res(ispin)%cc(:) = res_rho(:)
./qs_gspace_mixing.F:!               mixing_store%rhoin_buffer(jb, ispin)%cc(:) = mixing_store%rhoin_buffer(jb+1, ispin)%cc(:)
./qs_gspace_mixing.F:!            mixing_store%rhoin_buffer(nbuffer-1, ispin)%cc(:) = &
./qs_gspace_mixing.F:!               mixing_store%rhoin_buffer(nbuffer, ispin)%cc(:)
./qs_gspace_mixing.F:      DEALLOCATE (res_rho, res_rho_p)
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:   SUBROUTINE multisecant_mixing(mixing_store, rho, para_env)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_gspace_mixing.F:      NULLIFY (gn, rho_g)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_g=rho_g)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g, 1)
./qs_gspace_mixing.F:      CPASSERT(rho_g(1)%pw%pw_grid%ngpts < HUGE(ng_global))
./qs_gspace_mixing.F:      ng_global = INT(rho_g(1)%pw%pw_grid%ngpts)
./qs_gspace_mixing.F:      ng = SIZE(mixing_store%rhoin_buffer(1, 1)%cc)
./qs_gspace_mixing.F:            gn(ig) = (rho_g(ispin)%pw%cc(ig)-mixing_store%rhoin_buffer(ib, ispin)%cc(ig))
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(ig) = mixing_store%rhoin_buffer(1, ispin)%cc(ig)+ &
./qs_gspace_mixing.F:               mixing_store%rhoin_buffer(ib_next, ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:         ! step and the present residual (use stored rho_in and res_buffer)
./qs_gspace_mixing.F:         g2 => rho_g(1)%pw%pw_grid%gsq
./qs_gspace_mixing.F:               step_matrix(ig, kb) = prec*(mixing_store%rhoin_buffer(jb, ispin)%cc(ig)- &
./qs_gspace_mixing.F:                                           mixing_store%rhoin_buffer(ib, ispin)%cc(ig))
./qs_gspace_mixing.F:         ! compute the two components of gn that will be used to update rho
./qs_gspace_mixing.F:            rho_g(ispin)%pw%cc(ig) = mixing_store%rhoin_buffer(ib, ispin)%cc(ig) &
./qs_gspace_mixing.F:            mixing_store%rhoin_buffer(ib_next, ispin)%cc(ig) = rho_g(ispin)%pw%cc(ig)
./qs_gspace_mixing.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_gspace_mixing.F:      NULLIFY (matrix_s, dft_control, sab_orb, refmatrix, rho_atom)
./qs_gspace_mixing.F:         IF (.NOT. ASSOCIATED(mixing_store%rhoin)) THEN
./qs_gspace_mixing.F:            ALLOCATE (mixing_store%rhoin(nspins))
./qs_gspace_mixing.F:               NULLIFY (mixing_store%rhoin(ispin)%cc)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_in)) THEN
./qs_gspace_mixing.F:               CALL dbcsr_allocate_matrix_set(mixing_store%rho_ao_in, nspins, nimg)
./qs_gspace_mixing.F:                     ALLOCATE (mixing_store%rho_ao_in(i, ic)%matrix)
./qs_gspace_mixing.F:                     CALL dbcsr_create(matrix=mixing_store%rho_ao_in(i, ic)%matrix, template=refmatrix, &
./qs_gspace_mixing.F:                     CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_in(i, ic)%matrix, sab_orb)
./qs_gspace_mixing.F:                     CALL dbcsr_set(mixing_store%rho_ao_in(i, ic)%matrix, 0.0_dp)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_mix)) THEN
./qs_gspace_mixing.F:               ALLOCATE (mixing_store%rho_ao_mix)
./qs_gspace_mixing.F:               CALL dbcsr_create(matrix=mixing_store%rho_ao_mix, template=refmatrix, &
./qs_gspace_mixing.F:               CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_mix, sab_orb)
./qs_gspace_mixing.F:               CALL dbcsr_set(mixing_store%rho_ao_mix, 0.0_dp)
./qs_gspace_mixing.F:                            rho_atom_set=rho_atom)
./qs_gspace_mixing.F:            natom = SIZE(rho_atom)
./qs_gspace_mixing.F:         IF (.NOT. ASSOCIATED(mixing_store%rhoin_buffer)) THEN
./qs_gspace_mixing.F:            ALLOCATE (mixing_store%rhoin_buffer(nbuffer, nspins))
./qs_gspace_mixing.F:                  NULLIFY (mixing_store%rhoin_buffer(i, ispin)%cc)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_in_buffer)) THEN
./qs_gspace_mixing.F:               CALL dbcsr_allocate_matrix_set(mixing_store%rho_ao_in_buffer, nspins, nimg, nbuffer)
./qs_gspace_mixing.F:                        ALLOCATE (mixing_store%rho_ao_in_buffer(ispin, ic, i)%matrix)
./qs_gspace_mixing.F:                        CALL dbcsr_create(matrix=mixing_store%rho_ao_in_buffer(ispin, ic, i)%matrix, &
./qs_gspace_mixing.F:                        CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_in_buffer(ispin, ic, i)%matrix, sab_orb)
./qs_gspace_mixing.F:                        CALL dbcsr_set(mixing_store%rho_ao_in_buffer(ispin, ic, i)%matrix, 0.0_dp)
./qs_gspace_mixing.F:         IF (.NOT. ASSOCIATED(mixing_store%rhoin_old)) THEN
./qs_gspace_mixing.F:            ALLOCATE (mixing_store%rhoin_old(nspins))
./qs_gspace_mixing.F:               NULLIFY (mixing_store%rhoin_old(ispin)%cc)
./qs_gspace_mixing.F:         IF (.NOT. ASSOCIATED(mixing_store%drho_buffer)) THEN
./qs_gspace_mixing.F:            ALLOCATE (mixing_store%drho_buffer(nbuffer, nspins))
./qs_gspace_mixing.F:                  NULLIFY (mixing_store%drho_buffer(i, ispin)%cc)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_res)) THEN
./qs_gspace_mixing.F:               ALLOCATE (mixing_store%rho_ao_res)
./qs_gspace_mixing.F:               CALL dbcsr_create(matrix=mixing_store%rho_ao_res, template=refmatrix, &
./qs_gspace_mixing.F:               CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_res, sab_orb)
./qs_gspace_mixing.F:               CALL dbcsr_set(mixing_store%rho_ao_res, 0.0_dp)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_in_old)) THEN
./qs_gspace_mixing.F:               CALL dbcsr_allocate_matrix_set(mixing_store%rho_ao_in_old, nspins, nimg)
./qs_gspace_mixing.F:                     ALLOCATE (mixing_store%rho_ao_in_old(i, ic)%matrix)
./qs_gspace_mixing.F:                     CALL dbcsr_create(matrix=mixing_store%rho_ao_in_old(i, ic)%matrix, template=refmatrix, &
./qs_gspace_mixing.F:                     CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_in_old(i, ic)%matrix, sab_orb)
./qs_gspace_mixing.F:                     CALL dbcsr_set(mixing_store%rho_ao_in_old(i, ic)%matrix, 0.0_dp)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_lastres)) THEN
./qs_gspace_mixing.F:               CALL dbcsr_allocate_matrix_set(mixing_store%rho_ao_lastres, nspins, nimg)
./qs_gspace_mixing.F:                     ALLOCATE (mixing_store%rho_ao_lastres(i, ic)%matrix)
./qs_gspace_mixing.F:                     CALL dbcsr_create(matrix=mixing_store%rho_ao_lastres(i, ic)%matrix, template=refmatrix, &
./qs_gspace_mixing.F:                     CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_lastres(i, ic)%matrix, sab_orb)
./qs_gspace_mixing.F:                     CALL dbcsr_set(mixing_store%rho_ao_lastres(i, ic)%matrix, 0.0_dp)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rho_ao_res_buffer)) THEN
./qs_gspace_mixing.F:               CALL dbcsr_allocate_matrix_set(mixing_store%rho_ao_res_buffer, nspins, nimg, nbuffer)
./qs_gspace_mixing.F:                        ALLOCATE (mixing_store%rho_ao_res_buffer(ispin, ic, i)%matrix)
./qs_gspace_mixing.F:                        CALL dbcsr_create(matrix=mixing_store%rho_ao_res_buffer(ispin, ic, i)%matrix, &
./qs_gspace_mixing.F:                        CALL cp_dbcsr_alloc_block_from_nbl(mixing_store%rho_ao_res_buffer(ispin, ic, i)%matrix, sab_orb)
./qs_gspace_mixing.F:                        CALL dbcsr_set(mixing_store%rho_ao_res_buffer(ispin, ic, i)%matrix, 0.0_dp)
./qs_gspace_mixing.F:         IF (.NOT. ASSOCIATED(mixing_store%rhoin_buffer)) THEN
./qs_gspace_mixing.F:            ALLOCATE (mixing_store%rhoin_buffer(nbuffer, nspins))
./qs_gspace_mixing.F:                  NULLIFY (mixing_store%rhoin_buffer(i, ispin)%cc)
./qs_gspace_mixing.F:!> \param rho ...
./qs_gspace_mixing.F:!> \param rho_atom ...
./qs_gspace_mixing.F:   SUBROUTINE mixing_init(mixing_method, rho, mixing_store, para_env, rho_atom)
./qs_gspace_mixing.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_gspace_mixing.F:      TYPE(rho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_gspace_mixing.F:         POINTER                                         :: rho_atom
./qs_gspace_mixing.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_gspace_mixing.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_gspace_mixing.F:      NULLIFY (g2, g_vec, rho_ao_kp, rho_g)
./qs_gspace_mixing.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp, rho_g=rho_g)
./qs_gspace_mixing.F:      nspin = SIZE(rho_g)
./qs_gspace_mixing.F:      ng = SIZE(rho_g(1)%pw%pw_grid%gsq, 1)
./qs_gspace_mixing.F:      nimg = SIZE(rho_ao_kp, 2)
./qs_gspace_mixing.F:      g2 => rho_g(1)%pw%pw_grid%gsq
./qs_gspace_mixing.F:      g_vec => rho_g(1)%pw%pw_grid%g
./qs_gspace_mixing.F:      IF (rho_g(1)%pw%pw_grid%have_g0) ig1 = 2
./qs_gspace_mixing.F:         IF (.NOT. ASSOCIATED(mixing_store%rhoin(ispin)%cc)) THEN
./qs_gspace_mixing.F:            ALLOCATE (mixing_store%rhoin(ispin)%cc(ng))
./qs_gspace_mixing.F:         mixing_store%rhoin(ispin)%cc = rho_g(ispin)%pw%cc
./qs_gspace_mixing.F:         IF (ASSOCIATED(mixing_store%rhoin_buffer)) THEN
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rhoin_buffer(1, ispin)%cc)) THEN
./qs_gspace_mixing.F:                  ALLOCATE (mixing_store%rhoin_buffer(ib, ispin)%cc(ng))
./qs_gspace_mixing.F:            mixing_store%rhoin_buffer(1, ispin)%cc(1:ng) = &
./qs_gspace_mixing.F:               rho_g(ispin)%pw%cc(1:ng)
./qs_gspace_mixing.F:         mixing_store%rhoin(1)%cc = rho_g(1)%pw%cc+rho_g(2)%pw%cc
./qs_gspace_mixing.F:         mixing_store%rhoin(2)%cc = rho_g(1)%pw%cc-rho_g(2)%pw%cc
./qs_gspace_mixing.F:         IF (ASSOCIATED(mixing_store%rhoin_buffer)) THEN
./qs_gspace_mixing.F:            mixing_store%rhoin_buffer(1, 1)%cc = rho_g(1)%pw%cc+rho_g(2)%pw%cc
./qs_gspace_mixing.F:            mixing_store%rhoin_buffer(1, 2)%cc = rho_g(1)%pw%cc-rho_g(2)%pw%cc
./qs_gspace_mixing.F:         IF (ASSOCIATED(mixing_store%rho_ao_in)) THEN
./qs_gspace_mixing.F:                  CALL dbcsr_copy(mixing_store%rho_ao_in(ispin, ib)%matrix, rho_ao_kp(ispin, ib)%matrix)
./qs_gspace_mixing.F:         IF (PRESENT(rho_atom)) THEN
./qs_gspace_mixing.F:            natom = SIZE(rho_atom)
./qs_gspace_mixing.F:                  IF (ASSOCIATED(rho_atom(iat)%cpc_s(ispin)%r_coef)) THEN
./qs_gspace_mixing.F:                     n1 = SIZE(rho_atom(iat)%cpc_s(ispin)%r_coef, 1)
./qs_gspace_mixing.F:                     n2 = SIZE(rho_atom(iat)%cpc_s(ispin)%r_coef, 2)
./qs_gspace_mixing.F:                        mixing_store%cpc_h_in(iat, ispin)%r_coef = rho_atom(iat)%cpc_h(ispin)%r_coef
./qs_gspace_mixing.F:                        mixing_store%cpc_s_in(iat, ispin)%r_coef = rho_atom(iat)%cpc_s(ispin)%r_coef
./qs_gspace_mixing.F:         IF (mixing_store%gmix_p .AND. PRESENT(rho_atom)) THEN
./qs_gspace_mixing.F:                     n1 = SIZE(rho_atom(iat)%cpc_s(ispin)%r_coef, 1)
./qs_gspace_mixing.F:                     n2 = SIZE(rho_atom(iat)%cpc_s(ispin)%r_coef, 2)
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%rhoin_old(ispin)%cc)) THEN
./qs_gspace_mixing.F:               ALLOCATE (mixing_store%rhoin_old(ispin)%cc(ng))
./qs_gspace_mixing.F:            IF (.NOT. ASSOCIATED(mixing_store%drho_buffer(1, ispin)%cc)) THEN
./qs_gspace_mixing.F:                  ALLOCATE (mixing_store%drho_buffer(ib, ispin)%cc(ng))
./qs_gspace_mixing.F:               mixing_store%drho_buffer(ib, ispin)%cc = CMPLX(0.0_dp, 0.0_dp, kind=dp)
./qs_gspace_mixing.F:            mixing_store%rhoin_old(ispin)%cc = CMPLX(0.0_dp, 0.0_dp, kind=dp)
./qs_gspace_mixing.F:         IF (PRESENT(rho_atom)) THEN
./qs_gspace_mixing.F:               n1 = SIZE(rho_atom(iat)%cpc_s(ispin)%r_coef, 1)
./qs_gspace_mixing.F:               n2 = SIZE(rho_atom(iat)%cpc_s(ispin)%r_coef, 2)
./qs_gspace_mixing.F:            IF (rho_g(1)%pw%pw_grid%have_g0) mixing_store%p_metric(1) = bconst
./qs_gspace_mixing.F:            IF (rho_g(1)%pw%pw_grid%have_g0) mixing_store%p_metric(1) = bconst
./qs_dftb3_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_dftb3_methods.F:                                              qs_rho_type
./qs_dftb3_methods.F:!> \param rho ...
./qs_dftb3_methods.F:   SUBROUTINE build_dftb3_diagonal(qs_env, ks_matrix, rho, mcharge, energy, &
./qs_dftb3_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_dftb3_methods.F:         CALL qs_rho_get(rho, rho_ao_kp=matrix_p)
./qs_dftb3_methods.F:               force(ikind)%rho_elec(i, atom_i) = force(ikind)%rho_elec(i, atom_i)+fi
./qs_dftb3_methods.F:               force(jkind)%rho_elec(i, atom_j) = force(jkind)%rho_elec(i, atom_j)-fi
./qs_initial_guess.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_initial_guess.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_initial_guess.F:                                              qs_rho_type
./qs_initial_guess.F:                                                            rho_ao_kp
./qs_initial_guess.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_initial_guess.F:               s_sparse, scf_control, dft_control, h_core_sparse, matrix_ks, rho)
./qs_initial_guess.F:      NULLIFY (matrix_s_kp, matrix_h_kp, matrix_ks_kp, rho_ao_kp)
./qs_initial_guess.F:                      rho=rho, &
./qs_initial_guess.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_initial_guess.F:         DO ic = 1, SIZE(rho_ao_kp, 2)
./qs_initial_guess.F:            CALL dbcsr_set(rho_ao_kp(ispin, ic)%matrix, 0.0_dp)
./qs_initial_guess.F:      p_rmpv => rho_ao_kp(:, 1)
./qs_initial_guess.F:            CALL read_kpoints_restart(rho_ao_kp, kpoints, work1, &
./qs_initial_guess.F:            CALL qs_rho_update_rho(rho, qs_env)
./qs_initial_guess.F:!           CALL integrate_ppl_rspace(qs%rho%rho_r(ispin),qs_env)
./qs_linres_current_utils.F:                                              deallocate_jrho_atom_set,&
./qs_linres_current_utils.F:                                              init_jrho_atom_set,&
./qs_linres_current_utils.F:                                              jrho_atom_type,&
./qs_linres_current_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_clear,&
./qs_linres_current_utils.F:                                              qs_rho_create,&
./qs_linres_current_utils.F:                                              qs_rho_retain,&
./qs_linres_current_utils.F:                                              qs_rho_set
./qs_linres_current_utils.F:      TYPE(jrho_atom_type), DIMENSION(:), POINTER        :: jrho1_atom_set
./qs_linres_current_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./qs_linres_current_utils.F:               auxbas_pw_pool, pw_env, jrho1_atom_set, common_center, tmp_fm_struct, &
./qs_linres_current_utils.F:               para_env, qs_loc_env, localized_wfn_control, rho_g, rho_r)
./qs_linres_current_utils.F:      ALLOCATE (current_env%jrho1_set(3))
./qs_linres_current_utils.F:         NULLIFY (rho_r, rho_g)
./qs_linres_current_utils.F:         ALLOCATE (rho_r(nspins), rho_g(nspins))
./qs_linres_current_utils.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_r(ispin)%pw, &
./qs_linres_current_utils.F:            CALL pw_zero(rho_r(ispin)%pw)
./qs_linres_current_utils.F:            CALL pw_pool_create_pw(auxbas_pw_pool, rho_g(ispin)%pw, &
./qs_linres_current_utils.F:            CALL pw_zero(rho_g(ispin)%pw)
./qs_linres_current_utils.F:         NULLIFY (current_env%jrho1_set(idir)%rho)
./qs_linres_current_utils.F:         CALL qs_rho_create(current_env%jrho1_set(idir)%rho)
./qs_linres_current_utils.F:         CALL qs_rho_set(current_env%jrho1_set(idir)%rho, &
./qs_linres_current_utils.F:                         rho_r=rho_r, rho_g=rho_g)
./qs_linres_current_utils.F:         CALL qs_rho_retain(current_env%jrho1_set(idir)%rho)
./qs_linres_current_utils.F:         CALL init_jrho_atom_set(jrho1_atom_set, atomic_kind_set, nspins)
./qs_linres_current_utils.F:         CALL set_current_env(current_env=current_env, jrho1_atom_set=jrho1_atom_set)
./qs_linres_current_utils.F:         IF (ASSOCIATED(current_env%jrho1_set)) THEN
./qs_linres_current_utils.F:               CALL qs_rho_clear(current_env%jrho1_set(idir)%rho)
./qs_linres_current_utils.F:               DEALLOCATE (current_env%jrho1_set(idir)%rho)
./qs_linres_current_utils.F:            DEALLOCATE (current_env%jrho1_set)
./qs_linres_current_utils.F:         IF (ASSOCIATED(current_env%jrho1_atom_set)) THEN
./qs_linres_current_utils.F:            CALL deallocate_jrho_atom_set(current_env%jrho1_atom_set)
./qs_moments.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_moments.F:                                              qs_rho_type
./qs_moments.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s, rho_ao
./qs_moments.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_moments.F:      NULLIFY (dft_control, rho, cell, particle_set, results, para_env, &
./qs_moments.F:               local_particles, matrix_s, mos, rho_ao)
./qs_moments.F:                      rho=rho, &
./qs_moments.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_moments.F:         CALL dbcsr_trace(rho_ao(ispin)%matrix, matrix_s(1)%matrix, trace)
./qs_moments.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: magmom, matrix_s, moments, rho_ao
./qs_moments.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_moments.F:      NULLIFY (dft_control, rho, cell, particle_set, qs_kind_set, results, para_env, matrix_s, rho_ao)
./qs_moments.F:                      rho=rho, &
./qs_moments.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_moments.F:         CALL dbcsr_trace(rho_ao(ispin)%matrix, matrix_s(1)%matrix, trace)
./qs_moments.F:            CALL dbcsr_trace(rho_ao(ispin)%matrix, moments(i)%matrix, trace)
./qs_moments.F:               CALL dbcsr_trace(rho_ao(ispin)%matrix, magmom(i)%matrix, trace)
./se_fock_matrix_exchange.F:               force(ikind)%rho_elec(1, atom_a) = force(ikind)%rho_elec(1, atom_a)-force_ab(1)
./se_fock_matrix_exchange.F:               force(jkind)%rho_elec(1, atom_b) = force(jkind)%rho_elec(1, atom_b)+force_ab(1)
./se_fock_matrix_exchange.F:               force(ikind)%rho_elec(2, atom_a) = force(ikind)%rho_elec(2, atom_a)-force_ab(2)
./se_fock_matrix_exchange.F:               force(jkind)%rho_elec(2, atom_b) = force(jkind)%rho_elec(2, atom_b)+force_ab(2)
./se_fock_matrix_exchange.F:               force(ikind)%rho_elec(3, atom_a) = force(ikind)%rho_elec(3, atom_a)-force_ab(3)
./se_fock_matrix_exchange.F:               force(jkind)%rho_elec(3, atom_b) = force(jkind)%rho_elec(3, atom_b)+force_ab(3)
./particle_methods.F:         IF (.NOT. cell%orthorhombic .AND. (output_format == dump_dcd_aligned_cell)) THEN
./particle_methods.F:            ! In the case of a non-orthorhombic cell adopt a common convention
./particle_methods.F:         IF (.NOT. cell%orthorhombic .AND. (output_format == dump_dcd_aligned_cell)) THEN
./ewalds.F:   USE dg_rho0_types,                   ONLY: dg_rho0_type
./ewalds.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: rho0
./ewalds.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./ewalds.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./ewalds.F:      rho0 => dg_rho0%density%pw%cr3d
./ewalds.F:         gauss = (rho0(lp, mp, np)*pw_grid%vol)**2/pw_grid%gsq(gpt)
./atom_types.F:      REAL(KIND=dp)                                 :: rho_diff_integral
./admm_dm_methods.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./admm_dm_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./admm_dm_methods.F:                                              qs_rho_set,&
./admm_dm_methods.F:                                              qs_rho_type
./admm_dm_methods.F:   PUBLIC :: admm_dm_calc_rho_aux, admm_dm_merge_ks_matrix
./admm_dm_methods.F:   SUBROUTINE admm_dm_calc_rho_aux(ks_env)
./admm_dm_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'admm_dm_calc_rho_aux', &
./admm_dm_methods.F:         CPABORT("admm_dm_calc_rho_aux: unknown method")
./admm_dm_methods.F:      CALL update_rho_aux(ks_env)
./admm_dm_methods.F:   END SUBROUTINE admm_dm_calc_rho_aux
./admm_dm_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s_aux, matrix_s_mixed, rho_ao, &
./admm_dm_methods.F:                                                            rho_ao_aux
./admm_dm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux
./admm_dm_methods.F:      NULLIFY (dft_control, admm_dm, matrix_s_aux, matrix_s_mixed, rho, rho_aux)
./admm_dm_methods.F:      NULLIFY (rho_ao, rho_ao_aux)
./admm_dm_methods.F:                      rho=rho, &
./admm_dm_methods.F:                      rho_aux_fit=rho_aux)
./admm_dm_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./admm_dm_methods.F:      CALL qs_rho_get(rho_aux, rho_ao=rho_ao_aux)
./admm_dm_methods.F:         CALL dbcsr_multiply("N", "N", 1.0_dp, admm_dm%matrix_A, rho_ao(ispin)%matrix, &
./admm_dm_methods.F:                             0.0_dp, rho_ao_aux(ispin)%matrix)
./admm_dm_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao, rho_ao_aux
./admm_dm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho, rho_aux
./admm_dm_methods.F:      NULLIFY (dft_control, admm_dm, rho, rho_aux, rho_ao, rho_ao_aux)
./admm_dm_methods.F:                      rho=rho, &
./admm_dm_methods.F:                      rho_aux_fit=rho_aux)
./admm_dm_methods.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./admm_dm_methods.F:      CALL qs_rho_get(rho_aux, rho_ao=rho_ao_aux)
./admm_dm_methods.F:         CALL dbcsr_set(rho_ao_aux(ispin)%matrix, 0.0_dp)
./admm_dm_methods.F:         CALL dbcsr_iterator_start(iter, rho_ao(ispin)%matrix)
./admm_dm_methods.F:               CALL dbcsr_get_block_p(rho_ao_aux(ispin)%matrix, &
./admm_dm_methods.F:!> \brief Call calculate_rho_elec() for auxilary density
./admm_dm_methods.F:   SUBROUTINE update_rho_aux(ks_env)
./admm_dm_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r_aux
./admm_dm_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao_aux
./admm_dm_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g_aux, rho_r_aux
./admm_dm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_aux
./admm_dm_methods.F:      NULLIFY (dft_control, admm_dm, rho_aux, rho_ao_aux, rho_r_aux, rho_g_aux, tot_rho_r_aux)
./admm_dm_methods.F:                      rho_aux_fit=rho_aux)
./admm_dm_methods.F:      CALL qs_rho_get(rho_aux, &
./admm_dm_methods.F:                      rho_ao=rho_ao_aux, &
./admm_dm_methods.F:                      rho_r=rho_r_aux, &
./admm_dm_methods.F:                      rho_g=rho_g_aux, &
./admm_dm_methods.F:                      tot_rho_r=tot_rho_r_aux)
./admm_dm_methods.F:         CALL calculate_rho_elec(ks_env=ks_env, &
./admm_dm_methods.F:                                 matrix_p=rho_ao_aux(ispin)%matrix, &
./admm_dm_methods.F:                                 rho=rho_r_aux(ispin), &
./admm_dm_methods.F:                                 rho_gspace=rho_g_aux(ispin), &
./admm_dm_methods.F:                                 total_rho=tot_rho_r_aux(ispin), &
./admm_dm_methods.F:      CALL qs_rho_set(rho_aux, rho_r_valid=.TRUE., rho_g_valid=.TRUE.)
./admm_dm_methods.F:   END SUBROUTINE update_rho_aux
./admm_dm_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_s_aux_fit, rho_ao_aux
./admm_dm_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho_aux_fit
./admm_dm_methods.F:      NULLIFY (dft_control, admm_dm, matrix_s_aux_fit, rho_aux_fit, new_hist_entry, &
./admm_dm_methods.F:               matrix_p, matrix_s, rho_ao_aux)
./admm_dm_methods.F:                      rho_aux_fit=rho_aux_fit)
./admm_dm_methods.F:      CALL qs_rho_get(rho_aux_fit, rho_ao=rho_ao_aux)
./admm_dm_methods.F:      matrix_p => rho_ao_aux(1)%matrix
./admm_dm_methods.F:         matrix_p => rho_ao_aux(ispin)%matrix
./qs_electric_field_gradient.F:   USE qs_ks_methods,                   ONLY: calc_rho_tot_gspace
./qs_electric_field_gradient.F:   USE qs_rho_atom_types,               ONLY: rho_atom_type
./qs_electric_field_gradient.F:   USE qs_rho_types,                    ONLY: qs_rho_type
./qs_electric_field_gradient.F:      TYPE(pw_p_type)                                    :: dvr2rs, rho_tot_gspace, &
./qs_electric_field_gradient.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_electric_field_gradient.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_electric_field_gradient.F:      NULLIFY (atomic_kind_set, qs_kind_set, dft_control, para_env, particle_set, rho, &
./qs_electric_field_gradient.F:               rho_atom_set, input, dft_section, interp_section)
./qs_electric_field_gradient.F:                      rho=rho, qs_kind_set=qs_kind_set, &
./qs_electric_field_gradient.F:                      rho_atom_set=rho_atom_set, pw_env=pw_env, &
./qs_electric_field_gradient.F:      IF (gapw) CALL prepare_gapw_den(qs_env, do_rho0=.TRUE.)
./qs_electric_field_gradient.F:      CALL pw_pool_create_pw(auxbas_pw_pool, rho_tot_gspace%pw, &
./qs_electric_field_gradient.F:      CALL calc_rho_tot_gspace(rho_tot_gspace, qs_env, rho)
./qs_electric_field_gradient.F:      CALL pw_poisson_solve(poisson_env, rho_tot_gspace%pw, ehartree, &
./qs_electric_field_gradient.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_tot_gspace%pw)
./qs_electric_field_gradient.F:            CALL vlimit_atom(para_env, vh0, rho_atom_set, qs_kind_set(ikind), &
./qs_electric_field_gradient.F:!> \param rho_atom_set ...
./qs_electric_field_gradient.F:   SUBROUTINE vlimit_atom(para_env, vlimit, rho_atom_set, qs_kind, &
./qs_electric_field_gradient.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_electric_field_gradient.F:                        coeff => rho_atom_set(iatom)%cpc_h(i)%r_coef
./qs_electric_field_gradient.F:                        coeff => rho_atom_set(iatom)%cpc_s(i)%r_coef
./qs_rho_types.F:!>      11.2014 make qs_rho_type PRIVATE [Ole Schuett]
./qs_rho_types.F:MODULE qs_rho_types
./qs_rho_types.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho_types'
./qs_rho_types.F:   PUBLIC :: qs_rho_p_type, qs_rho_type
./qs_rho_types.F:   PUBLIC :: qs_rho_retain, qs_rho_release, &
./qs_rho_types.F:             qs_rho_get, qs_rho_set, qs_rho_clear, qs_rho_create
./qs_rho_types.F:!> \param rho_ao the filtered rho in the localized atom basis (to have rho(r)
./qs_rho_types.F:!>        the filtred matrix is enough, but rho(r,r') is lost).
./qs_rho_types.F:!> \param rho_ao_kp the filtered rho in the localized atom basis (to have rho(r)
./qs_rho_types.F:!>        the filtered matrix is enough, but rho(r,r') is lost).
./qs_rho_types.F:!> \param rho_r grids with rho in the real space
./qs_rho_types.F:!> \param rho_g grids with rho in the g space
./qs_rho_types.F:!> \param rho_g_valid , rho_r_valid, tau_r_valid, tau_g_valid: if the
./qs_rho_types.F:!> \param tot_rho_r the total charge in r space (valid only if rho_r is)
./qs_rho_types.F:   TYPE qs_rho_type
./qs_rho_types.F:      TYPE(kpoint_transitional_type)                 :: rho_ao
./qs_rho_types.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER   :: rho_ao_im => Null()
./qs_rho_types.F:      TYPE(pw_p_type), DIMENSION(:), POINTER         :: rho_g => Null(), &
./qs_rho_types.F:                                                        rho_r => Null(), &
./qs_rho_types.F:                                                        drho_g => Null(), &
./qs_rho_types.F:                                                        drho_r => Null(), &
./qs_rho_types.F:      ! Final rho_iter of last SCCS cycle (r-space)
./qs_rho_types.F:      TYPE(pw_p_type), POINTER                       :: rho_r_sccs => Null()
./qs_rho_types.F:      LOGICAL                                        :: rho_g_valid = .FALSE., &
./qs_rho_types.F:                                                        rho_r_valid = .FALSE., &
./qs_rho_types.F:                                                        drho_r_valid = .FALSE., &
./qs_rho_types.F:                                                        drho_g_valid = .FALSE., &
./qs_rho_types.F:      REAL(KIND=dp), DIMENSION(:), POINTER           :: tot_rho_r => Null(), &
./qs_rho_types.F:                                                        tot_rho_g => Null()
./qs_rho_types.F:   END TYPE qs_rho_type
./qs_rho_types.F:   TYPE qs_rho_p_type
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                     :: rho
./qs_rho_types.F:   END TYPE qs_rho_p_type
./qs_rho_types.F:   INTEGER, PRIVATE, SAVE :: last_rho_id_nr = 0
./qs_rho_types.F:!> \brief Allocates a new instance of rho.
./qs_rho_types.F:!> \param rho ...
./qs_rho_types.F:   SUBROUTINE qs_rho_create(rho)
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_rho_types.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'qs_rho_create', routineP = moduleN//':'//routineN
./qs_rho_types.F:      IF (ASSOCIATED(rho)) CPABORT("rho already associated")
./qs_rho_types.F:      ALLOCATE (rho)
./qs_rho_types.F:      last_rho_id_nr = last_rho_id_nr+1
./qs_rho_types.F:      rho%id_nr = last_rho_id_nr
./qs_rho_types.F:      rho%rebuild_each = 5
./qs_rho_types.F:      rho%ref_count = 1
./qs_rho_types.F:   END SUBROUTINE qs_rho_create
./qs_rho_types.F:!> \brief retains a rho_struct by increasing the reference count by one
./qs_rho_types.F:!> \param rho_struct the structure to retain
./qs_rho_types.F:   SUBROUTINE qs_rho_retain(rho_struct)
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_rho_retain', routineP = moduleN//':'//routineN
./qs_rho_types.F:      CPASSERT(ASSOCIATED(rho_struct))
./qs_rho_types.F:      CPASSERT(rho_struct%ref_count > 0)
./qs_rho_types.F:      rho_struct%ref_count = rho_struct%ref_count+1
./qs_rho_types.F:   END SUBROUTINE qs_rho_retain
./qs_rho_types.F:!> \brief releases a rho_struct by decreasing the reference count by one
./qs_rho_types.F:!> \param rho_struct the structure to retain
./qs_rho_types.F:   SUBROUTINE qs_rho_release(rho_struct)
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_rho_release', routineP = moduleN//':'//routineN
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct)) THEN
./qs_rho_types.F:         CPASSERT(rho_struct%ref_count > 0)
./qs_rho_types.F:         rho_struct%ref_count = rho_struct%ref_count-1
./qs_rho_types.F:         IF (rho_struct%ref_count < 1) THEN
./qs_rho_types.F:            CALL qs_rho_clear(rho_struct)
./qs_rho_types.F:            DEALLOCATE (rho_struct)
./qs_rho_types.F:      NULLIFY (rho_struct)
./qs_rho_types.F:   END SUBROUTINE qs_rho_release
./qs_rho_types.F:!> \brief Deallocates all components, whithout deallocating rho_struct itself.
./qs_rho_types.F:!> \param rho_struct ...
./qs_rho_types.F:   SUBROUTINE qs_rho_clear(rho_struct)
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_rho_clear', routineP = moduleN//':'//routineN
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%rho_r)) THEN
./qs_rho_types.F:         DO i = 1, SIZE(rho_struct%rho_r)
./qs_rho_types.F:            CALL pw_release(rho_struct%rho_r(i)%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%rho_r)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%drho_r)) THEN
./qs_rho_types.F:         DO i = 1, SIZE(rho_struct%drho_r)
./qs_rho_types.F:            CALL pw_release(rho_struct%drho_r(i)%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%drho_r)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%drho_g)) THEN
./qs_rho_types.F:         DO i = 1, SIZE(rho_struct%drho_g)
./qs_rho_types.F:            CALL pw_release(rho_struct%drho_g(i)%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%drho_g)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%tau_r)) THEN
./qs_rho_types.F:         DO i = 1, SIZE(rho_struct%tau_r)
./qs_rho_types.F:            CALL pw_release(rho_struct%tau_r(i)%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%tau_r)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%rho_g)) THEN
./qs_rho_types.F:         DO i = 1, SIZE(rho_struct%rho_g)
./qs_rho_types.F:            CALL pw_release(rho_struct%rho_g(i)%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%rho_g)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%tau_g)) THEN
./qs_rho_types.F:         DO i = 1, SIZE(rho_struct%tau_g)
./qs_rho_types.F:            CALL pw_release(rho_struct%tau_g(i)%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%tau_g)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%rho_r_sccs)) THEN
./qs_rho_types.F:         CALL pw_release(rho_struct%rho_r_sccs%pw)
./qs_rho_types.F:         DEALLOCATE (rho_struct%rho_r_sccs)
./qs_rho_types.F:      CALL kpoint_transitional_release(rho_struct%rho_ao)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%rho_ao_im)) &
./qs_rho_types.F:         CALL dbcsr_deallocate_matrix_set(rho_struct%rho_ao_im)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%tot_rho_r)) &
./qs_rho_types.F:         DEALLOCATE (rho_struct%tot_rho_r)
./qs_rho_types.F:      IF (ASSOCIATED(rho_struct%tot_rho_g)) &
./qs_rho_types.F:         DEALLOCATE (rho_struct%tot_rho_g)
./qs_rho_types.F:   END SUBROUTINE qs_rho_clear
./qs_rho_types.F:!> \param rho_struct ...
./qs_rho_types.F:!> \param rho_ao ...
./qs_rho_types.F:!> \param rho_ao_im ...
./qs_rho_types.F:!> \param rho_ao_kp ...
./qs_rho_types.F:!> \param rho_r ...
./qs_rho_types.F:!> \param drho_r ...
./qs_rho_types.F:!> \param rho_g ...
./qs_rho_types.F:!> \param drho_g ...
./qs_rho_types.F:!> \param rho_r_valid ...
./qs_rho_types.F:!> \param drho_r_valid ...
./qs_rho_types.F:!> \param rho_g_valid ...
./qs_rho_types.F:!> \param drho_g_valid ...
./qs_rho_types.F:!> \param tot_rho_r ...
./qs_rho_types.F:!> \param tot_rho_g ...
./qs_rho_types.F:!> \param rho_r_sccs ...
./qs_rho_types.F:   SUBROUTINE qs_rho_get(rho_struct, rho_ao, rho_ao_im, rho_ao_kp, rho_r, drho_r, &
./qs_rho_types.F:                         rho_g, drho_g, tau_r, tau_g, rho_r_valid, drho_r_valid, rho_g_valid, &
./qs_rho_types.F:                         drho_g_valid, tau_r_valid, tau_g_valid, rebuild_each, tot_rho_r, tot_rho_g, &
./qs_rho_types.F:                         rho_r_sccs, soft_valid)
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_rho_types.F:         POINTER                                         :: rho_ao, rho_ao_im
./qs_rho_types.F:         POINTER                                         :: rho_ao_kp
./qs_rho_types.F:      TYPE(pw_p_type), DIMENSION(:), OPTIONAL, POINTER   :: rho_r, drho_r, rho_g, drho_g, tau_r, &
./qs_rho_types.F:      LOGICAL, INTENT(out), OPTIONAL                     :: rho_r_valid, drho_r_valid, rho_g_valid, &
./qs_rho_types.F:                                                            drho_g_valid, tau_r_valid, tau_g_valid
./qs_rho_types.F:      REAL(KIND=dp), DIMENSION(:), OPTIONAL, POINTER     :: tot_rho_r, tot_rho_g
./qs_rho_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: rho_r_sccs
./qs_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_rho_get', routineP = moduleN//':'//routineN
./qs_rho_types.F:      CPASSERT(ASSOCIATED(rho_struct))
./qs_rho_types.F:      CPASSERT(rho_struct%ref_count > 0)
./qs_rho_types.F:      IF (PRESENT(rho_ao)) rho_ao => get_1d_pointer(rho_struct%rho_ao)
./qs_rho_types.F:      IF (PRESENT(rho_ao_kp)) rho_ao_kp => get_2d_pointer(rho_struct%rho_ao)
./qs_rho_types.F:      IF (PRESENT(rho_ao_im)) rho_ao_im => rho_struct%rho_ao_im
./qs_rho_types.F:      IF (PRESENT(rho_r)) rho_r => rho_struct%rho_r
./qs_rho_types.F:      IF (PRESENT(drho_r)) drho_r => rho_struct%drho_r
./qs_rho_types.F:      IF (PRESENT(rho_g)) rho_g => rho_struct%rho_g
./qs_rho_types.F:      IF (PRESENT(drho_g)) drho_g => rho_struct%drho_g
./qs_rho_types.F:      IF (PRESENT(tau_r)) tau_r => rho_struct%tau_r
./qs_rho_types.F:      IF (PRESENT(tau_g)) tau_g => rho_struct%tau_g
./qs_rho_types.F:      IF (PRESENT(rho_r_valid)) rho_r_valid = rho_struct%rho_r_valid
./qs_rho_types.F:      IF (PRESENT(rho_g_valid)) rho_g_valid = rho_struct%rho_g_valid
./qs_rho_types.F:      IF (PRESENT(drho_r_valid)) drho_r_valid = rho_struct%drho_r_valid
./qs_rho_types.F:      IF (PRESENT(drho_g_valid)) drho_g_valid = rho_struct%drho_g_valid
./qs_rho_types.F:      IF (PRESENT(tau_r_valid)) tau_r_valid = rho_struct%tau_r_valid
./qs_rho_types.F:      IF (PRESENT(tau_g_valid)) tau_g_valid = rho_struct%tau_g_valid
./qs_rho_types.F:      IF (PRESENT(soft_valid)) soft_valid = rho_struct%soft_valid
./qs_rho_types.F:      IF (PRESENT(rebuild_each)) rebuild_each = rho_struct%rebuild_each
./qs_rho_types.F:      IF (PRESENT(tot_rho_r)) tot_rho_r => rho_struct%tot_rho_r
./qs_rho_types.F:      IF (PRESENT(tot_rho_g)) tot_rho_g => rho_struct%tot_rho_g
./qs_rho_types.F:      IF (PRESENT(rho_r_sccs)) rho_r_sccs => rho_struct%rho_r_sccs
./qs_rho_types.F:   END SUBROUTINE qs_rho_get
./qs_rho_types.F:!> \param rho_struct ...
./qs_rho_types.F:!> \param rho_ao ...
./qs_rho_types.F:!> \param rho_ao_im ...
./qs_rho_types.F:!> \param rho_ao_kp ...
./qs_rho_types.F:!> \param rho_r ...
./qs_rho_types.F:!> \param drho_r ...
./qs_rho_types.F:!> \param rho_g ...
./qs_rho_types.F:!> \param drho_g ...
./qs_rho_types.F:!> \param rho_r_valid ...
./qs_rho_types.F:!> \param drho_r_valid ...
./qs_rho_types.F:!> \param rho_g_valid ...
./qs_rho_types.F:!> \param drho_g_valid ...
./qs_rho_types.F:!> \param tot_rho_r ...
./qs_rho_types.F:!> \param tot_rho_g ...
./qs_rho_types.F:!> \param rho_r_sccs ...
./qs_rho_types.F:   SUBROUTINE qs_rho_set(rho_struct, rho_ao, rho_ao_im, rho_ao_kp, rho_r, drho_r, &
./qs_rho_types.F:                         rho_g, drho_g, tau_r, tau_g, rho_r_valid, drho_r_valid, rho_g_valid, &
./qs_rho_types.F:                         drho_g_valid, tau_r_valid, tau_g_valid, rebuild_each, tot_rho_r, tot_rho_g, &
./qs_rho_types.F:                         rho_r_sccs, soft_valid)
./qs_rho_types.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./qs_rho_types.F:         POINTER                                         :: rho_ao, rho_ao_im
./qs_rho_types.F:         POINTER                                         :: rho_ao_kp
./qs_rho_types.F:      TYPE(pw_p_type), DIMENSION(:), OPTIONAL, POINTER   :: rho_r, drho_r, rho_g, drho_g, tau_r, &
./qs_rho_types.F:      LOGICAL, INTENT(in), OPTIONAL                      :: rho_r_valid, drho_r_valid, rho_g_valid, &
./qs_rho_types.F:                                                            drho_g_valid, tau_r_valid, tau_g_valid
./qs_rho_types.F:      REAL(KIND=dp), DIMENSION(:), OPTIONAL, POINTER     :: tot_rho_r, tot_rho_g
./qs_rho_types.F:      TYPE(pw_p_type), OPTIONAL, POINTER                 :: rho_r_sccs
./qs_rho_types.F:      CHARACTER(len=*), PARAMETER :: routineN = 'qs_rho_set', routineP = moduleN//':'//routineN
./qs_rho_types.F:      CPASSERT(ASSOCIATED(rho_struct))
./qs_rho_types.F:      CPASSERT(rho_struct%ref_count > 0)
./qs_rho_types.F:      IF (PRESENT(rho_ao)) CALL set_1d_pointer(rho_struct%rho_ao, rho_ao)
./qs_rho_types.F:      IF (PRESENT(rho_ao_kp)) CALL set_2d_pointer(rho_struct%rho_ao, rho_ao_kp)
./qs_rho_types.F:      IF (PRESENT(rho_ao_im)) rho_struct%rho_ao_im => rho_ao_im
./qs_rho_types.F:      IF (PRESENT(rho_r)) rho_struct%rho_r => rho_r
./qs_rho_types.F:      IF (PRESENT(rho_g)) rho_struct%rho_g => rho_g
./qs_rho_types.F:      IF (PRESENT(drho_r)) rho_struct%drho_r => drho_r
./qs_rho_types.F:      IF (PRESENT(drho_g)) rho_struct%drho_g => drho_g
./qs_rho_types.F:      IF (PRESENT(tau_r)) rho_struct%tau_r => tau_r
./qs_rho_types.F:      IF (PRESENT(tau_g)) rho_struct%tau_g => tau_g
./qs_rho_types.F:      IF (PRESENT(rho_r_valid)) rho_struct%rho_r_valid = rho_r_valid
./qs_rho_types.F:      IF (PRESENT(rho_g_valid)) rho_struct%rho_g_valid = rho_g_valid
./qs_rho_types.F:      IF (PRESENT(drho_r_valid)) rho_struct%drho_r_valid = drho_r_valid
./qs_rho_types.F:      IF (PRESENT(drho_g_valid)) rho_struct%drho_g_valid = drho_g_valid
./qs_rho_types.F:      IF (PRESENT(tau_r_valid)) rho_struct%tau_r_valid = tau_r_valid
./qs_rho_types.F:      IF (PRESENT(tau_g_valid)) rho_struct%tau_g_valid = tau_g_valid
./qs_rho_types.F:      IF (PRESENT(soft_valid)) rho_struct%soft_valid = soft_valid
./qs_rho_types.F:      IF (PRESENT(rebuild_each)) rho_struct%rebuild_each = rebuild_each
./qs_rho_types.F:      IF (PRESENT(tot_rho_r)) rho_struct%tot_rho_r => tot_rho_r
./qs_rho_types.F:      IF (PRESENT(tot_rho_g)) rho_struct%tot_rho_g => tot_rho_g
./qs_rho_types.F:      IF (PRESENT(rho_r_sccs)) rho_struct%rho_r_sccs => rho_r_sccs
./qs_rho_types.F:   END SUBROUTINE qs_rho_set
./qs_rho_types.F:END MODULE qs_rho_types
./force_fields_input.F:      READ (parser%input_line, *) eam%drar, eam%drhoar, eam%acutal, eam%npoints
./force_fields_input.F:      CALL reallocate(eam%rho, 1, eam%npoints)
./force_fields_input.F:      CALL reallocate(eam%rhop, 1, eam%npoints)
./force_fields_input.F:      CALL reallocate(eam%rhoval, 1, eam%npoints)
./force_fields_input.F:      CALL reallocate(eam%frho, 1, eam%npoints)
./force_fields_input.F:      CALL reallocate(eam%frhop, 1, eam%npoints)
./force_fields_input.F:         READ (parser%input_line, *) eam%rho(i), eam%rhop(i)
./force_fields_input.F:         eam%rhop(i) = cp_unit_to_cp2k(eam%rhop(i), "angstrom^-1")
./force_fields_input.F:         eam%rhoval(i) = REAL(i-1, KIND=dp)*eam%drhoar
./force_fields_input.F:         READ (parser%input_line, *) eam%frho(i), eam%frhop(i)
./force_fields_input.F:         eam%frho(i) = cp_unit_to_cp2k(eam%frho(i), "eV")
./force_fields_input.F:         eam%frhop(i) = cp_unit_to_cp2k(eam%frhop(i), "eV")
./optimize_input.F:     REAL(KIND=dp) :: rhobeg,rhoend
./optimize_input.F:       ostate%rhoend = oi_env%rhoend
./optimize_input.F:       ostate%rhobeg = oi_env%rhobeg
./optimize_input.F:       WRITE(output_unit,'(T2,A,T60,F20.12)') 'FORCE_MATCHING| accuracy',ostate%rhoend
./optimize_input.F:       WRITE(output_unit,'(T2,A,T60,F20.12)') 'FORCE_MATCHING| step size',ostate%rhobeg
./optimize_input.F:    CALL section_vals_val_get(oi_section,"ACCURACY", r_val=oi_env%rhoend)
./optimize_input.F:    CALL section_vals_val_get(oi_section,"STEP_SIZE", r_val=oi_env%rhobeg)
./qs_ks_utils.F:!>      10.2002 introduced pools, uses updated rho as input,
./qs_ks_utils.F:   USE qs_collocate_density,            ONLY: calculate_rho_elec
./qs_ks_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_ks_utils.F:                                              qs_rho_type
./qs_ks_utils.F:      REAL(KIND=dp)                                      :: exc, total_rho
./qs_ks_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: matrix_h, matrix_p, mo_derivs, rho_ao
./qs_ks_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r, tau, vxc, vxc_tau
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      NULLIFY (ks_env, rho_ao)
./qs_ks_utils.F:                      rho=rho, &
./qs_ks_utils.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_ks_utils.F:         CALL dbcsr_copy(matrix_p(ispin)%matrix, rho_ao(1)%matrix, &
./qs_ks_utils.F:         CALL dbcsr_copy(matrix_h(ispin)%matrix, rho_ao(1)%matrix, &
./qs_ks_utils.F:      ! grids in real and g space for rho and vxc
./qs_ks_utils.F:      ALLOCATE (rho_r(Nspin))
./qs_ks_utils.F:      ALLOCATE (rho_g(Nspin))
./qs_ks_utils.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_r(ispin)%pw, &
./qs_ks_utils.F:         CALL pw_pool_create_pw(auxbas_pw_pool, rho_g(ispin)%pw, &
./qs_ks_utils.F:            CALL calculate_rho_elec(matrix_p=matrix_p(ispin)%matrix, &
./qs_ks_utils.F:                                    rho=rho_r(ispin), rho_gspace=rho_g(ispin), total_rho=total_rho, &
./qs_ks_utils.F:            exc = xc_exc_calc(rho_r=rho_r, rho_g=rho_g, tau=tau, xc_section=xc_section, &
./qs_ks_utils.F:            CALL xc_vxc_pw_create1(vxc_rho=vxc, rho_r=rho_r, &
./qs_ks_utils.F:                                   rho_g=rho_g, tau=tau, vxc_tau=vxc_tau, exc=exc, xc_section=xc_section, &
./qs_ks_utils.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_r(ispin)%pw)
./qs_ks_utils.F:         CALL pw_pool_give_back_pw(auxbas_pw_pool, rho_g(ispin)%pw)
./qs_ks_utils.F:      DEALLOCATE (rho_r, rho_g)
./qs_ks_utils.F:      REAL(KIND=dp)                                      :: ener, exc, total_rho
./qs_ks_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: mo_derivs, rho_ao, tmp_dbcsr
./qs_ks_utils.F:      TYPE(pw_p_type)                                    :: orb_rho_g, orb_rho_r, tmp_g, tmp_r, &
./qs_ks_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r, tau, vxc, vxc_tau
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      NULLIFY (tau, vxc_tau, mo_derivs, ks_env, rho_ao)
./qs_ks_utils.F:                      rho=rho, &
./qs_ks_utils.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_ks_utils.F:      CALL pw_pool_create_pw(auxbas_pw_pool, orb_rho_r%pw, &
./qs_ks_utils.F:      CALL pw_pool_create_pw(auxbas_pw_pool, orb_rho_g%pw, &
./qs_ks_utils.F:      CALL dbcsr_copy(orb_density_matrix, rho_ao(1)%matrix, &
./qs_ks_utils.F:      CALL dbcsr_copy(orb_h, rho_ao(1)%matrix, &
./qs_ks_utils.F:      ALLOCATE (rho_r(2))
./qs_ks_utils.F:      rho_r(1)%pw => orb_rho_r%pw
./qs_ks_utils.F:      rho_r(2)%pw => tmp_r%pw
./qs_ks_utils.F:      ALLOCATE (rho_g(2))
./qs_ks_utils.F:      rho_g(1)%pw => orb_rho_g%pw
./qs_ks_utils.F:      rho_g(2)%pw => tmp_g%pw
./qs_ks_utils.F:         CALL calculate_rho_elec(matrix_p=orb_density_matrix, &
./qs_ks_utils.F:                                 rho=orb_rho_r, rho_gspace=orb_rho_g, total_rho=total_rho, &
./qs_ks_utils.F:         ! write(*,*) 'Total orbital rho= ',total_rho
./qs_ks_utils.F:         CALL pw_poisson_solve(poisson_env, orb_rho_g%pw, ener, work_v_gspace%pw)
./qs_ks_utils.F:            exc = xc_exc_calc(rho_r=rho_r, rho_g=rho_g, tau=tau, xc_section=xc_section, &
./qs_ks_utils.F:            CALL xc_vxc_pw_create1(vxc_rho=vxc, rho_r=rho_r, &
./qs_ks_utils.F:                                   rho_g=rho_g, tau=tau, vxc_tau=vxc_tau, exc=exc, xc_section=xc_section, &
./qs_ks_utils.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, orb_rho_r%pw)
./qs_ks_utils.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, orb_rho_g%pw)
./qs_ks_utils.F:      DEALLOCATE (rho_r)
./qs_ks_utils.F:      DEALLOCATE (rho_g)
./qs_ks_utils.F:!> \param rho ...
./qs_ks_utils.F:                                qs_env, dft_control, rho, poisson_env, just_energy, &
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      TYPE(pw_p_type)                                    :: work_rho, work_v
./qs_ks_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g
./qs_ks_utils.F:      NULLIFY (mo_array, rho_g)
./qs_ks_utils.F:      CALL pw_pool_create_pw(auxbas_pw_pool, work_rho%pw, &
./qs_ks_utils.F:      CALL qs_rho_get(rho, rho_g=rho_g)
./qs_ks_utils.F:         CALL pw_copy(rho_g(1)%pw, work_rho%pw)
./qs_ks_utils.F:         CALL pw_axpy(rho_g(2)%pw, work_rho%pw, alpha=-1._dp)
./qs_ks_utils.F:         CALL pw_poisson_solve(poisson_env, work_rho%pw, ener, work_v%pw)
./qs_ks_utils.F:         CALL pw_copy(rho_g(1)%pw, work_rho%pw)
./qs_ks_utils.F:         CALL pw_axpy(rho_g(2)%pw, work_rho%pw)
./qs_ks_utils.F:         CALL pw_scale(work_rho%pw, scaling)
./qs_ks_utils.F:         CALL pw_poisson_solve(poisson_env, work_rho%pw, ener, work_v%pw)
./qs_ks_utils.F:                             work_rho, &
./qs_ks_utils.F:      CALL pw_pool_give_back_pw(auxbas_pw_pool, work_rho%pw)
./qs_ks_utils.F:!> \param rho ...
./qs_ks_utils.F:   SUBROUTINE print_densities(qs_env, rho)
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      REAL(dp)                                           :: tot1_h, tot1_s, tot_rho_r, trace, &
./qs_ks_utils.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r_arr
./qs_ks_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_s, rho_ao
./qs_ks_utils.F:               dft_control, tot_rho_r_arr, rho_ao)
./qs_ks_utils.F:      CALL qs_rho_get(rho, tot_rho_r=tot_rho_r_arr, rho_ao_kp=rho_ao)
./qs_ks_utils.F:      tot_rho_r = accurate_sum(tot_rho_r_arr)
./qs_ks_utils.F:               CALL dbcsr_trace(rho_ao(ispin, img)%matrix, matrix_s(1, img)%matrix, trace_tmp)
./qs_ks_utils.F:            tot_rho_r, &
./qs_ks_utils.F:            tot_rho_r+ &
./qs_ks_utils.F:            qs_charges%total_rho_core_rspace, &
./qs_ks_utils.F:            qs_charges%total_rho_core_rspace-REAL(n_electrons+dft_control%charge, dp)
./qs_ks_utils.F:         tot1_h = qs_charges%total_rho1_hard(1)
./qs_ks_utils.F:         tot1_s = qs_charges%total_rho1_soft(1)
./qs_ks_utils.F:            tot1_h = tot1_h+qs_charges%total_rho1_hard(ispin)
./qs_ks_utils.F:            tot1_s = tot1_s+qs_charges%total_rho1_soft(ispin)
./qs_ks_utils.F:               tot_rho_r+tot1_h-tot1_s, &
./qs_ks_utils.F:               tot_rho_r+tot1_h-tot1_s &
./qs_ks_utils.F:               +qs_charges%total_rho_core_rspace, &
./qs_ks_utils.F:               qs_charges%total_rho_gspace
./qs_ks_utils.F:         qs_charges%background = tot_rho_r+tot1_h-tot1_s+ &
./qs_ks_utils.F:                                 qs_charges%total_rho_core_rspace
./qs_ks_utils.F:         tot1_h = qs_charges%total_rho1_hard(1)
./qs_ks_utils.F:         tot1_s = qs_charges%total_rho1_soft(1)
./qs_ks_utils.F:            tot1_h = tot1_h+qs_charges%total_rho1_hard(ispin)
./qs_ks_utils.F:            tot1_s = tot1_s+qs_charges%total_rho1_soft(ispin)
./qs_ks_utils.F:               accurate_sum(tot_rho_r_arr)+tot1_h-tot1_s
./qs_ks_utils.F:         qs_charges%background = tot_rho_r+ &
./qs_ks_utils.F:                                 qs_charges%total_rho_core_rspace
./qs_ks_utils.F:               tot_rho_r+ &
./qs_ks_utils.F:               qs_charges%total_rho_core_rspace, &
./qs_ks_utils.F:               qs_charges%total_rho_gspace
./qs_ks_utils.F:         qs_charges%background = tot_rho_r+ &
./qs_ks_utils.F:                                 qs_charges%total_rho_core_rspace
./qs_ks_utils.F:               "GAPW| Exc from hard and soft atomic rho1:      ", energy%exc1, &
./qs_ks_utils.F:               "GAPW| Exc from hard and soft atomic rho1:      ", energy%exc1
./qs_ks_utils.F:!> \param rho ...
./qs_ks_utils.F:!> \param my_rho ...
./qs_ks_utils.F:   SUBROUTINE sum_up_and_integrate(qs_env, ks_matrix, rho, my_rho, &
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: my_rho
./qs_ks_utils.F:                                                            matrix_ks_aux_fit_dft, rho_ao, &
./qs_ks_utils.F:                                                            rho_ao_aux, rho_ao_nokp, smat
./qs_ks_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho_aux_fit
./qs_ks_utils.F:               v_rspace%pw, rho_aux_fit, vee, rho_ao, rho_ao_kp, rho_ao_aux, &
./qs_ks_utils.F:               rho_ao_nokp, ks_env)
./qs_ks_utils.F:                      rho_aux_fit=rho_aux_fit, &
./qs_ks_utils.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_ks_utils.F:      CALL qs_rho_get(rho_aux_fit, rho_ao=rho_ao_aux)
./qs_ks_utils.F:               rho_ao => rho_ao_kp(ispin, :)
./qs_ks_utils.F:                                       pmat_kp=rho_ao, hmat_kp=ksmat, &
./qs_ks_utils.F:                  rho_ao => my_rho(ispin, :)
./qs_ks_utils.F:                                                   rho_ao(1)%matrix, qs_env, &
./qs_ks_utils.F:               rho_ao => my_rho(ispin, :)
./qs_ks_utils.F:                                       pmat_kp=rho_ao, hmat_kp=ksmat, &
./qs_ks_utils.F:                  rho_ao => my_rho(ispin, :)
./qs_ks_utils.F:                                                   rho_ao(1)%matrix, qs_env, &
./qs_ks_utils.F:               rho_ao => my_rho(ispin, :)
./qs_ks_utils.F:                                       pmat_kp=rho_ao, &
./qs_ks_utils.F:            CALL calculate_lri_forces(lri_env, lri_density, qs_env, rho_ao_kp, atomic_kind_set)
./qs_ks_utils.F:            rho_ao_nokp => rho_ao_kp(:, 1)
./qs_ks_utils.F:            CALL calculate_ri_forces(lri_env, lri_density, qs_env, rho_ao_nokp, atomic_kind_set)
./qs_ks_utils.F:            rho_ao => rho_ao_kp(ispin, :)
./qs_ks_utils.F:                                    pmat_kp=rho_ao, hmat_kp=ksmat, &
./qs_ks_utils.F:                                       pmat=rho_ao_aux(ispin), &
./qs_ks_utils.F:!> V_c^\lambda defined as int_rho-rho_0/r-r' or rho-rho_0 times a Lagrange
./qs_ks_utils.F:!> \param rho ...
./qs_ks_utils.F:   SUBROUTINE calculate_zmp_potential(qs_env, v_rspace_new, rho, exc)
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      REAL(KIND=dp)                                      :: factor, lambda, total_rho
./qs_ks_utils.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_ext_r
./qs_ks_utils.F:      TYPE(pw_p_type)                                    :: rho_eff_gspace, v_xc_gspace, v_xc_rspace
./qs_ks_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_ext_g, rho_g, rho_r
./qs_ks_utils.F:      NULLIFY (rho_r, rho_g, tot_rho_ext_r, rho_ext_g)
./qs_ks_utils.F:                      rho=rho, &
./qs_ks_utils.F:      CALL qs_rho_get(rho, rho_r=rho_r, rho_g=rho_g)
./qs_ks_utils.F:         exc = accurate_sum(v_rspace_new(1)%pw%cr3d*rho_r(1)%pw%cr3d)* &
./qs_ks_utils.F:                                pw=rho_eff_gspace%pw, &
./qs_ks_utils.F:         CALL pw_zero(rho_eff_gspace%pw)
./qs_ks_utils.F:         factor = pw_integrate_function(rho_g(1)%pw)
./qs_ks_utils.F:         CALL qs_rho_get(qs_env%rho_external, &
./qs_ks_utils.F:                         rho_g=rho_ext_g, &
./qs_ks_utils.F:                         tot_rho_r=tot_rho_ext_r)
./qs_ks_utils.F:         factor = tot_rho_ext_r(1)/factor
./qs_ks_utils.F:         CALL pw_axpy(rho_g(1)%pw, rho_eff_gspace%pw, alpha=factor)
./qs_ks_utils.F:         CALL pw_axpy(rho_ext_g(1)%pw, rho_eff_gspace%pw, alpha=-1.0_dp)
./qs_ks_utils.F:         total_rho = pw_integrate_function(rho_eff_gspace%pw, isign=1)
./qs_ks_utils.F:         CALL pw_scale(rho_eff_gspace%pw, a=lambda)
./qs_ks_utils.F:         CALL pw_axpy(rho_g(1)%pw, rho_eff_gspace%pw, alpha=factor)
./qs_ks_utils.F:         CALL pw_poisson_solve(poisson_env, rho_eff_gspace%pw, vhartree=v_xc_gspace%pw)
./qs_ks_utils.F:         exc = accurate_sum(v_rspace_new(1)%pw%cr3d*rho_r(1)%pw%cr3d)* &
./qs_ks_utils.F:!Note that this is not the xc energy but \int(\rho*v_xc)
./qs_ks_utils.F:                                   rho_eff_gspace%pw)
./qs_ks_utils.F:!> \param rho ...
./qs_ks_utils.F:   SUBROUTINE get_embed_potential_energy(qs_env, rho, v_rspace_embed, dft_control, embed_corr, &
./qs_ks_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_ks_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./qs_ks_utils.F:      NULLIFY (rho_r)
./qs_ks_utils.F:                      rho=rho)
./qs_ks_utils.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./qs_ks_utils.F:         embed_corr_local = accurate_sum(v_rspace_embed(ispin)%pw%cr3d*rho_r(ispin)%pw%cr3d)* &
./qs_scf_loop_utils.F:   USE qs_rho_methods,                  ONLY: qs_rho_update_rho
./qs_scf_loop_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_scf_loop_utils.F:                                              qs_rho_type
./qs_scf_loop_utils.F:             qs_scf_check_outer_exit, qs_scf_inner_finalize, qs_scf_rho_update
./qs_scf_loop_utils.F:      ! qs_env%rho%rho_r and qs_env%rho%rho_g should be up to date here
./qs_scf_loop_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_loop_utils.F:      NULLIFY (energy, ks_env, matrix_ks, matrix_s, rho, mos, dft_control)
./qs_scf_loop_utils.F:                      matrix_ks=matrix_ks, rho=rho, mos=mos, &
./qs_scf_loop_utils.F:                  CALL do_scf_diag_subspace(qs_env, scf_env, scf_env%subspace_env, mos, rho, &
./qs_scf_loop_utils.F:               CALL do_scf_diag_subspace(qs_env, scf_env, scf_env%subspace_env, mos, rho, &
./qs_scf_loop_utils.F:         CALL qs_scf_loop_do_ot(qs_env, scf_env, scf_control%smear, mos, rho, &
./qs_scf_loop_utils.F:!> \param rho ...
./qs_scf_loop_utils.F:   SUBROUTINE qs_scf_loop_do_ot(qs_env, scf_env, smear, mos, rho, mo_derivs, total_energy, &
./qs_scf_loop_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_loop_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:), POINTER          :: rho_ao
./qs_scf_loop_utils.F:      NULLIFY (rho_ao)
./qs_scf_loop_utils.F:      CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_scf_loop_utils.F:                                       rho_ao(ispin)%matrix, &
./qs_scf_loop_utils.F:!> \param rho       All data for the electron density
./qs_scf_loop_utils.F:   SUBROUTINE qs_scf_density_mixing(scf_env, rho, para_env, diis_step)
./qs_scf_loop_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_loop_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_scf_loop_utils.F:      NULLIFY (rho_ao_kp)
./qs_scf_loop_utils.F:      CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_scf_loop_utils.F:                                     scf_env%mixing_store, rho_ao_kp, para_env, scf_env%iter_delta, scf_env%iter_count, &
./qs_scf_loop_utils.F:         CALL self_consistency_check(rho_ao_kp, scf_env%p_delta, para_env, scf_env%p_mix_new, &
./qs_scf_loop_utils.F:!> \param rho ...
./qs_scf_loop_utils.F:   SUBROUTINE qs_scf_undo_mixing(scf_env, rho, dft_control, para_env, diis_step)
./qs_scf_loop_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_loop_utils.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao_kp
./qs_scf_loop_utils.F:      NULLIFY (rho_ao_kp)
./qs_scf_loop_utils.F:         CALL qs_rho_get(rho, rho_ao_kp=rho_ao_kp)
./qs_scf_loop_utils.F:                                        rho_ao_kp, para_env, scf_env%iter_delta, &
./qs_scf_loop_utils.F:                  CALL dbcsr_get_info(rho_ao_kp(ispin, ic)%matrix, name=name) ! keep the name
./qs_scf_loop_utils.F:                  CALL dbcsr_copy(rho_ao_kp(ispin, ic)%matrix, scf_env%p_mix_new(ispin, ic)%matrix, name=name)
./qs_scf_loop_utils.F:                  CALL dbcsr_get_info(rho_ao_kp(ispin, ic)%matrix, name=name) ! keep the name
./qs_scf_loop_utils.F:                  CALL dbcsr_copy(rho_ao_kp(ispin, ic)%matrix, scf_env%p_mix_new(ispin, ic)%matrix, name=name)
./qs_scf_loop_utils.F:!> \brief Performes the updates rho (takes care of mixing as well)
./qs_scf_loop_utils.F:!> \param rho ...
./qs_scf_loop_utils.F:!> \param mix_rho ...
./qs_scf_loop_utils.F:   SUBROUTINE qs_scf_rho_update(rho, qs_env, scf_env, ks_env, mix_rho)
./qs_scf_loop_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_loop_utils.F:      LOGICAL, INTENT(IN)                                :: mix_rho
./qs_scf_loop_utils.F:      CHARACTER(LEN=*), PARAMETER :: routineN = 'qs_scf_rho_update', &
./qs_scf_loop_utils.F:      ! ** update qs_env%rho
./qs_scf_loop_utils.F:      CALL qs_rho_update_rho(rho, qs_env=qs_env)
./qs_scf_loop_utils.F:      IF (mix_rho) THEN
./qs_scf_loop_utils.F:         CALL gspace_mixing(qs_env, scf_env%mixing_method, scf_env%mixing_store, rho, &
./qs_scf_loop_utils.F:      CALL qs_ks_did_change(ks_env, rho_changed=.TRUE.)
./qs_scf_loop_utils.F:   END SUBROUTINE qs_scf_rho_update
./qs_scf_loop_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_scf_loop_utils.F:      NULLIFY (energy, rho, dft_control, ks_env)
./qs_scf_loop_utils.F:                      rho=rho, dft_control=dft_control, para_env=para_env, &
./qs_scf_loop_utils.F:      CALL qs_scf_undo_mixing(scf_env, rho, dft_control, para_env, diis_step)
./qs_scf_loop_utils.F:      !   *** update rspace rho since the mo changed
./qs_scf_loop_utils.F:      !   *** but guarantees that rho and wfn are consistent at this point
./qs_scf_loop_utils.F:      CALL qs_scf_rho_update(rho, qs_env, scf_env, ks_env, mix_rho=.FALSE.)
./cp_control_types.F:                                              eps_Vrho0, &
./cp_control_types.F:      INTEGER                              :: ladd_rho0, &
./cp_control_types.F:                                              lmax_rho0, &
./cp_control_types.F:      LOGICAL                              :: lrho1_eq_lrho0
./cp_control_types.F:                                              eps_rho_gspace, &
./cp_control_types.F:                                              eps_rho_rspace, &
./cp_control_types.F:                                              delta_rho, &
./cp_control_types.F:                                              rho_zero, &
./cp_control_types.F:                                              rho_max, &
./cp_control_types.F:                                              rho_min
./cp_control_types.F:      LOGICAL                              :: drho_by_collocation
./cp_control_types.F:                                              drho_by_collocation, &
./cp_control_types.F:      sccs_control%delta_rho = 0.0_dp
./cp_control_types.F:      sccs_control%rho_max = 0.0_dp
./cp_control_types.F:      sccs_control%rho_min = 0.0_dp
./cp_control_types.F:      sccs_control%rho_zero = 0.0_dp
./qs_cdft_utils.F:                                                       dft_control%qs_control%eps_rho_rspace, &
./auto_basis.F:            ostate%rhoend = 1.e-8_dp
./auto_basis.F:            ostate%rhobeg = 5.e-1_dp
./ewalds_multipole.F:   USE dg_rho0_types,                   ONLY: dg_rho0_type
./ewalds_multipole.F:      REAL(KIND=dp), DIMENSION(:, :, :), POINTER         :: rho0
./ewalds_multipole.F:      TYPE(dg_rho0_type), POINTER                        :: dg_rho0
./ewalds_multipole.F:      CALL dg_get(dg, dg_rho0=dg_rho0)
./ewalds_multipole.F:      rho0 => dg_rho0%density%pw%cr3d
./ewalds_multipole.F:         gauss = (rho0(lp, mp, np)*pw_grid%vol)**2/pw_grid%gsq(gpt)
./negf_env_types.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./negf_env_types.F:                                              qs_rho_type
./negf_env_types.F:      TYPE(cp_fm_p_type), ALLOCATABLE, DIMENSION(:)      :: rho_00, rho_01
./negf_env_types.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: matrix_ks_kp, matrix_s_kp, rho_ao_kp
./negf_env_types.F:      TYPE(qs_rho_type), POINTER                         :: rho_struct
./negf_env_types.F:      CALL get_qs_env(qs_env_contact, rho=rho_struct)
./negf_env_types.F:      CALL qs_rho_get(rho_struct, rho_ao_kp=rho_ao_kp)
./negf_env_types.F:      ! ++ create matrices: h_00, h_01, rho_00, rho_01
./negf_env_types.F:      ALLOCATE (contact_env%rho_00(nspins), contact_env%rho_01(nspins))
./negf_env_types.F:         NULLIFY (contact_env%rho_00(ispin)%matrix)
./negf_env_types.F:         NULLIFY (contact_env%rho_01(ispin)%matrix)
./negf_env_types.F:         CALL cp_fm_create(contact_env%rho_00(ispin)%matrix, fm_struct)
./negf_env_types.F:         CALL cp_fm_create(contact_env%rho_01(ispin)%matrix, fm_struct)
./negf_env_types.F:      ! extract matrices: h_00, h_01, rho_00, rho_01
./negf_env_types.F:         CALL negf_copy_contact_matrix(fm_cell0=contact_env%rho_00(ispin)%matrix, &
./negf_env_types.F:                                       fm_cell1=contact_env%rho_01(ispin)%matrix, &
./negf_env_types.F:                                       matrix_kp=rho_ao_kp(ispin, :), &
./negf_env_types.F:      ! rho_00
./negf_env_types.F:      IF (ALLOCATED(contact_env%rho_00)) THEN
./negf_env_types.F:         DO ispin = SIZE(contact_env%rho_00), 1, -1
./negf_env_types.F:            IF (ASSOCIATED(contact_env%rho_00(ispin)%matrix)) &
./negf_env_types.F:               CALL cp_fm_release(contact_env%rho_00(ispin)%matrix)
./negf_env_types.F:         DEALLOCATE (contact_env%rho_00)
./negf_env_types.F:      ! rho_01
./negf_env_types.F:      IF (ALLOCATED(contact_env%rho_01)) THEN
./negf_env_types.F:         DO ispin = SIZE(contact_env%rho_01), 1, -1
./negf_env_types.F:            IF (ASSOCIATED(contact_env%rho_01(ispin)%matrix)) &
./negf_env_types.F:               CALL cp_fm_release(contact_env%rho_01(ispin)%matrix)
./negf_env_types.F:         DEALLOCATE (contact_env%rho_01)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(1, atom_a) = force(ikind)%rho_elec(1, atom_a)-force_ab(1)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(1, atom_b) = force(jkind)%rho_elec(1, atom_b)+force_ab(1)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(2, atom_a) = force(ikind)%rho_elec(2, atom_a)-force_ab(2)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(2, atom_b) = force(jkind)%rho_elec(2, atom_b)+force_ab(2)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(3, atom_a) = force(ikind)%rho_elec(3, atom_a)-force_ab(3)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(3, atom_b) = force(jkind)%rho_elec(3, atom_b)+force_ab(3)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(1, atom_a) = force(ikind)%rho_elec(1, atom_a)-force_ab(1)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(1, atom_b) = force(jkind)%rho_elec(1, atom_b)+force_ab(1)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(2, atom_a) = force(ikind)%rho_elec(2, atom_a)-force_ab(2)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(2, atom_b) = force(jkind)%rho_elec(2, atom_b)+force_ab(2)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(3, atom_a) = force(ikind)%rho_elec(3, atom_a)-force_ab(3)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(3, atom_b) = force(jkind)%rho_elec(3, atom_b)+force_ab(3)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(1, atom_a) = force(ikind)%rho_elec(1, atom_a)-force_ab(1)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(1, atom_b) = force(jkind)%rho_elec(1, atom_b)+force_ab(1)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(2, atom_a) = force(ikind)%rho_elec(2, atom_a)-force_ab(2)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(2, atom_b) = force(jkind)%rho_elec(2, atom_b)+force_ab(2)
./se_fock_matrix_coulomb.F:                  force(ikind)%rho_elec(3, atom_a) = force(ikind)%rho_elec(3, atom_a)-force_ab(3)
./se_fock_matrix_coulomb.F:                  force(jkind)%rho_elec(3, atom_b) = force(jkind)%rho_elec(3, atom_b)+force_ab(3)
./atom_sgp.F:            errcc = SUM((cgauss(:)-upf_pot%rho_nlcc(:))**2*upf_pot%r(:)**2*upf_pot%rab(:))
./atom_sgp.F:               errcc = SUM((cgauss(:)-upf_pot%rho_nlcc(:))**2*upf_pot%r(:)**2*upf_pot%rab(:))
./atom_sgp.F:      ostate%rhoend = 1.e-8_dp
./atom_sgp.F:      ostate%rhobeg = 5.e-2_dp
./atom_sgp.F:         ccharge(:) = upf_pot%rho_nlcc(:)
./efield_utils.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./efield_utils.F:                                              qs_rho_type
./efield_utils.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_r
./efield_utils.F:      TYPE(qs_rho_type), POINTER                         :: rho
./efield_utils.F:      NULLIFY (dft_control, para_env, rho_r)
./efield_utils.F:                      rho=rho, &
./efield_utils.F:      CALL qs_rho_get(rho, rho_r=rho_r)
./efield_utils.F:         efield_ener = efield_ener+accurate_sum(v_efield_rspace%pw%cr3d*rho_r(i)%pw%cr3d)*dvol
./ri_environment_methods.F:   USE qs_collocate_density,            ONLY: calculate_lri_rho_elec
./ri_environment_methods.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./ri_environment_methods.F:                                              qs_rho_type
./ri_environment_methods.F:      TYPE(qs_rho_type), POINTER                         :: rho
./ri_environment_methods.F:      NULLIFY (rho, matrix_p)
./ri_environment_methods.F:         CALL get_qs_env(qs_env=qs_env, rho=rho)
./ri_environment_methods.F:         CALL qs_rho_get(rho, rho_ao=matrix_p)
./ri_environment_methods.F:!>        lri_rho_struct where the fitted density is stored
./ri_environment_methods.F:!> \param lri_rho_struct ...
./ri_environment_methods.F:                                     lri_rho_struct, atomic_kind_set, para_env)
./ri_environment_methods.F:      TYPE(qs_rho_type), POINTER                         :: lri_rho_struct
./ri_environment_methods.F:      REAL(KIND=dp), DIMENSION(:), POINTER               :: tot_rho_r
./ri_environment_methods.F:      TYPE(pw_p_type), DIMENSION(:), POINTER             :: rho_g, rho_r
./ri_environment_methods.F:      CALL qs_rho_get(lri_rho_struct, rho_r=rho_r, rho_g=rho_g, tot_rho_r=tot_rho_r)
./ri_environment_methods.F:         CALL calculate_lri_rho_elec(rho_g(ispin), rho_r(ispin), qs_env, &
./ri_environment_methods.F:                                     lri_coef, tot_rho_r(ispin), "RI_HXC", .FALSE.)
./qs_energy_matrix_w.F:   USE qs_rho_types,                    ONLY: qs_rho_get,&
./qs_energy_matrix_w.F:                                              qs_rho_type
./qs_energy_matrix_w.F:                                                            matrix_w_mp2, mo_derivs, rho_ao
./qs_energy_matrix_w.F:      TYPE(qs_rho_type), POINTER                         :: rho
./qs_energy_matrix_w.F:            NULLIFY (dft_control, rho_ao)
./qs_energy_matrix_w.F:                            rho=rho, &
./qs_energy_matrix_w.F:            CALL qs_rho_get(rho, rho_ao=rho_ao)
./qs_energy_matrix_w.F:                                             matrix_p=rho_ao(ispin)%matrix, &
./task_list_methods.F:!>      01.2008 factored out of calculate_rho_elec [Joost VandeVondele]
./task_list_methods.F:      ! data needed for the loops in integrate_v/calculate_rho
./task_list_methods.F:                                              ra, rab, rab2, dft_control%qs_control%eps_rho_rspace)
./task_list_methods.F:      IF (rs_desc%orthorhombic) THEN
./task_list_methods.F:      is_ortho = (tasks(4, ntasks) == 0 .OR. tasks(4, ntasks) == 1) .AND. rs_desc%orthorhombic
./qs_rho_atom_methods.F:MODULE qs_rho_atom_methods
./qs_rho_atom_methods.F:   USE qs_rho_atom_types,               ONLY: allocate_rho_atom_set,&
./qs_rho_atom_methods.F:                                              rho_atom_coeff,&
./qs_rho_atom_methods.F:                                              rho_atom_type
./qs_rho_atom_methods.F:   CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'qs_rho_atom_methods'
./qs_rho_atom_methods.F:   PUBLIC :: allocate_rho_atom_internals, &
./qs_rho_atom_methods.F:             calculate_rho_atom, &
./qs_rho_atom_methods.F:             calculate_rho_atom_coeff, &
./qs_rho_atom_methods.F:             init_rho_atom
./qs_rho_atom_methods.F:!> \param rho_atom_set ...
./qs_rho_atom_methods.F:!> \param tot_rho1_h ...
./qs_rho_atom_methods.F:!> \param tot_rho1_s ...
./qs_rho_atom_methods.F:   SUBROUTINE calculate_rho_atom(para_env, rho_atom_set, qs_kind, atom_list, &
./qs_rho_atom_methods.F:                                 grid_atom, natom, nspins, tot_rho1_h, tot_rho1_s)
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_methods.F:      REAL(dp), DIMENSION(:), INTENT(INOUT)              :: tot_rho1_h, tot_rho1_s
./qs_rho_atom_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_atom', &
./qs_rho_atom_methods.F:      REAL(dp)                                           :: c1, c2, rho_h, rho_s, root_zet12, zet12
./qs_rho_atom_methods.F:            IF (.NOT. ASSOCIATED(rho_atom_set(iatom)%rho_rad_h(i)%r_coef)) THEN
./qs_rho_atom_methods.F:               CALL allocate_rho_atom_rad(rho_atom_set, iatom, i, nr, max_iso_not0)
./qs_rho_atom_methods.F:               CALL set2zero_rho_atom_rad(rho_atom_set, iatom, i)
./qs_rho_atom_methods.F:                        coeff => rho_atom_set(iatom)%cpc_h(i)%r_coef
./qs_rho_atom_methods.F:                        coeff => rho_atom_set(iatom)%cpc_s(i)%r_coef
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%rho_rad_h(i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%rho_rad_h(i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%rho_rad_s(i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%rho_rad_s(i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%drho_rad_h(i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%drho_rad_h(i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%drho_rad_s(i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%drho_rad_s(i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%vrho_rad_h(i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%vrho_rad_h(i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%vrho_rad_s(i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%vrho_rad_s(i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%trho_rad_h(1, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%trho_rad_h(1, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%trho_rad_s(1, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%trho_rad_s(1, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%trho_rad_h(3, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%trho_rad_h(3, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%trho_rad_s(3, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%trho_rad_s(3, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%rho_rad_h_d(j, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                    rho_atom_set(iatom)%rho_rad_h_d(j, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%rho_rad_s_d(j, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                    rho_atom_set(iatom)%rho_rad_s_d(j, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%trho_rad_h(2, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%trho_rad_h(2, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:                              rho_atom_set(iatom)%trho_rad_s(2, i)%r_coef(1:nr, iso) = &
./qs_rho_atom_methods.F:                                 rho_atom_set(iatom)%trho_rad_s(2, i)%r_coef(1:nr, iso)+ &
./qs_rho_atom_methods.F:               rho_s = 0.0_dp
./qs_rho_atom_methods.F:               rho_h = 0.0_dp
./qs_rho_atom_methods.F:                  rho_h = rho_h+rho_atom_set(iatom)%rho_rad_h(i)%r_coef(ir, iso)*grid_atom%wr(ir)
./qs_rho_atom_methods.F:                  rho_s = rho_s+rho_atom_set(iatom)%rho_rad_s(i)%r_coef(ir, iso)*grid_atom%wr(ir)
./qs_rho_atom_methods.F:               tot_rho1_h(i) = tot_rho1_h(i)+rho_h*harmonics%slm_int(iso)
./qs_rho_atom_methods.F:               tot_rho1_s(i) = tot_rho1_s(i)+rho_s*harmonics%slm_int(iso)
./qs_rho_atom_methods.F:   END SUBROUTINE calculate_rho_atom
./qs_rho_atom_methods.F:!> \param rho_ao ...
./qs_rho_atom_methods.F:!> \param rho_atom_set ...
./qs_rho_atom_methods.F:   SUBROUTINE calculate_rho_atom_coeff(qs_env, rho_ao, rho_atom_set)
./qs_rho_atom_methods.F:      TYPE(dbcsr_p_type), DIMENSION(:, :), POINTER       :: rho_ao
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), OPTIONAL, &
./qs_rho_atom_methods.F:         POINTER                                         :: rho_atom_set
./qs_rho_atom_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'calculate_rho_atom_coeff', &
./qs_rho_atom_methods.F:      TYPE(rho_atom_coeff), DIMENSION(:), POINTER        :: p_block_spin
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom
./qs_rho_atom_methods.F:      NULLIFY (rho_atom)
./qs_rho_atom_methods.F:                      rho_atom_set=rho_atom)
./qs_rho_atom_methods.F:      IF (PRESENT(rho_atom_set)) rho_atom => rho_atom_set
./qs_rho_atom_methods.F:               rho_atom(iatom)%cpc_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:               rho_atom(iatom)%cpc_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:               rho_atom(iatom)%ga_Vlocal_gb_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:               rho_atom(iatom)%ga_Vlocal_gb_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:!$OMP                 , nspins, rho_ao                    &
./qs_rho_atom_methods.F:!$OMP                 , rho_atom                          &
./qs_rho_atom_methods.F:            CALL dbcsr_get_block_p(matrix=rho_ao(ispin, img)%matrix, &
./qs_rho_atom_methods.F:                        r_coef_h => rho_atom(katom)%cpc_h(ispin)%r_coef
./qs_rho_atom_methods.F:                        r_coef_s => rho_atom(katom)%cpc_s(ispin)%r_coef
./qs_rho_atom_methods.F:            IF (ASSOCIATED(rho_atom(iatom)%cpc_h(ispin)%r_coef)) THEN
./qs_rho_atom_methods.F:               CALL mp_sum(rho_atom(iatom)%cpc_h(ispin)%r_coef, para_env%group)
./qs_rho_atom_methods.F:               CALL mp_sum(rho_atom(iatom)%cpc_s(ispin)%r_coef, para_env%group)
./qs_rho_atom_methods.F:               r_coef_h => rho_atom(iatom)%cpc_h(ispin)%r_coef
./qs_rho_atom_methods.F:               r_coef_s => rho_atom(iatom)%cpc_s(ispin)%r_coef
./qs_rho_atom_methods.F:   END SUBROUTINE calculate_rho_atom_coeff
./qs_rho_atom_methods.F:   SUBROUTINE init_rho_atom(qs_env, gapw_control)
./qs_rho_atom_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'init_rho_atom', routineP = moduleN//':'//routineN
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_methods.F:      NULLIFY (rho_atom_set)
./qs_rho_atom_methods.F:      CALL allocate_rho_atom_internals(qs_env, rho_atom_set)
./qs_rho_atom_methods.F:      CALL set_qs_env(qs_env=qs_env, rho_atom_set=rho_atom_set)
./qs_rho_atom_methods.F:   END SUBROUTINE init_rho_atom
./qs_rho_atom_methods.F:!> \param rho_atom_set ...
./qs_rho_atom_methods.F:   SUBROUTINE allocate_rho_atom_internals(qs_env, rho_atom_set)
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rho_atom_internals', &
./qs_rho_atom_methods.F:      NULLIFY (qs_kind_set, para_env, rho_atom_set, dft_control)
./qs_rho_atom_methods.F:      CALL allocate_rho_atom_set(rho_atom_set, natom)
./qs_rho_atom_methods.F:            ALLOCATE (rho_atom_set(iatom)%rho_rad_h(nspins))
./qs_rho_atom_methods.F:            ALLOCATE (rho_atom_set(iatom)%rho_rad_s(nspins))
./qs_rho_atom_methods.F:            ALLOCATE (rho_atom_set(iatom)%vrho_rad_h(nspins))
./qs_rho_atom_methods.F:            ALLOCATE (rho_atom_set(iatom)%vrho_rad_s(nspins))
./qs_rho_atom_methods.F:               NULLIFY (rho_atom_set(iatom)%rho_rad_h(ispin)%r_coef, &
./qs_rho_atom_methods.F:                        rho_atom_set(iatom)%rho_rad_s(ispin)%r_coef, &
./qs_rho_atom_methods.F:                        rho_atom_set(iatom)%vrho_rad_h(ispin)%r_coef, &
./qs_rho_atom_methods.F:                        rho_atom_set(iatom)%vrho_rad_s(ispin)%r_coef)
./qs_rho_atom_methods.F:            ALLOCATE (rho_atom_set(iatom)%cpc_h(nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%cpc_s(nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%drho_rad_h(nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%drho_rad_s(nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%trho_rad_h(3, nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%trho_rad_s(3, nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%rho_rad_h_d(3, nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%rho_rad_s_d(3, nspins), &
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%drho_rad_h(ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%drho_rad_s(ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%trho_rad_h(1, ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%trho_rad_h(2, ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%trho_rad_h(3, ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%trho_rad_s(1, ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%trho_rad_s(2, ispin)%r_coef, &
./qs_rho_atom_methods.F:                           rho_atom_set(iatom)%trho_rad_s(3, ispin)%r_coef)
./qs_rho_atom_methods.F:                  ALLOCATE (rho_atom_set(iatom)%cpc_h(ispin)%r_coef(1:nsatbas, 1:nsatbas), &
./qs_rho_atom_methods.F:                            rho_atom_set(iatom)%cpc_s(ispin)%r_coef(1:nsatbas, 1:nsatbas), &
./qs_rho_atom_methods.F:                  rho_atom_set(iatom)%cpc_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:                  rho_atom_set(iatom)%cpc_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%cpc_h(ispin)%r_coef)
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%cpc_s(ispin)%r_coef)
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%drho_rad_h(ispin)%r_coef)
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%drho_rad_s(ispin)%r_coef)
./qs_rho_atom_methods.F:                     NULLIFY (rho_atom_set(iatom)%trho_rad_h(j, ispin)%r_coef)
./qs_rho_atom_methods.F:                     NULLIFY (rho_atom_set(iatom)%trho_rad_s(j, ispin)%r_coef)
./qs_rho_atom_methods.F:                     NULLIFY (rho_atom_set(iatom)%rho_rad_h_d(j, ispin)%r_coef)
./qs_rho_atom_methods.F:                     NULLIFY (rho_atom_set(iatom)%rho_rad_s_d(j, ispin)%r_coef)
./qs_rho_atom_methods.F:            ALLOCATE (rho_atom_set(iatom)%ga_Vlocal_gb_h(nspins), &
./qs_rho_atom_methods.F:                      rho_atom_set(iatom)%ga_Vlocal_gb_s(nspins), &
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%ga_Vlocal_gb_h(ispin)%r_coef)
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%ga_Vlocal_gb_s(ispin)%r_coef)
./qs_rho_atom_methods.F:                  CALL reallocate(rho_atom_set(iatom)%ga_Vlocal_gb_h(ispin)%r_coef, &
./qs_rho_atom_methods.F:                  CALL reallocate(rho_atom_set(iatom)%ga_Vlocal_gb_s(ispin)%r_coef, &
./qs_rho_atom_methods.F:                  rho_atom_set(iatom)%ga_Vlocal_gb_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:                  rho_atom_set(iatom)%ga_Vlocal_gb_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%ga_Vlocal_gb_h(ispin)%r_coef)
./qs_rho_atom_methods.F:                  NULLIFY (rho_atom_set(iatom)%ga_Vlocal_gb_s(ispin)%r_coef)
./qs_rho_atom_methods.F:   END SUBROUTINE allocate_rho_atom_internals
./qs_rho_atom_methods.F:!> \param rho_atom_set ...
./qs_rho_atom_methods.F:   SUBROUTINE allocate_rho_atom_rad(rho_atom_set, iatom, ispin, nr, max_iso_not0)
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'allocate_rho_atom_rad', &
./qs_rho_atom_methods.F:      ALLOCATE (rho_atom_set(iatom)%rho_rad_h(ispin)%r_coef(1:nr, 1:max_iso_not0), &
./qs_rho_atom_methods.F:                rho_atom_set(iatom)%rho_rad_s(ispin)%r_coef(1:nr, 1:max_iso_not0), &
./qs_rho_atom_methods.F:                rho_atom_set(iatom)%vrho_rad_h(ispin)%r_coef(1:nr, 1:max_iso_not0), &
./qs_rho_atom_methods.F:                rho_atom_set(iatom)%vrho_rad_s(ispin)%r_coef(1:nr, 1:max_iso_not0), &
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%rho_rad_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%rho_rad_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%vrho_rad_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%vrho_rad_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      ALLOCATE (rho_atom_set(iatom)%drho_rad_h(ispin)%r_coef(nr, max_iso_not0), &
./qs_rho_atom_methods.F:                rho_atom_set(iatom)%drho_rad_s(ispin)%r_coef(nr, max_iso_not0), &
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%drho_rad_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%drho_rad_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         ALLOCATE (rho_atom_set(iatom)%trho_rad_h(j, ispin)%r_coef(nr, max_iso_not0), &
./qs_rho_atom_methods.F:                   rho_atom_set(iatom)%trho_rad_s(j, ispin)%r_coef(nr, max_iso_not0), &
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%trho_rad_h(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%trho_rad_s(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         NULLIFY (rho_atom_set(iatom)%rho_rad_h_d(j, ispin)%r_coef, &
./qs_rho_atom_methods.F:                  rho_atom_set(iatom)%rho_rad_s_d(j, ispin)%r_coef)
./qs_rho_atom_methods.F:         ALLOCATE (rho_atom_set(iatom)%rho_rad_h_d(j, ispin)%r_coef(nr, max_iso_not0), &
./qs_rho_atom_methods.F:                   rho_atom_set(iatom)%rho_rad_s_d(j, ispin)%r_coef(nr, max_iso_not0), &
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%rho_rad_h_d(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%rho_rad_s_d(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:   END SUBROUTINE allocate_rho_atom_rad
./qs_rho_atom_methods.F:!> \param rho_atom_set ...
./qs_rho_atom_methods.F:   SUBROUTINE set2zero_rho_atom_rad(rho_atom_set, iatom, ispin)
./qs_rho_atom_methods.F:!    TYPE(rho_atom_type), POINTER             :: rho_atom
./qs_rho_atom_methods.F:      TYPE(rho_atom_type), DIMENSION(:), POINTER         :: rho_atom_set
./qs_rho_atom_methods.F:      CHARACTER(len=*), PARAMETER :: routineN = 'set2zero_rho_atom_rad', &
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%rho_rad_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%rho_rad_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%vrho_rad_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%vrho_rad_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%drho_rad_h(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:      rho_atom_set(iatom)%drho_rad_s(ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%trho_rad_h(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%trho_rad_s(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%rho_rad_h_d(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:         rho_atom_set(iatom)%rho_rad_s_d(j, ispin)%r_coef = 0.0_dp
./qs_rho_atom_methods.F:   END SUBROUTINE set2zero_rho_atom_rad
./qs_rho_atom_methods.F:END MODULE qs_rho_atom_methods
./qs_integrate_potential.F:                                              integrate_rho_nlcc,&
./qs_integrate_potential.F:             integrate_rho_nlcc
./arnoldi/arnoldi_methods.F:    ar_data%rho_scale=${nametype_zero}$
./arnoldi/arnoldi_methods.F:    ar_data%rho_scale=DOT_PRODUCT(v_vec,w_vec)
./arnoldi/arnoldi_methods.F:    CALL mp_sum(ar_data%rho_scale, pcol_group)
./arnoldi/arnoldi_methods.F:    IF(control%myproc==0) ar_data%rho_scale=ar_data%rho_scale/denom
./arnoldi/arnoldi_methods.F:    CALL mp_bcast(ar_data%rho_scale,0,control%mp_group)
./arnoldi/arnoldi_methods.F:    ! if the maximum ev is requested we need to optimize with -A-rho*B
./arnoldi/arnoldi_methods.F:    CALL dbcsr_add(matrix_arnoldi(1)%matrix, matrix(2)%matrix, ${nametype_one}$, -ar_data%rho_scale)
./arnoldi/arnoldi_methods.F:!>        Updates rho and C=A-rho*B accordingly.
./arnoldi/arnoldi_methods.F:    ar_data%rho_scale=ar_data%rho_scale+${val_to_type}$
./arnoldi/arnoldi_methods.F:! update the C-matrix (A-rho*B), if teh maximum value is requested we have to use -A-rho*B
./arnoldi/arnoldi_methods.F:    CALL dbcsr_add(matrix_arnoldi(1)%matrix, matrix(2)%matrix, ${nametype_one}$, -ar_data%rho_scale)
./arnoldi/arnoldi_methods.F:    CALL mp_bcast(ar_data%rho_scale,0,control%mp_group)
./arnoldi/arnoldi_methods.F:    ar_data%evals(ind)=ar_data%rho_scale
./arnoldi/arnoldi_types.F:      REAL(kind=real_8)                                :: rho_scale ! scling factor for general eig arnoldi
./arnoldi/arnoldi_types.F:      REAL(kind=real_4)                                :: rho_scale ! scling factor for general eig arnoldi
./arnoldi/arnoldi_types.F:      COMPLEX(kind=real_8)                             :: rho_scale ! scling factor for general eig arnoldi
./arnoldi/arnoldi_types.F:      COMPLEX(kind=real_4)                             :: rho_scale ! scling factor for general eig arnoldi
./arnoldi/arnoldi_api.F:      TYPE(dbcsr_type), TARGET                           :: A_rho_B
./arnoldi/arnoldi_api.F:      ! this matrix will contain +/- A-rho*B
./arnoldi/arnoldi_api.F:      matrix_arnoldi(1)%matrix => A_rho_B
./arnoldi/arnoldi_api.F:      CALL dbcsr_release(A_rho_B)
